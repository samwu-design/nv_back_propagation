// Generator : SpinalHDL v1.5.0    git head : 83a031922866b078c411ec5529e00f1b6e79f8e7
// Component : bp_fpga_top
// Git hash  : 6691e024447ff2ac31ac0e980e81aa3ed32d5770


`define dma_rdctrl_fsm_enumDefinition_binary_sequential_type [2:0]
`define dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_BOOT 3'b000
`define dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_IDLE 3'b001
`define dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_GET_PARAM 3'b010
`define dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_DT 3'b011
`define dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_DT 3'b100
`define dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_WT 3'b101
`define dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_WT 3'b110
`define dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_END 3'b111

`define dma_rd_fsm_enumDefinition_binary_sequential_type [1:0]
`define dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_BOOT 2'b00
`define dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_IDLE 2'b01
`define dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_AR 2'b10
`define dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_R 2'b11

`define dma_wrctrl_fsm_enumDefinition_binary_sequential_type [3:0]
`define dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_BOOT 4'b0000
`define dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_IDLE 4'b0001
`define dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_CHECK_GET_PARAM 4'b0010
`define dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_WT 4'b0011
`define dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_SGM 4'b0100
`define dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_AW 4'b0101
`define dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_DELTA_WT 4'b0110
`define dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_SIGMA 4'b0111
`define dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_END 4'b1000

`define read_req_fsm_enumDefinition_binary_sequential_type [2:0]
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_BOOT 3'b000
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE 3'b001
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT 3'b010
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ 3'b011
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT 3'b100
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR 3'b101
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW 3'b110
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR 3'b111

`define acc_fsm_enumDefinition_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_1_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_2_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_3_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_4_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_5_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_6_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_7_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_8_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_9_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_10_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_11_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_12_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_13_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_14_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_15_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_16_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_17_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_18_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_19_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_20_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_21_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_22_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_23_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_24_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_25_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_26_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_27_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_28_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_29_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_30_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_31_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_32_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_33_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_34_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_35_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_36_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_37_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_38_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_39_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_40_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_41_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_42_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_43_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_44_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_45_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_46_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_47_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_48_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_49_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_50_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_51_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_52_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_53_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_54_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_55_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_56_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_57_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_58_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_59_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_60_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_61_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_62_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_63_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT 3'b110

`define mux_fsm_enumDefinition_binary_sequential_type [1:0]
`define mux_fsm_enumDefinition_binary_sequential_mux_fsm_BOOT 2'b00
`define mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV 2'b01
`define mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA 2'b10
`define mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA 2'b11


module bp_fpga_top (
  output              io_axim_r_ar_valid,
  input               io_axim_r_ar_ready,
  output     [31:0]   io_axim_r_ar_payload_addr,
  output     [5:0]    io_axim_r_ar_payload_id,
  output     [7:0]    io_axim_r_ar_payload_len,
  output     [2:0]    io_axim_r_ar_payload_size,
  output     [1:0]    io_axim_r_ar_payload_burst,
  input               io_axim_r_r_valid,
  output              io_axim_r_r_ready,
  input      [255:0]  io_axim_r_r_payload_data,
  input      [5:0]    io_axim_r_r_payload_id,
  input      [1:0]    io_axim_r_r_payload_resp,
  input               io_axim_r_r_payload_last,
  output              io_axim_w_aw_valid,
  input               io_axim_w_aw_ready,
  output     [31:0]   io_axim_w_aw_payload_addr,
  output     [5:0]    io_axim_w_aw_payload_id,
  output     [7:0]    io_axim_w_aw_payload_len,
  output     [2:0]    io_axim_w_aw_payload_size,
  output     [1:0]    io_axim_w_aw_payload_burst,
  output              io_axim_w_w_valid,
  input               io_axim_w_w_ready,
  output     [255:0]  io_axim_w_w_payload_data,
  output     [31:0]   io_axim_w_w_payload_strb,
  output              io_axim_w_w_payload_last,
  input               io_axim_w_b_valid,
  output              io_axim_w_b_ready,
  input      [5:0]    io_axim_w_b_payload_id,
  input      [1:0]    io_axim_w_b_payload_resp,
  input      [31:0]   io_apb_PADDR,
  input      [0:0]    io_apb_PSEL,
  input               io_apb_PENABLE,
  output              io_apb_PREADY,
  input               io_apb_PWRITE,
  input      [31:0]   io_apb_PWDATA,
  output     [31:0]   io_apb_PRDATA,
  output              io_apb_PSLVERROR,
  output              io_interruper,
  input               clk,
  input               reset
);
  wire                rdma_axim_ar_valid;
  wire       [31:0]   rdma_axim_ar_payload_addr;
  wire       [5:0]    rdma_axim_ar_payload_id;
  wire       [7:0]    rdma_axim_ar_payload_len;
  wire       [2:0]    rdma_axim_ar_payload_size;
  wire       [1:0]    rdma_axim_ar_payload_burst;
  wire                rdma_axim_r_ready;
  wire                rdma_cfg_ready;
  wire                rdma_output_valid;
  wire       [255:0]  rdma_output_payload;
  wire                rdma_isIdle;
  wire                rdma_is_dtwt_mux;
  wire                wdma_io_axim_aw_valid;
  wire       [31:0]   wdma_io_axim_aw_payload_addr;
  wire       [5:0]    wdma_io_axim_aw_payload_id;
  wire       [7:0]    wdma_io_axim_aw_payload_len;
  wire       [2:0]    wdma_io_axim_aw_payload_size;
  wire       [1:0]    wdma_io_axim_aw_payload_burst;
  wire                wdma_io_axim_w_valid;
  wire       [255:0]  wdma_io_axim_w_payload_data;
  wire       [31:0]   wdma_io_axim_w_payload_strb;
  wire                wdma_io_axim_w_payload_last;
  wire                wdma_io_axim_b_ready;
  wire                wdma_io_cfg_ready;
  wire                wdma_io_i_delta_wt_0_0_ready;
  wire                wdma_io_i_delta_wt_0_1_ready;
  wire                wdma_io_i_delta_wt_0_2_ready;
  wire                wdma_io_i_delta_wt_0_3_ready;
  wire                wdma_io_i_delta_wt_0_4_ready;
  wire                wdma_io_i_delta_wt_0_5_ready;
  wire                wdma_io_i_delta_wt_0_6_ready;
  wire                wdma_io_i_delta_wt_0_7_ready;
  wire                wdma_io_i_delta_wt_1_0_ready;
  wire                wdma_io_i_delta_wt_1_1_ready;
  wire                wdma_io_i_delta_wt_1_2_ready;
  wire                wdma_io_i_delta_wt_1_3_ready;
  wire                wdma_io_i_delta_wt_1_4_ready;
  wire                wdma_io_i_delta_wt_1_5_ready;
  wire                wdma_io_i_delta_wt_1_6_ready;
  wire                wdma_io_i_delta_wt_1_7_ready;
  wire                wdma_io_i_delta_wt_2_0_ready;
  wire                wdma_io_i_delta_wt_2_1_ready;
  wire                wdma_io_i_delta_wt_2_2_ready;
  wire                wdma_io_i_delta_wt_2_3_ready;
  wire                wdma_io_i_delta_wt_2_4_ready;
  wire                wdma_io_i_delta_wt_2_5_ready;
  wire                wdma_io_i_delta_wt_2_6_ready;
  wire                wdma_io_i_delta_wt_2_7_ready;
  wire                wdma_io_i_delta_wt_3_0_ready;
  wire                wdma_io_i_delta_wt_3_1_ready;
  wire                wdma_io_i_delta_wt_3_2_ready;
  wire                wdma_io_i_delta_wt_3_3_ready;
  wire                wdma_io_i_delta_wt_3_4_ready;
  wire                wdma_io_i_delta_wt_3_5_ready;
  wire                wdma_io_i_delta_wt_3_6_ready;
  wire                wdma_io_i_delta_wt_3_7_ready;
  wire                wdma_io_i_delta_wt_4_0_ready;
  wire                wdma_io_i_delta_wt_4_1_ready;
  wire                wdma_io_i_delta_wt_4_2_ready;
  wire                wdma_io_i_delta_wt_4_3_ready;
  wire                wdma_io_i_delta_wt_4_4_ready;
  wire                wdma_io_i_delta_wt_4_5_ready;
  wire                wdma_io_i_delta_wt_4_6_ready;
  wire                wdma_io_i_delta_wt_4_7_ready;
  wire                wdma_io_i_delta_wt_5_0_ready;
  wire                wdma_io_i_delta_wt_5_1_ready;
  wire                wdma_io_i_delta_wt_5_2_ready;
  wire                wdma_io_i_delta_wt_5_3_ready;
  wire                wdma_io_i_delta_wt_5_4_ready;
  wire                wdma_io_i_delta_wt_5_5_ready;
  wire                wdma_io_i_delta_wt_5_6_ready;
  wire                wdma_io_i_delta_wt_5_7_ready;
  wire                wdma_io_i_delta_wt_6_0_ready;
  wire                wdma_io_i_delta_wt_6_1_ready;
  wire                wdma_io_i_delta_wt_6_2_ready;
  wire                wdma_io_i_delta_wt_6_3_ready;
  wire                wdma_io_i_delta_wt_6_4_ready;
  wire                wdma_io_i_delta_wt_6_5_ready;
  wire                wdma_io_i_delta_wt_6_6_ready;
  wire                wdma_io_i_delta_wt_6_7_ready;
  wire                wdma_io_i_delta_wt_7_0_ready;
  wire                wdma_io_i_delta_wt_7_1_ready;
  wire                wdma_io_i_delta_wt_7_2_ready;
  wire                wdma_io_i_delta_wt_7_3_ready;
  wire                wdma_io_i_delta_wt_7_4_ready;
  wire                wdma_io_i_delta_wt_7_5_ready;
  wire                wdma_io_i_delta_wt_7_6_ready;
  wire                wdma_io_i_delta_wt_7_7_ready;
  wire                wdma_io_i_sigma_0_ready;
  wire                wdma_io_i_sigma_1_ready;
  wire                wdma_io_i_sigma_2_ready;
  wire                wdma_io_i_sigma_3_ready;
  wire                wdma_io_i_sigma_4_ready;
  wire                wdma_io_i_sigma_5_ready;
  wire                wdma_io_i_sigma_6_ready;
  wire                wdma_io_i_sigma_7_ready;
  wire                cbuf_io_input_ready;
  wire       [255:0]  cbuf_io_dt_rd_data;
  wire       [255:0]  cbuf_io_wt_rd_0_data;
  wire       [255:0]  cbuf_io_wt_rd_1_data;
  wire       [255:0]  cbuf_io_wt_rd_2_data;
  wire       [255:0]  cbuf_io_wt_rd_3_data;
  wire       [255:0]  cbuf_io_wt_rd_4_data;
  wire       [255:0]  cbuf_io_wt_rd_5_data;
  wire       [255:0]  cbuf_io_wt_rd_6_data;
  wire       [255:0]  cbuf_io_wt_rd_7_data;
  wire                conv_cfg_ready;
  wire       [31:0]   conv_dt_ramrd_addr;
  wire                conv_dt_ramrd_en;
  wire       [31:0]   conv_wt_ramrd_0_addr;
  wire                conv_wt_ramrd_0_en;
  wire       [31:0]   conv_wt_ramrd_1_addr;
  wire                conv_wt_ramrd_1_en;
  wire       [31:0]   conv_wt_ramrd_2_addr;
  wire                conv_wt_ramrd_2_en;
  wire       [31:0]   conv_wt_ramrd_3_addr;
  wire                conv_wt_ramrd_3_en;
  wire       [31:0]   conv_wt_ramrd_4_addr;
  wire                conv_wt_ramrd_4_en;
  wire       [31:0]   conv_wt_ramrd_5_addr;
  wire                conv_wt_ramrd_5_en;
  wire       [31:0]   conv_wt_ramrd_6_addr;
  wire                conv_wt_ramrd_6_en;
  wire       [31:0]   conv_wt_ramrd_7_addr;
  wire                conv_wt_ramrd_7_en;
  wire                conv_o_delta_wt_0_0_valid;
  wire       [31:0]   conv_o_delta_wt_0_0_payload;
  wire                conv_o_delta_wt_0_1_valid;
  wire       [31:0]   conv_o_delta_wt_0_1_payload;
  wire                conv_o_delta_wt_0_2_valid;
  wire       [31:0]   conv_o_delta_wt_0_2_payload;
  wire                conv_o_delta_wt_0_3_valid;
  wire       [31:0]   conv_o_delta_wt_0_3_payload;
  wire                conv_o_delta_wt_0_4_valid;
  wire       [31:0]   conv_o_delta_wt_0_4_payload;
  wire                conv_o_delta_wt_0_5_valid;
  wire       [31:0]   conv_o_delta_wt_0_5_payload;
  wire                conv_o_delta_wt_0_6_valid;
  wire       [31:0]   conv_o_delta_wt_0_6_payload;
  wire                conv_o_delta_wt_0_7_valid;
  wire       [31:0]   conv_o_delta_wt_0_7_payload;
  wire                conv_o_delta_wt_1_0_valid;
  wire       [31:0]   conv_o_delta_wt_1_0_payload;
  wire                conv_o_delta_wt_1_1_valid;
  wire       [31:0]   conv_o_delta_wt_1_1_payload;
  wire                conv_o_delta_wt_1_2_valid;
  wire       [31:0]   conv_o_delta_wt_1_2_payload;
  wire                conv_o_delta_wt_1_3_valid;
  wire       [31:0]   conv_o_delta_wt_1_3_payload;
  wire                conv_o_delta_wt_1_4_valid;
  wire       [31:0]   conv_o_delta_wt_1_4_payload;
  wire                conv_o_delta_wt_1_5_valid;
  wire       [31:0]   conv_o_delta_wt_1_5_payload;
  wire                conv_o_delta_wt_1_6_valid;
  wire       [31:0]   conv_o_delta_wt_1_6_payload;
  wire                conv_o_delta_wt_1_7_valid;
  wire       [31:0]   conv_o_delta_wt_1_7_payload;
  wire                conv_o_delta_wt_2_0_valid;
  wire       [31:0]   conv_o_delta_wt_2_0_payload;
  wire                conv_o_delta_wt_2_1_valid;
  wire       [31:0]   conv_o_delta_wt_2_1_payload;
  wire                conv_o_delta_wt_2_2_valid;
  wire       [31:0]   conv_o_delta_wt_2_2_payload;
  wire                conv_o_delta_wt_2_3_valid;
  wire       [31:0]   conv_o_delta_wt_2_3_payload;
  wire                conv_o_delta_wt_2_4_valid;
  wire       [31:0]   conv_o_delta_wt_2_4_payload;
  wire                conv_o_delta_wt_2_5_valid;
  wire       [31:0]   conv_o_delta_wt_2_5_payload;
  wire                conv_o_delta_wt_2_6_valid;
  wire       [31:0]   conv_o_delta_wt_2_6_payload;
  wire                conv_o_delta_wt_2_7_valid;
  wire       [31:0]   conv_o_delta_wt_2_7_payload;
  wire                conv_o_delta_wt_3_0_valid;
  wire       [31:0]   conv_o_delta_wt_3_0_payload;
  wire                conv_o_delta_wt_3_1_valid;
  wire       [31:0]   conv_o_delta_wt_3_1_payload;
  wire                conv_o_delta_wt_3_2_valid;
  wire       [31:0]   conv_o_delta_wt_3_2_payload;
  wire                conv_o_delta_wt_3_3_valid;
  wire       [31:0]   conv_o_delta_wt_3_3_payload;
  wire                conv_o_delta_wt_3_4_valid;
  wire       [31:0]   conv_o_delta_wt_3_4_payload;
  wire                conv_o_delta_wt_3_5_valid;
  wire       [31:0]   conv_o_delta_wt_3_5_payload;
  wire                conv_o_delta_wt_3_6_valid;
  wire       [31:0]   conv_o_delta_wt_3_6_payload;
  wire                conv_o_delta_wt_3_7_valid;
  wire       [31:0]   conv_o_delta_wt_3_7_payload;
  wire                conv_o_delta_wt_4_0_valid;
  wire       [31:0]   conv_o_delta_wt_4_0_payload;
  wire                conv_o_delta_wt_4_1_valid;
  wire       [31:0]   conv_o_delta_wt_4_1_payload;
  wire                conv_o_delta_wt_4_2_valid;
  wire       [31:0]   conv_o_delta_wt_4_2_payload;
  wire                conv_o_delta_wt_4_3_valid;
  wire       [31:0]   conv_o_delta_wt_4_3_payload;
  wire                conv_o_delta_wt_4_4_valid;
  wire       [31:0]   conv_o_delta_wt_4_4_payload;
  wire                conv_o_delta_wt_4_5_valid;
  wire       [31:0]   conv_o_delta_wt_4_5_payload;
  wire                conv_o_delta_wt_4_6_valid;
  wire       [31:0]   conv_o_delta_wt_4_6_payload;
  wire                conv_o_delta_wt_4_7_valid;
  wire       [31:0]   conv_o_delta_wt_4_7_payload;
  wire                conv_o_delta_wt_5_0_valid;
  wire       [31:0]   conv_o_delta_wt_5_0_payload;
  wire                conv_o_delta_wt_5_1_valid;
  wire       [31:0]   conv_o_delta_wt_5_1_payload;
  wire                conv_o_delta_wt_5_2_valid;
  wire       [31:0]   conv_o_delta_wt_5_2_payload;
  wire                conv_o_delta_wt_5_3_valid;
  wire       [31:0]   conv_o_delta_wt_5_3_payload;
  wire                conv_o_delta_wt_5_4_valid;
  wire       [31:0]   conv_o_delta_wt_5_4_payload;
  wire                conv_o_delta_wt_5_5_valid;
  wire       [31:0]   conv_o_delta_wt_5_5_payload;
  wire                conv_o_delta_wt_5_6_valid;
  wire       [31:0]   conv_o_delta_wt_5_6_payload;
  wire                conv_o_delta_wt_5_7_valid;
  wire       [31:0]   conv_o_delta_wt_5_7_payload;
  wire                conv_o_delta_wt_6_0_valid;
  wire       [31:0]   conv_o_delta_wt_6_0_payload;
  wire                conv_o_delta_wt_6_1_valid;
  wire       [31:0]   conv_o_delta_wt_6_1_payload;
  wire                conv_o_delta_wt_6_2_valid;
  wire       [31:0]   conv_o_delta_wt_6_2_payload;
  wire                conv_o_delta_wt_6_3_valid;
  wire       [31:0]   conv_o_delta_wt_6_3_payload;
  wire                conv_o_delta_wt_6_4_valid;
  wire       [31:0]   conv_o_delta_wt_6_4_payload;
  wire                conv_o_delta_wt_6_5_valid;
  wire       [31:0]   conv_o_delta_wt_6_5_payload;
  wire                conv_o_delta_wt_6_6_valid;
  wire       [31:0]   conv_o_delta_wt_6_6_payload;
  wire                conv_o_delta_wt_6_7_valid;
  wire       [31:0]   conv_o_delta_wt_6_7_payload;
  wire                conv_o_delta_wt_7_0_valid;
  wire       [31:0]   conv_o_delta_wt_7_0_payload;
  wire                conv_o_delta_wt_7_1_valid;
  wire       [31:0]   conv_o_delta_wt_7_1_payload;
  wire                conv_o_delta_wt_7_2_valid;
  wire       [31:0]   conv_o_delta_wt_7_2_payload;
  wire                conv_o_delta_wt_7_3_valid;
  wire       [31:0]   conv_o_delta_wt_7_3_payload;
  wire                conv_o_delta_wt_7_4_valid;
  wire       [31:0]   conv_o_delta_wt_7_4_payload;
  wire                conv_o_delta_wt_7_5_valid;
  wire       [31:0]   conv_o_delta_wt_7_5_payload;
  wire                conv_o_delta_wt_7_6_valid;
  wire       [31:0]   conv_o_delta_wt_7_6_payload;
  wire                conv_o_delta_wt_7_7_valid;
  wire       [31:0]   conv_o_delta_wt_7_7_payload;
  wire                conv_o_sigma_0_0_valid;
  wire       [31:0]   conv_o_sigma_0_0_payload;
  wire                conv_o_sigma_0_1_valid;
  wire       [31:0]   conv_o_sigma_0_1_payload;
  wire                conv_o_sigma_0_2_valid;
  wire       [31:0]   conv_o_sigma_0_2_payload;
  wire                conv_o_sigma_0_3_valid;
  wire       [31:0]   conv_o_sigma_0_3_payload;
  wire                conv_o_sigma_0_4_valid;
  wire       [31:0]   conv_o_sigma_0_4_payload;
  wire                conv_o_sigma_0_5_valid;
  wire       [31:0]   conv_o_sigma_0_5_payload;
  wire                conv_o_sigma_0_6_valid;
  wire       [31:0]   conv_o_sigma_0_6_payload;
  wire                conv_o_sigma_0_7_valid;
  wire       [31:0]   conv_o_sigma_0_7_payload;
  wire                conv_o_sigma_1_0_valid;
  wire       [31:0]   conv_o_sigma_1_0_payload;
  wire                conv_o_sigma_1_1_valid;
  wire       [31:0]   conv_o_sigma_1_1_payload;
  wire                conv_o_sigma_1_2_valid;
  wire       [31:0]   conv_o_sigma_1_2_payload;
  wire                conv_o_sigma_1_3_valid;
  wire       [31:0]   conv_o_sigma_1_3_payload;
  wire                conv_o_sigma_1_4_valid;
  wire       [31:0]   conv_o_sigma_1_4_payload;
  wire                conv_o_sigma_1_5_valid;
  wire       [31:0]   conv_o_sigma_1_5_payload;
  wire                conv_o_sigma_1_6_valid;
  wire       [31:0]   conv_o_sigma_1_6_payload;
  wire                conv_o_sigma_1_7_valid;
  wire       [31:0]   conv_o_sigma_1_7_payload;
  wire                conv_o_sigma_2_0_valid;
  wire       [31:0]   conv_o_sigma_2_0_payload;
  wire                conv_o_sigma_2_1_valid;
  wire       [31:0]   conv_o_sigma_2_1_payload;
  wire                conv_o_sigma_2_2_valid;
  wire       [31:0]   conv_o_sigma_2_2_payload;
  wire                conv_o_sigma_2_3_valid;
  wire       [31:0]   conv_o_sigma_2_3_payload;
  wire                conv_o_sigma_2_4_valid;
  wire       [31:0]   conv_o_sigma_2_4_payload;
  wire                conv_o_sigma_2_5_valid;
  wire       [31:0]   conv_o_sigma_2_5_payload;
  wire                conv_o_sigma_2_6_valid;
  wire       [31:0]   conv_o_sigma_2_6_payload;
  wire                conv_o_sigma_2_7_valid;
  wire       [31:0]   conv_o_sigma_2_7_payload;
  wire                conv_o_sigma_3_0_valid;
  wire       [31:0]   conv_o_sigma_3_0_payload;
  wire                conv_o_sigma_3_1_valid;
  wire       [31:0]   conv_o_sigma_3_1_payload;
  wire                conv_o_sigma_3_2_valid;
  wire       [31:0]   conv_o_sigma_3_2_payload;
  wire                conv_o_sigma_3_3_valid;
  wire       [31:0]   conv_o_sigma_3_3_payload;
  wire                conv_o_sigma_3_4_valid;
  wire       [31:0]   conv_o_sigma_3_4_payload;
  wire                conv_o_sigma_3_5_valid;
  wire       [31:0]   conv_o_sigma_3_5_payload;
  wire                conv_o_sigma_3_6_valid;
  wire       [31:0]   conv_o_sigma_3_6_payload;
  wire                conv_o_sigma_3_7_valid;
  wire       [31:0]   conv_o_sigma_3_7_payload;
  wire                conv_o_sigma_4_0_valid;
  wire       [31:0]   conv_o_sigma_4_0_payload;
  wire                conv_o_sigma_4_1_valid;
  wire       [31:0]   conv_o_sigma_4_1_payload;
  wire                conv_o_sigma_4_2_valid;
  wire       [31:0]   conv_o_sigma_4_2_payload;
  wire                conv_o_sigma_4_3_valid;
  wire       [31:0]   conv_o_sigma_4_3_payload;
  wire                conv_o_sigma_4_4_valid;
  wire       [31:0]   conv_o_sigma_4_4_payload;
  wire                conv_o_sigma_4_5_valid;
  wire       [31:0]   conv_o_sigma_4_5_payload;
  wire                conv_o_sigma_4_6_valid;
  wire       [31:0]   conv_o_sigma_4_6_payload;
  wire                conv_o_sigma_4_7_valid;
  wire       [31:0]   conv_o_sigma_4_7_payload;
  wire                conv_o_sigma_5_0_valid;
  wire       [31:0]   conv_o_sigma_5_0_payload;
  wire                conv_o_sigma_5_1_valid;
  wire       [31:0]   conv_o_sigma_5_1_payload;
  wire                conv_o_sigma_5_2_valid;
  wire       [31:0]   conv_o_sigma_5_2_payload;
  wire                conv_o_sigma_5_3_valid;
  wire       [31:0]   conv_o_sigma_5_3_payload;
  wire                conv_o_sigma_5_4_valid;
  wire       [31:0]   conv_o_sigma_5_4_payload;
  wire                conv_o_sigma_5_5_valid;
  wire       [31:0]   conv_o_sigma_5_5_payload;
  wire                conv_o_sigma_5_6_valid;
  wire       [31:0]   conv_o_sigma_5_6_payload;
  wire                conv_o_sigma_5_7_valid;
  wire       [31:0]   conv_o_sigma_5_7_payload;
  wire                conv_o_sigma_6_0_valid;
  wire       [31:0]   conv_o_sigma_6_0_payload;
  wire                conv_o_sigma_6_1_valid;
  wire       [31:0]   conv_o_sigma_6_1_payload;
  wire                conv_o_sigma_6_2_valid;
  wire       [31:0]   conv_o_sigma_6_2_payload;
  wire                conv_o_sigma_6_3_valid;
  wire       [31:0]   conv_o_sigma_6_3_payload;
  wire                conv_o_sigma_6_4_valid;
  wire       [31:0]   conv_o_sigma_6_4_payload;
  wire                conv_o_sigma_6_5_valid;
  wire       [31:0]   conv_o_sigma_6_5_payload;
  wire                conv_o_sigma_6_6_valid;
  wire       [31:0]   conv_o_sigma_6_6_payload;
  wire                conv_o_sigma_6_7_valid;
  wire       [31:0]   conv_o_sigma_6_7_payload;
  wire                conv_o_sigma_7_0_valid;
  wire       [31:0]   conv_o_sigma_7_0_payload;
  wire                conv_o_sigma_7_1_valid;
  wire       [31:0]   conv_o_sigma_7_1_payload;
  wire                conv_o_sigma_7_2_valid;
  wire       [31:0]   conv_o_sigma_7_2_payload;
  wire                conv_o_sigma_7_3_valid;
  wire       [31:0]   conv_o_sigma_7_3_payload;
  wire                conv_o_sigma_7_4_valid;
  wire       [31:0]   conv_o_sigma_7_4_payload;
  wire                conv_o_sigma_7_5_valid;
  wire       [31:0]   conv_o_sigma_7_5_payload;
  wire                conv_o_sigma_7_6_valid;
  wire       [31:0]   conv_o_sigma_7_6_payload;
  wire                conv_o_sigma_7_7_valid;
  wire       [31:0]   conv_o_sigma_7_7_payload;
  wire                adder_io_in_0_0_ready;
  wire                adder_io_in_0_1_ready;
  wire                adder_io_in_0_2_ready;
  wire                adder_io_in_0_3_ready;
  wire                adder_io_in_0_4_ready;
  wire                adder_io_in_0_5_ready;
  wire                adder_io_in_0_6_ready;
  wire                adder_io_in_0_7_ready;
  wire                adder_io_in_1_0_ready;
  wire                adder_io_in_1_1_ready;
  wire                adder_io_in_1_2_ready;
  wire                adder_io_in_1_3_ready;
  wire                adder_io_in_1_4_ready;
  wire                adder_io_in_1_5_ready;
  wire                adder_io_in_1_6_ready;
  wire                adder_io_in_1_7_ready;
  wire                adder_io_in_2_0_ready;
  wire                adder_io_in_2_1_ready;
  wire                adder_io_in_2_2_ready;
  wire                adder_io_in_2_3_ready;
  wire                adder_io_in_2_4_ready;
  wire                adder_io_in_2_5_ready;
  wire                adder_io_in_2_6_ready;
  wire                adder_io_in_2_7_ready;
  wire                adder_io_in_3_0_ready;
  wire                adder_io_in_3_1_ready;
  wire                adder_io_in_3_2_ready;
  wire                adder_io_in_3_3_ready;
  wire                adder_io_in_3_4_ready;
  wire                adder_io_in_3_5_ready;
  wire                adder_io_in_3_6_ready;
  wire                adder_io_in_3_7_ready;
  wire                adder_io_in_4_0_ready;
  wire                adder_io_in_4_1_ready;
  wire                adder_io_in_4_2_ready;
  wire                adder_io_in_4_3_ready;
  wire                adder_io_in_4_4_ready;
  wire                adder_io_in_4_5_ready;
  wire                adder_io_in_4_6_ready;
  wire                adder_io_in_4_7_ready;
  wire                adder_io_in_5_0_ready;
  wire                adder_io_in_5_1_ready;
  wire                adder_io_in_5_2_ready;
  wire                adder_io_in_5_3_ready;
  wire                adder_io_in_5_4_ready;
  wire                adder_io_in_5_5_ready;
  wire                adder_io_in_5_6_ready;
  wire                adder_io_in_5_7_ready;
  wire                adder_io_in_6_0_ready;
  wire                adder_io_in_6_1_ready;
  wire                adder_io_in_6_2_ready;
  wire                adder_io_in_6_3_ready;
  wire                adder_io_in_6_4_ready;
  wire                adder_io_in_6_5_ready;
  wire                adder_io_in_6_6_ready;
  wire                adder_io_in_6_7_ready;
  wire                adder_io_in_7_0_ready;
  wire                adder_io_in_7_1_ready;
  wire                adder_io_in_7_2_ready;
  wire                adder_io_in_7_3_ready;
  wire                adder_io_in_7_4_ready;
  wire                adder_io_in_7_5_ready;
  wire                adder_io_in_7_6_ready;
  wire                adder_io_in_7_7_ready;
  wire                adder_io_out_0_valid;
  wire       [31:0]   adder_io_out_0_payload;
  wire                adder_io_out_1_valid;
  wire       [31:0]   adder_io_out_1_payload;
  wire                adder_io_out_2_valid;
  wire       [31:0]   adder_io_out_2_payload;
  wire                adder_io_out_3_valid;
  wire       [31:0]   adder_io_out_3_payload;
  wire                adder_io_out_4_valid;
  wire       [31:0]   adder_io_out_4_payload;
  wire                adder_io_out_5_valid;
  wire       [31:0]   adder_io_out_5_payload;
  wire                adder_io_out_6_valid;
  wire       [31:0]   adder_io_out_6_payload;
  wire                adder_io_out_7_valid;
  wire       [31:0]   adder_io_out_7_payload;
  wire                cfg_io_apb_PREADY;
  wire       [31:0]   cfg_io_apb_PRDATA;
  wire                cfg_io_apb_PSLVERROR;
  wire                cfg_io_rdma_glb_param_valid;
  wire       [31:0]   cfg_io_rdma_glb_param_payload_rd_dtBaseAddr;
  wire       [31:0]   cfg_io_rdma_glb_param_payload_rd_wtBaseAddr;
  wire       [31:0]   cfg_io_rdma_glb_param_payload_wr_delta_wt_BaseAddr;
  wire       [31:0]   cfg_io_rdma_glb_param_payload_wr_sigma_BaseAddr;
  wire       [15:0]   cfg_io_rdma_glb_param_payload_dtWidth;
  wire       [15:0]   cfg_io_rdma_glb_param_payload_dtHeight;
  wire       [15:0]   cfg_io_rdma_glb_param_payload_wtWidth;
  wire       [15:0]   cfg_io_rdma_glb_param_payload_wtHeight;
  wire       [15:0]   cfg_io_rdma_glb_param_payload_oWidth;
  wire       [15:0]   cfg_io_rdma_glb_param_payload_oHeight;
  wire                cfg_io_wdma_glb_param_valid;
  wire       [31:0]   cfg_io_wdma_glb_param_payload_rd_dtBaseAddr;
  wire       [31:0]   cfg_io_wdma_glb_param_payload_rd_wtBaseAddr;
  wire       [31:0]   cfg_io_wdma_glb_param_payload_wr_delta_wt_BaseAddr;
  wire       [31:0]   cfg_io_wdma_glb_param_payload_wr_sigma_BaseAddr;
  wire       [15:0]   cfg_io_wdma_glb_param_payload_dtWidth;
  wire       [15:0]   cfg_io_wdma_glb_param_payload_dtHeight;
  wire       [15:0]   cfg_io_wdma_glb_param_payload_wtWidth;
  wire       [15:0]   cfg_io_wdma_glb_param_payload_wtHeight;
  wire       [15:0]   cfg_io_wdma_glb_param_payload_oWidth;
  wire       [15:0]   cfg_io_wdma_glb_param_payload_oHeight;
  wire                cfg_io_conv_glb_param_valid;
  wire       [31:0]   cfg_io_conv_glb_param_payload_rd_dtBaseAddr;
  wire       [31:0]   cfg_io_conv_glb_param_payload_rd_wtBaseAddr;
  wire       [31:0]   cfg_io_conv_glb_param_payload_wr_delta_wt_BaseAddr;
  wire       [31:0]   cfg_io_conv_glb_param_payload_wr_sigma_BaseAddr;
  wire       [15:0]   cfg_io_conv_glb_param_payload_dtWidth;
  wire       [15:0]   cfg_io_conv_glb_param_payload_dtHeight;
  wire       [15:0]   cfg_io_conv_glb_param_payload_wtWidth;
  wire       [15:0]   cfg_io_conv_glb_param_payload_wtHeight;
  wire       [15:0]   cfg_io_conv_glb_param_payload_oWidth;
  wire       [15:0]   cfg_io_conv_glb_param_payload_oHeight;
  wire                cfg_io_glb_enable;
  wire                cfg_io_is_delta_wt;

  dmaReadCtrl rdma (
    .axim_ar_valid                       (rdma_axim_ar_valid                                  ), //o
    .axim_ar_ready                       (io_axim_r_ar_ready                                  ), //i
    .axim_ar_payload_addr                (rdma_axim_ar_payload_addr                           ), //o
    .axim_ar_payload_id                  (rdma_axim_ar_payload_id                             ), //o
    .axim_ar_payload_len                 (rdma_axim_ar_payload_len                            ), //o
    .axim_ar_payload_size                (rdma_axim_ar_payload_size                           ), //o
    .axim_ar_payload_burst               (rdma_axim_ar_payload_burst                          ), //o
    .axim_r_valid                        (io_axim_r_r_valid                                   ), //i
    .axim_r_ready                        (rdma_axim_r_ready                                   ), //o
    .axim_r_payload_data                 (io_axim_r_r_payload_data                            ), //i
    .axim_r_payload_id                   (io_axim_r_r_payload_id                              ), //i
    .axim_r_payload_resp                 (io_axim_r_r_payload_resp                            ), //i
    .axim_r_payload_last                 (io_axim_r_r_payload_last                            ), //i
    .cfg_valid                           (cfg_io_rdma_glb_param_valid                         ), //i
    .cfg_ready                           (rdma_cfg_ready                                      ), //o
    .cfg_payload_rd_dtBaseAddr           (cfg_io_rdma_glb_param_payload_rd_dtBaseAddr         ), //i
    .cfg_payload_rd_wtBaseAddr           (cfg_io_rdma_glb_param_payload_rd_wtBaseAddr         ), //i
    .cfg_payload_wr_delta_wt_BaseAddr    (cfg_io_rdma_glb_param_payload_wr_delta_wt_BaseAddr  ), //i
    .cfg_payload_wr_sigma_BaseAddr       (cfg_io_rdma_glb_param_payload_wr_sigma_BaseAddr     ), //i
    .cfg_payload_dtWidth                 (cfg_io_rdma_glb_param_payload_dtWidth               ), //i
    .cfg_payload_dtHeight                (cfg_io_rdma_glb_param_payload_dtHeight              ), //i
    .cfg_payload_wtWidth                 (cfg_io_rdma_glb_param_payload_wtWidth               ), //i
    .cfg_payload_wtHeight                (cfg_io_rdma_glb_param_payload_wtHeight              ), //i
    .cfg_payload_oWidth                  (cfg_io_rdma_glb_param_payload_oWidth                ), //i
    .cfg_payload_oHeight                 (cfg_io_rdma_glb_param_payload_oHeight               ), //i
    .output_valid                        (rdma_output_valid                                   ), //o
    .output_ready                        (cbuf_io_input_ready                                 ), //i
    .output_payload                      (rdma_output_payload                                 ), //o
    .enable                              (cfg_io_glb_enable                                   ), //i
    .isIdle                              (rdma_isIdle                                         ), //o
    .is_dtwt_mux                         (rdma_is_dtwt_mux                                    ), //o
    .clk                                 (clk                                                 ), //i
    .reset                               (reset                                               )  //i
  );
  dmaWriteCtrl wdma (
    .io_axim_aw_valid                       (wdma_io_axim_aw_valid                               ), //o
    .io_axim_aw_ready                       (io_axim_w_aw_ready                                  ), //i
    .io_axim_aw_payload_addr                (wdma_io_axim_aw_payload_addr                        ), //o
    .io_axim_aw_payload_id                  (wdma_io_axim_aw_payload_id                          ), //o
    .io_axim_aw_payload_len                 (wdma_io_axim_aw_payload_len                         ), //o
    .io_axim_aw_payload_size                (wdma_io_axim_aw_payload_size                        ), //o
    .io_axim_aw_payload_burst               (wdma_io_axim_aw_payload_burst                       ), //o
    .io_axim_w_valid                        (wdma_io_axim_w_valid                                ), //o
    .io_axim_w_ready                        (io_axim_w_w_ready                                   ), //i
    .io_axim_w_payload_data                 (wdma_io_axim_w_payload_data                         ), //o
    .io_axim_w_payload_strb                 (wdma_io_axim_w_payload_strb                         ), //o
    .io_axim_w_payload_last                 (wdma_io_axim_w_payload_last                         ), //o
    .io_axim_b_valid                        (io_axim_w_b_valid                                   ), //i
    .io_axim_b_ready                        (wdma_io_axim_b_ready                                ), //o
    .io_axim_b_payload_id                   (io_axim_w_b_payload_id                              ), //i
    .io_axim_b_payload_resp                 (io_axim_w_b_payload_resp                            ), //i
    .io_cfg_valid                           (cfg_io_wdma_glb_param_valid                         ), //i
    .io_cfg_ready                           (wdma_io_cfg_ready                                   ), //o
    .io_cfg_payload_rd_dtBaseAddr           (cfg_io_wdma_glb_param_payload_rd_dtBaseAddr         ), //i
    .io_cfg_payload_rd_wtBaseAddr           (cfg_io_wdma_glb_param_payload_rd_wtBaseAddr         ), //i
    .io_cfg_payload_wr_delta_wt_BaseAddr    (cfg_io_wdma_glb_param_payload_wr_delta_wt_BaseAddr  ), //i
    .io_cfg_payload_wr_sigma_BaseAddr       (cfg_io_wdma_glb_param_payload_wr_sigma_BaseAddr     ), //i
    .io_cfg_payload_dtWidth                 (cfg_io_wdma_glb_param_payload_dtWidth               ), //i
    .io_cfg_payload_dtHeight                (cfg_io_wdma_glb_param_payload_dtHeight              ), //i
    .io_cfg_payload_wtWidth                 (cfg_io_wdma_glb_param_payload_wtWidth               ), //i
    .io_cfg_payload_wtHeight                (cfg_io_wdma_glb_param_payload_wtHeight              ), //i
    .io_cfg_payload_oWidth                  (cfg_io_wdma_glb_param_payload_oWidth                ), //i
    .io_cfg_payload_oHeight                 (cfg_io_wdma_glb_param_payload_oHeight               ), //i
    .io_i_delta_wt_0_0_valid                (conv_o_delta_wt_0_0_valid                           ), //i
    .io_i_delta_wt_0_0_ready                (wdma_io_i_delta_wt_0_0_ready                        ), //o
    .io_i_delta_wt_0_0_payload              (conv_o_delta_wt_0_0_payload                         ), //i
    .io_i_delta_wt_0_1_valid                (conv_o_delta_wt_0_1_valid                           ), //i
    .io_i_delta_wt_0_1_ready                (wdma_io_i_delta_wt_0_1_ready                        ), //o
    .io_i_delta_wt_0_1_payload              (conv_o_delta_wt_0_1_payload                         ), //i
    .io_i_delta_wt_0_2_valid                (conv_o_delta_wt_0_2_valid                           ), //i
    .io_i_delta_wt_0_2_ready                (wdma_io_i_delta_wt_0_2_ready                        ), //o
    .io_i_delta_wt_0_2_payload              (conv_o_delta_wt_0_2_payload                         ), //i
    .io_i_delta_wt_0_3_valid                (conv_o_delta_wt_0_3_valid                           ), //i
    .io_i_delta_wt_0_3_ready                (wdma_io_i_delta_wt_0_3_ready                        ), //o
    .io_i_delta_wt_0_3_payload              (conv_o_delta_wt_0_3_payload                         ), //i
    .io_i_delta_wt_0_4_valid                (conv_o_delta_wt_0_4_valid                           ), //i
    .io_i_delta_wt_0_4_ready                (wdma_io_i_delta_wt_0_4_ready                        ), //o
    .io_i_delta_wt_0_4_payload              (conv_o_delta_wt_0_4_payload                         ), //i
    .io_i_delta_wt_0_5_valid                (conv_o_delta_wt_0_5_valid                           ), //i
    .io_i_delta_wt_0_5_ready                (wdma_io_i_delta_wt_0_5_ready                        ), //o
    .io_i_delta_wt_0_5_payload              (conv_o_delta_wt_0_5_payload                         ), //i
    .io_i_delta_wt_0_6_valid                (conv_o_delta_wt_0_6_valid                           ), //i
    .io_i_delta_wt_0_6_ready                (wdma_io_i_delta_wt_0_6_ready                        ), //o
    .io_i_delta_wt_0_6_payload              (conv_o_delta_wt_0_6_payload                         ), //i
    .io_i_delta_wt_0_7_valid                (conv_o_delta_wt_0_7_valid                           ), //i
    .io_i_delta_wt_0_7_ready                (wdma_io_i_delta_wt_0_7_ready                        ), //o
    .io_i_delta_wt_0_7_payload              (conv_o_delta_wt_0_7_payload                         ), //i
    .io_i_delta_wt_1_0_valid                (conv_o_delta_wt_1_0_valid                           ), //i
    .io_i_delta_wt_1_0_ready                (wdma_io_i_delta_wt_1_0_ready                        ), //o
    .io_i_delta_wt_1_0_payload              (conv_o_delta_wt_1_0_payload                         ), //i
    .io_i_delta_wt_1_1_valid                (conv_o_delta_wt_1_1_valid                           ), //i
    .io_i_delta_wt_1_1_ready                (wdma_io_i_delta_wt_1_1_ready                        ), //o
    .io_i_delta_wt_1_1_payload              (conv_o_delta_wt_1_1_payload                         ), //i
    .io_i_delta_wt_1_2_valid                (conv_o_delta_wt_1_2_valid                           ), //i
    .io_i_delta_wt_1_2_ready                (wdma_io_i_delta_wt_1_2_ready                        ), //o
    .io_i_delta_wt_1_2_payload              (conv_o_delta_wt_1_2_payload                         ), //i
    .io_i_delta_wt_1_3_valid                (conv_o_delta_wt_1_3_valid                           ), //i
    .io_i_delta_wt_1_3_ready                (wdma_io_i_delta_wt_1_3_ready                        ), //o
    .io_i_delta_wt_1_3_payload              (conv_o_delta_wt_1_3_payload                         ), //i
    .io_i_delta_wt_1_4_valid                (conv_o_delta_wt_1_4_valid                           ), //i
    .io_i_delta_wt_1_4_ready                (wdma_io_i_delta_wt_1_4_ready                        ), //o
    .io_i_delta_wt_1_4_payload              (conv_o_delta_wt_1_4_payload                         ), //i
    .io_i_delta_wt_1_5_valid                (conv_o_delta_wt_1_5_valid                           ), //i
    .io_i_delta_wt_1_5_ready                (wdma_io_i_delta_wt_1_5_ready                        ), //o
    .io_i_delta_wt_1_5_payload              (conv_o_delta_wt_1_5_payload                         ), //i
    .io_i_delta_wt_1_6_valid                (conv_o_delta_wt_1_6_valid                           ), //i
    .io_i_delta_wt_1_6_ready                (wdma_io_i_delta_wt_1_6_ready                        ), //o
    .io_i_delta_wt_1_6_payload              (conv_o_delta_wt_1_6_payload                         ), //i
    .io_i_delta_wt_1_7_valid                (conv_o_delta_wt_1_7_valid                           ), //i
    .io_i_delta_wt_1_7_ready                (wdma_io_i_delta_wt_1_7_ready                        ), //o
    .io_i_delta_wt_1_7_payload              (conv_o_delta_wt_1_7_payload                         ), //i
    .io_i_delta_wt_2_0_valid                (conv_o_delta_wt_2_0_valid                           ), //i
    .io_i_delta_wt_2_0_ready                (wdma_io_i_delta_wt_2_0_ready                        ), //o
    .io_i_delta_wt_2_0_payload              (conv_o_delta_wt_2_0_payload                         ), //i
    .io_i_delta_wt_2_1_valid                (conv_o_delta_wt_2_1_valid                           ), //i
    .io_i_delta_wt_2_1_ready                (wdma_io_i_delta_wt_2_1_ready                        ), //o
    .io_i_delta_wt_2_1_payload              (conv_o_delta_wt_2_1_payload                         ), //i
    .io_i_delta_wt_2_2_valid                (conv_o_delta_wt_2_2_valid                           ), //i
    .io_i_delta_wt_2_2_ready                (wdma_io_i_delta_wt_2_2_ready                        ), //o
    .io_i_delta_wt_2_2_payload              (conv_o_delta_wt_2_2_payload                         ), //i
    .io_i_delta_wt_2_3_valid                (conv_o_delta_wt_2_3_valid                           ), //i
    .io_i_delta_wt_2_3_ready                (wdma_io_i_delta_wt_2_3_ready                        ), //o
    .io_i_delta_wt_2_3_payload              (conv_o_delta_wt_2_3_payload                         ), //i
    .io_i_delta_wt_2_4_valid                (conv_o_delta_wt_2_4_valid                           ), //i
    .io_i_delta_wt_2_4_ready                (wdma_io_i_delta_wt_2_4_ready                        ), //o
    .io_i_delta_wt_2_4_payload              (conv_o_delta_wt_2_4_payload                         ), //i
    .io_i_delta_wt_2_5_valid                (conv_o_delta_wt_2_5_valid                           ), //i
    .io_i_delta_wt_2_5_ready                (wdma_io_i_delta_wt_2_5_ready                        ), //o
    .io_i_delta_wt_2_5_payload              (conv_o_delta_wt_2_5_payload                         ), //i
    .io_i_delta_wt_2_6_valid                (conv_o_delta_wt_2_6_valid                           ), //i
    .io_i_delta_wt_2_6_ready                (wdma_io_i_delta_wt_2_6_ready                        ), //o
    .io_i_delta_wt_2_6_payload              (conv_o_delta_wt_2_6_payload                         ), //i
    .io_i_delta_wt_2_7_valid                (conv_o_delta_wt_2_7_valid                           ), //i
    .io_i_delta_wt_2_7_ready                (wdma_io_i_delta_wt_2_7_ready                        ), //o
    .io_i_delta_wt_2_7_payload              (conv_o_delta_wt_2_7_payload                         ), //i
    .io_i_delta_wt_3_0_valid                (conv_o_delta_wt_3_0_valid                           ), //i
    .io_i_delta_wt_3_0_ready                (wdma_io_i_delta_wt_3_0_ready                        ), //o
    .io_i_delta_wt_3_0_payload              (conv_o_delta_wt_3_0_payload                         ), //i
    .io_i_delta_wt_3_1_valid                (conv_o_delta_wt_3_1_valid                           ), //i
    .io_i_delta_wt_3_1_ready                (wdma_io_i_delta_wt_3_1_ready                        ), //o
    .io_i_delta_wt_3_1_payload              (conv_o_delta_wt_3_1_payload                         ), //i
    .io_i_delta_wt_3_2_valid                (conv_o_delta_wt_3_2_valid                           ), //i
    .io_i_delta_wt_3_2_ready                (wdma_io_i_delta_wt_3_2_ready                        ), //o
    .io_i_delta_wt_3_2_payload              (conv_o_delta_wt_3_2_payload                         ), //i
    .io_i_delta_wt_3_3_valid                (conv_o_delta_wt_3_3_valid                           ), //i
    .io_i_delta_wt_3_3_ready                (wdma_io_i_delta_wt_3_3_ready                        ), //o
    .io_i_delta_wt_3_3_payload              (conv_o_delta_wt_3_3_payload                         ), //i
    .io_i_delta_wt_3_4_valid                (conv_o_delta_wt_3_4_valid                           ), //i
    .io_i_delta_wt_3_4_ready                (wdma_io_i_delta_wt_3_4_ready                        ), //o
    .io_i_delta_wt_3_4_payload              (conv_o_delta_wt_3_4_payload                         ), //i
    .io_i_delta_wt_3_5_valid                (conv_o_delta_wt_3_5_valid                           ), //i
    .io_i_delta_wt_3_5_ready                (wdma_io_i_delta_wt_3_5_ready                        ), //o
    .io_i_delta_wt_3_5_payload              (conv_o_delta_wt_3_5_payload                         ), //i
    .io_i_delta_wt_3_6_valid                (conv_o_delta_wt_3_6_valid                           ), //i
    .io_i_delta_wt_3_6_ready                (wdma_io_i_delta_wt_3_6_ready                        ), //o
    .io_i_delta_wt_3_6_payload              (conv_o_delta_wt_3_6_payload                         ), //i
    .io_i_delta_wt_3_7_valid                (conv_o_delta_wt_3_7_valid                           ), //i
    .io_i_delta_wt_3_7_ready                (wdma_io_i_delta_wt_3_7_ready                        ), //o
    .io_i_delta_wt_3_7_payload              (conv_o_delta_wt_3_7_payload                         ), //i
    .io_i_delta_wt_4_0_valid                (conv_o_delta_wt_4_0_valid                           ), //i
    .io_i_delta_wt_4_0_ready                (wdma_io_i_delta_wt_4_0_ready                        ), //o
    .io_i_delta_wt_4_0_payload              (conv_o_delta_wt_4_0_payload                         ), //i
    .io_i_delta_wt_4_1_valid                (conv_o_delta_wt_4_1_valid                           ), //i
    .io_i_delta_wt_4_1_ready                (wdma_io_i_delta_wt_4_1_ready                        ), //o
    .io_i_delta_wt_4_1_payload              (conv_o_delta_wt_4_1_payload                         ), //i
    .io_i_delta_wt_4_2_valid                (conv_o_delta_wt_4_2_valid                           ), //i
    .io_i_delta_wt_4_2_ready                (wdma_io_i_delta_wt_4_2_ready                        ), //o
    .io_i_delta_wt_4_2_payload              (conv_o_delta_wt_4_2_payload                         ), //i
    .io_i_delta_wt_4_3_valid                (conv_o_delta_wt_4_3_valid                           ), //i
    .io_i_delta_wt_4_3_ready                (wdma_io_i_delta_wt_4_3_ready                        ), //o
    .io_i_delta_wt_4_3_payload              (conv_o_delta_wt_4_3_payload                         ), //i
    .io_i_delta_wt_4_4_valid                (conv_o_delta_wt_4_4_valid                           ), //i
    .io_i_delta_wt_4_4_ready                (wdma_io_i_delta_wt_4_4_ready                        ), //o
    .io_i_delta_wt_4_4_payload              (conv_o_delta_wt_4_4_payload                         ), //i
    .io_i_delta_wt_4_5_valid                (conv_o_delta_wt_4_5_valid                           ), //i
    .io_i_delta_wt_4_5_ready                (wdma_io_i_delta_wt_4_5_ready                        ), //o
    .io_i_delta_wt_4_5_payload              (conv_o_delta_wt_4_5_payload                         ), //i
    .io_i_delta_wt_4_6_valid                (conv_o_delta_wt_4_6_valid                           ), //i
    .io_i_delta_wt_4_6_ready                (wdma_io_i_delta_wt_4_6_ready                        ), //o
    .io_i_delta_wt_4_6_payload              (conv_o_delta_wt_4_6_payload                         ), //i
    .io_i_delta_wt_4_7_valid                (conv_o_delta_wt_4_7_valid                           ), //i
    .io_i_delta_wt_4_7_ready                (wdma_io_i_delta_wt_4_7_ready                        ), //o
    .io_i_delta_wt_4_7_payload              (conv_o_delta_wt_4_7_payload                         ), //i
    .io_i_delta_wt_5_0_valid                (conv_o_delta_wt_5_0_valid                           ), //i
    .io_i_delta_wt_5_0_ready                (wdma_io_i_delta_wt_5_0_ready                        ), //o
    .io_i_delta_wt_5_0_payload              (conv_o_delta_wt_5_0_payload                         ), //i
    .io_i_delta_wt_5_1_valid                (conv_o_delta_wt_5_1_valid                           ), //i
    .io_i_delta_wt_5_1_ready                (wdma_io_i_delta_wt_5_1_ready                        ), //o
    .io_i_delta_wt_5_1_payload              (conv_o_delta_wt_5_1_payload                         ), //i
    .io_i_delta_wt_5_2_valid                (conv_o_delta_wt_5_2_valid                           ), //i
    .io_i_delta_wt_5_2_ready                (wdma_io_i_delta_wt_5_2_ready                        ), //o
    .io_i_delta_wt_5_2_payload              (conv_o_delta_wt_5_2_payload                         ), //i
    .io_i_delta_wt_5_3_valid                (conv_o_delta_wt_5_3_valid                           ), //i
    .io_i_delta_wt_5_3_ready                (wdma_io_i_delta_wt_5_3_ready                        ), //o
    .io_i_delta_wt_5_3_payload              (conv_o_delta_wt_5_3_payload                         ), //i
    .io_i_delta_wt_5_4_valid                (conv_o_delta_wt_5_4_valid                           ), //i
    .io_i_delta_wt_5_4_ready                (wdma_io_i_delta_wt_5_4_ready                        ), //o
    .io_i_delta_wt_5_4_payload              (conv_o_delta_wt_5_4_payload                         ), //i
    .io_i_delta_wt_5_5_valid                (conv_o_delta_wt_5_5_valid                           ), //i
    .io_i_delta_wt_5_5_ready                (wdma_io_i_delta_wt_5_5_ready                        ), //o
    .io_i_delta_wt_5_5_payload              (conv_o_delta_wt_5_5_payload                         ), //i
    .io_i_delta_wt_5_6_valid                (conv_o_delta_wt_5_6_valid                           ), //i
    .io_i_delta_wt_5_6_ready                (wdma_io_i_delta_wt_5_6_ready                        ), //o
    .io_i_delta_wt_5_6_payload              (conv_o_delta_wt_5_6_payload                         ), //i
    .io_i_delta_wt_5_7_valid                (conv_o_delta_wt_5_7_valid                           ), //i
    .io_i_delta_wt_5_7_ready                (wdma_io_i_delta_wt_5_7_ready                        ), //o
    .io_i_delta_wt_5_7_payload              (conv_o_delta_wt_5_7_payload                         ), //i
    .io_i_delta_wt_6_0_valid                (conv_o_delta_wt_6_0_valid                           ), //i
    .io_i_delta_wt_6_0_ready                (wdma_io_i_delta_wt_6_0_ready                        ), //o
    .io_i_delta_wt_6_0_payload              (conv_o_delta_wt_6_0_payload                         ), //i
    .io_i_delta_wt_6_1_valid                (conv_o_delta_wt_6_1_valid                           ), //i
    .io_i_delta_wt_6_1_ready                (wdma_io_i_delta_wt_6_1_ready                        ), //o
    .io_i_delta_wt_6_1_payload              (conv_o_delta_wt_6_1_payload                         ), //i
    .io_i_delta_wt_6_2_valid                (conv_o_delta_wt_6_2_valid                           ), //i
    .io_i_delta_wt_6_2_ready                (wdma_io_i_delta_wt_6_2_ready                        ), //o
    .io_i_delta_wt_6_2_payload              (conv_o_delta_wt_6_2_payload                         ), //i
    .io_i_delta_wt_6_3_valid                (conv_o_delta_wt_6_3_valid                           ), //i
    .io_i_delta_wt_6_3_ready                (wdma_io_i_delta_wt_6_3_ready                        ), //o
    .io_i_delta_wt_6_3_payload              (conv_o_delta_wt_6_3_payload                         ), //i
    .io_i_delta_wt_6_4_valid                (conv_o_delta_wt_6_4_valid                           ), //i
    .io_i_delta_wt_6_4_ready                (wdma_io_i_delta_wt_6_4_ready                        ), //o
    .io_i_delta_wt_6_4_payload              (conv_o_delta_wt_6_4_payload                         ), //i
    .io_i_delta_wt_6_5_valid                (conv_o_delta_wt_6_5_valid                           ), //i
    .io_i_delta_wt_6_5_ready                (wdma_io_i_delta_wt_6_5_ready                        ), //o
    .io_i_delta_wt_6_5_payload              (conv_o_delta_wt_6_5_payload                         ), //i
    .io_i_delta_wt_6_6_valid                (conv_o_delta_wt_6_6_valid                           ), //i
    .io_i_delta_wt_6_6_ready                (wdma_io_i_delta_wt_6_6_ready                        ), //o
    .io_i_delta_wt_6_6_payload              (conv_o_delta_wt_6_6_payload                         ), //i
    .io_i_delta_wt_6_7_valid                (conv_o_delta_wt_6_7_valid                           ), //i
    .io_i_delta_wt_6_7_ready                (wdma_io_i_delta_wt_6_7_ready                        ), //o
    .io_i_delta_wt_6_7_payload              (conv_o_delta_wt_6_7_payload                         ), //i
    .io_i_delta_wt_7_0_valid                (conv_o_delta_wt_7_0_valid                           ), //i
    .io_i_delta_wt_7_0_ready                (wdma_io_i_delta_wt_7_0_ready                        ), //o
    .io_i_delta_wt_7_0_payload              (conv_o_delta_wt_7_0_payload                         ), //i
    .io_i_delta_wt_7_1_valid                (conv_o_delta_wt_7_1_valid                           ), //i
    .io_i_delta_wt_7_1_ready                (wdma_io_i_delta_wt_7_1_ready                        ), //o
    .io_i_delta_wt_7_1_payload              (conv_o_delta_wt_7_1_payload                         ), //i
    .io_i_delta_wt_7_2_valid                (conv_o_delta_wt_7_2_valid                           ), //i
    .io_i_delta_wt_7_2_ready                (wdma_io_i_delta_wt_7_2_ready                        ), //o
    .io_i_delta_wt_7_2_payload              (conv_o_delta_wt_7_2_payload                         ), //i
    .io_i_delta_wt_7_3_valid                (conv_o_delta_wt_7_3_valid                           ), //i
    .io_i_delta_wt_7_3_ready                (wdma_io_i_delta_wt_7_3_ready                        ), //o
    .io_i_delta_wt_7_3_payload              (conv_o_delta_wt_7_3_payload                         ), //i
    .io_i_delta_wt_7_4_valid                (conv_o_delta_wt_7_4_valid                           ), //i
    .io_i_delta_wt_7_4_ready                (wdma_io_i_delta_wt_7_4_ready                        ), //o
    .io_i_delta_wt_7_4_payload              (conv_o_delta_wt_7_4_payload                         ), //i
    .io_i_delta_wt_7_5_valid                (conv_o_delta_wt_7_5_valid                           ), //i
    .io_i_delta_wt_7_5_ready                (wdma_io_i_delta_wt_7_5_ready                        ), //o
    .io_i_delta_wt_7_5_payload              (conv_o_delta_wt_7_5_payload                         ), //i
    .io_i_delta_wt_7_6_valid                (conv_o_delta_wt_7_6_valid                           ), //i
    .io_i_delta_wt_7_6_ready                (wdma_io_i_delta_wt_7_6_ready                        ), //o
    .io_i_delta_wt_7_6_payload              (conv_o_delta_wt_7_6_payload                         ), //i
    .io_i_delta_wt_7_7_valid                (conv_o_delta_wt_7_7_valid                           ), //i
    .io_i_delta_wt_7_7_ready                (wdma_io_i_delta_wt_7_7_ready                        ), //o
    .io_i_delta_wt_7_7_payload              (conv_o_delta_wt_7_7_payload                         ), //i
    .io_i_sigma_0_valid                     (adder_io_out_0_valid                                ), //i
    .io_i_sigma_0_ready                     (wdma_io_i_sigma_0_ready                             ), //o
    .io_i_sigma_0_payload                   (adder_io_out_0_payload                              ), //i
    .io_i_sigma_1_valid                     (adder_io_out_1_valid                                ), //i
    .io_i_sigma_1_ready                     (wdma_io_i_sigma_1_ready                             ), //o
    .io_i_sigma_1_payload                   (adder_io_out_1_payload                              ), //i
    .io_i_sigma_2_valid                     (adder_io_out_2_valid                                ), //i
    .io_i_sigma_2_ready                     (wdma_io_i_sigma_2_ready                             ), //o
    .io_i_sigma_2_payload                   (adder_io_out_2_payload                              ), //i
    .io_i_sigma_3_valid                     (adder_io_out_3_valid                                ), //i
    .io_i_sigma_3_ready                     (wdma_io_i_sigma_3_ready                             ), //o
    .io_i_sigma_3_payload                   (adder_io_out_3_payload                              ), //i
    .io_i_sigma_4_valid                     (adder_io_out_4_valid                                ), //i
    .io_i_sigma_4_ready                     (wdma_io_i_sigma_4_ready                             ), //o
    .io_i_sigma_4_payload                   (adder_io_out_4_payload                              ), //i
    .io_i_sigma_5_valid                     (adder_io_out_5_valid                                ), //i
    .io_i_sigma_5_ready                     (wdma_io_i_sigma_5_ready                             ), //o
    .io_i_sigma_5_payload                   (adder_io_out_5_payload                              ), //i
    .io_i_sigma_6_valid                     (adder_io_out_6_valid                                ), //i
    .io_i_sigma_6_ready                     (wdma_io_i_sigma_6_ready                             ), //o
    .io_i_sigma_6_payload                   (adder_io_out_6_payload                              ), //i
    .io_i_sigma_7_valid                     (adder_io_out_7_valid                                ), //i
    .io_i_sigma_7_ready                     (wdma_io_i_sigma_7_ready                             ), //o
    .io_i_sigma_7_payload                   (adder_io_out_7_payload                              ), //i
    .io_enable                              (1'b1                                                ), //i
    .io_is_delta_wt                         (cfg_io_is_delta_wt                                  ), //i
    .clk                                    (clk                                                 ), //i
    .reset                                  (reset                                               )  //i
  );
  cbuff_top cbuf (
    .io_input_valid      (rdma_output_valid     ), //i
    .io_input_ready      (cbuf_io_input_ready   ), //o
    .io_input_payload    (rdma_output_payload   ), //i
    .io_clear            (cfg_io_glb_enable     ), //i
    .io_is_dtwt_mux      (cfg_io_is_delta_wt    ), //i
    .io_dt_rd_addr       (conv_dt_ramrd_addr    ), //i
    .io_dt_rd_data       (cbuf_io_dt_rd_data    ), //o
    .io_dt_rd_en         (conv_dt_ramrd_en      ), //i
    .io_wt_rd_0_addr     (conv_wt_ramrd_0_addr  ), //i
    .io_wt_rd_0_data     (cbuf_io_wt_rd_0_data  ), //o
    .io_wt_rd_0_en       (conv_wt_ramrd_0_en    ), //i
    .io_wt_rd_1_addr     (conv_wt_ramrd_1_addr  ), //i
    .io_wt_rd_1_data     (cbuf_io_wt_rd_1_data  ), //o
    .io_wt_rd_1_en       (conv_wt_ramrd_1_en    ), //i
    .io_wt_rd_2_addr     (conv_wt_ramrd_2_addr  ), //i
    .io_wt_rd_2_data     (cbuf_io_wt_rd_2_data  ), //o
    .io_wt_rd_2_en       (conv_wt_ramrd_2_en    ), //i
    .io_wt_rd_3_addr     (conv_wt_ramrd_3_addr  ), //i
    .io_wt_rd_3_data     (cbuf_io_wt_rd_3_data  ), //o
    .io_wt_rd_3_en       (conv_wt_ramrd_3_en    ), //i
    .io_wt_rd_4_addr     (conv_wt_ramrd_4_addr  ), //i
    .io_wt_rd_4_data     (cbuf_io_wt_rd_4_data  ), //o
    .io_wt_rd_4_en       (conv_wt_ramrd_4_en    ), //i
    .io_wt_rd_5_addr     (conv_wt_ramrd_5_addr  ), //i
    .io_wt_rd_5_data     (cbuf_io_wt_rd_5_data  ), //o
    .io_wt_rd_5_en       (conv_wt_ramrd_5_en    ), //i
    .io_wt_rd_6_addr     (conv_wt_ramrd_6_addr  ), //i
    .io_wt_rd_6_data     (cbuf_io_wt_rd_6_data  ), //o
    .io_wt_rd_6_en       (conv_wt_ramrd_6_en    ), //i
    .io_wt_rd_7_addr     (conv_wt_ramrd_7_addr  ), //i
    .io_wt_rd_7_data     (cbuf_io_wt_rd_7_data  ), //o
    .io_wt_rd_7_en       (conv_wt_ramrd_7_en    ), //i
    .clk                 (clk                   ), //i
    .reset               (reset                 )  //i
  );
  conv_top conv (
    .cfg_valid                           (cfg_io_conv_glb_param_valid                         ), //i
    .cfg_ready                           (conv_cfg_ready                                      ), //o
    .cfg_payload_rd_dtBaseAddr           (cfg_io_conv_glb_param_payload_rd_dtBaseAddr         ), //i
    .cfg_payload_rd_wtBaseAddr           (cfg_io_conv_glb_param_payload_rd_wtBaseAddr         ), //i
    .cfg_payload_wr_delta_wt_BaseAddr    (cfg_io_conv_glb_param_payload_wr_delta_wt_BaseAddr  ), //i
    .cfg_payload_wr_sigma_BaseAddr       (cfg_io_conv_glb_param_payload_wr_sigma_BaseAddr     ), //i
    .cfg_payload_dtWidth                 (cfg_io_conv_glb_param_payload_dtWidth               ), //i
    .cfg_payload_dtHeight                (cfg_io_conv_glb_param_payload_dtHeight              ), //i
    .cfg_payload_wtWidth                 (cfg_io_conv_glb_param_payload_wtWidth               ), //i
    .cfg_payload_wtHeight                (cfg_io_conv_glb_param_payload_wtHeight              ), //i
    .cfg_payload_oWidth                  (cfg_io_conv_glb_param_payload_oWidth                ), //i
    .cfg_payload_oHeight                 (cfg_io_conv_glb_param_payload_oHeight               ), //i
    .read_enable                         (1'b1                                                ), //i
    .acc_enable                          (1'b1                                                ), //i
    .is_delta_wt                         (cfg_io_is_delta_wt                                  ), //i
    .dt_ramrd_addr                       (conv_dt_ramrd_addr                                  ), //o
    .dt_ramrd_data                       (cbuf_io_dt_rd_data                                  ), //i
    .dt_ramrd_en                         (conv_dt_ramrd_en                                    ), //o
    .wt_ramrd_0_addr                     (conv_wt_ramrd_0_addr                                ), //o
    .wt_ramrd_0_data                     (cbuf_io_wt_rd_0_data                                ), //i
    .wt_ramrd_0_en                       (conv_wt_ramrd_0_en                                  ), //o
    .wt_ramrd_1_addr                     (conv_wt_ramrd_1_addr                                ), //o
    .wt_ramrd_1_data                     (cbuf_io_wt_rd_1_data                                ), //i
    .wt_ramrd_1_en                       (conv_wt_ramrd_1_en                                  ), //o
    .wt_ramrd_2_addr                     (conv_wt_ramrd_2_addr                                ), //o
    .wt_ramrd_2_data                     (cbuf_io_wt_rd_2_data                                ), //i
    .wt_ramrd_2_en                       (conv_wt_ramrd_2_en                                  ), //o
    .wt_ramrd_3_addr                     (conv_wt_ramrd_3_addr                                ), //o
    .wt_ramrd_3_data                     (cbuf_io_wt_rd_3_data                                ), //i
    .wt_ramrd_3_en                       (conv_wt_ramrd_3_en                                  ), //o
    .wt_ramrd_4_addr                     (conv_wt_ramrd_4_addr                                ), //o
    .wt_ramrd_4_data                     (cbuf_io_wt_rd_4_data                                ), //i
    .wt_ramrd_4_en                       (conv_wt_ramrd_4_en                                  ), //o
    .wt_ramrd_5_addr                     (conv_wt_ramrd_5_addr                                ), //o
    .wt_ramrd_5_data                     (cbuf_io_wt_rd_5_data                                ), //i
    .wt_ramrd_5_en                       (conv_wt_ramrd_5_en                                  ), //o
    .wt_ramrd_6_addr                     (conv_wt_ramrd_6_addr                                ), //o
    .wt_ramrd_6_data                     (cbuf_io_wt_rd_6_data                                ), //i
    .wt_ramrd_6_en                       (conv_wt_ramrd_6_en                                  ), //o
    .wt_ramrd_7_addr                     (conv_wt_ramrd_7_addr                                ), //o
    .wt_ramrd_7_data                     (cbuf_io_wt_rd_7_data                                ), //i
    .wt_ramrd_7_en                       (conv_wt_ramrd_7_en                                  ), //o
    .o_delta_wt_0_0_valid                (conv_o_delta_wt_0_0_valid                           ), //o
    .o_delta_wt_0_0_ready                (wdma_io_i_delta_wt_0_0_ready                        ), //i
    .o_delta_wt_0_0_payload              (conv_o_delta_wt_0_0_payload                         ), //o
    .o_delta_wt_0_1_valid                (conv_o_delta_wt_0_1_valid                           ), //o
    .o_delta_wt_0_1_ready                (wdma_io_i_delta_wt_0_1_ready                        ), //i
    .o_delta_wt_0_1_payload              (conv_o_delta_wt_0_1_payload                         ), //o
    .o_delta_wt_0_2_valid                (conv_o_delta_wt_0_2_valid                           ), //o
    .o_delta_wt_0_2_ready                (wdma_io_i_delta_wt_0_2_ready                        ), //i
    .o_delta_wt_0_2_payload              (conv_o_delta_wt_0_2_payload                         ), //o
    .o_delta_wt_0_3_valid                (conv_o_delta_wt_0_3_valid                           ), //o
    .o_delta_wt_0_3_ready                (wdma_io_i_delta_wt_0_3_ready                        ), //i
    .o_delta_wt_0_3_payload              (conv_o_delta_wt_0_3_payload                         ), //o
    .o_delta_wt_0_4_valid                (conv_o_delta_wt_0_4_valid                           ), //o
    .o_delta_wt_0_4_ready                (wdma_io_i_delta_wt_0_4_ready                        ), //i
    .o_delta_wt_0_4_payload              (conv_o_delta_wt_0_4_payload                         ), //o
    .o_delta_wt_0_5_valid                (conv_o_delta_wt_0_5_valid                           ), //o
    .o_delta_wt_0_5_ready                (wdma_io_i_delta_wt_0_5_ready                        ), //i
    .o_delta_wt_0_5_payload              (conv_o_delta_wt_0_5_payload                         ), //o
    .o_delta_wt_0_6_valid                (conv_o_delta_wt_0_6_valid                           ), //o
    .o_delta_wt_0_6_ready                (wdma_io_i_delta_wt_0_6_ready                        ), //i
    .o_delta_wt_0_6_payload              (conv_o_delta_wt_0_6_payload                         ), //o
    .o_delta_wt_0_7_valid                (conv_o_delta_wt_0_7_valid                           ), //o
    .o_delta_wt_0_7_ready                (wdma_io_i_delta_wt_0_7_ready                        ), //i
    .o_delta_wt_0_7_payload              (conv_o_delta_wt_0_7_payload                         ), //o
    .o_delta_wt_1_0_valid                (conv_o_delta_wt_1_0_valid                           ), //o
    .o_delta_wt_1_0_ready                (wdma_io_i_delta_wt_1_0_ready                        ), //i
    .o_delta_wt_1_0_payload              (conv_o_delta_wt_1_0_payload                         ), //o
    .o_delta_wt_1_1_valid                (conv_o_delta_wt_1_1_valid                           ), //o
    .o_delta_wt_1_1_ready                (wdma_io_i_delta_wt_1_1_ready                        ), //i
    .o_delta_wt_1_1_payload              (conv_o_delta_wt_1_1_payload                         ), //o
    .o_delta_wt_1_2_valid                (conv_o_delta_wt_1_2_valid                           ), //o
    .o_delta_wt_1_2_ready                (wdma_io_i_delta_wt_1_2_ready                        ), //i
    .o_delta_wt_1_2_payload              (conv_o_delta_wt_1_2_payload                         ), //o
    .o_delta_wt_1_3_valid                (conv_o_delta_wt_1_3_valid                           ), //o
    .o_delta_wt_1_3_ready                (wdma_io_i_delta_wt_1_3_ready                        ), //i
    .o_delta_wt_1_3_payload              (conv_o_delta_wt_1_3_payload                         ), //o
    .o_delta_wt_1_4_valid                (conv_o_delta_wt_1_4_valid                           ), //o
    .o_delta_wt_1_4_ready                (wdma_io_i_delta_wt_1_4_ready                        ), //i
    .o_delta_wt_1_4_payload              (conv_o_delta_wt_1_4_payload                         ), //o
    .o_delta_wt_1_5_valid                (conv_o_delta_wt_1_5_valid                           ), //o
    .o_delta_wt_1_5_ready                (wdma_io_i_delta_wt_1_5_ready                        ), //i
    .o_delta_wt_1_5_payload              (conv_o_delta_wt_1_5_payload                         ), //o
    .o_delta_wt_1_6_valid                (conv_o_delta_wt_1_6_valid                           ), //o
    .o_delta_wt_1_6_ready                (wdma_io_i_delta_wt_1_6_ready                        ), //i
    .o_delta_wt_1_6_payload              (conv_o_delta_wt_1_6_payload                         ), //o
    .o_delta_wt_1_7_valid                (conv_o_delta_wt_1_7_valid                           ), //o
    .o_delta_wt_1_7_ready                (wdma_io_i_delta_wt_1_7_ready                        ), //i
    .o_delta_wt_1_7_payload              (conv_o_delta_wt_1_7_payload                         ), //o
    .o_delta_wt_2_0_valid                (conv_o_delta_wt_2_0_valid                           ), //o
    .o_delta_wt_2_0_ready                (wdma_io_i_delta_wt_2_0_ready                        ), //i
    .o_delta_wt_2_0_payload              (conv_o_delta_wt_2_0_payload                         ), //o
    .o_delta_wt_2_1_valid                (conv_o_delta_wt_2_1_valid                           ), //o
    .o_delta_wt_2_1_ready                (wdma_io_i_delta_wt_2_1_ready                        ), //i
    .o_delta_wt_2_1_payload              (conv_o_delta_wt_2_1_payload                         ), //o
    .o_delta_wt_2_2_valid                (conv_o_delta_wt_2_2_valid                           ), //o
    .o_delta_wt_2_2_ready                (wdma_io_i_delta_wt_2_2_ready                        ), //i
    .o_delta_wt_2_2_payload              (conv_o_delta_wt_2_2_payload                         ), //o
    .o_delta_wt_2_3_valid                (conv_o_delta_wt_2_3_valid                           ), //o
    .o_delta_wt_2_3_ready                (wdma_io_i_delta_wt_2_3_ready                        ), //i
    .o_delta_wt_2_3_payload              (conv_o_delta_wt_2_3_payload                         ), //o
    .o_delta_wt_2_4_valid                (conv_o_delta_wt_2_4_valid                           ), //o
    .o_delta_wt_2_4_ready                (wdma_io_i_delta_wt_2_4_ready                        ), //i
    .o_delta_wt_2_4_payload              (conv_o_delta_wt_2_4_payload                         ), //o
    .o_delta_wt_2_5_valid                (conv_o_delta_wt_2_5_valid                           ), //o
    .o_delta_wt_2_5_ready                (wdma_io_i_delta_wt_2_5_ready                        ), //i
    .o_delta_wt_2_5_payload              (conv_o_delta_wt_2_5_payload                         ), //o
    .o_delta_wt_2_6_valid                (conv_o_delta_wt_2_6_valid                           ), //o
    .o_delta_wt_2_6_ready                (wdma_io_i_delta_wt_2_6_ready                        ), //i
    .o_delta_wt_2_6_payload              (conv_o_delta_wt_2_6_payload                         ), //o
    .o_delta_wt_2_7_valid                (conv_o_delta_wt_2_7_valid                           ), //o
    .o_delta_wt_2_7_ready                (wdma_io_i_delta_wt_2_7_ready                        ), //i
    .o_delta_wt_2_7_payload              (conv_o_delta_wt_2_7_payload                         ), //o
    .o_delta_wt_3_0_valid                (conv_o_delta_wt_3_0_valid                           ), //o
    .o_delta_wt_3_0_ready                (wdma_io_i_delta_wt_3_0_ready                        ), //i
    .o_delta_wt_3_0_payload              (conv_o_delta_wt_3_0_payload                         ), //o
    .o_delta_wt_3_1_valid                (conv_o_delta_wt_3_1_valid                           ), //o
    .o_delta_wt_3_1_ready                (wdma_io_i_delta_wt_3_1_ready                        ), //i
    .o_delta_wt_3_1_payload              (conv_o_delta_wt_3_1_payload                         ), //o
    .o_delta_wt_3_2_valid                (conv_o_delta_wt_3_2_valid                           ), //o
    .o_delta_wt_3_2_ready                (wdma_io_i_delta_wt_3_2_ready                        ), //i
    .o_delta_wt_3_2_payload              (conv_o_delta_wt_3_2_payload                         ), //o
    .o_delta_wt_3_3_valid                (conv_o_delta_wt_3_3_valid                           ), //o
    .o_delta_wt_3_3_ready                (wdma_io_i_delta_wt_3_3_ready                        ), //i
    .o_delta_wt_3_3_payload              (conv_o_delta_wt_3_3_payload                         ), //o
    .o_delta_wt_3_4_valid                (conv_o_delta_wt_3_4_valid                           ), //o
    .o_delta_wt_3_4_ready                (wdma_io_i_delta_wt_3_4_ready                        ), //i
    .o_delta_wt_3_4_payload              (conv_o_delta_wt_3_4_payload                         ), //o
    .o_delta_wt_3_5_valid                (conv_o_delta_wt_3_5_valid                           ), //o
    .o_delta_wt_3_5_ready                (wdma_io_i_delta_wt_3_5_ready                        ), //i
    .o_delta_wt_3_5_payload              (conv_o_delta_wt_3_5_payload                         ), //o
    .o_delta_wt_3_6_valid                (conv_o_delta_wt_3_6_valid                           ), //o
    .o_delta_wt_3_6_ready                (wdma_io_i_delta_wt_3_6_ready                        ), //i
    .o_delta_wt_3_6_payload              (conv_o_delta_wt_3_6_payload                         ), //o
    .o_delta_wt_3_7_valid                (conv_o_delta_wt_3_7_valid                           ), //o
    .o_delta_wt_3_7_ready                (wdma_io_i_delta_wt_3_7_ready                        ), //i
    .o_delta_wt_3_7_payload              (conv_o_delta_wt_3_7_payload                         ), //o
    .o_delta_wt_4_0_valid                (conv_o_delta_wt_4_0_valid                           ), //o
    .o_delta_wt_4_0_ready                (wdma_io_i_delta_wt_4_0_ready                        ), //i
    .o_delta_wt_4_0_payload              (conv_o_delta_wt_4_0_payload                         ), //o
    .o_delta_wt_4_1_valid                (conv_o_delta_wt_4_1_valid                           ), //o
    .o_delta_wt_4_1_ready                (wdma_io_i_delta_wt_4_1_ready                        ), //i
    .o_delta_wt_4_1_payload              (conv_o_delta_wt_4_1_payload                         ), //o
    .o_delta_wt_4_2_valid                (conv_o_delta_wt_4_2_valid                           ), //o
    .o_delta_wt_4_2_ready                (wdma_io_i_delta_wt_4_2_ready                        ), //i
    .o_delta_wt_4_2_payload              (conv_o_delta_wt_4_2_payload                         ), //o
    .o_delta_wt_4_3_valid                (conv_o_delta_wt_4_3_valid                           ), //o
    .o_delta_wt_4_3_ready                (wdma_io_i_delta_wt_4_3_ready                        ), //i
    .o_delta_wt_4_3_payload              (conv_o_delta_wt_4_3_payload                         ), //o
    .o_delta_wt_4_4_valid                (conv_o_delta_wt_4_4_valid                           ), //o
    .o_delta_wt_4_4_ready                (wdma_io_i_delta_wt_4_4_ready                        ), //i
    .o_delta_wt_4_4_payload              (conv_o_delta_wt_4_4_payload                         ), //o
    .o_delta_wt_4_5_valid                (conv_o_delta_wt_4_5_valid                           ), //o
    .o_delta_wt_4_5_ready                (wdma_io_i_delta_wt_4_5_ready                        ), //i
    .o_delta_wt_4_5_payload              (conv_o_delta_wt_4_5_payload                         ), //o
    .o_delta_wt_4_6_valid                (conv_o_delta_wt_4_6_valid                           ), //o
    .o_delta_wt_4_6_ready                (wdma_io_i_delta_wt_4_6_ready                        ), //i
    .o_delta_wt_4_6_payload              (conv_o_delta_wt_4_6_payload                         ), //o
    .o_delta_wt_4_7_valid                (conv_o_delta_wt_4_7_valid                           ), //o
    .o_delta_wt_4_7_ready                (wdma_io_i_delta_wt_4_7_ready                        ), //i
    .o_delta_wt_4_7_payload              (conv_o_delta_wt_4_7_payload                         ), //o
    .o_delta_wt_5_0_valid                (conv_o_delta_wt_5_0_valid                           ), //o
    .o_delta_wt_5_0_ready                (wdma_io_i_delta_wt_5_0_ready                        ), //i
    .o_delta_wt_5_0_payload              (conv_o_delta_wt_5_0_payload                         ), //o
    .o_delta_wt_5_1_valid                (conv_o_delta_wt_5_1_valid                           ), //o
    .o_delta_wt_5_1_ready                (wdma_io_i_delta_wt_5_1_ready                        ), //i
    .o_delta_wt_5_1_payload              (conv_o_delta_wt_5_1_payload                         ), //o
    .o_delta_wt_5_2_valid                (conv_o_delta_wt_5_2_valid                           ), //o
    .o_delta_wt_5_2_ready                (wdma_io_i_delta_wt_5_2_ready                        ), //i
    .o_delta_wt_5_2_payload              (conv_o_delta_wt_5_2_payload                         ), //o
    .o_delta_wt_5_3_valid                (conv_o_delta_wt_5_3_valid                           ), //o
    .o_delta_wt_5_3_ready                (wdma_io_i_delta_wt_5_3_ready                        ), //i
    .o_delta_wt_5_3_payload              (conv_o_delta_wt_5_3_payload                         ), //o
    .o_delta_wt_5_4_valid                (conv_o_delta_wt_5_4_valid                           ), //o
    .o_delta_wt_5_4_ready                (wdma_io_i_delta_wt_5_4_ready                        ), //i
    .o_delta_wt_5_4_payload              (conv_o_delta_wt_5_4_payload                         ), //o
    .o_delta_wt_5_5_valid                (conv_o_delta_wt_5_5_valid                           ), //o
    .o_delta_wt_5_5_ready                (wdma_io_i_delta_wt_5_5_ready                        ), //i
    .o_delta_wt_5_5_payload              (conv_o_delta_wt_5_5_payload                         ), //o
    .o_delta_wt_5_6_valid                (conv_o_delta_wt_5_6_valid                           ), //o
    .o_delta_wt_5_6_ready                (wdma_io_i_delta_wt_5_6_ready                        ), //i
    .o_delta_wt_5_6_payload              (conv_o_delta_wt_5_6_payload                         ), //o
    .o_delta_wt_5_7_valid                (conv_o_delta_wt_5_7_valid                           ), //o
    .o_delta_wt_5_7_ready                (wdma_io_i_delta_wt_5_7_ready                        ), //i
    .o_delta_wt_5_7_payload              (conv_o_delta_wt_5_7_payload                         ), //o
    .o_delta_wt_6_0_valid                (conv_o_delta_wt_6_0_valid                           ), //o
    .o_delta_wt_6_0_ready                (wdma_io_i_delta_wt_6_0_ready                        ), //i
    .o_delta_wt_6_0_payload              (conv_o_delta_wt_6_0_payload                         ), //o
    .o_delta_wt_6_1_valid                (conv_o_delta_wt_6_1_valid                           ), //o
    .o_delta_wt_6_1_ready                (wdma_io_i_delta_wt_6_1_ready                        ), //i
    .o_delta_wt_6_1_payload              (conv_o_delta_wt_6_1_payload                         ), //o
    .o_delta_wt_6_2_valid                (conv_o_delta_wt_6_2_valid                           ), //o
    .o_delta_wt_6_2_ready                (wdma_io_i_delta_wt_6_2_ready                        ), //i
    .o_delta_wt_6_2_payload              (conv_o_delta_wt_6_2_payload                         ), //o
    .o_delta_wt_6_3_valid                (conv_o_delta_wt_6_3_valid                           ), //o
    .o_delta_wt_6_3_ready                (wdma_io_i_delta_wt_6_3_ready                        ), //i
    .o_delta_wt_6_3_payload              (conv_o_delta_wt_6_3_payload                         ), //o
    .o_delta_wt_6_4_valid                (conv_o_delta_wt_6_4_valid                           ), //o
    .o_delta_wt_6_4_ready                (wdma_io_i_delta_wt_6_4_ready                        ), //i
    .o_delta_wt_6_4_payload              (conv_o_delta_wt_6_4_payload                         ), //o
    .o_delta_wt_6_5_valid                (conv_o_delta_wt_6_5_valid                           ), //o
    .o_delta_wt_6_5_ready                (wdma_io_i_delta_wt_6_5_ready                        ), //i
    .o_delta_wt_6_5_payload              (conv_o_delta_wt_6_5_payload                         ), //o
    .o_delta_wt_6_6_valid                (conv_o_delta_wt_6_6_valid                           ), //o
    .o_delta_wt_6_6_ready                (wdma_io_i_delta_wt_6_6_ready                        ), //i
    .o_delta_wt_6_6_payload              (conv_o_delta_wt_6_6_payload                         ), //o
    .o_delta_wt_6_7_valid                (conv_o_delta_wt_6_7_valid                           ), //o
    .o_delta_wt_6_7_ready                (wdma_io_i_delta_wt_6_7_ready                        ), //i
    .o_delta_wt_6_7_payload              (conv_o_delta_wt_6_7_payload                         ), //o
    .o_delta_wt_7_0_valid                (conv_o_delta_wt_7_0_valid                           ), //o
    .o_delta_wt_7_0_ready                (wdma_io_i_delta_wt_7_0_ready                        ), //i
    .o_delta_wt_7_0_payload              (conv_o_delta_wt_7_0_payload                         ), //o
    .o_delta_wt_7_1_valid                (conv_o_delta_wt_7_1_valid                           ), //o
    .o_delta_wt_7_1_ready                (wdma_io_i_delta_wt_7_1_ready                        ), //i
    .o_delta_wt_7_1_payload              (conv_o_delta_wt_7_1_payload                         ), //o
    .o_delta_wt_7_2_valid                (conv_o_delta_wt_7_2_valid                           ), //o
    .o_delta_wt_7_2_ready                (wdma_io_i_delta_wt_7_2_ready                        ), //i
    .o_delta_wt_7_2_payload              (conv_o_delta_wt_7_2_payload                         ), //o
    .o_delta_wt_7_3_valid                (conv_o_delta_wt_7_3_valid                           ), //o
    .o_delta_wt_7_3_ready                (wdma_io_i_delta_wt_7_3_ready                        ), //i
    .o_delta_wt_7_3_payload              (conv_o_delta_wt_7_3_payload                         ), //o
    .o_delta_wt_7_4_valid                (conv_o_delta_wt_7_4_valid                           ), //o
    .o_delta_wt_7_4_ready                (wdma_io_i_delta_wt_7_4_ready                        ), //i
    .o_delta_wt_7_4_payload              (conv_o_delta_wt_7_4_payload                         ), //o
    .o_delta_wt_7_5_valid                (conv_o_delta_wt_7_5_valid                           ), //o
    .o_delta_wt_7_5_ready                (wdma_io_i_delta_wt_7_5_ready                        ), //i
    .o_delta_wt_7_5_payload              (conv_o_delta_wt_7_5_payload                         ), //o
    .o_delta_wt_7_6_valid                (conv_o_delta_wt_7_6_valid                           ), //o
    .o_delta_wt_7_6_ready                (wdma_io_i_delta_wt_7_6_ready                        ), //i
    .o_delta_wt_7_6_payload              (conv_o_delta_wt_7_6_payload                         ), //o
    .o_delta_wt_7_7_valid                (conv_o_delta_wt_7_7_valid                           ), //o
    .o_delta_wt_7_7_ready                (wdma_io_i_delta_wt_7_7_ready                        ), //i
    .o_delta_wt_7_7_payload              (conv_o_delta_wt_7_7_payload                         ), //o
    .o_sigma_0_0_valid                   (conv_o_sigma_0_0_valid                              ), //o
    .o_sigma_0_0_ready                   (adder_io_in_0_0_ready                               ), //i
    .o_sigma_0_0_payload                 (conv_o_sigma_0_0_payload                            ), //o
    .o_sigma_0_1_valid                   (conv_o_sigma_0_1_valid                              ), //o
    .o_sigma_0_1_ready                   (adder_io_in_0_1_ready                               ), //i
    .o_sigma_0_1_payload                 (conv_o_sigma_0_1_payload                            ), //o
    .o_sigma_0_2_valid                   (conv_o_sigma_0_2_valid                              ), //o
    .o_sigma_0_2_ready                   (adder_io_in_0_2_ready                               ), //i
    .o_sigma_0_2_payload                 (conv_o_sigma_0_2_payload                            ), //o
    .o_sigma_0_3_valid                   (conv_o_sigma_0_3_valid                              ), //o
    .o_sigma_0_3_ready                   (adder_io_in_0_3_ready                               ), //i
    .o_sigma_0_3_payload                 (conv_o_sigma_0_3_payload                            ), //o
    .o_sigma_0_4_valid                   (conv_o_sigma_0_4_valid                              ), //o
    .o_sigma_0_4_ready                   (adder_io_in_0_4_ready                               ), //i
    .o_sigma_0_4_payload                 (conv_o_sigma_0_4_payload                            ), //o
    .o_sigma_0_5_valid                   (conv_o_sigma_0_5_valid                              ), //o
    .o_sigma_0_5_ready                   (adder_io_in_0_5_ready                               ), //i
    .o_sigma_0_5_payload                 (conv_o_sigma_0_5_payload                            ), //o
    .o_sigma_0_6_valid                   (conv_o_sigma_0_6_valid                              ), //o
    .o_sigma_0_6_ready                   (adder_io_in_0_6_ready                               ), //i
    .o_sigma_0_6_payload                 (conv_o_sigma_0_6_payload                            ), //o
    .o_sigma_0_7_valid                   (conv_o_sigma_0_7_valid                              ), //o
    .o_sigma_0_7_ready                   (adder_io_in_0_7_ready                               ), //i
    .o_sigma_0_7_payload                 (conv_o_sigma_0_7_payload                            ), //o
    .o_sigma_1_0_valid                   (conv_o_sigma_1_0_valid                              ), //o
    .o_sigma_1_0_ready                   (adder_io_in_1_0_ready                               ), //i
    .o_sigma_1_0_payload                 (conv_o_sigma_1_0_payload                            ), //o
    .o_sigma_1_1_valid                   (conv_o_sigma_1_1_valid                              ), //o
    .o_sigma_1_1_ready                   (adder_io_in_1_1_ready                               ), //i
    .o_sigma_1_1_payload                 (conv_o_sigma_1_1_payload                            ), //o
    .o_sigma_1_2_valid                   (conv_o_sigma_1_2_valid                              ), //o
    .o_sigma_1_2_ready                   (adder_io_in_1_2_ready                               ), //i
    .o_sigma_1_2_payload                 (conv_o_sigma_1_2_payload                            ), //o
    .o_sigma_1_3_valid                   (conv_o_sigma_1_3_valid                              ), //o
    .o_sigma_1_3_ready                   (adder_io_in_1_3_ready                               ), //i
    .o_sigma_1_3_payload                 (conv_o_sigma_1_3_payload                            ), //o
    .o_sigma_1_4_valid                   (conv_o_sigma_1_4_valid                              ), //o
    .o_sigma_1_4_ready                   (adder_io_in_1_4_ready                               ), //i
    .o_sigma_1_4_payload                 (conv_o_sigma_1_4_payload                            ), //o
    .o_sigma_1_5_valid                   (conv_o_sigma_1_5_valid                              ), //o
    .o_sigma_1_5_ready                   (adder_io_in_1_5_ready                               ), //i
    .o_sigma_1_5_payload                 (conv_o_sigma_1_5_payload                            ), //o
    .o_sigma_1_6_valid                   (conv_o_sigma_1_6_valid                              ), //o
    .o_sigma_1_6_ready                   (adder_io_in_1_6_ready                               ), //i
    .o_sigma_1_6_payload                 (conv_o_sigma_1_6_payload                            ), //o
    .o_sigma_1_7_valid                   (conv_o_sigma_1_7_valid                              ), //o
    .o_sigma_1_7_ready                   (adder_io_in_1_7_ready                               ), //i
    .o_sigma_1_7_payload                 (conv_o_sigma_1_7_payload                            ), //o
    .o_sigma_2_0_valid                   (conv_o_sigma_2_0_valid                              ), //o
    .o_sigma_2_0_ready                   (adder_io_in_2_0_ready                               ), //i
    .o_sigma_2_0_payload                 (conv_o_sigma_2_0_payload                            ), //o
    .o_sigma_2_1_valid                   (conv_o_sigma_2_1_valid                              ), //o
    .o_sigma_2_1_ready                   (adder_io_in_2_1_ready                               ), //i
    .o_sigma_2_1_payload                 (conv_o_sigma_2_1_payload                            ), //o
    .o_sigma_2_2_valid                   (conv_o_sigma_2_2_valid                              ), //o
    .o_sigma_2_2_ready                   (adder_io_in_2_2_ready                               ), //i
    .o_sigma_2_2_payload                 (conv_o_sigma_2_2_payload                            ), //o
    .o_sigma_2_3_valid                   (conv_o_sigma_2_3_valid                              ), //o
    .o_sigma_2_3_ready                   (adder_io_in_2_3_ready                               ), //i
    .o_sigma_2_3_payload                 (conv_o_sigma_2_3_payload                            ), //o
    .o_sigma_2_4_valid                   (conv_o_sigma_2_4_valid                              ), //o
    .o_sigma_2_4_ready                   (adder_io_in_2_4_ready                               ), //i
    .o_sigma_2_4_payload                 (conv_o_sigma_2_4_payload                            ), //o
    .o_sigma_2_5_valid                   (conv_o_sigma_2_5_valid                              ), //o
    .o_sigma_2_5_ready                   (adder_io_in_2_5_ready                               ), //i
    .o_sigma_2_5_payload                 (conv_o_sigma_2_5_payload                            ), //o
    .o_sigma_2_6_valid                   (conv_o_sigma_2_6_valid                              ), //o
    .o_sigma_2_6_ready                   (adder_io_in_2_6_ready                               ), //i
    .o_sigma_2_6_payload                 (conv_o_sigma_2_6_payload                            ), //o
    .o_sigma_2_7_valid                   (conv_o_sigma_2_7_valid                              ), //o
    .o_sigma_2_7_ready                   (adder_io_in_2_7_ready                               ), //i
    .o_sigma_2_7_payload                 (conv_o_sigma_2_7_payload                            ), //o
    .o_sigma_3_0_valid                   (conv_o_sigma_3_0_valid                              ), //o
    .o_sigma_3_0_ready                   (adder_io_in_3_0_ready                               ), //i
    .o_sigma_3_0_payload                 (conv_o_sigma_3_0_payload                            ), //o
    .o_sigma_3_1_valid                   (conv_o_sigma_3_1_valid                              ), //o
    .o_sigma_3_1_ready                   (adder_io_in_3_1_ready                               ), //i
    .o_sigma_3_1_payload                 (conv_o_sigma_3_1_payload                            ), //o
    .o_sigma_3_2_valid                   (conv_o_sigma_3_2_valid                              ), //o
    .o_sigma_3_2_ready                   (adder_io_in_3_2_ready                               ), //i
    .o_sigma_3_2_payload                 (conv_o_sigma_3_2_payload                            ), //o
    .o_sigma_3_3_valid                   (conv_o_sigma_3_3_valid                              ), //o
    .o_sigma_3_3_ready                   (adder_io_in_3_3_ready                               ), //i
    .o_sigma_3_3_payload                 (conv_o_sigma_3_3_payload                            ), //o
    .o_sigma_3_4_valid                   (conv_o_sigma_3_4_valid                              ), //o
    .o_sigma_3_4_ready                   (adder_io_in_3_4_ready                               ), //i
    .o_sigma_3_4_payload                 (conv_o_sigma_3_4_payload                            ), //o
    .o_sigma_3_5_valid                   (conv_o_sigma_3_5_valid                              ), //o
    .o_sigma_3_5_ready                   (adder_io_in_3_5_ready                               ), //i
    .o_sigma_3_5_payload                 (conv_o_sigma_3_5_payload                            ), //o
    .o_sigma_3_6_valid                   (conv_o_sigma_3_6_valid                              ), //o
    .o_sigma_3_6_ready                   (adder_io_in_3_6_ready                               ), //i
    .o_sigma_3_6_payload                 (conv_o_sigma_3_6_payload                            ), //o
    .o_sigma_3_7_valid                   (conv_o_sigma_3_7_valid                              ), //o
    .o_sigma_3_7_ready                   (adder_io_in_3_7_ready                               ), //i
    .o_sigma_3_7_payload                 (conv_o_sigma_3_7_payload                            ), //o
    .o_sigma_4_0_valid                   (conv_o_sigma_4_0_valid                              ), //o
    .o_sigma_4_0_ready                   (adder_io_in_4_0_ready                               ), //i
    .o_sigma_4_0_payload                 (conv_o_sigma_4_0_payload                            ), //o
    .o_sigma_4_1_valid                   (conv_o_sigma_4_1_valid                              ), //o
    .o_sigma_4_1_ready                   (adder_io_in_4_1_ready                               ), //i
    .o_sigma_4_1_payload                 (conv_o_sigma_4_1_payload                            ), //o
    .o_sigma_4_2_valid                   (conv_o_sigma_4_2_valid                              ), //o
    .o_sigma_4_2_ready                   (adder_io_in_4_2_ready                               ), //i
    .o_sigma_4_2_payload                 (conv_o_sigma_4_2_payload                            ), //o
    .o_sigma_4_3_valid                   (conv_o_sigma_4_3_valid                              ), //o
    .o_sigma_4_3_ready                   (adder_io_in_4_3_ready                               ), //i
    .o_sigma_4_3_payload                 (conv_o_sigma_4_3_payload                            ), //o
    .o_sigma_4_4_valid                   (conv_o_sigma_4_4_valid                              ), //o
    .o_sigma_4_4_ready                   (adder_io_in_4_4_ready                               ), //i
    .o_sigma_4_4_payload                 (conv_o_sigma_4_4_payload                            ), //o
    .o_sigma_4_5_valid                   (conv_o_sigma_4_5_valid                              ), //o
    .o_sigma_4_5_ready                   (adder_io_in_4_5_ready                               ), //i
    .o_sigma_4_5_payload                 (conv_o_sigma_4_5_payload                            ), //o
    .o_sigma_4_6_valid                   (conv_o_sigma_4_6_valid                              ), //o
    .o_sigma_4_6_ready                   (adder_io_in_4_6_ready                               ), //i
    .o_sigma_4_6_payload                 (conv_o_sigma_4_6_payload                            ), //o
    .o_sigma_4_7_valid                   (conv_o_sigma_4_7_valid                              ), //o
    .o_sigma_4_7_ready                   (adder_io_in_4_7_ready                               ), //i
    .o_sigma_4_7_payload                 (conv_o_sigma_4_7_payload                            ), //o
    .o_sigma_5_0_valid                   (conv_o_sigma_5_0_valid                              ), //o
    .o_sigma_5_0_ready                   (adder_io_in_5_0_ready                               ), //i
    .o_sigma_5_0_payload                 (conv_o_sigma_5_0_payload                            ), //o
    .o_sigma_5_1_valid                   (conv_o_sigma_5_1_valid                              ), //o
    .o_sigma_5_1_ready                   (adder_io_in_5_1_ready                               ), //i
    .o_sigma_5_1_payload                 (conv_o_sigma_5_1_payload                            ), //o
    .o_sigma_5_2_valid                   (conv_o_sigma_5_2_valid                              ), //o
    .o_sigma_5_2_ready                   (adder_io_in_5_2_ready                               ), //i
    .o_sigma_5_2_payload                 (conv_o_sigma_5_2_payload                            ), //o
    .o_sigma_5_3_valid                   (conv_o_sigma_5_3_valid                              ), //o
    .o_sigma_5_3_ready                   (adder_io_in_5_3_ready                               ), //i
    .o_sigma_5_3_payload                 (conv_o_sigma_5_3_payload                            ), //o
    .o_sigma_5_4_valid                   (conv_o_sigma_5_4_valid                              ), //o
    .o_sigma_5_4_ready                   (adder_io_in_5_4_ready                               ), //i
    .o_sigma_5_4_payload                 (conv_o_sigma_5_4_payload                            ), //o
    .o_sigma_5_5_valid                   (conv_o_sigma_5_5_valid                              ), //o
    .o_sigma_5_5_ready                   (adder_io_in_5_5_ready                               ), //i
    .o_sigma_5_5_payload                 (conv_o_sigma_5_5_payload                            ), //o
    .o_sigma_5_6_valid                   (conv_o_sigma_5_6_valid                              ), //o
    .o_sigma_5_6_ready                   (adder_io_in_5_6_ready                               ), //i
    .o_sigma_5_6_payload                 (conv_o_sigma_5_6_payload                            ), //o
    .o_sigma_5_7_valid                   (conv_o_sigma_5_7_valid                              ), //o
    .o_sigma_5_7_ready                   (adder_io_in_5_7_ready                               ), //i
    .o_sigma_5_7_payload                 (conv_o_sigma_5_7_payload                            ), //o
    .o_sigma_6_0_valid                   (conv_o_sigma_6_0_valid                              ), //o
    .o_sigma_6_0_ready                   (adder_io_in_6_0_ready                               ), //i
    .o_sigma_6_0_payload                 (conv_o_sigma_6_0_payload                            ), //o
    .o_sigma_6_1_valid                   (conv_o_sigma_6_1_valid                              ), //o
    .o_sigma_6_1_ready                   (adder_io_in_6_1_ready                               ), //i
    .o_sigma_6_1_payload                 (conv_o_sigma_6_1_payload                            ), //o
    .o_sigma_6_2_valid                   (conv_o_sigma_6_2_valid                              ), //o
    .o_sigma_6_2_ready                   (adder_io_in_6_2_ready                               ), //i
    .o_sigma_6_2_payload                 (conv_o_sigma_6_2_payload                            ), //o
    .o_sigma_6_3_valid                   (conv_o_sigma_6_3_valid                              ), //o
    .o_sigma_6_3_ready                   (adder_io_in_6_3_ready                               ), //i
    .o_sigma_6_3_payload                 (conv_o_sigma_6_3_payload                            ), //o
    .o_sigma_6_4_valid                   (conv_o_sigma_6_4_valid                              ), //o
    .o_sigma_6_4_ready                   (adder_io_in_6_4_ready                               ), //i
    .o_sigma_6_4_payload                 (conv_o_sigma_6_4_payload                            ), //o
    .o_sigma_6_5_valid                   (conv_o_sigma_6_5_valid                              ), //o
    .o_sigma_6_5_ready                   (adder_io_in_6_5_ready                               ), //i
    .o_sigma_6_5_payload                 (conv_o_sigma_6_5_payload                            ), //o
    .o_sigma_6_6_valid                   (conv_o_sigma_6_6_valid                              ), //o
    .o_sigma_6_6_ready                   (adder_io_in_6_6_ready                               ), //i
    .o_sigma_6_6_payload                 (conv_o_sigma_6_6_payload                            ), //o
    .o_sigma_6_7_valid                   (conv_o_sigma_6_7_valid                              ), //o
    .o_sigma_6_7_ready                   (adder_io_in_6_7_ready                               ), //i
    .o_sigma_6_7_payload                 (conv_o_sigma_6_7_payload                            ), //o
    .o_sigma_7_0_valid                   (conv_o_sigma_7_0_valid                              ), //o
    .o_sigma_7_0_ready                   (adder_io_in_7_0_ready                               ), //i
    .o_sigma_7_0_payload                 (conv_o_sigma_7_0_payload                            ), //o
    .o_sigma_7_1_valid                   (conv_o_sigma_7_1_valid                              ), //o
    .o_sigma_7_1_ready                   (adder_io_in_7_1_ready                               ), //i
    .o_sigma_7_1_payload                 (conv_o_sigma_7_1_payload                            ), //o
    .o_sigma_7_2_valid                   (conv_o_sigma_7_2_valid                              ), //o
    .o_sigma_7_2_ready                   (adder_io_in_7_2_ready                               ), //i
    .o_sigma_7_2_payload                 (conv_o_sigma_7_2_payload                            ), //o
    .o_sigma_7_3_valid                   (conv_o_sigma_7_3_valid                              ), //o
    .o_sigma_7_3_ready                   (adder_io_in_7_3_ready                               ), //i
    .o_sigma_7_3_payload                 (conv_o_sigma_7_3_payload                            ), //o
    .o_sigma_7_4_valid                   (conv_o_sigma_7_4_valid                              ), //o
    .o_sigma_7_4_ready                   (adder_io_in_7_4_ready                               ), //i
    .o_sigma_7_4_payload                 (conv_o_sigma_7_4_payload                            ), //o
    .o_sigma_7_5_valid                   (conv_o_sigma_7_5_valid                              ), //o
    .o_sigma_7_5_ready                   (adder_io_in_7_5_ready                               ), //i
    .o_sigma_7_5_payload                 (conv_o_sigma_7_5_payload                            ), //o
    .o_sigma_7_6_valid                   (conv_o_sigma_7_6_valid                              ), //o
    .o_sigma_7_6_ready                   (adder_io_in_7_6_ready                               ), //i
    .o_sigma_7_6_payload                 (conv_o_sigma_7_6_payload                            ), //o
    .o_sigma_7_7_valid                   (conv_o_sigma_7_7_valid                              ), //o
    .o_sigma_7_7_ready                   (adder_io_in_7_7_ready                               ), //i
    .o_sigma_7_7_payload                 (conv_o_sigma_7_7_payload                            ), //o
    .clk                                 (clk                                                 ), //i
    .reset                               (reset                                               )  //i
  );
  array_adder adder (
    .io_in_0_0_valid      (conv_o_sigma_0_0_valid    ), //i
    .io_in_0_0_ready      (adder_io_in_0_0_ready     ), //o
    .io_in_0_0_payload    (conv_o_sigma_0_0_payload  ), //i
    .io_in_0_1_valid      (conv_o_sigma_0_1_valid    ), //i
    .io_in_0_1_ready      (adder_io_in_0_1_ready     ), //o
    .io_in_0_1_payload    (conv_o_sigma_0_1_payload  ), //i
    .io_in_0_2_valid      (conv_o_sigma_0_2_valid    ), //i
    .io_in_0_2_ready      (adder_io_in_0_2_ready     ), //o
    .io_in_0_2_payload    (conv_o_sigma_0_2_payload  ), //i
    .io_in_0_3_valid      (conv_o_sigma_0_3_valid    ), //i
    .io_in_0_3_ready      (adder_io_in_0_3_ready     ), //o
    .io_in_0_3_payload    (conv_o_sigma_0_3_payload  ), //i
    .io_in_0_4_valid      (conv_o_sigma_0_4_valid    ), //i
    .io_in_0_4_ready      (adder_io_in_0_4_ready     ), //o
    .io_in_0_4_payload    (conv_o_sigma_0_4_payload  ), //i
    .io_in_0_5_valid      (conv_o_sigma_0_5_valid    ), //i
    .io_in_0_5_ready      (adder_io_in_0_5_ready     ), //o
    .io_in_0_5_payload    (conv_o_sigma_0_5_payload  ), //i
    .io_in_0_6_valid      (conv_o_sigma_0_6_valid    ), //i
    .io_in_0_6_ready      (adder_io_in_0_6_ready     ), //o
    .io_in_0_6_payload    (conv_o_sigma_0_6_payload  ), //i
    .io_in_0_7_valid      (conv_o_sigma_0_7_valid    ), //i
    .io_in_0_7_ready      (adder_io_in_0_7_ready     ), //o
    .io_in_0_7_payload    (conv_o_sigma_0_7_payload  ), //i
    .io_in_1_0_valid      (conv_o_sigma_1_0_valid    ), //i
    .io_in_1_0_ready      (adder_io_in_1_0_ready     ), //o
    .io_in_1_0_payload    (conv_o_sigma_1_0_payload  ), //i
    .io_in_1_1_valid      (conv_o_sigma_1_1_valid    ), //i
    .io_in_1_1_ready      (adder_io_in_1_1_ready     ), //o
    .io_in_1_1_payload    (conv_o_sigma_1_1_payload  ), //i
    .io_in_1_2_valid      (conv_o_sigma_1_2_valid    ), //i
    .io_in_1_2_ready      (adder_io_in_1_2_ready     ), //o
    .io_in_1_2_payload    (conv_o_sigma_1_2_payload  ), //i
    .io_in_1_3_valid      (conv_o_sigma_1_3_valid    ), //i
    .io_in_1_3_ready      (adder_io_in_1_3_ready     ), //o
    .io_in_1_3_payload    (conv_o_sigma_1_3_payload  ), //i
    .io_in_1_4_valid      (conv_o_sigma_1_4_valid    ), //i
    .io_in_1_4_ready      (adder_io_in_1_4_ready     ), //o
    .io_in_1_4_payload    (conv_o_sigma_1_4_payload  ), //i
    .io_in_1_5_valid      (conv_o_sigma_1_5_valid    ), //i
    .io_in_1_5_ready      (adder_io_in_1_5_ready     ), //o
    .io_in_1_5_payload    (conv_o_sigma_1_5_payload  ), //i
    .io_in_1_6_valid      (conv_o_sigma_1_6_valid    ), //i
    .io_in_1_6_ready      (adder_io_in_1_6_ready     ), //o
    .io_in_1_6_payload    (conv_o_sigma_1_6_payload  ), //i
    .io_in_1_7_valid      (conv_o_sigma_1_7_valid    ), //i
    .io_in_1_7_ready      (adder_io_in_1_7_ready     ), //o
    .io_in_1_7_payload    (conv_o_sigma_1_7_payload  ), //i
    .io_in_2_0_valid      (conv_o_sigma_2_0_valid    ), //i
    .io_in_2_0_ready      (adder_io_in_2_0_ready     ), //o
    .io_in_2_0_payload    (conv_o_sigma_2_0_payload  ), //i
    .io_in_2_1_valid      (conv_o_sigma_2_1_valid    ), //i
    .io_in_2_1_ready      (adder_io_in_2_1_ready     ), //o
    .io_in_2_1_payload    (conv_o_sigma_2_1_payload  ), //i
    .io_in_2_2_valid      (conv_o_sigma_2_2_valid    ), //i
    .io_in_2_2_ready      (adder_io_in_2_2_ready     ), //o
    .io_in_2_2_payload    (conv_o_sigma_2_2_payload  ), //i
    .io_in_2_3_valid      (conv_o_sigma_2_3_valid    ), //i
    .io_in_2_3_ready      (adder_io_in_2_3_ready     ), //o
    .io_in_2_3_payload    (conv_o_sigma_2_3_payload  ), //i
    .io_in_2_4_valid      (conv_o_sigma_2_4_valid    ), //i
    .io_in_2_4_ready      (adder_io_in_2_4_ready     ), //o
    .io_in_2_4_payload    (conv_o_sigma_2_4_payload  ), //i
    .io_in_2_5_valid      (conv_o_sigma_2_5_valid    ), //i
    .io_in_2_5_ready      (adder_io_in_2_5_ready     ), //o
    .io_in_2_5_payload    (conv_o_sigma_2_5_payload  ), //i
    .io_in_2_6_valid      (conv_o_sigma_2_6_valid    ), //i
    .io_in_2_6_ready      (adder_io_in_2_6_ready     ), //o
    .io_in_2_6_payload    (conv_o_sigma_2_6_payload  ), //i
    .io_in_2_7_valid      (conv_o_sigma_2_7_valid    ), //i
    .io_in_2_7_ready      (adder_io_in_2_7_ready     ), //o
    .io_in_2_7_payload    (conv_o_sigma_2_7_payload  ), //i
    .io_in_3_0_valid      (conv_o_sigma_3_0_valid    ), //i
    .io_in_3_0_ready      (adder_io_in_3_0_ready     ), //o
    .io_in_3_0_payload    (conv_o_sigma_3_0_payload  ), //i
    .io_in_3_1_valid      (conv_o_sigma_3_1_valid    ), //i
    .io_in_3_1_ready      (adder_io_in_3_1_ready     ), //o
    .io_in_3_1_payload    (conv_o_sigma_3_1_payload  ), //i
    .io_in_3_2_valid      (conv_o_sigma_3_2_valid    ), //i
    .io_in_3_2_ready      (adder_io_in_3_2_ready     ), //o
    .io_in_3_2_payload    (conv_o_sigma_3_2_payload  ), //i
    .io_in_3_3_valid      (conv_o_sigma_3_3_valid    ), //i
    .io_in_3_3_ready      (adder_io_in_3_3_ready     ), //o
    .io_in_3_3_payload    (conv_o_sigma_3_3_payload  ), //i
    .io_in_3_4_valid      (conv_o_sigma_3_4_valid    ), //i
    .io_in_3_4_ready      (adder_io_in_3_4_ready     ), //o
    .io_in_3_4_payload    (conv_o_sigma_3_4_payload  ), //i
    .io_in_3_5_valid      (conv_o_sigma_3_5_valid    ), //i
    .io_in_3_5_ready      (adder_io_in_3_5_ready     ), //o
    .io_in_3_5_payload    (conv_o_sigma_3_5_payload  ), //i
    .io_in_3_6_valid      (conv_o_sigma_3_6_valid    ), //i
    .io_in_3_6_ready      (adder_io_in_3_6_ready     ), //o
    .io_in_3_6_payload    (conv_o_sigma_3_6_payload  ), //i
    .io_in_3_7_valid      (conv_o_sigma_3_7_valid    ), //i
    .io_in_3_7_ready      (adder_io_in_3_7_ready     ), //o
    .io_in_3_7_payload    (conv_o_sigma_3_7_payload  ), //i
    .io_in_4_0_valid      (conv_o_sigma_4_0_valid    ), //i
    .io_in_4_0_ready      (adder_io_in_4_0_ready     ), //o
    .io_in_4_0_payload    (conv_o_sigma_4_0_payload  ), //i
    .io_in_4_1_valid      (conv_o_sigma_4_1_valid    ), //i
    .io_in_4_1_ready      (adder_io_in_4_1_ready     ), //o
    .io_in_4_1_payload    (conv_o_sigma_4_1_payload  ), //i
    .io_in_4_2_valid      (conv_o_sigma_4_2_valid    ), //i
    .io_in_4_2_ready      (adder_io_in_4_2_ready     ), //o
    .io_in_4_2_payload    (conv_o_sigma_4_2_payload  ), //i
    .io_in_4_3_valid      (conv_o_sigma_4_3_valid    ), //i
    .io_in_4_3_ready      (adder_io_in_4_3_ready     ), //o
    .io_in_4_3_payload    (conv_o_sigma_4_3_payload  ), //i
    .io_in_4_4_valid      (conv_o_sigma_4_4_valid    ), //i
    .io_in_4_4_ready      (adder_io_in_4_4_ready     ), //o
    .io_in_4_4_payload    (conv_o_sigma_4_4_payload  ), //i
    .io_in_4_5_valid      (conv_o_sigma_4_5_valid    ), //i
    .io_in_4_5_ready      (adder_io_in_4_5_ready     ), //o
    .io_in_4_5_payload    (conv_o_sigma_4_5_payload  ), //i
    .io_in_4_6_valid      (conv_o_sigma_4_6_valid    ), //i
    .io_in_4_6_ready      (adder_io_in_4_6_ready     ), //o
    .io_in_4_6_payload    (conv_o_sigma_4_6_payload  ), //i
    .io_in_4_7_valid      (conv_o_sigma_4_7_valid    ), //i
    .io_in_4_7_ready      (adder_io_in_4_7_ready     ), //o
    .io_in_4_7_payload    (conv_o_sigma_4_7_payload  ), //i
    .io_in_5_0_valid      (conv_o_sigma_5_0_valid    ), //i
    .io_in_5_0_ready      (adder_io_in_5_0_ready     ), //o
    .io_in_5_0_payload    (conv_o_sigma_5_0_payload  ), //i
    .io_in_5_1_valid      (conv_o_sigma_5_1_valid    ), //i
    .io_in_5_1_ready      (adder_io_in_5_1_ready     ), //o
    .io_in_5_1_payload    (conv_o_sigma_5_1_payload  ), //i
    .io_in_5_2_valid      (conv_o_sigma_5_2_valid    ), //i
    .io_in_5_2_ready      (adder_io_in_5_2_ready     ), //o
    .io_in_5_2_payload    (conv_o_sigma_5_2_payload  ), //i
    .io_in_5_3_valid      (conv_o_sigma_5_3_valid    ), //i
    .io_in_5_3_ready      (adder_io_in_5_3_ready     ), //o
    .io_in_5_3_payload    (conv_o_sigma_5_3_payload  ), //i
    .io_in_5_4_valid      (conv_o_sigma_5_4_valid    ), //i
    .io_in_5_4_ready      (adder_io_in_5_4_ready     ), //o
    .io_in_5_4_payload    (conv_o_sigma_5_4_payload  ), //i
    .io_in_5_5_valid      (conv_o_sigma_5_5_valid    ), //i
    .io_in_5_5_ready      (adder_io_in_5_5_ready     ), //o
    .io_in_5_5_payload    (conv_o_sigma_5_5_payload  ), //i
    .io_in_5_6_valid      (conv_o_sigma_5_6_valid    ), //i
    .io_in_5_6_ready      (adder_io_in_5_6_ready     ), //o
    .io_in_5_6_payload    (conv_o_sigma_5_6_payload  ), //i
    .io_in_5_7_valid      (conv_o_sigma_5_7_valid    ), //i
    .io_in_5_7_ready      (adder_io_in_5_7_ready     ), //o
    .io_in_5_7_payload    (conv_o_sigma_5_7_payload  ), //i
    .io_in_6_0_valid      (conv_o_sigma_6_0_valid    ), //i
    .io_in_6_0_ready      (adder_io_in_6_0_ready     ), //o
    .io_in_6_0_payload    (conv_o_sigma_6_0_payload  ), //i
    .io_in_6_1_valid      (conv_o_sigma_6_1_valid    ), //i
    .io_in_6_1_ready      (adder_io_in_6_1_ready     ), //o
    .io_in_6_1_payload    (conv_o_sigma_6_1_payload  ), //i
    .io_in_6_2_valid      (conv_o_sigma_6_2_valid    ), //i
    .io_in_6_2_ready      (adder_io_in_6_2_ready     ), //o
    .io_in_6_2_payload    (conv_o_sigma_6_2_payload  ), //i
    .io_in_6_3_valid      (conv_o_sigma_6_3_valid    ), //i
    .io_in_6_3_ready      (adder_io_in_6_3_ready     ), //o
    .io_in_6_3_payload    (conv_o_sigma_6_3_payload  ), //i
    .io_in_6_4_valid      (conv_o_sigma_6_4_valid    ), //i
    .io_in_6_4_ready      (adder_io_in_6_4_ready     ), //o
    .io_in_6_4_payload    (conv_o_sigma_6_4_payload  ), //i
    .io_in_6_5_valid      (conv_o_sigma_6_5_valid    ), //i
    .io_in_6_5_ready      (adder_io_in_6_5_ready     ), //o
    .io_in_6_5_payload    (conv_o_sigma_6_5_payload  ), //i
    .io_in_6_6_valid      (conv_o_sigma_6_6_valid    ), //i
    .io_in_6_6_ready      (adder_io_in_6_6_ready     ), //o
    .io_in_6_6_payload    (conv_o_sigma_6_6_payload  ), //i
    .io_in_6_7_valid      (conv_o_sigma_6_7_valid    ), //i
    .io_in_6_7_ready      (adder_io_in_6_7_ready     ), //o
    .io_in_6_7_payload    (conv_o_sigma_6_7_payload  ), //i
    .io_in_7_0_valid      (conv_o_sigma_7_0_valid    ), //i
    .io_in_7_0_ready      (adder_io_in_7_0_ready     ), //o
    .io_in_7_0_payload    (conv_o_sigma_7_0_payload  ), //i
    .io_in_7_1_valid      (conv_o_sigma_7_1_valid    ), //i
    .io_in_7_1_ready      (adder_io_in_7_1_ready     ), //o
    .io_in_7_1_payload    (conv_o_sigma_7_1_payload  ), //i
    .io_in_7_2_valid      (conv_o_sigma_7_2_valid    ), //i
    .io_in_7_2_ready      (adder_io_in_7_2_ready     ), //o
    .io_in_7_2_payload    (conv_o_sigma_7_2_payload  ), //i
    .io_in_7_3_valid      (conv_o_sigma_7_3_valid    ), //i
    .io_in_7_3_ready      (adder_io_in_7_3_ready     ), //o
    .io_in_7_3_payload    (conv_o_sigma_7_3_payload  ), //i
    .io_in_7_4_valid      (conv_o_sigma_7_4_valid    ), //i
    .io_in_7_4_ready      (adder_io_in_7_4_ready     ), //o
    .io_in_7_4_payload    (conv_o_sigma_7_4_payload  ), //i
    .io_in_7_5_valid      (conv_o_sigma_7_5_valid    ), //i
    .io_in_7_5_ready      (adder_io_in_7_5_ready     ), //o
    .io_in_7_5_payload    (conv_o_sigma_7_5_payload  ), //i
    .io_in_7_6_valid      (conv_o_sigma_7_6_valid    ), //i
    .io_in_7_6_ready      (adder_io_in_7_6_ready     ), //o
    .io_in_7_6_payload    (conv_o_sigma_7_6_payload  ), //i
    .io_in_7_7_valid      (conv_o_sigma_7_7_valid    ), //i
    .io_in_7_7_ready      (adder_io_in_7_7_ready     ), //o
    .io_in_7_7_payload    (conv_o_sigma_7_7_payload  ), //i
    .io_out_0_valid       (adder_io_out_0_valid      ), //o
    .io_out_0_ready       (wdma_io_i_sigma_0_ready   ), //i
    .io_out_0_payload     (adder_io_out_0_payload    ), //o
    .io_out_1_valid       (adder_io_out_1_valid      ), //o
    .io_out_1_ready       (wdma_io_i_sigma_1_ready   ), //i
    .io_out_1_payload     (adder_io_out_1_payload    ), //o
    .io_out_2_valid       (adder_io_out_2_valid      ), //o
    .io_out_2_ready       (wdma_io_i_sigma_2_ready   ), //i
    .io_out_2_payload     (adder_io_out_2_payload    ), //o
    .io_out_3_valid       (adder_io_out_3_valid      ), //o
    .io_out_3_ready       (wdma_io_i_sigma_3_ready   ), //i
    .io_out_3_payload     (adder_io_out_3_payload    ), //o
    .io_out_4_valid       (adder_io_out_4_valid      ), //o
    .io_out_4_ready       (wdma_io_i_sigma_4_ready   ), //i
    .io_out_4_payload     (adder_io_out_4_payload    ), //o
    .io_out_5_valid       (adder_io_out_5_valid      ), //o
    .io_out_5_ready       (wdma_io_i_sigma_5_ready   ), //i
    .io_out_5_payload     (adder_io_out_5_payload    ), //o
    .io_out_6_valid       (adder_io_out_6_valid      ), //o
    .io_out_6_ready       (wdma_io_i_sigma_6_ready   ), //i
    .io_out_6_payload     (adder_io_out_6_payload    ), //o
    .io_out_7_valid       (adder_io_out_7_valid      ), //o
    .io_out_7_ready       (wdma_io_i_sigma_7_ready   ), //i
    .io_out_7_payload     (adder_io_out_7_payload    ), //o
    .clk                  (clk                       )  //i
  );
  config_top cfg (
    .io_apb_PADDR                                      (io_apb_PADDR                                        ), //i
    .io_apb_PSEL                                       (io_apb_PSEL                                         ), //i
    .io_apb_PENABLE                                    (io_apb_PENABLE                                      ), //i
    .io_apb_PREADY                                     (cfg_io_apb_PREADY                                   ), //o
    .io_apb_PWRITE                                     (io_apb_PWRITE                                       ), //i
    .io_apb_PWDATA                                     (io_apb_PWDATA                                       ), //i
    .io_apb_PRDATA                                     (cfg_io_apb_PRDATA                                   ), //o
    .io_apb_PSLVERROR                                  (cfg_io_apb_PSLVERROR                                ), //o
    .io_rdma_glb_param_valid                           (cfg_io_rdma_glb_param_valid                         ), //o
    .io_rdma_glb_param_ready                           (rdma_cfg_ready                                      ), //i
    .io_rdma_glb_param_payload_rd_dtBaseAddr           (cfg_io_rdma_glb_param_payload_rd_dtBaseAddr         ), //o
    .io_rdma_glb_param_payload_rd_wtBaseAddr           (cfg_io_rdma_glb_param_payload_rd_wtBaseAddr         ), //o
    .io_rdma_glb_param_payload_wr_delta_wt_BaseAddr    (cfg_io_rdma_glb_param_payload_wr_delta_wt_BaseAddr  ), //o
    .io_rdma_glb_param_payload_wr_sigma_BaseAddr       (cfg_io_rdma_glb_param_payload_wr_sigma_BaseAddr     ), //o
    .io_rdma_glb_param_payload_dtWidth                 (cfg_io_rdma_glb_param_payload_dtWidth               ), //o
    .io_rdma_glb_param_payload_dtHeight                (cfg_io_rdma_glb_param_payload_dtHeight              ), //o
    .io_rdma_glb_param_payload_wtWidth                 (cfg_io_rdma_glb_param_payload_wtWidth               ), //o
    .io_rdma_glb_param_payload_wtHeight                (cfg_io_rdma_glb_param_payload_wtHeight              ), //o
    .io_rdma_glb_param_payload_oWidth                  (cfg_io_rdma_glb_param_payload_oWidth                ), //o
    .io_rdma_glb_param_payload_oHeight                 (cfg_io_rdma_glb_param_payload_oHeight               ), //o
    .io_wdma_glb_param_valid                           (cfg_io_wdma_glb_param_valid                         ), //o
    .io_wdma_glb_param_ready                           (wdma_io_cfg_ready                                   ), //i
    .io_wdma_glb_param_payload_rd_dtBaseAddr           (cfg_io_wdma_glb_param_payload_rd_dtBaseAddr         ), //o
    .io_wdma_glb_param_payload_rd_wtBaseAddr           (cfg_io_wdma_glb_param_payload_rd_wtBaseAddr         ), //o
    .io_wdma_glb_param_payload_wr_delta_wt_BaseAddr    (cfg_io_wdma_glb_param_payload_wr_delta_wt_BaseAddr  ), //o
    .io_wdma_glb_param_payload_wr_sigma_BaseAddr       (cfg_io_wdma_glb_param_payload_wr_sigma_BaseAddr     ), //o
    .io_wdma_glb_param_payload_dtWidth                 (cfg_io_wdma_glb_param_payload_dtWidth               ), //o
    .io_wdma_glb_param_payload_dtHeight                (cfg_io_wdma_glb_param_payload_dtHeight              ), //o
    .io_wdma_glb_param_payload_wtWidth                 (cfg_io_wdma_glb_param_payload_wtWidth               ), //o
    .io_wdma_glb_param_payload_wtHeight                (cfg_io_wdma_glb_param_payload_wtHeight              ), //o
    .io_wdma_glb_param_payload_oWidth                  (cfg_io_wdma_glb_param_payload_oWidth                ), //o
    .io_wdma_glb_param_payload_oHeight                 (cfg_io_wdma_glb_param_payload_oHeight               ), //o
    .io_conv_glb_param_valid                           (cfg_io_conv_glb_param_valid                         ), //o
    .io_conv_glb_param_ready                           (conv_cfg_ready                                      ), //i
    .io_conv_glb_param_payload_rd_dtBaseAddr           (cfg_io_conv_glb_param_payload_rd_dtBaseAddr         ), //o
    .io_conv_glb_param_payload_rd_wtBaseAddr           (cfg_io_conv_glb_param_payload_rd_wtBaseAddr         ), //o
    .io_conv_glb_param_payload_wr_delta_wt_BaseAddr    (cfg_io_conv_glb_param_payload_wr_delta_wt_BaseAddr  ), //o
    .io_conv_glb_param_payload_wr_sigma_BaseAddr       (cfg_io_conv_glb_param_payload_wr_sigma_BaseAddr     ), //o
    .io_conv_glb_param_payload_dtWidth                 (cfg_io_conv_glb_param_payload_dtWidth               ), //o
    .io_conv_glb_param_payload_dtHeight                (cfg_io_conv_glb_param_payload_dtHeight              ), //o
    .io_conv_glb_param_payload_wtWidth                 (cfg_io_conv_glb_param_payload_wtWidth               ), //o
    .io_conv_glb_param_payload_wtHeight                (cfg_io_conv_glb_param_payload_wtHeight              ), //o
    .io_conv_glb_param_payload_oWidth                  (cfg_io_conv_glb_param_payload_oWidth                ), //o
    .io_conv_glb_param_payload_oHeight                 (cfg_io_conv_glb_param_payload_oHeight               ), //o
    .io_glb_enable                                     (cfg_io_glb_enable                                   ), //o
    .io_is_delta_wt                                    (cfg_io_is_delta_wt                                  ), //o
    .clk                                               (clk                                                 ), //i
    .reset                                             (reset                                               )  //i
  );
  assign io_axim_r_ar_valid = rdma_axim_ar_valid;
  assign io_axim_r_ar_payload_addr = rdma_axim_ar_payload_addr;
  assign io_axim_r_ar_payload_id = rdma_axim_ar_payload_id;
  assign io_axim_r_ar_payload_len = rdma_axim_ar_payload_len;
  assign io_axim_r_ar_payload_size = rdma_axim_ar_payload_size;
  assign io_axim_r_ar_payload_burst = rdma_axim_ar_payload_burst;
  assign io_axim_r_r_ready = rdma_axim_r_ready;
  assign io_axim_w_aw_valid = wdma_io_axim_aw_valid;
  assign io_axim_w_aw_payload_addr = wdma_io_axim_aw_payload_addr;
  assign io_axim_w_aw_payload_id = wdma_io_axim_aw_payload_id;
  assign io_axim_w_aw_payload_len = wdma_io_axim_aw_payload_len;
  assign io_axim_w_aw_payload_size = wdma_io_axim_aw_payload_size;
  assign io_axim_w_aw_payload_burst = wdma_io_axim_aw_payload_burst;
  assign io_axim_w_w_valid = wdma_io_axim_w_valid;
  assign io_axim_w_w_payload_data = wdma_io_axim_w_payload_data;
  assign io_axim_w_w_payload_strb = wdma_io_axim_w_payload_strb;
  assign io_axim_w_w_payload_last = wdma_io_axim_w_payload_last;
  assign io_axim_w_b_ready = wdma_io_axim_b_ready;
  assign io_apb_PREADY = cfg_io_apb_PREADY;
  assign io_apb_PRDATA = cfg_io_apb_PRDATA;
  assign io_apb_PSLVERROR = cfg_io_apb_PSLVERROR;
  assign io_interruper = 1'b0;

endmodule

module config_top (
  input      [31:0]   io_apb_PADDR,
  input      [0:0]    io_apb_PSEL,
  input               io_apb_PENABLE,
  output              io_apb_PREADY,
  input               io_apb_PWRITE,
  input      [31:0]   io_apb_PWDATA,
  output reg [31:0]   io_apb_PRDATA,
  output              io_apb_PSLVERROR,
  output              io_rdma_glb_param_valid,
  input               io_rdma_glb_param_ready,
  output     [31:0]   io_rdma_glb_param_payload_rd_dtBaseAddr,
  output     [31:0]   io_rdma_glb_param_payload_rd_wtBaseAddr,
  output     [31:0]   io_rdma_glb_param_payload_wr_delta_wt_BaseAddr,
  output     [31:0]   io_rdma_glb_param_payload_wr_sigma_BaseAddr,
  output     [15:0]   io_rdma_glb_param_payload_dtWidth,
  output     [15:0]   io_rdma_glb_param_payload_dtHeight,
  output     [15:0]   io_rdma_glb_param_payload_wtWidth,
  output     [15:0]   io_rdma_glb_param_payload_wtHeight,
  output     [15:0]   io_rdma_glb_param_payload_oWidth,
  output     [15:0]   io_rdma_glb_param_payload_oHeight,
  output              io_wdma_glb_param_valid,
  input               io_wdma_glb_param_ready,
  output     [31:0]   io_wdma_glb_param_payload_rd_dtBaseAddr,
  output     [31:0]   io_wdma_glb_param_payload_rd_wtBaseAddr,
  output     [31:0]   io_wdma_glb_param_payload_wr_delta_wt_BaseAddr,
  output     [31:0]   io_wdma_glb_param_payload_wr_sigma_BaseAddr,
  output     [15:0]   io_wdma_glb_param_payload_dtWidth,
  output     [15:0]   io_wdma_glb_param_payload_dtHeight,
  output     [15:0]   io_wdma_glb_param_payload_wtWidth,
  output     [15:0]   io_wdma_glb_param_payload_wtHeight,
  output     [15:0]   io_wdma_glb_param_payload_oWidth,
  output     [15:0]   io_wdma_glb_param_payload_oHeight,
  output              io_conv_glb_param_valid,
  input               io_conv_glb_param_ready,
  output     [31:0]   io_conv_glb_param_payload_rd_dtBaseAddr,
  output     [31:0]   io_conv_glb_param_payload_rd_wtBaseAddr,
  output     [31:0]   io_conv_glb_param_payload_wr_delta_wt_BaseAddr,
  output     [31:0]   io_conv_glb_param_payload_wr_sigma_BaseAddr,
  output     [15:0]   io_conv_glb_param_payload_dtWidth,
  output     [15:0]   io_conv_glb_param_payload_dtHeight,
  output     [15:0]   io_conv_glb_param_payload_wtWidth,
  output     [15:0]   io_conv_glb_param_payload_wtHeight,
  output     [15:0]   io_conv_glb_param_payload_oWidth,
  output     [15:0]   io_conv_glb_param_payload_oHeight,
  output              io_glb_enable,
  output              io_is_delta_wt,
  input               clk,
  input               reset
);
  wire       [31:0]   _zz_cfg_dtWidth;
  wire       [31:0]   _zz_cfg_dtHeight;
  wire       [31:0]   _zz_cfg_wtWidth;
  wire       [31:0]   _zz_cfg_wtHeight;
  wire       [31:0]   _zz_cfg_oWidth;
  wire       [31:0]   _zz_cfg_oHeight;
  wire       [15:0]   _zz_io_apb_PRDATA;
  wire       [15:0]   _zz_io_apb_PRDATA_1;
  wire       [15:0]   _zz_io_apb_PRDATA_2;
  wire       [15:0]   _zz_io_apb_PRDATA_3;
  wire       [15:0]   _zz_io_apb_PRDATA_4;
  wire       [15:0]   _zz_io_apb_PRDATA_5;
  reg        [31:0]   cfg_rd_dtBaseAddr;
  reg        [31:0]   cfg_rd_wtBaseAddr;
  reg        [31:0]   cfg_wr_delta_wt_BaseAddr;
  reg        [31:0]   cfg_wr_sigma_BaseAddr;
  reg        [15:0]   cfg_dtWidth;
  reg        [15:0]   cfg_dtHeight;
  reg        [15:0]   cfg_wtWidth;
  reg        [15:0]   cfg_wtHeight;
  reg        [15:0]   cfg_oWidth;
  reg        [15:0]   cfg_oHeight;
  reg                 start;
  reg                 is_delta_wt;
  wire                when_config_top_l47;
  wire                when_config_top_l49;
  wire       [31:0]   switch_config_top_l51;
  wire       [31:0]   switch_config_top_l96;

  assign _zz_cfg_dtWidth = io_apb_PWDATA;
  assign _zz_cfg_dtHeight = io_apb_PWDATA;
  assign _zz_cfg_wtWidth = io_apb_PWDATA;
  assign _zz_cfg_wtHeight = io_apb_PWDATA;
  assign _zz_cfg_oWidth = io_apb_PWDATA;
  assign _zz_cfg_oHeight = io_apb_PWDATA;
  assign _zz_io_apb_PRDATA = cfg_dtWidth;
  assign _zz_io_apb_PRDATA_1 = cfg_dtHeight;
  assign _zz_io_apb_PRDATA_2 = cfg_wtWidth;
  assign _zz_io_apb_PRDATA_3 = cfg_wtHeight;
  assign _zz_io_apb_PRDATA_4 = cfg_oWidth;
  assign _zz_io_apb_PRDATA_5 = cfg_oHeight;
  assign io_rdma_glb_param_payload_rd_dtBaseAddr = cfg_rd_dtBaseAddr;
  assign io_rdma_glb_param_payload_rd_wtBaseAddr = cfg_rd_wtBaseAddr;
  assign io_rdma_glb_param_payload_wr_delta_wt_BaseAddr = cfg_wr_delta_wt_BaseAddr;
  assign io_rdma_glb_param_payload_wr_sigma_BaseAddr = cfg_wr_sigma_BaseAddr;
  assign io_rdma_glb_param_payload_dtWidth = cfg_dtWidth;
  assign io_rdma_glb_param_payload_dtHeight = cfg_dtHeight;
  assign io_rdma_glb_param_payload_wtWidth = cfg_wtWidth;
  assign io_rdma_glb_param_payload_wtHeight = cfg_wtHeight;
  assign io_rdma_glb_param_payload_oWidth = cfg_oWidth;
  assign io_rdma_glb_param_payload_oHeight = cfg_oHeight;
  assign io_rdma_glb_param_valid = 1'b1;
  assign io_wdma_glb_param_payload_rd_dtBaseAddr = cfg_rd_dtBaseAddr;
  assign io_wdma_glb_param_payload_rd_wtBaseAddr = cfg_rd_wtBaseAddr;
  assign io_wdma_glb_param_payload_wr_delta_wt_BaseAddr = cfg_wr_delta_wt_BaseAddr;
  assign io_wdma_glb_param_payload_wr_sigma_BaseAddr = cfg_wr_sigma_BaseAddr;
  assign io_wdma_glb_param_payload_dtWidth = cfg_dtWidth;
  assign io_wdma_glb_param_payload_dtHeight = cfg_dtHeight;
  assign io_wdma_glb_param_payload_wtWidth = cfg_wtWidth;
  assign io_wdma_glb_param_payload_wtHeight = cfg_wtHeight;
  assign io_wdma_glb_param_payload_oWidth = cfg_oWidth;
  assign io_wdma_glb_param_payload_oHeight = cfg_oHeight;
  assign io_wdma_glb_param_valid = 1'b1;
  assign io_conv_glb_param_payload_rd_dtBaseAddr = cfg_rd_dtBaseAddr;
  assign io_conv_glb_param_payload_rd_wtBaseAddr = cfg_rd_wtBaseAddr;
  assign io_conv_glb_param_payload_wr_delta_wt_BaseAddr = cfg_wr_delta_wt_BaseAddr;
  assign io_conv_glb_param_payload_wr_sigma_BaseAddr = cfg_wr_sigma_BaseAddr;
  assign io_conv_glb_param_payload_dtWidth = cfg_dtWidth;
  assign io_conv_glb_param_payload_dtHeight = cfg_dtHeight;
  assign io_conv_glb_param_payload_wtWidth = cfg_wtWidth;
  assign io_conv_glb_param_payload_wtHeight = cfg_wtHeight;
  assign io_conv_glb_param_payload_oWidth = cfg_oWidth;
  assign io_conv_glb_param_payload_oHeight = cfg_oHeight;
  assign io_conv_glb_param_valid = 1'b1;
  assign io_glb_enable = start;
  assign io_apb_PREADY = 1'b1;
  always @(*) begin
    io_apb_PRDATA = 32'h0;
    if(when_config_top_l47) begin
      if(!when_config_top_l49) begin
        case(switch_config_top_l96)
          32'h00000010 : begin
            io_apb_PRDATA = {16'd0, _zz_io_apb_PRDATA};
          end
          32'h00000014 : begin
            io_apb_PRDATA = {16'd0, _zz_io_apb_PRDATA_1};
          end
          32'h00000018 : begin
            io_apb_PRDATA = {16'd0, _zz_io_apb_PRDATA_2};
          end
          32'h0000001c : begin
            io_apb_PRDATA = {16'd0, _zz_io_apb_PRDATA_3};
          end
          32'h00000020 : begin
            io_apb_PRDATA = {16'd0, _zz_io_apb_PRDATA_4};
          end
          32'h00000024 : begin
            io_apb_PRDATA = {16'd0, _zz_io_apb_PRDATA_5};
          end
          32'h00000028 : begin
            io_apb_PRDATA = cfg_rd_dtBaseAddr;
          end
          32'h0000002c : begin
            io_apb_PRDATA = cfg_rd_wtBaseAddr;
          end
          32'h00000030 : begin
            io_apb_PRDATA = cfg_wr_delta_wt_BaseAddr;
          end
          32'h00000034 : begin
            io_apb_PRDATA = cfg_wr_sigma_BaseAddr;
          end
          default : begin
            io_apb_PRDATA = 32'hffffffff;
          end
        endcase
      end
    end
  end

  assign io_apb_PSLVERROR = 1'b0;
  assign io_is_delta_wt = is_delta_wt;
  assign when_config_top_l47 = ((io_apb_PENABLE == 1'b1) && (io_apb_PSEL == 1'b1));
  assign when_config_top_l49 = (io_apb_PWRITE == 1'b1);
  assign switch_config_top_l51 = io_apb_PADDR;
  assign switch_config_top_l96 = io_apb_PADDR;
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      is_delta_wt <= 1'b0;
    end else begin
      if(when_config_top_l47) begin
        if(when_config_top_l49) begin
          case(switch_config_top_l51)
            32'h00000004 : begin
              is_delta_wt <= io_apb_PWDATA[0];
            end
            default : begin
            end
          endcase
        end
      end
    end
  end

  always @(posedge clk) begin
    start <= 1'b0;
    if(when_config_top_l47) begin
      if(when_config_top_l49) begin
        case(switch_config_top_l51)
          32'h0 : begin
            start <= io_apb_PWDATA[0];
          end
          32'h00000010 : begin
            cfg_dtWidth <= _zz_cfg_dtWidth[15:0];
          end
          32'h00000014 : begin
            cfg_dtHeight <= _zz_cfg_dtHeight[15:0];
          end
          32'h00000018 : begin
            cfg_wtWidth <= _zz_cfg_wtWidth[15:0];
          end
          32'h0000001c : begin
            cfg_wtHeight <= _zz_cfg_wtHeight[15:0];
          end
          32'h00000020 : begin
            cfg_oWidth <= _zz_cfg_oWidth[15:0];
          end
          32'h00000024 : begin
            cfg_oHeight <= _zz_cfg_oHeight[15:0];
          end
          32'h00000028 : begin
            cfg_rd_dtBaseAddr <= io_apb_PWDATA;
          end
          32'h0000002c : begin
            cfg_rd_wtBaseAddr <= io_apb_PWDATA;
          end
          32'h00000030 : begin
            cfg_wr_delta_wt_BaseAddr <= io_apb_PWDATA;
          end
          32'h00000034 : begin
            cfg_wr_sigma_BaseAddr <= io_apb_PWDATA;
          end
          default : begin
          end
        endcase
      end
    end
  end


endmodule

module array_adder (
  input               io_in_0_0_valid,
  output              io_in_0_0_ready,
  input      [31:0]   io_in_0_0_payload,
  input               io_in_0_1_valid,
  output              io_in_0_1_ready,
  input      [31:0]   io_in_0_1_payload,
  input               io_in_0_2_valid,
  output              io_in_0_2_ready,
  input      [31:0]   io_in_0_2_payload,
  input               io_in_0_3_valid,
  output              io_in_0_3_ready,
  input      [31:0]   io_in_0_3_payload,
  input               io_in_0_4_valid,
  output              io_in_0_4_ready,
  input      [31:0]   io_in_0_4_payload,
  input               io_in_0_5_valid,
  output              io_in_0_5_ready,
  input      [31:0]   io_in_0_5_payload,
  input               io_in_0_6_valid,
  output              io_in_0_6_ready,
  input      [31:0]   io_in_0_6_payload,
  input               io_in_0_7_valid,
  output              io_in_0_7_ready,
  input      [31:0]   io_in_0_7_payload,
  input               io_in_1_0_valid,
  output              io_in_1_0_ready,
  input      [31:0]   io_in_1_0_payload,
  input               io_in_1_1_valid,
  output              io_in_1_1_ready,
  input      [31:0]   io_in_1_1_payload,
  input               io_in_1_2_valid,
  output              io_in_1_2_ready,
  input      [31:0]   io_in_1_2_payload,
  input               io_in_1_3_valid,
  output              io_in_1_3_ready,
  input      [31:0]   io_in_1_3_payload,
  input               io_in_1_4_valid,
  output              io_in_1_4_ready,
  input      [31:0]   io_in_1_4_payload,
  input               io_in_1_5_valid,
  output              io_in_1_5_ready,
  input      [31:0]   io_in_1_5_payload,
  input               io_in_1_6_valid,
  output              io_in_1_6_ready,
  input      [31:0]   io_in_1_6_payload,
  input               io_in_1_7_valid,
  output              io_in_1_7_ready,
  input      [31:0]   io_in_1_7_payload,
  input               io_in_2_0_valid,
  output              io_in_2_0_ready,
  input      [31:0]   io_in_2_0_payload,
  input               io_in_2_1_valid,
  output              io_in_2_1_ready,
  input      [31:0]   io_in_2_1_payload,
  input               io_in_2_2_valid,
  output              io_in_2_2_ready,
  input      [31:0]   io_in_2_2_payload,
  input               io_in_2_3_valid,
  output              io_in_2_3_ready,
  input      [31:0]   io_in_2_3_payload,
  input               io_in_2_4_valid,
  output              io_in_2_4_ready,
  input      [31:0]   io_in_2_4_payload,
  input               io_in_2_5_valid,
  output              io_in_2_5_ready,
  input      [31:0]   io_in_2_5_payload,
  input               io_in_2_6_valid,
  output              io_in_2_6_ready,
  input      [31:0]   io_in_2_6_payload,
  input               io_in_2_7_valid,
  output              io_in_2_7_ready,
  input      [31:0]   io_in_2_7_payload,
  input               io_in_3_0_valid,
  output              io_in_3_0_ready,
  input      [31:0]   io_in_3_0_payload,
  input               io_in_3_1_valid,
  output              io_in_3_1_ready,
  input      [31:0]   io_in_3_1_payload,
  input               io_in_3_2_valid,
  output              io_in_3_2_ready,
  input      [31:0]   io_in_3_2_payload,
  input               io_in_3_3_valid,
  output              io_in_3_3_ready,
  input      [31:0]   io_in_3_3_payload,
  input               io_in_3_4_valid,
  output              io_in_3_4_ready,
  input      [31:0]   io_in_3_4_payload,
  input               io_in_3_5_valid,
  output              io_in_3_5_ready,
  input      [31:0]   io_in_3_5_payload,
  input               io_in_3_6_valid,
  output              io_in_3_6_ready,
  input      [31:0]   io_in_3_6_payload,
  input               io_in_3_7_valid,
  output              io_in_3_7_ready,
  input      [31:0]   io_in_3_7_payload,
  input               io_in_4_0_valid,
  output              io_in_4_0_ready,
  input      [31:0]   io_in_4_0_payload,
  input               io_in_4_1_valid,
  output              io_in_4_1_ready,
  input      [31:0]   io_in_4_1_payload,
  input               io_in_4_2_valid,
  output              io_in_4_2_ready,
  input      [31:0]   io_in_4_2_payload,
  input               io_in_4_3_valid,
  output              io_in_4_3_ready,
  input      [31:0]   io_in_4_3_payload,
  input               io_in_4_4_valid,
  output              io_in_4_4_ready,
  input      [31:0]   io_in_4_4_payload,
  input               io_in_4_5_valid,
  output              io_in_4_5_ready,
  input      [31:0]   io_in_4_5_payload,
  input               io_in_4_6_valid,
  output              io_in_4_6_ready,
  input      [31:0]   io_in_4_6_payload,
  input               io_in_4_7_valid,
  output              io_in_4_7_ready,
  input      [31:0]   io_in_4_7_payload,
  input               io_in_5_0_valid,
  output              io_in_5_0_ready,
  input      [31:0]   io_in_5_0_payload,
  input               io_in_5_1_valid,
  output              io_in_5_1_ready,
  input      [31:0]   io_in_5_1_payload,
  input               io_in_5_2_valid,
  output              io_in_5_2_ready,
  input      [31:0]   io_in_5_2_payload,
  input               io_in_5_3_valid,
  output              io_in_5_3_ready,
  input      [31:0]   io_in_5_3_payload,
  input               io_in_5_4_valid,
  output              io_in_5_4_ready,
  input      [31:0]   io_in_5_4_payload,
  input               io_in_5_5_valid,
  output              io_in_5_5_ready,
  input      [31:0]   io_in_5_5_payload,
  input               io_in_5_6_valid,
  output              io_in_5_6_ready,
  input      [31:0]   io_in_5_6_payload,
  input               io_in_5_7_valid,
  output              io_in_5_7_ready,
  input      [31:0]   io_in_5_7_payload,
  input               io_in_6_0_valid,
  output              io_in_6_0_ready,
  input      [31:0]   io_in_6_0_payload,
  input               io_in_6_1_valid,
  output              io_in_6_1_ready,
  input      [31:0]   io_in_6_1_payload,
  input               io_in_6_2_valid,
  output              io_in_6_2_ready,
  input      [31:0]   io_in_6_2_payload,
  input               io_in_6_3_valid,
  output              io_in_6_3_ready,
  input      [31:0]   io_in_6_3_payload,
  input               io_in_6_4_valid,
  output              io_in_6_4_ready,
  input      [31:0]   io_in_6_4_payload,
  input               io_in_6_5_valid,
  output              io_in_6_5_ready,
  input      [31:0]   io_in_6_5_payload,
  input               io_in_6_6_valid,
  output              io_in_6_6_ready,
  input      [31:0]   io_in_6_6_payload,
  input               io_in_6_7_valid,
  output              io_in_6_7_ready,
  input      [31:0]   io_in_6_7_payload,
  input               io_in_7_0_valid,
  output              io_in_7_0_ready,
  input      [31:0]   io_in_7_0_payload,
  input               io_in_7_1_valid,
  output              io_in_7_1_ready,
  input      [31:0]   io_in_7_1_payload,
  input               io_in_7_2_valid,
  output              io_in_7_2_ready,
  input      [31:0]   io_in_7_2_payload,
  input               io_in_7_3_valid,
  output              io_in_7_3_ready,
  input      [31:0]   io_in_7_3_payload,
  input               io_in_7_4_valid,
  output              io_in_7_4_ready,
  input      [31:0]   io_in_7_4_payload,
  input               io_in_7_5_valid,
  output              io_in_7_5_ready,
  input      [31:0]   io_in_7_5_payload,
  input               io_in_7_6_valid,
  output              io_in_7_6_ready,
  input      [31:0]   io_in_7_6_payload,
  input               io_in_7_7_valid,
  output              io_in_7_7_ready,
  input      [31:0]   io_in_7_7_payload,
  output              io_out_0_valid,
  input               io_out_0_ready,
  output     [31:0]   io_out_0_payload,
  output              io_out_1_valid,
  input               io_out_1_ready,
  output     [31:0]   io_out_1_payload,
  output              io_out_2_valid,
  input               io_out_2_ready,
  output     [31:0]   io_out_2_payload,
  output              io_out_3_valid,
  input               io_out_3_ready,
  output     [31:0]   io_out_3_payload,
  output              io_out_4_valid,
  input               io_out_4_ready,
  output     [31:0]   io_out_4_payload,
  output              io_out_5_valid,
  input               io_out_5_ready,
  output     [31:0]   io_out_5_payload,
  output              io_out_6_valid,
  input               io_out_6_ready,
  output     [31:0]   io_out_6_payload,
  output              io_out_7_valid,
  input               io_out_7_ready,
  output     [31:0]   io_out_7_payload,
  input               clk
);
  wire                atom_adder_0_io_in_0_ready;
  wire                atom_adder_0_io_in_1_ready;
  wire                atom_adder_0_io_in_2_ready;
  wire                atom_adder_0_io_in_3_ready;
  wire                atom_adder_0_io_in_4_ready;
  wire                atom_adder_0_io_in_5_ready;
  wire                atom_adder_0_io_in_6_ready;
  wire                atom_adder_0_io_in_7_ready;
  wire                atom_adder_0_io_out_valid;
  wire       [31:0]   atom_adder_0_io_out_payload;
  wire                atom_adder_1_1_io_in_0_ready;
  wire                atom_adder_1_1_io_in_1_ready;
  wire                atom_adder_1_1_io_in_2_ready;
  wire                atom_adder_1_1_io_in_3_ready;
  wire                atom_adder_1_1_io_in_4_ready;
  wire                atom_adder_1_1_io_in_5_ready;
  wire                atom_adder_1_1_io_in_6_ready;
  wire                atom_adder_1_1_io_in_7_ready;
  wire                atom_adder_1_1_io_out_valid;
  wire       [31:0]   atom_adder_1_1_io_out_payload;
  wire                atom_adder_2_1_io_in_0_ready;
  wire                atom_adder_2_1_io_in_1_ready;
  wire                atom_adder_2_1_io_in_2_ready;
  wire                atom_adder_2_1_io_in_3_ready;
  wire                atom_adder_2_1_io_in_4_ready;
  wire                atom_adder_2_1_io_in_5_ready;
  wire                atom_adder_2_1_io_in_6_ready;
  wire                atom_adder_2_1_io_in_7_ready;
  wire                atom_adder_2_1_io_out_valid;
  wire       [31:0]   atom_adder_2_1_io_out_payload;
  wire                atom_adder_3_1_io_in_0_ready;
  wire                atom_adder_3_1_io_in_1_ready;
  wire                atom_adder_3_1_io_in_2_ready;
  wire                atom_adder_3_1_io_in_3_ready;
  wire                atom_adder_3_1_io_in_4_ready;
  wire                atom_adder_3_1_io_in_5_ready;
  wire                atom_adder_3_1_io_in_6_ready;
  wire                atom_adder_3_1_io_in_7_ready;
  wire                atom_adder_3_1_io_out_valid;
  wire       [31:0]   atom_adder_3_1_io_out_payload;
  wire                atom_adder_4_1_io_in_0_ready;
  wire                atom_adder_4_1_io_in_1_ready;
  wire                atom_adder_4_1_io_in_2_ready;
  wire                atom_adder_4_1_io_in_3_ready;
  wire                atom_adder_4_1_io_in_4_ready;
  wire                atom_adder_4_1_io_in_5_ready;
  wire                atom_adder_4_1_io_in_6_ready;
  wire                atom_adder_4_1_io_in_7_ready;
  wire                atom_adder_4_1_io_out_valid;
  wire       [31:0]   atom_adder_4_1_io_out_payload;
  wire                atom_adder_5_1_io_in_0_ready;
  wire                atom_adder_5_1_io_in_1_ready;
  wire                atom_adder_5_1_io_in_2_ready;
  wire                atom_adder_5_1_io_in_3_ready;
  wire                atom_adder_5_1_io_in_4_ready;
  wire                atom_adder_5_1_io_in_5_ready;
  wire                atom_adder_5_1_io_in_6_ready;
  wire                atom_adder_5_1_io_in_7_ready;
  wire                atom_adder_5_1_io_out_valid;
  wire       [31:0]   atom_adder_5_1_io_out_payload;
  wire                atom_adder_6_1_io_in_0_ready;
  wire                atom_adder_6_1_io_in_1_ready;
  wire                atom_adder_6_1_io_in_2_ready;
  wire                atom_adder_6_1_io_in_3_ready;
  wire                atom_adder_6_1_io_in_4_ready;
  wire                atom_adder_6_1_io_in_5_ready;
  wire                atom_adder_6_1_io_in_6_ready;
  wire                atom_adder_6_1_io_in_7_ready;
  wire                atom_adder_6_1_io_out_valid;
  wire       [31:0]   atom_adder_6_1_io_out_payload;
  wire                atom_adder_7_1_io_in_0_ready;
  wire                atom_adder_7_1_io_in_1_ready;
  wire                atom_adder_7_1_io_in_2_ready;
  wire                atom_adder_7_1_io_in_3_ready;
  wire                atom_adder_7_1_io_in_4_ready;
  wire                atom_adder_7_1_io_in_5_ready;
  wire                atom_adder_7_1_io_in_6_ready;
  wire                atom_adder_7_1_io_in_7_ready;
  wire                atom_adder_7_1_io_out_valid;
  wire       [31:0]   atom_adder_7_1_io_out_payload;

  atom_adder atom_adder_0 (
    .io_in_0_valid      (io_in_0_0_valid              ), //i
    .io_in_0_ready      (atom_adder_0_io_in_0_ready   ), //o
    .io_in_0_payload    (io_in_0_0_payload            ), //i
    .io_in_1_valid      (io_in_0_1_valid              ), //i
    .io_in_1_ready      (atom_adder_0_io_in_1_ready   ), //o
    .io_in_1_payload    (io_in_0_1_payload            ), //i
    .io_in_2_valid      (io_in_0_2_valid              ), //i
    .io_in_2_ready      (atom_adder_0_io_in_2_ready   ), //o
    .io_in_2_payload    (io_in_0_2_payload            ), //i
    .io_in_3_valid      (io_in_0_3_valid              ), //i
    .io_in_3_ready      (atom_adder_0_io_in_3_ready   ), //o
    .io_in_3_payload    (io_in_0_3_payload            ), //i
    .io_in_4_valid      (io_in_0_4_valid              ), //i
    .io_in_4_ready      (atom_adder_0_io_in_4_ready   ), //o
    .io_in_4_payload    (io_in_0_4_payload            ), //i
    .io_in_5_valid      (io_in_0_5_valid              ), //i
    .io_in_5_ready      (atom_adder_0_io_in_5_ready   ), //o
    .io_in_5_payload    (io_in_0_5_payload            ), //i
    .io_in_6_valid      (io_in_0_6_valid              ), //i
    .io_in_6_ready      (atom_adder_0_io_in_6_ready   ), //o
    .io_in_6_payload    (io_in_0_6_payload            ), //i
    .io_in_7_valid      (io_in_0_7_valid              ), //i
    .io_in_7_ready      (atom_adder_0_io_in_7_ready   ), //o
    .io_in_7_payload    (io_in_0_7_payload            ), //i
    .io_out_valid       (atom_adder_0_io_out_valid    ), //o
    .io_out_ready       (io_out_0_ready               ), //i
    .io_out_payload     (atom_adder_0_io_out_payload  ), //o
    .clk                (clk                          )  //i
  );
  atom_adder atom_adder_1_1 (
    .io_in_0_valid      (io_in_1_0_valid                ), //i
    .io_in_0_ready      (atom_adder_1_1_io_in_0_ready   ), //o
    .io_in_0_payload    (io_in_1_0_payload              ), //i
    .io_in_1_valid      (io_in_1_1_valid                ), //i
    .io_in_1_ready      (atom_adder_1_1_io_in_1_ready   ), //o
    .io_in_1_payload    (io_in_1_1_payload              ), //i
    .io_in_2_valid      (io_in_1_2_valid                ), //i
    .io_in_2_ready      (atom_adder_1_1_io_in_2_ready   ), //o
    .io_in_2_payload    (io_in_1_2_payload              ), //i
    .io_in_3_valid      (io_in_1_3_valid                ), //i
    .io_in_3_ready      (atom_adder_1_1_io_in_3_ready   ), //o
    .io_in_3_payload    (io_in_1_3_payload              ), //i
    .io_in_4_valid      (io_in_1_4_valid                ), //i
    .io_in_4_ready      (atom_adder_1_1_io_in_4_ready   ), //o
    .io_in_4_payload    (io_in_1_4_payload              ), //i
    .io_in_5_valid      (io_in_1_5_valid                ), //i
    .io_in_5_ready      (atom_adder_1_1_io_in_5_ready   ), //o
    .io_in_5_payload    (io_in_1_5_payload              ), //i
    .io_in_6_valid      (io_in_1_6_valid                ), //i
    .io_in_6_ready      (atom_adder_1_1_io_in_6_ready   ), //o
    .io_in_6_payload    (io_in_1_6_payload              ), //i
    .io_in_7_valid      (io_in_1_7_valid                ), //i
    .io_in_7_ready      (atom_adder_1_1_io_in_7_ready   ), //o
    .io_in_7_payload    (io_in_1_7_payload              ), //i
    .io_out_valid       (atom_adder_1_1_io_out_valid    ), //o
    .io_out_ready       (io_out_1_ready                 ), //i
    .io_out_payload     (atom_adder_1_1_io_out_payload  ), //o
    .clk                (clk                            )  //i
  );
  atom_adder atom_adder_2_1 (
    .io_in_0_valid      (io_in_2_0_valid                ), //i
    .io_in_0_ready      (atom_adder_2_1_io_in_0_ready   ), //o
    .io_in_0_payload    (io_in_2_0_payload              ), //i
    .io_in_1_valid      (io_in_2_1_valid                ), //i
    .io_in_1_ready      (atom_adder_2_1_io_in_1_ready   ), //o
    .io_in_1_payload    (io_in_2_1_payload              ), //i
    .io_in_2_valid      (io_in_2_2_valid                ), //i
    .io_in_2_ready      (atom_adder_2_1_io_in_2_ready   ), //o
    .io_in_2_payload    (io_in_2_2_payload              ), //i
    .io_in_3_valid      (io_in_2_3_valid                ), //i
    .io_in_3_ready      (atom_adder_2_1_io_in_3_ready   ), //o
    .io_in_3_payload    (io_in_2_3_payload              ), //i
    .io_in_4_valid      (io_in_2_4_valid                ), //i
    .io_in_4_ready      (atom_adder_2_1_io_in_4_ready   ), //o
    .io_in_4_payload    (io_in_2_4_payload              ), //i
    .io_in_5_valid      (io_in_2_5_valid                ), //i
    .io_in_5_ready      (atom_adder_2_1_io_in_5_ready   ), //o
    .io_in_5_payload    (io_in_2_5_payload              ), //i
    .io_in_6_valid      (io_in_2_6_valid                ), //i
    .io_in_6_ready      (atom_adder_2_1_io_in_6_ready   ), //o
    .io_in_6_payload    (io_in_2_6_payload              ), //i
    .io_in_7_valid      (io_in_2_7_valid                ), //i
    .io_in_7_ready      (atom_adder_2_1_io_in_7_ready   ), //o
    .io_in_7_payload    (io_in_2_7_payload              ), //i
    .io_out_valid       (atom_adder_2_1_io_out_valid    ), //o
    .io_out_ready       (io_out_2_ready                 ), //i
    .io_out_payload     (atom_adder_2_1_io_out_payload  ), //o
    .clk                (clk                            )  //i
  );
  atom_adder atom_adder_3_1 (
    .io_in_0_valid      (io_in_3_0_valid                ), //i
    .io_in_0_ready      (atom_adder_3_1_io_in_0_ready   ), //o
    .io_in_0_payload    (io_in_3_0_payload              ), //i
    .io_in_1_valid      (io_in_3_1_valid                ), //i
    .io_in_1_ready      (atom_adder_3_1_io_in_1_ready   ), //o
    .io_in_1_payload    (io_in_3_1_payload              ), //i
    .io_in_2_valid      (io_in_3_2_valid                ), //i
    .io_in_2_ready      (atom_adder_3_1_io_in_2_ready   ), //o
    .io_in_2_payload    (io_in_3_2_payload              ), //i
    .io_in_3_valid      (io_in_3_3_valid                ), //i
    .io_in_3_ready      (atom_adder_3_1_io_in_3_ready   ), //o
    .io_in_3_payload    (io_in_3_3_payload              ), //i
    .io_in_4_valid      (io_in_3_4_valid                ), //i
    .io_in_4_ready      (atom_adder_3_1_io_in_4_ready   ), //o
    .io_in_4_payload    (io_in_3_4_payload              ), //i
    .io_in_5_valid      (io_in_3_5_valid                ), //i
    .io_in_5_ready      (atom_adder_3_1_io_in_5_ready   ), //o
    .io_in_5_payload    (io_in_3_5_payload              ), //i
    .io_in_6_valid      (io_in_3_6_valid                ), //i
    .io_in_6_ready      (atom_adder_3_1_io_in_6_ready   ), //o
    .io_in_6_payload    (io_in_3_6_payload              ), //i
    .io_in_7_valid      (io_in_3_7_valid                ), //i
    .io_in_7_ready      (atom_adder_3_1_io_in_7_ready   ), //o
    .io_in_7_payload    (io_in_3_7_payload              ), //i
    .io_out_valid       (atom_adder_3_1_io_out_valid    ), //o
    .io_out_ready       (io_out_3_ready                 ), //i
    .io_out_payload     (atom_adder_3_1_io_out_payload  ), //o
    .clk                (clk                            )  //i
  );
  atom_adder atom_adder_4_1 (
    .io_in_0_valid      (io_in_4_0_valid                ), //i
    .io_in_0_ready      (atom_adder_4_1_io_in_0_ready   ), //o
    .io_in_0_payload    (io_in_4_0_payload              ), //i
    .io_in_1_valid      (io_in_4_1_valid                ), //i
    .io_in_1_ready      (atom_adder_4_1_io_in_1_ready   ), //o
    .io_in_1_payload    (io_in_4_1_payload              ), //i
    .io_in_2_valid      (io_in_4_2_valid                ), //i
    .io_in_2_ready      (atom_adder_4_1_io_in_2_ready   ), //o
    .io_in_2_payload    (io_in_4_2_payload              ), //i
    .io_in_3_valid      (io_in_4_3_valid                ), //i
    .io_in_3_ready      (atom_adder_4_1_io_in_3_ready   ), //o
    .io_in_3_payload    (io_in_4_3_payload              ), //i
    .io_in_4_valid      (io_in_4_4_valid                ), //i
    .io_in_4_ready      (atom_adder_4_1_io_in_4_ready   ), //o
    .io_in_4_payload    (io_in_4_4_payload              ), //i
    .io_in_5_valid      (io_in_4_5_valid                ), //i
    .io_in_5_ready      (atom_adder_4_1_io_in_5_ready   ), //o
    .io_in_5_payload    (io_in_4_5_payload              ), //i
    .io_in_6_valid      (io_in_4_6_valid                ), //i
    .io_in_6_ready      (atom_adder_4_1_io_in_6_ready   ), //o
    .io_in_6_payload    (io_in_4_6_payload              ), //i
    .io_in_7_valid      (io_in_4_7_valid                ), //i
    .io_in_7_ready      (atom_adder_4_1_io_in_7_ready   ), //o
    .io_in_7_payload    (io_in_4_7_payload              ), //i
    .io_out_valid       (atom_adder_4_1_io_out_valid    ), //o
    .io_out_ready       (io_out_4_ready                 ), //i
    .io_out_payload     (atom_adder_4_1_io_out_payload  ), //o
    .clk                (clk                            )  //i
  );
  atom_adder atom_adder_5_1 (
    .io_in_0_valid      (io_in_5_0_valid                ), //i
    .io_in_0_ready      (atom_adder_5_1_io_in_0_ready   ), //o
    .io_in_0_payload    (io_in_5_0_payload              ), //i
    .io_in_1_valid      (io_in_5_1_valid                ), //i
    .io_in_1_ready      (atom_adder_5_1_io_in_1_ready   ), //o
    .io_in_1_payload    (io_in_5_1_payload              ), //i
    .io_in_2_valid      (io_in_5_2_valid                ), //i
    .io_in_2_ready      (atom_adder_5_1_io_in_2_ready   ), //o
    .io_in_2_payload    (io_in_5_2_payload              ), //i
    .io_in_3_valid      (io_in_5_3_valid                ), //i
    .io_in_3_ready      (atom_adder_5_1_io_in_3_ready   ), //o
    .io_in_3_payload    (io_in_5_3_payload              ), //i
    .io_in_4_valid      (io_in_5_4_valid                ), //i
    .io_in_4_ready      (atom_adder_5_1_io_in_4_ready   ), //o
    .io_in_4_payload    (io_in_5_4_payload              ), //i
    .io_in_5_valid      (io_in_5_5_valid                ), //i
    .io_in_5_ready      (atom_adder_5_1_io_in_5_ready   ), //o
    .io_in_5_payload    (io_in_5_5_payload              ), //i
    .io_in_6_valid      (io_in_5_6_valid                ), //i
    .io_in_6_ready      (atom_adder_5_1_io_in_6_ready   ), //o
    .io_in_6_payload    (io_in_5_6_payload              ), //i
    .io_in_7_valid      (io_in_5_7_valid                ), //i
    .io_in_7_ready      (atom_adder_5_1_io_in_7_ready   ), //o
    .io_in_7_payload    (io_in_5_7_payload              ), //i
    .io_out_valid       (atom_adder_5_1_io_out_valid    ), //o
    .io_out_ready       (io_out_5_ready                 ), //i
    .io_out_payload     (atom_adder_5_1_io_out_payload  ), //o
    .clk                (clk                            )  //i
  );
  atom_adder atom_adder_6_1 (
    .io_in_0_valid      (io_in_6_0_valid                ), //i
    .io_in_0_ready      (atom_adder_6_1_io_in_0_ready   ), //o
    .io_in_0_payload    (io_in_6_0_payload              ), //i
    .io_in_1_valid      (io_in_6_1_valid                ), //i
    .io_in_1_ready      (atom_adder_6_1_io_in_1_ready   ), //o
    .io_in_1_payload    (io_in_6_1_payload              ), //i
    .io_in_2_valid      (io_in_6_2_valid                ), //i
    .io_in_2_ready      (atom_adder_6_1_io_in_2_ready   ), //o
    .io_in_2_payload    (io_in_6_2_payload              ), //i
    .io_in_3_valid      (io_in_6_3_valid                ), //i
    .io_in_3_ready      (atom_adder_6_1_io_in_3_ready   ), //o
    .io_in_3_payload    (io_in_6_3_payload              ), //i
    .io_in_4_valid      (io_in_6_4_valid                ), //i
    .io_in_4_ready      (atom_adder_6_1_io_in_4_ready   ), //o
    .io_in_4_payload    (io_in_6_4_payload              ), //i
    .io_in_5_valid      (io_in_6_5_valid                ), //i
    .io_in_5_ready      (atom_adder_6_1_io_in_5_ready   ), //o
    .io_in_5_payload    (io_in_6_5_payload              ), //i
    .io_in_6_valid      (io_in_6_6_valid                ), //i
    .io_in_6_ready      (atom_adder_6_1_io_in_6_ready   ), //o
    .io_in_6_payload    (io_in_6_6_payload              ), //i
    .io_in_7_valid      (io_in_6_7_valid                ), //i
    .io_in_7_ready      (atom_adder_6_1_io_in_7_ready   ), //o
    .io_in_7_payload    (io_in_6_7_payload              ), //i
    .io_out_valid       (atom_adder_6_1_io_out_valid    ), //o
    .io_out_ready       (io_out_6_ready                 ), //i
    .io_out_payload     (atom_adder_6_1_io_out_payload  ), //o
    .clk                (clk                            )  //i
  );
  atom_adder atom_adder_7_1 (
    .io_in_0_valid      (io_in_7_0_valid                ), //i
    .io_in_0_ready      (atom_adder_7_1_io_in_0_ready   ), //o
    .io_in_0_payload    (io_in_7_0_payload              ), //i
    .io_in_1_valid      (io_in_7_1_valid                ), //i
    .io_in_1_ready      (atom_adder_7_1_io_in_1_ready   ), //o
    .io_in_1_payload    (io_in_7_1_payload              ), //i
    .io_in_2_valid      (io_in_7_2_valid                ), //i
    .io_in_2_ready      (atom_adder_7_1_io_in_2_ready   ), //o
    .io_in_2_payload    (io_in_7_2_payload              ), //i
    .io_in_3_valid      (io_in_7_3_valid                ), //i
    .io_in_3_ready      (atom_adder_7_1_io_in_3_ready   ), //o
    .io_in_3_payload    (io_in_7_3_payload              ), //i
    .io_in_4_valid      (io_in_7_4_valid                ), //i
    .io_in_4_ready      (atom_adder_7_1_io_in_4_ready   ), //o
    .io_in_4_payload    (io_in_7_4_payload              ), //i
    .io_in_5_valid      (io_in_7_5_valid                ), //i
    .io_in_5_ready      (atom_adder_7_1_io_in_5_ready   ), //o
    .io_in_5_payload    (io_in_7_5_payload              ), //i
    .io_in_6_valid      (io_in_7_6_valid                ), //i
    .io_in_6_ready      (atom_adder_7_1_io_in_6_ready   ), //o
    .io_in_6_payload    (io_in_7_6_payload              ), //i
    .io_in_7_valid      (io_in_7_7_valid                ), //i
    .io_in_7_ready      (atom_adder_7_1_io_in_7_ready   ), //o
    .io_in_7_payload    (io_in_7_7_payload              ), //i
    .io_out_valid       (atom_adder_7_1_io_out_valid    ), //o
    .io_out_ready       (io_out_7_ready                 ), //i
    .io_out_payload     (atom_adder_7_1_io_out_payload  ), //o
    .clk                (clk                            )  //i
  );
  assign io_in_0_0_ready = atom_adder_0_io_in_0_ready;
  assign io_in_0_1_ready = atom_adder_0_io_in_1_ready;
  assign io_in_0_2_ready = atom_adder_0_io_in_2_ready;
  assign io_in_0_3_ready = atom_adder_0_io_in_3_ready;
  assign io_in_0_4_ready = atom_adder_0_io_in_4_ready;
  assign io_in_0_5_ready = atom_adder_0_io_in_5_ready;
  assign io_in_0_6_ready = atom_adder_0_io_in_6_ready;
  assign io_in_0_7_ready = atom_adder_0_io_in_7_ready;
  assign io_out_0_valid = atom_adder_0_io_out_valid;
  assign io_out_0_payload = atom_adder_0_io_out_payload;
  assign io_in_1_0_ready = atom_adder_1_1_io_in_0_ready;
  assign io_in_1_1_ready = atom_adder_1_1_io_in_1_ready;
  assign io_in_1_2_ready = atom_adder_1_1_io_in_2_ready;
  assign io_in_1_3_ready = atom_adder_1_1_io_in_3_ready;
  assign io_in_1_4_ready = atom_adder_1_1_io_in_4_ready;
  assign io_in_1_5_ready = atom_adder_1_1_io_in_5_ready;
  assign io_in_1_6_ready = atom_adder_1_1_io_in_6_ready;
  assign io_in_1_7_ready = atom_adder_1_1_io_in_7_ready;
  assign io_out_1_valid = atom_adder_1_1_io_out_valid;
  assign io_out_1_payload = atom_adder_1_1_io_out_payload;
  assign io_in_2_0_ready = atom_adder_2_1_io_in_0_ready;
  assign io_in_2_1_ready = atom_adder_2_1_io_in_1_ready;
  assign io_in_2_2_ready = atom_adder_2_1_io_in_2_ready;
  assign io_in_2_3_ready = atom_adder_2_1_io_in_3_ready;
  assign io_in_2_4_ready = atom_adder_2_1_io_in_4_ready;
  assign io_in_2_5_ready = atom_adder_2_1_io_in_5_ready;
  assign io_in_2_6_ready = atom_adder_2_1_io_in_6_ready;
  assign io_in_2_7_ready = atom_adder_2_1_io_in_7_ready;
  assign io_out_2_valid = atom_adder_2_1_io_out_valid;
  assign io_out_2_payload = atom_adder_2_1_io_out_payload;
  assign io_in_3_0_ready = atom_adder_3_1_io_in_0_ready;
  assign io_in_3_1_ready = atom_adder_3_1_io_in_1_ready;
  assign io_in_3_2_ready = atom_adder_3_1_io_in_2_ready;
  assign io_in_3_3_ready = atom_adder_3_1_io_in_3_ready;
  assign io_in_3_4_ready = atom_adder_3_1_io_in_4_ready;
  assign io_in_3_5_ready = atom_adder_3_1_io_in_5_ready;
  assign io_in_3_6_ready = atom_adder_3_1_io_in_6_ready;
  assign io_in_3_7_ready = atom_adder_3_1_io_in_7_ready;
  assign io_out_3_valid = atom_adder_3_1_io_out_valid;
  assign io_out_3_payload = atom_adder_3_1_io_out_payload;
  assign io_in_4_0_ready = atom_adder_4_1_io_in_0_ready;
  assign io_in_4_1_ready = atom_adder_4_1_io_in_1_ready;
  assign io_in_4_2_ready = atom_adder_4_1_io_in_2_ready;
  assign io_in_4_3_ready = atom_adder_4_1_io_in_3_ready;
  assign io_in_4_4_ready = atom_adder_4_1_io_in_4_ready;
  assign io_in_4_5_ready = atom_adder_4_1_io_in_5_ready;
  assign io_in_4_6_ready = atom_adder_4_1_io_in_6_ready;
  assign io_in_4_7_ready = atom_adder_4_1_io_in_7_ready;
  assign io_out_4_valid = atom_adder_4_1_io_out_valid;
  assign io_out_4_payload = atom_adder_4_1_io_out_payload;
  assign io_in_5_0_ready = atom_adder_5_1_io_in_0_ready;
  assign io_in_5_1_ready = atom_adder_5_1_io_in_1_ready;
  assign io_in_5_2_ready = atom_adder_5_1_io_in_2_ready;
  assign io_in_5_3_ready = atom_adder_5_1_io_in_3_ready;
  assign io_in_5_4_ready = atom_adder_5_1_io_in_4_ready;
  assign io_in_5_5_ready = atom_adder_5_1_io_in_5_ready;
  assign io_in_5_6_ready = atom_adder_5_1_io_in_6_ready;
  assign io_in_5_7_ready = atom_adder_5_1_io_in_7_ready;
  assign io_out_5_valid = atom_adder_5_1_io_out_valid;
  assign io_out_5_payload = atom_adder_5_1_io_out_payload;
  assign io_in_6_0_ready = atom_adder_6_1_io_in_0_ready;
  assign io_in_6_1_ready = atom_adder_6_1_io_in_1_ready;
  assign io_in_6_2_ready = atom_adder_6_1_io_in_2_ready;
  assign io_in_6_3_ready = atom_adder_6_1_io_in_3_ready;
  assign io_in_6_4_ready = atom_adder_6_1_io_in_4_ready;
  assign io_in_6_5_ready = atom_adder_6_1_io_in_5_ready;
  assign io_in_6_6_ready = atom_adder_6_1_io_in_6_ready;
  assign io_in_6_7_ready = atom_adder_6_1_io_in_7_ready;
  assign io_out_6_valid = atom_adder_6_1_io_out_valid;
  assign io_out_6_payload = atom_adder_6_1_io_out_payload;
  assign io_in_7_0_ready = atom_adder_7_1_io_in_0_ready;
  assign io_in_7_1_ready = atom_adder_7_1_io_in_1_ready;
  assign io_in_7_2_ready = atom_adder_7_1_io_in_2_ready;
  assign io_in_7_3_ready = atom_adder_7_1_io_in_3_ready;
  assign io_in_7_4_ready = atom_adder_7_1_io_in_4_ready;
  assign io_in_7_5_ready = atom_adder_7_1_io_in_5_ready;
  assign io_in_7_6_ready = atom_adder_7_1_io_in_6_ready;
  assign io_in_7_7_ready = atom_adder_7_1_io_in_7_ready;
  assign io_out_7_valid = atom_adder_7_1_io_out_valid;
  assign io_out_7_payload = atom_adder_7_1_io_out_payload;

endmodule

module conv_top (
  input               cfg_valid,
  output              cfg_ready,
  input      [31:0]   cfg_payload_rd_dtBaseAddr,
  input      [31:0]   cfg_payload_rd_wtBaseAddr,
  input      [31:0]   cfg_payload_wr_delta_wt_BaseAddr,
  input      [31:0]   cfg_payload_wr_sigma_BaseAddr,
  input      [15:0]   cfg_payload_dtWidth,
  input      [15:0]   cfg_payload_dtHeight,
  input      [15:0]   cfg_payload_wtWidth,
  input      [15:0]   cfg_payload_wtHeight,
  input      [15:0]   cfg_payload_oWidth,
  input      [15:0]   cfg_payload_oHeight,
  input               read_enable,
  input               acc_enable,
  input               is_delta_wt,
  output     [31:0]   dt_ramrd_addr,
  input      [255:0]  dt_ramrd_data,
  output              dt_ramrd_en,
  output     [31:0]   wt_ramrd_0_addr,
  input      [255:0]  wt_ramrd_0_data,
  output              wt_ramrd_0_en,
  output     [31:0]   wt_ramrd_1_addr,
  input      [255:0]  wt_ramrd_1_data,
  output              wt_ramrd_1_en,
  output     [31:0]   wt_ramrd_2_addr,
  input      [255:0]  wt_ramrd_2_data,
  output              wt_ramrd_2_en,
  output     [31:0]   wt_ramrd_3_addr,
  input      [255:0]  wt_ramrd_3_data,
  output              wt_ramrd_3_en,
  output     [31:0]   wt_ramrd_4_addr,
  input      [255:0]  wt_ramrd_4_data,
  output              wt_ramrd_4_en,
  output     [31:0]   wt_ramrd_5_addr,
  input      [255:0]  wt_ramrd_5_data,
  output              wt_ramrd_5_en,
  output     [31:0]   wt_ramrd_6_addr,
  input      [255:0]  wt_ramrd_6_data,
  output              wt_ramrd_6_en,
  output     [31:0]   wt_ramrd_7_addr,
  input      [255:0]  wt_ramrd_7_data,
  output              wt_ramrd_7_en,
  output              o_delta_wt_0_0_valid,
  input               o_delta_wt_0_0_ready,
  output     [31:0]   o_delta_wt_0_0_payload,
  output              o_delta_wt_0_1_valid,
  input               o_delta_wt_0_1_ready,
  output     [31:0]   o_delta_wt_0_1_payload,
  output              o_delta_wt_0_2_valid,
  input               o_delta_wt_0_2_ready,
  output     [31:0]   o_delta_wt_0_2_payload,
  output              o_delta_wt_0_3_valid,
  input               o_delta_wt_0_3_ready,
  output     [31:0]   o_delta_wt_0_3_payload,
  output              o_delta_wt_0_4_valid,
  input               o_delta_wt_0_4_ready,
  output     [31:0]   o_delta_wt_0_4_payload,
  output              o_delta_wt_0_5_valid,
  input               o_delta_wt_0_5_ready,
  output     [31:0]   o_delta_wt_0_5_payload,
  output              o_delta_wt_0_6_valid,
  input               o_delta_wt_0_6_ready,
  output     [31:0]   o_delta_wt_0_6_payload,
  output              o_delta_wt_0_7_valid,
  input               o_delta_wt_0_7_ready,
  output     [31:0]   o_delta_wt_0_7_payload,
  output              o_delta_wt_1_0_valid,
  input               o_delta_wt_1_0_ready,
  output     [31:0]   o_delta_wt_1_0_payload,
  output              o_delta_wt_1_1_valid,
  input               o_delta_wt_1_1_ready,
  output     [31:0]   o_delta_wt_1_1_payload,
  output              o_delta_wt_1_2_valid,
  input               o_delta_wt_1_2_ready,
  output     [31:0]   o_delta_wt_1_2_payload,
  output              o_delta_wt_1_3_valid,
  input               o_delta_wt_1_3_ready,
  output     [31:0]   o_delta_wt_1_3_payload,
  output              o_delta_wt_1_4_valid,
  input               o_delta_wt_1_4_ready,
  output     [31:0]   o_delta_wt_1_4_payload,
  output              o_delta_wt_1_5_valid,
  input               o_delta_wt_1_5_ready,
  output     [31:0]   o_delta_wt_1_5_payload,
  output              o_delta_wt_1_6_valid,
  input               o_delta_wt_1_6_ready,
  output     [31:0]   o_delta_wt_1_6_payload,
  output              o_delta_wt_1_7_valid,
  input               o_delta_wt_1_7_ready,
  output     [31:0]   o_delta_wt_1_7_payload,
  output              o_delta_wt_2_0_valid,
  input               o_delta_wt_2_0_ready,
  output     [31:0]   o_delta_wt_2_0_payload,
  output              o_delta_wt_2_1_valid,
  input               o_delta_wt_2_1_ready,
  output     [31:0]   o_delta_wt_2_1_payload,
  output              o_delta_wt_2_2_valid,
  input               o_delta_wt_2_2_ready,
  output     [31:0]   o_delta_wt_2_2_payload,
  output              o_delta_wt_2_3_valid,
  input               o_delta_wt_2_3_ready,
  output     [31:0]   o_delta_wt_2_3_payload,
  output              o_delta_wt_2_4_valid,
  input               o_delta_wt_2_4_ready,
  output     [31:0]   o_delta_wt_2_4_payload,
  output              o_delta_wt_2_5_valid,
  input               o_delta_wt_2_5_ready,
  output     [31:0]   o_delta_wt_2_5_payload,
  output              o_delta_wt_2_6_valid,
  input               o_delta_wt_2_6_ready,
  output     [31:0]   o_delta_wt_2_6_payload,
  output              o_delta_wt_2_7_valid,
  input               o_delta_wt_2_7_ready,
  output     [31:0]   o_delta_wt_2_7_payload,
  output              o_delta_wt_3_0_valid,
  input               o_delta_wt_3_0_ready,
  output     [31:0]   o_delta_wt_3_0_payload,
  output              o_delta_wt_3_1_valid,
  input               o_delta_wt_3_1_ready,
  output     [31:0]   o_delta_wt_3_1_payload,
  output              o_delta_wt_3_2_valid,
  input               o_delta_wt_3_2_ready,
  output     [31:0]   o_delta_wt_3_2_payload,
  output              o_delta_wt_3_3_valid,
  input               o_delta_wt_3_3_ready,
  output     [31:0]   o_delta_wt_3_3_payload,
  output              o_delta_wt_3_4_valid,
  input               o_delta_wt_3_4_ready,
  output     [31:0]   o_delta_wt_3_4_payload,
  output              o_delta_wt_3_5_valid,
  input               o_delta_wt_3_5_ready,
  output     [31:0]   o_delta_wt_3_5_payload,
  output              o_delta_wt_3_6_valid,
  input               o_delta_wt_3_6_ready,
  output     [31:0]   o_delta_wt_3_6_payload,
  output              o_delta_wt_3_7_valid,
  input               o_delta_wt_3_7_ready,
  output     [31:0]   o_delta_wt_3_7_payload,
  output              o_delta_wt_4_0_valid,
  input               o_delta_wt_4_0_ready,
  output     [31:0]   o_delta_wt_4_0_payload,
  output              o_delta_wt_4_1_valid,
  input               o_delta_wt_4_1_ready,
  output     [31:0]   o_delta_wt_4_1_payload,
  output              o_delta_wt_4_2_valid,
  input               o_delta_wt_4_2_ready,
  output     [31:0]   o_delta_wt_4_2_payload,
  output              o_delta_wt_4_3_valid,
  input               o_delta_wt_4_3_ready,
  output     [31:0]   o_delta_wt_4_3_payload,
  output              o_delta_wt_4_4_valid,
  input               o_delta_wt_4_4_ready,
  output     [31:0]   o_delta_wt_4_4_payload,
  output              o_delta_wt_4_5_valid,
  input               o_delta_wt_4_5_ready,
  output     [31:0]   o_delta_wt_4_5_payload,
  output              o_delta_wt_4_6_valid,
  input               o_delta_wt_4_6_ready,
  output     [31:0]   o_delta_wt_4_6_payload,
  output              o_delta_wt_4_7_valid,
  input               o_delta_wt_4_7_ready,
  output     [31:0]   o_delta_wt_4_7_payload,
  output              o_delta_wt_5_0_valid,
  input               o_delta_wt_5_0_ready,
  output     [31:0]   o_delta_wt_5_0_payload,
  output              o_delta_wt_5_1_valid,
  input               o_delta_wt_5_1_ready,
  output     [31:0]   o_delta_wt_5_1_payload,
  output              o_delta_wt_5_2_valid,
  input               o_delta_wt_5_2_ready,
  output     [31:0]   o_delta_wt_5_2_payload,
  output              o_delta_wt_5_3_valid,
  input               o_delta_wt_5_3_ready,
  output     [31:0]   o_delta_wt_5_3_payload,
  output              o_delta_wt_5_4_valid,
  input               o_delta_wt_5_4_ready,
  output     [31:0]   o_delta_wt_5_4_payload,
  output              o_delta_wt_5_5_valid,
  input               o_delta_wt_5_5_ready,
  output     [31:0]   o_delta_wt_5_5_payload,
  output              o_delta_wt_5_6_valid,
  input               o_delta_wt_5_6_ready,
  output     [31:0]   o_delta_wt_5_6_payload,
  output              o_delta_wt_5_7_valid,
  input               o_delta_wt_5_7_ready,
  output     [31:0]   o_delta_wt_5_7_payload,
  output              o_delta_wt_6_0_valid,
  input               o_delta_wt_6_0_ready,
  output     [31:0]   o_delta_wt_6_0_payload,
  output              o_delta_wt_6_1_valid,
  input               o_delta_wt_6_1_ready,
  output     [31:0]   o_delta_wt_6_1_payload,
  output              o_delta_wt_6_2_valid,
  input               o_delta_wt_6_2_ready,
  output     [31:0]   o_delta_wt_6_2_payload,
  output              o_delta_wt_6_3_valid,
  input               o_delta_wt_6_3_ready,
  output     [31:0]   o_delta_wt_6_3_payload,
  output              o_delta_wt_6_4_valid,
  input               o_delta_wt_6_4_ready,
  output     [31:0]   o_delta_wt_6_4_payload,
  output              o_delta_wt_6_5_valid,
  input               o_delta_wt_6_5_ready,
  output     [31:0]   o_delta_wt_6_5_payload,
  output              o_delta_wt_6_6_valid,
  input               o_delta_wt_6_6_ready,
  output     [31:0]   o_delta_wt_6_6_payload,
  output              o_delta_wt_6_7_valid,
  input               o_delta_wt_6_7_ready,
  output     [31:0]   o_delta_wt_6_7_payload,
  output              o_delta_wt_7_0_valid,
  input               o_delta_wt_7_0_ready,
  output     [31:0]   o_delta_wt_7_0_payload,
  output              o_delta_wt_7_1_valid,
  input               o_delta_wt_7_1_ready,
  output     [31:0]   o_delta_wt_7_1_payload,
  output              o_delta_wt_7_2_valid,
  input               o_delta_wt_7_2_ready,
  output     [31:0]   o_delta_wt_7_2_payload,
  output              o_delta_wt_7_3_valid,
  input               o_delta_wt_7_3_ready,
  output     [31:0]   o_delta_wt_7_3_payload,
  output              o_delta_wt_7_4_valid,
  input               o_delta_wt_7_4_ready,
  output     [31:0]   o_delta_wt_7_4_payload,
  output              o_delta_wt_7_5_valid,
  input               o_delta_wt_7_5_ready,
  output     [31:0]   o_delta_wt_7_5_payload,
  output              o_delta_wt_7_6_valid,
  input               o_delta_wt_7_6_ready,
  output     [31:0]   o_delta_wt_7_6_payload,
  output              o_delta_wt_7_7_valid,
  input               o_delta_wt_7_7_ready,
  output     [31:0]   o_delta_wt_7_7_payload,
  output              o_sigma_0_0_valid,
  input               o_sigma_0_0_ready,
  output     [31:0]   o_sigma_0_0_payload,
  output              o_sigma_0_1_valid,
  input               o_sigma_0_1_ready,
  output     [31:0]   o_sigma_0_1_payload,
  output              o_sigma_0_2_valid,
  input               o_sigma_0_2_ready,
  output     [31:0]   o_sigma_0_2_payload,
  output              o_sigma_0_3_valid,
  input               o_sigma_0_3_ready,
  output     [31:0]   o_sigma_0_3_payload,
  output              o_sigma_0_4_valid,
  input               o_sigma_0_4_ready,
  output     [31:0]   o_sigma_0_4_payload,
  output              o_sigma_0_5_valid,
  input               o_sigma_0_5_ready,
  output     [31:0]   o_sigma_0_5_payload,
  output              o_sigma_0_6_valid,
  input               o_sigma_0_6_ready,
  output     [31:0]   o_sigma_0_6_payload,
  output              o_sigma_0_7_valid,
  input               o_sigma_0_7_ready,
  output     [31:0]   o_sigma_0_7_payload,
  output              o_sigma_1_0_valid,
  input               o_sigma_1_0_ready,
  output     [31:0]   o_sigma_1_0_payload,
  output              o_sigma_1_1_valid,
  input               o_sigma_1_1_ready,
  output     [31:0]   o_sigma_1_1_payload,
  output              o_sigma_1_2_valid,
  input               o_sigma_1_2_ready,
  output     [31:0]   o_sigma_1_2_payload,
  output              o_sigma_1_3_valid,
  input               o_sigma_1_3_ready,
  output     [31:0]   o_sigma_1_3_payload,
  output              o_sigma_1_4_valid,
  input               o_sigma_1_4_ready,
  output     [31:0]   o_sigma_1_4_payload,
  output              o_sigma_1_5_valid,
  input               o_sigma_1_5_ready,
  output     [31:0]   o_sigma_1_5_payload,
  output              o_sigma_1_6_valid,
  input               o_sigma_1_6_ready,
  output     [31:0]   o_sigma_1_6_payload,
  output              o_sigma_1_7_valid,
  input               o_sigma_1_7_ready,
  output     [31:0]   o_sigma_1_7_payload,
  output              o_sigma_2_0_valid,
  input               o_sigma_2_0_ready,
  output     [31:0]   o_sigma_2_0_payload,
  output              o_sigma_2_1_valid,
  input               o_sigma_2_1_ready,
  output     [31:0]   o_sigma_2_1_payload,
  output              o_sigma_2_2_valid,
  input               o_sigma_2_2_ready,
  output     [31:0]   o_sigma_2_2_payload,
  output              o_sigma_2_3_valid,
  input               o_sigma_2_3_ready,
  output     [31:0]   o_sigma_2_3_payload,
  output              o_sigma_2_4_valid,
  input               o_sigma_2_4_ready,
  output     [31:0]   o_sigma_2_4_payload,
  output              o_sigma_2_5_valid,
  input               o_sigma_2_5_ready,
  output     [31:0]   o_sigma_2_5_payload,
  output              o_sigma_2_6_valid,
  input               o_sigma_2_6_ready,
  output     [31:0]   o_sigma_2_6_payload,
  output              o_sigma_2_7_valid,
  input               o_sigma_2_7_ready,
  output     [31:0]   o_sigma_2_7_payload,
  output              o_sigma_3_0_valid,
  input               o_sigma_3_0_ready,
  output     [31:0]   o_sigma_3_0_payload,
  output              o_sigma_3_1_valid,
  input               o_sigma_3_1_ready,
  output     [31:0]   o_sigma_3_1_payload,
  output              o_sigma_3_2_valid,
  input               o_sigma_3_2_ready,
  output     [31:0]   o_sigma_3_2_payload,
  output              o_sigma_3_3_valid,
  input               o_sigma_3_3_ready,
  output     [31:0]   o_sigma_3_3_payload,
  output              o_sigma_3_4_valid,
  input               o_sigma_3_4_ready,
  output     [31:0]   o_sigma_3_4_payload,
  output              o_sigma_3_5_valid,
  input               o_sigma_3_5_ready,
  output     [31:0]   o_sigma_3_5_payload,
  output              o_sigma_3_6_valid,
  input               o_sigma_3_6_ready,
  output     [31:0]   o_sigma_3_6_payload,
  output              o_sigma_3_7_valid,
  input               o_sigma_3_7_ready,
  output     [31:0]   o_sigma_3_7_payload,
  output              o_sigma_4_0_valid,
  input               o_sigma_4_0_ready,
  output     [31:0]   o_sigma_4_0_payload,
  output              o_sigma_4_1_valid,
  input               o_sigma_4_1_ready,
  output     [31:0]   o_sigma_4_1_payload,
  output              o_sigma_4_2_valid,
  input               o_sigma_4_2_ready,
  output     [31:0]   o_sigma_4_2_payload,
  output              o_sigma_4_3_valid,
  input               o_sigma_4_3_ready,
  output     [31:0]   o_sigma_4_3_payload,
  output              o_sigma_4_4_valid,
  input               o_sigma_4_4_ready,
  output     [31:0]   o_sigma_4_4_payload,
  output              o_sigma_4_5_valid,
  input               o_sigma_4_5_ready,
  output     [31:0]   o_sigma_4_5_payload,
  output              o_sigma_4_6_valid,
  input               o_sigma_4_6_ready,
  output     [31:0]   o_sigma_4_6_payload,
  output              o_sigma_4_7_valid,
  input               o_sigma_4_7_ready,
  output     [31:0]   o_sigma_4_7_payload,
  output              o_sigma_5_0_valid,
  input               o_sigma_5_0_ready,
  output     [31:0]   o_sigma_5_0_payload,
  output              o_sigma_5_1_valid,
  input               o_sigma_5_1_ready,
  output     [31:0]   o_sigma_5_1_payload,
  output              o_sigma_5_2_valid,
  input               o_sigma_5_2_ready,
  output     [31:0]   o_sigma_5_2_payload,
  output              o_sigma_5_3_valid,
  input               o_sigma_5_3_ready,
  output     [31:0]   o_sigma_5_3_payload,
  output              o_sigma_5_4_valid,
  input               o_sigma_5_4_ready,
  output     [31:0]   o_sigma_5_4_payload,
  output              o_sigma_5_5_valid,
  input               o_sigma_5_5_ready,
  output     [31:0]   o_sigma_5_5_payload,
  output              o_sigma_5_6_valid,
  input               o_sigma_5_6_ready,
  output     [31:0]   o_sigma_5_6_payload,
  output              o_sigma_5_7_valid,
  input               o_sigma_5_7_ready,
  output     [31:0]   o_sigma_5_7_payload,
  output              o_sigma_6_0_valid,
  input               o_sigma_6_0_ready,
  output     [31:0]   o_sigma_6_0_payload,
  output              o_sigma_6_1_valid,
  input               o_sigma_6_1_ready,
  output     [31:0]   o_sigma_6_1_payload,
  output              o_sigma_6_2_valid,
  input               o_sigma_6_2_ready,
  output     [31:0]   o_sigma_6_2_payload,
  output              o_sigma_6_3_valid,
  input               o_sigma_6_3_ready,
  output     [31:0]   o_sigma_6_3_payload,
  output              o_sigma_6_4_valid,
  input               o_sigma_6_4_ready,
  output     [31:0]   o_sigma_6_4_payload,
  output              o_sigma_6_5_valid,
  input               o_sigma_6_5_ready,
  output     [31:0]   o_sigma_6_5_payload,
  output              o_sigma_6_6_valid,
  input               o_sigma_6_6_ready,
  output     [31:0]   o_sigma_6_6_payload,
  output              o_sigma_6_7_valid,
  input               o_sigma_6_7_ready,
  output     [31:0]   o_sigma_6_7_payload,
  output              o_sigma_7_0_valid,
  input               o_sigma_7_0_ready,
  output     [31:0]   o_sigma_7_0_payload,
  output              o_sigma_7_1_valid,
  input               o_sigma_7_1_ready,
  output     [31:0]   o_sigma_7_1_payload,
  output              o_sigma_7_2_valid,
  input               o_sigma_7_2_ready,
  output     [31:0]   o_sigma_7_2_payload,
  output              o_sigma_7_3_valid,
  input               o_sigma_7_3_ready,
  output     [31:0]   o_sigma_7_3_payload,
  output              o_sigma_7_4_valid,
  input               o_sigma_7_4_ready,
  output     [31:0]   o_sigma_7_4_payload,
  output              o_sigma_7_5_valid,
  input               o_sigma_7_5_ready,
  output     [31:0]   o_sigma_7_5_payload,
  output              o_sigma_7_6_valid,
  input               o_sigma_7_6_ready,
  output     [31:0]   o_sigma_7_6_payload,
  output              o_sigma_7_7_valid,
  input               o_sigma_7_7_ready,
  output     [31:0]   o_sigma_7_7_payload,
  input               clk,
  input               reset
);
  wire       [15:0]   conv_core_par_acc_cnt;
  wire                read_req_cfg_ready;
  wire       [31:0]   read_req_dt_ramrd_addr;
  wire                read_req_dt_ramrd_en;
  wire       [31:0]   read_req_wt_ramrd_0_addr;
  wire                read_req_wt_ramrd_0_en;
  wire       [31:0]   read_req_wt_ramrd_1_addr;
  wire                read_req_wt_ramrd_1_en;
  wire       [31:0]   read_req_wt_ramrd_2_addr;
  wire                read_req_wt_ramrd_2_en;
  wire       [31:0]   read_req_wt_ramrd_3_addr;
  wire                read_req_wt_ramrd_3_en;
  wire       [31:0]   read_req_wt_ramrd_4_addr;
  wire                read_req_wt_ramrd_4_en;
  wire       [31:0]   read_req_wt_ramrd_5_addr;
  wire                read_req_wt_ramrd_5_en;
  wire       [31:0]   read_req_wt_ramrd_6_addr;
  wire                read_req_wt_ramrd_6_en;
  wire       [31:0]   read_req_wt_ramrd_7_addr;
  wire                read_req_wt_ramrd_7_en;
  wire                read_req_o_ft_valid;
  wire       [255:0]  read_req_o_ft_payload;
  wire                read_req_o_wt_0_valid;
  wire       [255:0]  read_req_o_wt_0_payload;
  wire                read_req_o_wt_1_valid;
  wire       [255:0]  read_req_o_wt_1_payload;
  wire                read_req_o_wt_2_valid;
  wire       [255:0]  read_req_o_wt_2_payload;
  wire                read_req_o_wt_3_valid;
  wire       [255:0]  read_req_o_wt_3_payload;
  wire                read_req_o_wt_4_valid;
  wire       [255:0]  read_req_o_wt_4_payload;
  wire                read_req_o_wt_5_valid;
  wire       [255:0]  read_req_o_wt_5_payload;
  wire                read_req_o_wt_6_valid;
  wire       [255:0]  read_req_o_wt_6_payload;
  wire                read_req_o_wt_7_valid;
  wire       [255:0]  read_req_o_wt_7_payload;
  wire                data_cvt_io_i_ft_ready;
  wire                data_cvt_io_i_wt_0_ready;
  wire                data_cvt_io_i_wt_1_ready;
  wire                data_cvt_io_i_wt_2_ready;
  wire                data_cvt_io_i_wt_3_ready;
  wire                data_cvt_io_i_wt_4_ready;
  wire                data_cvt_io_i_wt_5_ready;
  wire                data_cvt_io_i_wt_6_ready;
  wire                data_cvt_io_i_wt_7_ready;
  wire                data_cvt_io_o_ft_0_valid;
  wire       [31:0]   data_cvt_io_o_ft_0_payload;
  wire                data_cvt_io_o_ft_1_valid;
  wire       [31:0]   data_cvt_io_o_ft_1_payload;
  wire                data_cvt_io_o_ft_2_valid;
  wire       [31:0]   data_cvt_io_o_ft_2_payload;
  wire                data_cvt_io_o_ft_3_valid;
  wire       [31:0]   data_cvt_io_o_ft_3_payload;
  wire                data_cvt_io_o_ft_4_valid;
  wire       [31:0]   data_cvt_io_o_ft_4_payload;
  wire                data_cvt_io_o_ft_5_valid;
  wire       [31:0]   data_cvt_io_o_ft_5_payload;
  wire                data_cvt_io_o_ft_6_valid;
  wire       [31:0]   data_cvt_io_o_ft_6_payload;
  wire                data_cvt_io_o_ft_7_valid;
  wire       [31:0]   data_cvt_io_o_ft_7_payload;
  wire                data_cvt_io_o_wt_0_0_valid;
  wire       [31:0]   data_cvt_io_o_wt_0_0_payload;
  wire                data_cvt_io_o_wt_0_1_valid;
  wire       [31:0]   data_cvt_io_o_wt_0_1_payload;
  wire                data_cvt_io_o_wt_0_2_valid;
  wire       [31:0]   data_cvt_io_o_wt_0_2_payload;
  wire                data_cvt_io_o_wt_0_3_valid;
  wire       [31:0]   data_cvt_io_o_wt_0_3_payload;
  wire                data_cvt_io_o_wt_0_4_valid;
  wire       [31:0]   data_cvt_io_o_wt_0_4_payload;
  wire                data_cvt_io_o_wt_0_5_valid;
  wire       [31:0]   data_cvt_io_o_wt_0_5_payload;
  wire                data_cvt_io_o_wt_0_6_valid;
  wire       [31:0]   data_cvt_io_o_wt_0_6_payload;
  wire                data_cvt_io_o_wt_0_7_valid;
  wire       [31:0]   data_cvt_io_o_wt_0_7_payload;
  wire                data_cvt_io_o_wt_1_0_valid;
  wire       [31:0]   data_cvt_io_o_wt_1_0_payload;
  wire                data_cvt_io_o_wt_1_1_valid;
  wire       [31:0]   data_cvt_io_o_wt_1_1_payload;
  wire                data_cvt_io_o_wt_1_2_valid;
  wire       [31:0]   data_cvt_io_o_wt_1_2_payload;
  wire                data_cvt_io_o_wt_1_3_valid;
  wire       [31:0]   data_cvt_io_o_wt_1_3_payload;
  wire                data_cvt_io_o_wt_1_4_valid;
  wire       [31:0]   data_cvt_io_o_wt_1_4_payload;
  wire                data_cvt_io_o_wt_1_5_valid;
  wire       [31:0]   data_cvt_io_o_wt_1_5_payload;
  wire                data_cvt_io_o_wt_1_6_valid;
  wire       [31:0]   data_cvt_io_o_wt_1_6_payload;
  wire                data_cvt_io_o_wt_1_7_valid;
  wire       [31:0]   data_cvt_io_o_wt_1_7_payload;
  wire                data_cvt_io_o_wt_2_0_valid;
  wire       [31:0]   data_cvt_io_o_wt_2_0_payload;
  wire                data_cvt_io_o_wt_2_1_valid;
  wire       [31:0]   data_cvt_io_o_wt_2_1_payload;
  wire                data_cvt_io_o_wt_2_2_valid;
  wire       [31:0]   data_cvt_io_o_wt_2_2_payload;
  wire                data_cvt_io_o_wt_2_3_valid;
  wire       [31:0]   data_cvt_io_o_wt_2_3_payload;
  wire                data_cvt_io_o_wt_2_4_valid;
  wire       [31:0]   data_cvt_io_o_wt_2_4_payload;
  wire                data_cvt_io_o_wt_2_5_valid;
  wire       [31:0]   data_cvt_io_o_wt_2_5_payload;
  wire                data_cvt_io_o_wt_2_6_valid;
  wire       [31:0]   data_cvt_io_o_wt_2_6_payload;
  wire                data_cvt_io_o_wt_2_7_valid;
  wire       [31:0]   data_cvt_io_o_wt_2_7_payload;
  wire                data_cvt_io_o_wt_3_0_valid;
  wire       [31:0]   data_cvt_io_o_wt_3_0_payload;
  wire                data_cvt_io_o_wt_3_1_valid;
  wire       [31:0]   data_cvt_io_o_wt_3_1_payload;
  wire                data_cvt_io_o_wt_3_2_valid;
  wire       [31:0]   data_cvt_io_o_wt_3_2_payload;
  wire                data_cvt_io_o_wt_3_3_valid;
  wire       [31:0]   data_cvt_io_o_wt_3_3_payload;
  wire                data_cvt_io_o_wt_3_4_valid;
  wire       [31:0]   data_cvt_io_o_wt_3_4_payload;
  wire                data_cvt_io_o_wt_3_5_valid;
  wire       [31:0]   data_cvt_io_o_wt_3_5_payload;
  wire                data_cvt_io_o_wt_3_6_valid;
  wire       [31:0]   data_cvt_io_o_wt_3_6_payload;
  wire                data_cvt_io_o_wt_3_7_valid;
  wire       [31:0]   data_cvt_io_o_wt_3_7_payload;
  wire                data_cvt_io_o_wt_4_0_valid;
  wire       [31:0]   data_cvt_io_o_wt_4_0_payload;
  wire                data_cvt_io_o_wt_4_1_valid;
  wire       [31:0]   data_cvt_io_o_wt_4_1_payload;
  wire                data_cvt_io_o_wt_4_2_valid;
  wire       [31:0]   data_cvt_io_o_wt_4_2_payload;
  wire                data_cvt_io_o_wt_4_3_valid;
  wire       [31:0]   data_cvt_io_o_wt_4_3_payload;
  wire                data_cvt_io_o_wt_4_4_valid;
  wire       [31:0]   data_cvt_io_o_wt_4_4_payload;
  wire                data_cvt_io_o_wt_4_5_valid;
  wire       [31:0]   data_cvt_io_o_wt_4_5_payload;
  wire                data_cvt_io_o_wt_4_6_valid;
  wire       [31:0]   data_cvt_io_o_wt_4_6_payload;
  wire                data_cvt_io_o_wt_4_7_valid;
  wire       [31:0]   data_cvt_io_o_wt_4_7_payload;
  wire                data_cvt_io_o_wt_5_0_valid;
  wire       [31:0]   data_cvt_io_o_wt_5_0_payload;
  wire                data_cvt_io_o_wt_5_1_valid;
  wire       [31:0]   data_cvt_io_o_wt_5_1_payload;
  wire                data_cvt_io_o_wt_5_2_valid;
  wire       [31:0]   data_cvt_io_o_wt_5_2_payload;
  wire                data_cvt_io_o_wt_5_3_valid;
  wire       [31:0]   data_cvt_io_o_wt_5_3_payload;
  wire                data_cvt_io_o_wt_5_4_valid;
  wire       [31:0]   data_cvt_io_o_wt_5_4_payload;
  wire                data_cvt_io_o_wt_5_5_valid;
  wire       [31:0]   data_cvt_io_o_wt_5_5_payload;
  wire                data_cvt_io_o_wt_5_6_valid;
  wire       [31:0]   data_cvt_io_o_wt_5_6_payload;
  wire                data_cvt_io_o_wt_5_7_valid;
  wire       [31:0]   data_cvt_io_o_wt_5_7_payload;
  wire                data_cvt_io_o_wt_6_0_valid;
  wire       [31:0]   data_cvt_io_o_wt_6_0_payload;
  wire                data_cvt_io_o_wt_6_1_valid;
  wire       [31:0]   data_cvt_io_o_wt_6_1_payload;
  wire                data_cvt_io_o_wt_6_2_valid;
  wire       [31:0]   data_cvt_io_o_wt_6_2_payload;
  wire                data_cvt_io_o_wt_6_3_valid;
  wire       [31:0]   data_cvt_io_o_wt_6_3_payload;
  wire                data_cvt_io_o_wt_6_4_valid;
  wire       [31:0]   data_cvt_io_o_wt_6_4_payload;
  wire                data_cvt_io_o_wt_6_5_valid;
  wire       [31:0]   data_cvt_io_o_wt_6_5_payload;
  wire                data_cvt_io_o_wt_6_6_valid;
  wire       [31:0]   data_cvt_io_o_wt_6_6_payload;
  wire                data_cvt_io_o_wt_6_7_valid;
  wire       [31:0]   data_cvt_io_o_wt_6_7_payload;
  wire                data_cvt_io_o_wt_7_0_valid;
  wire       [31:0]   data_cvt_io_o_wt_7_0_payload;
  wire                data_cvt_io_o_wt_7_1_valid;
  wire       [31:0]   data_cvt_io_o_wt_7_1_payload;
  wire                data_cvt_io_o_wt_7_2_valid;
  wire       [31:0]   data_cvt_io_o_wt_7_2_payload;
  wire                data_cvt_io_o_wt_7_3_valid;
  wire       [31:0]   data_cvt_io_o_wt_7_3_payload;
  wire                data_cvt_io_o_wt_7_4_valid;
  wire       [31:0]   data_cvt_io_o_wt_7_4_payload;
  wire                data_cvt_io_o_wt_7_5_valid;
  wire       [31:0]   data_cvt_io_o_wt_7_5_payload;
  wire                data_cvt_io_o_wt_7_6_valid;
  wire       [31:0]   data_cvt_io_o_wt_7_6_payload;
  wire                data_cvt_io_o_wt_7_7_valid;
  wire       [31:0]   data_cvt_io_o_wt_7_7_payload;
  wire                conv_core_s_ft_0_ready;
  wire                conv_core_s_ft_1_ready;
  wire                conv_core_s_ft_2_ready;
  wire                conv_core_s_ft_3_ready;
  wire                conv_core_s_ft_4_ready;
  wire                conv_core_s_ft_5_ready;
  wire                conv_core_s_ft_6_ready;
  wire                conv_core_s_ft_7_ready;
  wire                conv_core_s_wt_0_0_ready;
  wire                conv_core_s_wt_0_1_ready;
  wire                conv_core_s_wt_0_2_ready;
  wire                conv_core_s_wt_0_3_ready;
  wire                conv_core_s_wt_0_4_ready;
  wire                conv_core_s_wt_0_5_ready;
  wire                conv_core_s_wt_0_6_ready;
  wire                conv_core_s_wt_0_7_ready;
  wire                conv_core_s_wt_1_0_ready;
  wire                conv_core_s_wt_1_1_ready;
  wire                conv_core_s_wt_1_2_ready;
  wire                conv_core_s_wt_1_3_ready;
  wire                conv_core_s_wt_1_4_ready;
  wire                conv_core_s_wt_1_5_ready;
  wire                conv_core_s_wt_1_6_ready;
  wire                conv_core_s_wt_1_7_ready;
  wire                conv_core_s_wt_2_0_ready;
  wire                conv_core_s_wt_2_1_ready;
  wire                conv_core_s_wt_2_2_ready;
  wire                conv_core_s_wt_2_3_ready;
  wire                conv_core_s_wt_2_4_ready;
  wire                conv_core_s_wt_2_5_ready;
  wire                conv_core_s_wt_2_6_ready;
  wire                conv_core_s_wt_2_7_ready;
  wire                conv_core_s_wt_3_0_ready;
  wire                conv_core_s_wt_3_1_ready;
  wire                conv_core_s_wt_3_2_ready;
  wire                conv_core_s_wt_3_3_ready;
  wire                conv_core_s_wt_3_4_ready;
  wire                conv_core_s_wt_3_5_ready;
  wire                conv_core_s_wt_3_6_ready;
  wire                conv_core_s_wt_3_7_ready;
  wire                conv_core_s_wt_4_0_ready;
  wire                conv_core_s_wt_4_1_ready;
  wire                conv_core_s_wt_4_2_ready;
  wire                conv_core_s_wt_4_3_ready;
  wire                conv_core_s_wt_4_4_ready;
  wire                conv_core_s_wt_4_5_ready;
  wire                conv_core_s_wt_4_6_ready;
  wire                conv_core_s_wt_4_7_ready;
  wire                conv_core_s_wt_5_0_ready;
  wire                conv_core_s_wt_5_1_ready;
  wire                conv_core_s_wt_5_2_ready;
  wire                conv_core_s_wt_5_3_ready;
  wire                conv_core_s_wt_5_4_ready;
  wire                conv_core_s_wt_5_5_ready;
  wire                conv_core_s_wt_5_6_ready;
  wire                conv_core_s_wt_5_7_ready;
  wire                conv_core_s_wt_6_0_ready;
  wire                conv_core_s_wt_6_1_ready;
  wire                conv_core_s_wt_6_2_ready;
  wire                conv_core_s_wt_6_3_ready;
  wire                conv_core_s_wt_6_4_ready;
  wire                conv_core_s_wt_6_5_ready;
  wire                conv_core_s_wt_6_6_ready;
  wire                conv_core_s_wt_6_7_ready;
  wire                conv_core_s_wt_7_0_ready;
  wire                conv_core_s_wt_7_1_ready;
  wire                conv_core_s_wt_7_2_ready;
  wire                conv_core_s_wt_7_3_ready;
  wire                conv_core_s_wt_7_4_ready;
  wire                conv_core_s_wt_7_5_ready;
  wire                conv_core_s_wt_7_6_ready;
  wire                conv_core_s_wt_7_7_ready;
  wire                conv_core_s_out_0_0_valid;
  wire       [31:0]   conv_core_s_out_0_0_payload;
  wire                conv_core_s_out_0_1_valid;
  wire       [31:0]   conv_core_s_out_0_1_payload;
  wire                conv_core_s_out_0_2_valid;
  wire       [31:0]   conv_core_s_out_0_2_payload;
  wire                conv_core_s_out_0_3_valid;
  wire       [31:0]   conv_core_s_out_0_3_payload;
  wire                conv_core_s_out_0_4_valid;
  wire       [31:0]   conv_core_s_out_0_4_payload;
  wire                conv_core_s_out_0_5_valid;
  wire       [31:0]   conv_core_s_out_0_5_payload;
  wire                conv_core_s_out_0_6_valid;
  wire       [31:0]   conv_core_s_out_0_6_payload;
  wire                conv_core_s_out_0_7_valid;
  wire       [31:0]   conv_core_s_out_0_7_payload;
  wire                conv_core_s_out_1_0_valid;
  wire       [31:0]   conv_core_s_out_1_0_payload;
  wire                conv_core_s_out_1_1_valid;
  wire       [31:0]   conv_core_s_out_1_1_payload;
  wire                conv_core_s_out_1_2_valid;
  wire       [31:0]   conv_core_s_out_1_2_payload;
  wire                conv_core_s_out_1_3_valid;
  wire       [31:0]   conv_core_s_out_1_3_payload;
  wire                conv_core_s_out_1_4_valid;
  wire       [31:0]   conv_core_s_out_1_4_payload;
  wire                conv_core_s_out_1_5_valid;
  wire       [31:0]   conv_core_s_out_1_5_payload;
  wire                conv_core_s_out_1_6_valid;
  wire       [31:0]   conv_core_s_out_1_6_payload;
  wire                conv_core_s_out_1_7_valid;
  wire       [31:0]   conv_core_s_out_1_7_payload;
  wire                conv_core_s_out_2_0_valid;
  wire       [31:0]   conv_core_s_out_2_0_payload;
  wire                conv_core_s_out_2_1_valid;
  wire       [31:0]   conv_core_s_out_2_1_payload;
  wire                conv_core_s_out_2_2_valid;
  wire       [31:0]   conv_core_s_out_2_2_payload;
  wire                conv_core_s_out_2_3_valid;
  wire       [31:0]   conv_core_s_out_2_3_payload;
  wire                conv_core_s_out_2_4_valid;
  wire       [31:0]   conv_core_s_out_2_4_payload;
  wire                conv_core_s_out_2_5_valid;
  wire       [31:0]   conv_core_s_out_2_5_payload;
  wire                conv_core_s_out_2_6_valid;
  wire       [31:0]   conv_core_s_out_2_6_payload;
  wire                conv_core_s_out_2_7_valid;
  wire       [31:0]   conv_core_s_out_2_7_payload;
  wire                conv_core_s_out_3_0_valid;
  wire       [31:0]   conv_core_s_out_3_0_payload;
  wire                conv_core_s_out_3_1_valid;
  wire       [31:0]   conv_core_s_out_3_1_payload;
  wire                conv_core_s_out_3_2_valid;
  wire       [31:0]   conv_core_s_out_3_2_payload;
  wire                conv_core_s_out_3_3_valid;
  wire       [31:0]   conv_core_s_out_3_3_payload;
  wire                conv_core_s_out_3_4_valid;
  wire       [31:0]   conv_core_s_out_3_4_payload;
  wire                conv_core_s_out_3_5_valid;
  wire       [31:0]   conv_core_s_out_3_5_payload;
  wire                conv_core_s_out_3_6_valid;
  wire       [31:0]   conv_core_s_out_3_6_payload;
  wire                conv_core_s_out_3_7_valid;
  wire       [31:0]   conv_core_s_out_3_7_payload;
  wire                conv_core_s_out_4_0_valid;
  wire       [31:0]   conv_core_s_out_4_0_payload;
  wire                conv_core_s_out_4_1_valid;
  wire       [31:0]   conv_core_s_out_4_1_payload;
  wire                conv_core_s_out_4_2_valid;
  wire       [31:0]   conv_core_s_out_4_2_payload;
  wire                conv_core_s_out_4_3_valid;
  wire       [31:0]   conv_core_s_out_4_3_payload;
  wire                conv_core_s_out_4_4_valid;
  wire       [31:0]   conv_core_s_out_4_4_payload;
  wire                conv_core_s_out_4_5_valid;
  wire       [31:0]   conv_core_s_out_4_5_payload;
  wire                conv_core_s_out_4_6_valid;
  wire       [31:0]   conv_core_s_out_4_6_payload;
  wire                conv_core_s_out_4_7_valid;
  wire       [31:0]   conv_core_s_out_4_7_payload;
  wire                conv_core_s_out_5_0_valid;
  wire       [31:0]   conv_core_s_out_5_0_payload;
  wire                conv_core_s_out_5_1_valid;
  wire       [31:0]   conv_core_s_out_5_1_payload;
  wire                conv_core_s_out_5_2_valid;
  wire       [31:0]   conv_core_s_out_5_2_payload;
  wire                conv_core_s_out_5_3_valid;
  wire       [31:0]   conv_core_s_out_5_3_payload;
  wire                conv_core_s_out_5_4_valid;
  wire       [31:0]   conv_core_s_out_5_4_payload;
  wire                conv_core_s_out_5_5_valid;
  wire       [31:0]   conv_core_s_out_5_5_payload;
  wire                conv_core_s_out_5_6_valid;
  wire       [31:0]   conv_core_s_out_5_6_payload;
  wire                conv_core_s_out_5_7_valid;
  wire       [31:0]   conv_core_s_out_5_7_payload;
  wire                conv_core_s_out_6_0_valid;
  wire       [31:0]   conv_core_s_out_6_0_payload;
  wire                conv_core_s_out_6_1_valid;
  wire       [31:0]   conv_core_s_out_6_1_payload;
  wire                conv_core_s_out_6_2_valid;
  wire       [31:0]   conv_core_s_out_6_2_payload;
  wire                conv_core_s_out_6_3_valid;
  wire       [31:0]   conv_core_s_out_6_3_payload;
  wire                conv_core_s_out_6_4_valid;
  wire       [31:0]   conv_core_s_out_6_4_payload;
  wire                conv_core_s_out_6_5_valid;
  wire       [31:0]   conv_core_s_out_6_5_payload;
  wire                conv_core_s_out_6_6_valid;
  wire       [31:0]   conv_core_s_out_6_6_payload;
  wire                conv_core_s_out_6_7_valid;
  wire       [31:0]   conv_core_s_out_6_7_payload;
  wire                conv_core_s_out_7_0_valid;
  wire       [31:0]   conv_core_s_out_7_0_payload;
  wire                conv_core_s_out_7_1_valid;
  wire       [31:0]   conv_core_s_out_7_1_payload;
  wire                conv_core_s_out_7_2_valid;
  wire       [31:0]   conv_core_s_out_7_2_payload;
  wire                conv_core_s_out_7_3_valid;
  wire       [31:0]   conv_core_s_out_7_3_payload;
  wire                conv_core_s_out_7_4_valid;
  wire       [31:0]   conv_core_s_out_7_4_payload;
  wire                conv_core_s_out_7_5_valid;
  wire       [31:0]   conv_core_s_out_7_5_payload;
  wire                conv_core_s_out_7_6_valid;
  wire       [31:0]   conv_core_s_out_7_6_payload;
  wire                conv_core_s_out_7_7_valid;
  wire       [31:0]   conv_core_s_out_7_7_payload;
  wire                mux_io_indata_0_0_ready;
  wire                mux_io_indata_0_1_ready;
  wire                mux_io_indata_0_2_ready;
  wire                mux_io_indata_0_3_ready;
  wire                mux_io_indata_0_4_ready;
  wire                mux_io_indata_0_5_ready;
  wire                mux_io_indata_0_6_ready;
  wire                mux_io_indata_0_7_ready;
  wire                mux_io_indata_1_0_ready;
  wire                mux_io_indata_1_1_ready;
  wire                mux_io_indata_1_2_ready;
  wire                mux_io_indata_1_3_ready;
  wire                mux_io_indata_1_4_ready;
  wire                mux_io_indata_1_5_ready;
  wire                mux_io_indata_1_6_ready;
  wire                mux_io_indata_1_7_ready;
  wire                mux_io_indata_2_0_ready;
  wire                mux_io_indata_2_1_ready;
  wire                mux_io_indata_2_2_ready;
  wire                mux_io_indata_2_3_ready;
  wire                mux_io_indata_2_4_ready;
  wire                mux_io_indata_2_5_ready;
  wire                mux_io_indata_2_6_ready;
  wire                mux_io_indata_2_7_ready;
  wire                mux_io_indata_3_0_ready;
  wire                mux_io_indata_3_1_ready;
  wire                mux_io_indata_3_2_ready;
  wire                mux_io_indata_3_3_ready;
  wire                mux_io_indata_3_4_ready;
  wire                mux_io_indata_3_5_ready;
  wire                mux_io_indata_3_6_ready;
  wire                mux_io_indata_3_7_ready;
  wire                mux_io_indata_4_0_ready;
  wire                mux_io_indata_4_1_ready;
  wire                mux_io_indata_4_2_ready;
  wire                mux_io_indata_4_3_ready;
  wire                mux_io_indata_4_4_ready;
  wire                mux_io_indata_4_5_ready;
  wire                mux_io_indata_4_6_ready;
  wire                mux_io_indata_4_7_ready;
  wire                mux_io_indata_5_0_ready;
  wire                mux_io_indata_5_1_ready;
  wire                mux_io_indata_5_2_ready;
  wire                mux_io_indata_5_3_ready;
  wire                mux_io_indata_5_4_ready;
  wire                mux_io_indata_5_5_ready;
  wire                mux_io_indata_5_6_ready;
  wire                mux_io_indata_5_7_ready;
  wire                mux_io_indata_6_0_ready;
  wire                mux_io_indata_6_1_ready;
  wire                mux_io_indata_6_2_ready;
  wire                mux_io_indata_6_3_ready;
  wire                mux_io_indata_6_4_ready;
  wire                mux_io_indata_6_5_ready;
  wire                mux_io_indata_6_6_ready;
  wire                mux_io_indata_6_7_ready;
  wire                mux_io_indata_7_0_ready;
  wire                mux_io_indata_7_1_ready;
  wire                mux_io_indata_7_2_ready;
  wire                mux_io_indata_7_3_ready;
  wire                mux_io_indata_7_4_ready;
  wire                mux_io_indata_7_5_ready;
  wire                mux_io_indata_7_6_ready;
  wire                mux_io_indata_7_7_ready;
  wire                mux_io_o_delta_wt_0_0_valid;
  wire       [31:0]   mux_io_o_delta_wt_0_0_payload;
  wire                mux_io_o_delta_wt_0_1_valid;
  wire       [31:0]   mux_io_o_delta_wt_0_1_payload;
  wire                mux_io_o_delta_wt_0_2_valid;
  wire       [31:0]   mux_io_o_delta_wt_0_2_payload;
  wire                mux_io_o_delta_wt_0_3_valid;
  wire       [31:0]   mux_io_o_delta_wt_0_3_payload;
  wire                mux_io_o_delta_wt_0_4_valid;
  wire       [31:0]   mux_io_o_delta_wt_0_4_payload;
  wire                mux_io_o_delta_wt_0_5_valid;
  wire       [31:0]   mux_io_o_delta_wt_0_5_payload;
  wire                mux_io_o_delta_wt_0_6_valid;
  wire       [31:0]   mux_io_o_delta_wt_0_6_payload;
  wire                mux_io_o_delta_wt_0_7_valid;
  wire       [31:0]   mux_io_o_delta_wt_0_7_payload;
  wire                mux_io_o_delta_wt_1_0_valid;
  wire       [31:0]   mux_io_o_delta_wt_1_0_payload;
  wire                mux_io_o_delta_wt_1_1_valid;
  wire       [31:0]   mux_io_o_delta_wt_1_1_payload;
  wire                mux_io_o_delta_wt_1_2_valid;
  wire       [31:0]   mux_io_o_delta_wt_1_2_payload;
  wire                mux_io_o_delta_wt_1_3_valid;
  wire       [31:0]   mux_io_o_delta_wt_1_3_payload;
  wire                mux_io_o_delta_wt_1_4_valid;
  wire       [31:0]   mux_io_o_delta_wt_1_4_payload;
  wire                mux_io_o_delta_wt_1_5_valid;
  wire       [31:0]   mux_io_o_delta_wt_1_5_payload;
  wire                mux_io_o_delta_wt_1_6_valid;
  wire       [31:0]   mux_io_o_delta_wt_1_6_payload;
  wire                mux_io_o_delta_wt_1_7_valid;
  wire       [31:0]   mux_io_o_delta_wt_1_7_payload;
  wire                mux_io_o_delta_wt_2_0_valid;
  wire       [31:0]   mux_io_o_delta_wt_2_0_payload;
  wire                mux_io_o_delta_wt_2_1_valid;
  wire       [31:0]   mux_io_o_delta_wt_2_1_payload;
  wire                mux_io_o_delta_wt_2_2_valid;
  wire       [31:0]   mux_io_o_delta_wt_2_2_payload;
  wire                mux_io_o_delta_wt_2_3_valid;
  wire       [31:0]   mux_io_o_delta_wt_2_3_payload;
  wire                mux_io_o_delta_wt_2_4_valid;
  wire       [31:0]   mux_io_o_delta_wt_2_4_payload;
  wire                mux_io_o_delta_wt_2_5_valid;
  wire       [31:0]   mux_io_o_delta_wt_2_5_payload;
  wire                mux_io_o_delta_wt_2_6_valid;
  wire       [31:0]   mux_io_o_delta_wt_2_6_payload;
  wire                mux_io_o_delta_wt_2_7_valid;
  wire       [31:0]   mux_io_o_delta_wt_2_7_payload;
  wire                mux_io_o_delta_wt_3_0_valid;
  wire       [31:0]   mux_io_o_delta_wt_3_0_payload;
  wire                mux_io_o_delta_wt_3_1_valid;
  wire       [31:0]   mux_io_o_delta_wt_3_1_payload;
  wire                mux_io_o_delta_wt_3_2_valid;
  wire       [31:0]   mux_io_o_delta_wt_3_2_payload;
  wire                mux_io_o_delta_wt_3_3_valid;
  wire       [31:0]   mux_io_o_delta_wt_3_3_payload;
  wire                mux_io_o_delta_wt_3_4_valid;
  wire       [31:0]   mux_io_o_delta_wt_3_4_payload;
  wire                mux_io_o_delta_wt_3_5_valid;
  wire       [31:0]   mux_io_o_delta_wt_3_5_payload;
  wire                mux_io_o_delta_wt_3_6_valid;
  wire       [31:0]   mux_io_o_delta_wt_3_6_payload;
  wire                mux_io_o_delta_wt_3_7_valid;
  wire       [31:0]   mux_io_o_delta_wt_3_7_payload;
  wire                mux_io_o_delta_wt_4_0_valid;
  wire       [31:0]   mux_io_o_delta_wt_4_0_payload;
  wire                mux_io_o_delta_wt_4_1_valid;
  wire       [31:0]   mux_io_o_delta_wt_4_1_payload;
  wire                mux_io_o_delta_wt_4_2_valid;
  wire       [31:0]   mux_io_o_delta_wt_4_2_payload;
  wire                mux_io_o_delta_wt_4_3_valid;
  wire       [31:0]   mux_io_o_delta_wt_4_3_payload;
  wire                mux_io_o_delta_wt_4_4_valid;
  wire       [31:0]   mux_io_o_delta_wt_4_4_payload;
  wire                mux_io_o_delta_wt_4_5_valid;
  wire       [31:0]   mux_io_o_delta_wt_4_5_payload;
  wire                mux_io_o_delta_wt_4_6_valid;
  wire       [31:0]   mux_io_o_delta_wt_4_6_payload;
  wire                mux_io_o_delta_wt_4_7_valid;
  wire       [31:0]   mux_io_o_delta_wt_4_7_payload;
  wire                mux_io_o_delta_wt_5_0_valid;
  wire       [31:0]   mux_io_o_delta_wt_5_0_payload;
  wire                mux_io_o_delta_wt_5_1_valid;
  wire       [31:0]   mux_io_o_delta_wt_5_1_payload;
  wire                mux_io_o_delta_wt_5_2_valid;
  wire       [31:0]   mux_io_o_delta_wt_5_2_payload;
  wire                mux_io_o_delta_wt_5_3_valid;
  wire       [31:0]   mux_io_o_delta_wt_5_3_payload;
  wire                mux_io_o_delta_wt_5_4_valid;
  wire       [31:0]   mux_io_o_delta_wt_5_4_payload;
  wire                mux_io_o_delta_wt_5_5_valid;
  wire       [31:0]   mux_io_o_delta_wt_5_5_payload;
  wire                mux_io_o_delta_wt_5_6_valid;
  wire       [31:0]   mux_io_o_delta_wt_5_6_payload;
  wire                mux_io_o_delta_wt_5_7_valid;
  wire       [31:0]   mux_io_o_delta_wt_5_7_payload;
  wire                mux_io_o_delta_wt_6_0_valid;
  wire       [31:0]   mux_io_o_delta_wt_6_0_payload;
  wire                mux_io_o_delta_wt_6_1_valid;
  wire       [31:0]   mux_io_o_delta_wt_6_1_payload;
  wire                mux_io_o_delta_wt_6_2_valid;
  wire       [31:0]   mux_io_o_delta_wt_6_2_payload;
  wire                mux_io_o_delta_wt_6_3_valid;
  wire       [31:0]   mux_io_o_delta_wt_6_3_payload;
  wire                mux_io_o_delta_wt_6_4_valid;
  wire       [31:0]   mux_io_o_delta_wt_6_4_payload;
  wire                mux_io_o_delta_wt_6_5_valid;
  wire       [31:0]   mux_io_o_delta_wt_6_5_payload;
  wire                mux_io_o_delta_wt_6_6_valid;
  wire       [31:0]   mux_io_o_delta_wt_6_6_payload;
  wire                mux_io_o_delta_wt_6_7_valid;
  wire       [31:0]   mux_io_o_delta_wt_6_7_payload;
  wire                mux_io_o_delta_wt_7_0_valid;
  wire       [31:0]   mux_io_o_delta_wt_7_0_payload;
  wire                mux_io_o_delta_wt_7_1_valid;
  wire       [31:0]   mux_io_o_delta_wt_7_1_payload;
  wire                mux_io_o_delta_wt_7_2_valid;
  wire       [31:0]   mux_io_o_delta_wt_7_2_payload;
  wire                mux_io_o_delta_wt_7_3_valid;
  wire       [31:0]   mux_io_o_delta_wt_7_3_payload;
  wire                mux_io_o_delta_wt_7_4_valid;
  wire       [31:0]   mux_io_o_delta_wt_7_4_payload;
  wire                mux_io_o_delta_wt_7_5_valid;
  wire       [31:0]   mux_io_o_delta_wt_7_5_payload;
  wire                mux_io_o_delta_wt_7_6_valid;
  wire       [31:0]   mux_io_o_delta_wt_7_6_payload;
  wire                mux_io_o_delta_wt_7_7_valid;
  wire       [31:0]   mux_io_o_delta_wt_7_7_payload;
  wire                mux_io_o_sigma_0_0_valid;
  wire       [31:0]   mux_io_o_sigma_0_0_payload;
  wire                mux_io_o_sigma_0_1_valid;
  wire       [31:0]   mux_io_o_sigma_0_1_payload;
  wire                mux_io_o_sigma_0_2_valid;
  wire       [31:0]   mux_io_o_sigma_0_2_payload;
  wire                mux_io_o_sigma_0_3_valid;
  wire       [31:0]   mux_io_o_sigma_0_3_payload;
  wire                mux_io_o_sigma_0_4_valid;
  wire       [31:0]   mux_io_o_sigma_0_4_payload;
  wire                mux_io_o_sigma_0_5_valid;
  wire       [31:0]   mux_io_o_sigma_0_5_payload;
  wire                mux_io_o_sigma_0_6_valid;
  wire       [31:0]   mux_io_o_sigma_0_6_payload;
  wire                mux_io_o_sigma_0_7_valid;
  wire       [31:0]   mux_io_o_sigma_0_7_payload;
  wire                mux_io_o_sigma_1_0_valid;
  wire       [31:0]   mux_io_o_sigma_1_0_payload;
  wire                mux_io_o_sigma_1_1_valid;
  wire       [31:0]   mux_io_o_sigma_1_1_payload;
  wire                mux_io_o_sigma_1_2_valid;
  wire       [31:0]   mux_io_o_sigma_1_2_payload;
  wire                mux_io_o_sigma_1_3_valid;
  wire       [31:0]   mux_io_o_sigma_1_3_payload;
  wire                mux_io_o_sigma_1_4_valid;
  wire       [31:0]   mux_io_o_sigma_1_4_payload;
  wire                mux_io_o_sigma_1_5_valid;
  wire       [31:0]   mux_io_o_sigma_1_5_payload;
  wire                mux_io_o_sigma_1_6_valid;
  wire       [31:0]   mux_io_o_sigma_1_6_payload;
  wire                mux_io_o_sigma_1_7_valid;
  wire       [31:0]   mux_io_o_sigma_1_7_payload;
  wire                mux_io_o_sigma_2_0_valid;
  wire       [31:0]   mux_io_o_sigma_2_0_payload;
  wire                mux_io_o_sigma_2_1_valid;
  wire       [31:0]   mux_io_o_sigma_2_1_payload;
  wire                mux_io_o_sigma_2_2_valid;
  wire       [31:0]   mux_io_o_sigma_2_2_payload;
  wire                mux_io_o_sigma_2_3_valid;
  wire       [31:0]   mux_io_o_sigma_2_3_payload;
  wire                mux_io_o_sigma_2_4_valid;
  wire       [31:0]   mux_io_o_sigma_2_4_payload;
  wire                mux_io_o_sigma_2_5_valid;
  wire       [31:0]   mux_io_o_sigma_2_5_payload;
  wire                mux_io_o_sigma_2_6_valid;
  wire       [31:0]   mux_io_o_sigma_2_6_payload;
  wire                mux_io_o_sigma_2_7_valid;
  wire       [31:0]   mux_io_o_sigma_2_7_payload;
  wire                mux_io_o_sigma_3_0_valid;
  wire       [31:0]   mux_io_o_sigma_3_0_payload;
  wire                mux_io_o_sigma_3_1_valid;
  wire       [31:0]   mux_io_o_sigma_3_1_payload;
  wire                mux_io_o_sigma_3_2_valid;
  wire       [31:0]   mux_io_o_sigma_3_2_payload;
  wire                mux_io_o_sigma_3_3_valid;
  wire       [31:0]   mux_io_o_sigma_3_3_payload;
  wire                mux_io_o_sigma_3_4_valid;
  wire       [31:0]   mux_io_o_sigma_3_4_payload;
  wire                mux_io_o_sigma_3_5_valid;
  wire       [31:0]   mux_io_o_sigma_3_5_payload;
  wire                mux_io_o_sigma_3_6_valid;
  wire       [31:0]   mux_io_o_sigma_3_6_payload;
  wire                mux_io_o_sigma_3_7_valid;
  wire       [31:0]   mux_io_o_sigma_3_7_payload;
  wire                mux_io_o_sigma_4_0_valid;
  wire       [31:0]   mux_io_o_sigma_4_0_payload;
  wire                mux_io_o_sigma_4_1_valid;
  wire       [31:0]   mux_io_o_sigma_4_1_payload;
  wire                mux_io_o_sigma_4_2_valid;
  wire       [31:0]   mux_io_o_sigma_4_2_payload;
  wire                mux_io_o_sigma_4_3_valid;
  wire       [31:0]   mux_io_o_sigma_4_3_payload;
  wire                mux_io_o_sigma_4_4_valid;
  wire       [31:0]   mux_io_o_sigma_4_4_payload;
  wire                mux_io_o_sigma_4_5_valid;
  wire       [31:0]   mux_io_o_sigma_4_5_payload;
  wire                mux_io_o_sigma_4_6_valid;
  wire       [31:0]   mux_io_o_sigma_4_6_payload;
  wire                mux_io_o_sigma_4_7_valid;
  wire       [31:0]   mux_io_o_sigma_4_7_payload;
  wire                mux_io_o_sigma_5_0_valid;
  wire       [31:0]   mux_io_o_sigma_5_0_payload;
  wire                mux_io_o_sigma_5_1_valid;
  wire       [31:0]   mux_io_o_sigma_5_1_payload;
  wire                mux_io_o_sigma_5_2_valid;
  wire       [31:0]   mux_io_o_sigma_5_2_payload;
  wire                mux_io_o_sigma_5_3_valid;
  wire       [31:0]   mux_io_o_sigma_5_3_payload;
  wire                mux_io_o_sigma_5_4_valid;
  wire       [31:0]   mux_io_o_sigma_5_4_payload;
  wire                mux_io_o_sigma_5_5_valid;
  wire       [31:0]   mux_io_o_sigma_5_5_payload;
  wire                mux_io_o_sigma_5_6_valid;
  wire       [31:0]   mux_io_o_sigma_5_6_payload;
  wire                mux_io_o_sigma_5_7_valid;
  wire       [31:0]   mux_io_o_sigma_5_7_payload;
  wire                mux_io_o_sigma_6_0_valid;
  wire       [31:0]   mux_io_o_sigma_6_0_payload;
  wire                mux_io_o_sigma_6_1_valid;
  wire       [31:0]   mux_io_o_sigma_6_1_payload;
  wire                mux_io_o_sigma_6_2_valid;
  wire       [31:0]   mux_io_o_sigma_6_2_payload;
  wire                mux_io_o_sigma_6_3_valid;
  wire       [31:0]   mux_io_o_sigma_6_3_payload;
  wire                mux_io_o_sigma_6_4_valid;
  wire       [31:0]   mux_io_o_sigma_6_4_payload;
  wire                mux_io_o_sigma_6_5_valid;
  wire       [31:0]   mux_io_o_sigma_6_5_payload;
  wire                mux_io_o_sigma_6_6_valid;
  wire       [31:0]   mux_io_o_sigma_6_6_payload;
  wire                mux_io_o_sigma_6_7_valid;
  wire       [31:0]   mux_io_o_sigma_6_7_payload;
  wire                mux_io_o_sigma_7_0_valid;
  wire       [31:0]   mux_io_o_sigma_7_0_payload;
  wire                mux_io_o_sigma_7_1_valid;
  wire       [31:0]   mux_io_o_sigma_7_1_payload;
  wire                mux_io_o_sigma_7_2_valid;
  wire       [31:0]   mux_io_o_sigma_7_2_payload;
  wire                mux_io_o_sigma_7_3_valid;
  wire       [31:0]   mux_io_o_sigma_7_3_payload;
  wire                mux_io_o_sigma_7_4_valid;
  wire       [31:0]   mux_io_o_sigma_7_4_payload;
  wire                mux_io_o_sigma_7_5_valid;
  wire       [31:0]   mux_io_o_sigma_7_5_payload;
  wire                mux_io_o_sigma_7_6_valid;
  wire       [31:0]   mux_io_o_sigma_7_6_payload;
  wire                mux_io_o_sigma_7_7_valid;
  wire       [31:0]   mux_io_o_sigma_7_7_payload;
  wire       [31:0]   _zz_par_acc_cnt;
  wire       [31:0]   _zz_par_acc_cnt_1;

  assign _zz_par_acc_cnt = (_zz_par_acc_cnt_1 - 32'h00000001);
  assign _zz_par_acc_cnt_1 = (cfg_payload_wtWidth * cfg_payload_wtHeight);
  buff2conv read_req (
    .cfg_valid                           (cfg_valid                         ), //i
    .cfg_ready                           (read_req_cfg_ready                ), //o
    .cfg_payload_rd_dtBaseAddr           (cfg_payload_rd_dtBaseAddr         ), //i
    .cfg_payload_rd_wtBaseAddr           (cfg_payload_rd_wtBaseAddr         ), //i
    .cfg_payload_wr_delta_wt_BaseAddr    (cfg_payload_wr_delta_wt_BaseAddr  ), //i
    .cfg_payload_wr_sigma_BaseAddr       (cfg_payload_wr_sigma_BaseAddr     ), //i
    .cfg_payload_dtWidth                 (cfg_payload_dtWidth               ), //i
    .cfg_payload_dtHeight                (cfg_payload_dtHeight              ), //i
    .cfg_payload_wtWidth                 (cfg_payload_wtWidth               ), //i
    .cfg_payload_wtHeight                (cfg_payload_wtHeight              ), //i
    .cfg_payload_oWidth                  (cfg_payload_oWidth                ), //i
    .cfg_payload_oHeight                 (cfg_payload_oHeight               ), //i
    .dt_ramrd_addr                       (read_req_dt_ramrd_addr            ), //o
    .dt_ramrd_data                       (dt_ramrd_data                     ), //i
    .dt_ramrd_en                         (read_req_dt_ramrd_en              ), //o
    .wt_ramrd_0_addr                     (read_req_wt_ramrd_0_addr          ), //o
    .wt_ramrd_0_data                     (wt_ramrd_0_data                   ), //i
    .wt_ramrd_0_en                       (read_req_wt_ramrd_0_en            ), //o
    .wt_ramrd_1_addr                     (read_req_wt_ramrd_1_addr          ), //o
    .wt_ramrd_1_data                     (wt_ramrd_1_data                   ), //i
    .wt_ramrd_1_en                       (read_req_wt_ramrd_1_en            ), //o
    .wt_ramrd_2_addr                     (read_req_wt_ramrd_2_addr          ), //o
    .wt_ramrd_2_data                     (wt_ramrd_2_data                   ), //i
    .wt_ramrd_2_en                       (read_req_wt_ramrd_2_en            ), //o
    .wt_ramrd_3_addr                     (read_req_wt_ramrd_3_addr          ), //o
    .wt_ramrd_3_data                     (wt_ramrd_3_data                   ), //i
    .wt_ramrd_3_en                       (read_req_wt_ramrd_3_en            ), //o
    .wt_ramrd_4_addr                     (read_req_wt_ramrd_4_addr          ), //o
    .wt_ramrd_4_data                     (wt_ramrd_4_data                   ), //i
    .wt_ramrd_4_en                       (read_req_wt_ramrd_4_en            ), //o
    .wt_ramrd_5_addr                     (read_req_wt_ramrd_5_addr          ), //o
    .wt_ramrd_5_data                     (wt_ramrd_5_data                   ), //i
    .wt_ramrd_5_en                       (read_req_wt_ramrd_5_en            ), //o
    .wt_ramrd_6_addr                     (read_req_wt_ramrd_6_addr          ), //o
    .wt_ramrd_6_data                     (wt_ramrd_6_data                   ), //i
    .wt_ramrd_6_en                       (read_req_wt_ramrd_6_en            ), //o
    .wt_ramrd_7_addr                     (read_req_wt_ramrd_7_addr          ), //o
    .wt_ramrd_7_data                     (wt_ramrd_7_data                   ), //i
    .wt_ramrd_7_en                       (read_req_wt_ramrd_7_en            ), //o
    .o_ft_valid                          (read_req_o_ft_valid               ), //o
    .o_ft_ready                          (data_cvt_io_i_ft_ready            ), //i
    .o_ft_payload                        (read_req_o_ft_payload             ), //o
    .o_wt_0_valid                        (read_req_o_wt_0_valid             ), //o
    .o_wt_0_ready                        (data_cvt_io_i_wt_0_ready          ), //i
    .o_wt_0_payload                      (read_req_o_wt_0_payload           ), //o
    .o_wt_1_valid                        (read_req_o_wt_1_valid             ), //o
    .o_wt_1_ready                        (data_cvt_io_i_wt_1_ready          ), //i
    .o_wt_1_payload                      (read_req_o_wt_1_payload           ), //o
    .o_wt_2_valid                        (read_req_o_wt_2_valid             ), //o
    .o_wt_2_ready                        (data_cvt_io_i_wt_2_ready          ), //i
    .o_wt_2_payload                      (read_req_o_wt_2_payload           ), //o
    .o_wt_3_valid                        (read_req_o_wt_3_valid             ), //o
    .o_wt_3_ready                        (data_cvt_io_i_wt_3_ready          ), //i
    .o_wt_3_payload                      (read_req_o_wt_3_payload           ), //o
    .o_wt_4_valid                        (read_req_o_wt_4_valid             ), //o
    .o_wt_4_ready                        (data_cvt_io_i_wt_4_ready          ), //i
    .o_wt_4_payload                      (read_req_o_wt_4_payload           ), //o
    .o_wt_5_valid                        (read_req_o_wt_5_valid             ), //o
    .o_wt_5_ready                        (data_cvt_io_i_wt_5_ready          ), //i
    .o_wt_5_payload                      (read_req_o_wt_5_payload           ), //o
    .o_wt_6_valid                        (read_req_o_wt_6_valid             ), //o
    .o_wt_6_ready                        (data_cvt_io_i_wt_6_ready          ), //i
    .o_wt_6_payload                      (read_req_o_wt_6_payload           ), //o
    .o_wt_7_valid                        (read_req_o_wt_7_valid             ), //o
    .o_wt_7_ready                        (data_cvt_io_i_wt_7_ready          ), //i
    .o_wt_7_payload                      (read_req_o_wt_7_payload           ), //o
    .read_enable                         (read_enable                       ), //i
    .clk                                 (clk                               ), //i
    .reset                               (reset                             )  //i
  );
  dataType_cvt_in data_cvt (
    .io_i_ft_valid          (read_req_o_ft_valid           ), //i
    .io_i_ft_ready          (data_cvt_io_i_ft_ready        ), //o
    .io_i_ft_payload        (read_req_o_ft_payload         ), //i
    .io_i_wt_0_valid        (read_req_o_wt_0_valid         ), //i
    .io_i_wt_0_ready        (data_cvt_io_i_wt_0_ready      ), //o
    .io_i_wt_0_payload      (read_req_o_wt_0_payload       ), //i
    .io_i_wt_1_valid        (read_req_o_wt_1_valid         ), //i
    .io_i_wt_1_ready        (data_cvt_io_i_wt_1_ready      ), //o
    .io_i_wt_1_payload      (read_req_o_wt_1_payload       ), //i
    .io_i_wt_2_valid        (read_req_o_wt_2_valid         ), //i
    .io_i_wt_2_ready        (data_cvt_io_i_wt_2_ready      ), //o
    .io_i_wt_2_payload      (read_req_o_wt_2_payload       ), //i
    .io_i_wt_3_valid        (read_req_o_wt_3_valid         ), //i
    .io_i_wt_3_ready        (data_cvt_io_i_wt_3_ready      ), //o
    .io_i_wt_3_payload      (read_req_o_wt_3_payload       ), //i
    .io_i_wt_4_valid        (read_req_o_wt_4_valid         ), //i
    .io_i_wt_4_ready        (data_cvt_io_i_wt_4_ready      ), //o
    .io_i_wt_4_payload      (read_req_o_wt_4_payload       ), //i
    .io_i_wt_5_valid        (read_req_o_wt_5_valid         ), //i
    .io_i_wt_5_ready        (data_cvt_io_i_wt_5_ready      ), //o
    .io_i_wt_5_payload      (read_req_o_wt_5_payload       ), //i
    .io_i_wt_6_valid        (read_req_o_wt_6_valid         ), //i
    .io_i_wt_6_ready        (data_cvt_io_i_wt_6_ready      ), //o
    .io_i_wt_6_payload      (read_req_o_wt_6_payload       ), //i
    .io_i_wt_7_valid        (read_req_o_wt_7_valid         ), //i
    .io_i_wt_7_ready        (data_cvt_io_i_wt_7_ready      ), //o
    .io_i_wt_7_payload      (read_req_o_wt_7_payload       ), //i
    .io_o_ft_0_valid        (data_cvt_io_o_ft_0_valid      ), //o
    .io_o_ft_0_ready        (conv_core_s_ft_0_ready        ), //i
    .io_o_ft_0_payload      (data_cvt_io_o_ft_0_payload    ), //o
    .io_o_ft_1_valid        (data_cvt_io_o_ft_1_valid      ), //o
    .io_o_ft_1_ready        (conv_core_s_ft_1_ready        ), //i
    .io_o_ft_1_payload      (data_cvt_io_o_ft_1_payload    ), //o
    .io_o_ft_2_valid        (data_cvt_io_o_ft_2_valid      ), //o
    .io_o_ft_2_ready        (conv_core_s_ft_2_ready        ), //i
    .io_o_ft_2_payload      (data_cvt_io_o_ft_2_payload    ), //o
    .io_o_ft_3_valid        (data_cvt_io_o_ft_3_valid      ), //o
    .io_o_ft_3_ready        (conv_core_s_ft_3_ready        ), //i
    .io_o_ft_3_payload      (data_cvt_io_o_ft_3_payload    ), //o
    .io_o_ft_4_valid        (data_cvt_io_o_ft_4_valid      ), //o
    .io_o_ft_4_ready        (conv_core_s_ft_4_ready        ), //i
    .io_o_ft_4_payload      (data_cvt_io_o_ft_4_payload    ), //o
    .io_o_ft_5_valid        (data_cvt_io_o_ft_5_valid      ), //o
    .io_o_ft_5_ready        (conv_core_s_ft_5_ready        ), //i
    .io_o_ft_5_payload      (data_cvt_io_o_ft_5_payload    ), //o
    .io_o_ft_6_valid        (data_cvt_io_o_ft_6_valid      ), //o
    .io_o_ft_6_ready        (conv_core_s_ft_6_ready        ), //i
    .io_o_ft_6_payload      (data_cvt_io_o_ft_6_payload    ), //o
    .io_o_ft_7_valid        (data_cvt_io_o_ft_7_valid      ), //o
    .io_o_ft_7_ready        (conv_core_s_ft_7_ready        ), //i
    .io_o_ft_7_payload      (data_cvt_io_o_ft_7_payload    ), //o
    .io_o_wt_0_0_valid      (data_cvt_io_o_wt_0_0_valid    ), //o
    .io_o_wt_0_0_ready      (conv_core_s_wt_0_0_ready      ), //i
    .io_o_wt_0_0_payload    (data_cvt_io_o_wt_0_0_payload  ), //o
    .io_o_wt_0_1_valid      (data_cvt_io_o_wt_0_1_valid    ), //o
    .io_o_wt_0_1_ready      (conv_core_s_wt_0_1_ready      ), //i
    .io_o_wt_0_1_payload    (data_cvt_io_o_wt_0_1_payload  ), //o
    .io_o_wt_0_2_valid      (data_cvt_io_o_wt_0_2_valid    ), //o
    .io_o_wt_0_2_ready      (conv_core_s_wt_0_2_ready      ), //i
    .io_o_wt_0_2_payload    (data_cvt_io_o_wt_0_2_payload  ), //o
    .io_o_wt_0_3_valid      (data_cvt_io_o_wt_0_3_valid    ), //o
    .io_o_wt_0_3_ready      (conv_core_s_wt_0_3_ready      ), //i
    .io_o_wt_0_3_payload    (data_cvt_io_o_wt_0_3_payload  ), //o
    .io_o_wt_0_4_valid      (data_cvt_io_o_wt_0_4_valid    ), //o
    .io_o_wt_0_4_ready      (conv_core_s_wt_0_4_ready      ), //i
    .io_o_wt_0_4_payload    (data_cvt_io_o_wt_0_4_payload  ), //o
    .io_o_wt_0_5_valid      (data_cvt_io_o_wt_0_5_valid    ), //o
    .io_o_wt_0_5_ready      (conv_core_s_wt_0_5_ready      ), //i
    .io_o_wt_0_5_payload    (data_cvt_io_o_wt_0_5_payload  ), //o
    .io_o_wt_0_6_valid      (data_cvt_io_o_wt_0_6_valid    ), //o
    .io_o_wt_0_6_ready      (conv_core_s_wt_0_6_ready      ), //i
    .io_o_wt_0_6_payload    (data_cvt_io_o_wt_0_6_payload  ), //o
    .io_o_wt_0_7_valid      (data_cvt_io_o_wt_0_7_valid    ), //o
    .io_o_wt_0_7_ready      (conv_core_s_wt_0_7_ready      ), //i
    .io_o_wt_0_7_payload    (data_cvt_io_o_wt_0_7_payload  ), //o
    .io_o_wt_1_0_valid      (data_cvt_io_o_wt_1_0_valid    ), //o
    .io_o_wt_1_0_ready      (conv_core_s_wt_1_0_ready      ), //i
    .io_o_wt_1_0_payload    (data_cvt_io_o_wt_1_0_payload  ), //o
    .io_o_wt_1_1_valid      (data_cvt_io_o_wt_1_1_valid    ), //o
    .io_o_wt_1_1_ready      (conv_core_s_wt_1_1_ready      ), //i
    .io_o_wt_1_1_payload    (data_cvt_io_o_wt_1_1_payload  ), //o
    .io_o_wt_1_2_valid      (data_cvt_io_o_wt_1_2_valid    ), //o
    .io_o_wt_1_2_ready      (conv_core_s_wt_1_2_ready      ), //i
    .io_o_wt_1_2_payload    (data_cvt_io_o_wt_1_2_payload  ), //o
    .io_o_wt_1_3_valid      (data_cvt_io_o_wt_1_3_valid    ), //o
    .io_o_wt_1_3_ready      (conv_core_s_wt_1_3_ready      ), //i
    .io_o_wt_1_3_payload    (data_cvt_io_o_wt_1_3_payload  ), //o
    .io_o_wt_1_4_valid      (data_cvt_io_o_wt_1_4_valid    ), //o
    .io_o_wt_1_4_ready      (conv_core_s_wt_1_4_ready      ), //i
    .io_o_wt_1_4_payload    (data_cvt_io_o_wt_1_4_payload  ), //o
    .io_o_wt_1_5_valid      (data_cvt_io_o_wt_1_5_valid    ), //o
    .io_o_wt_1_5_ready      (conv_core_s_wt_1_5_ready      ), //i
    .io_o_wt_1_5_payload    (data_cvt_io_o_wt_1_5_payload  ), //o
    .io_o_wt_1_6_valid      (data_cvt_io_o_wt_1_6_valid    ), //o
    .io_o_wt_1_6_ready      (conv_core_s_wt_1_6_ready      ), //i
    .io_o_wt_1_6_payload    (data_cvt_io_o_wt_1_6_payload  ), //o
    .io_o_wt_1_7_valid      (data_cvt_io_o_wt_1_7_valid    ), //o
    .io_o_wt_1_7_ready      (conv_core_s_wt_1_7_ready      ), //i
    .io_o_wt_1_7_payload    (data_cvt_io_o_wt_1_7_payload  ), //o
    .io_o_wt_2_0_valid      (data_cvt_io_o_wt_2_0_valid    ), //o
    .io_o_wt_2_0_ready      (conv_core_s_wt_2_0_ready      ), //i
    .io_o_wt_2_0_payload    (data_cvt_io_o_wt_2_0_payload  ), //o
    .io_o_wt_2_1_valid      (data_cvt_io_o_wt_2_1_valid    ), //o
    .io_o_wt_2_1_ready      (conv_core_s_wt_2_1_ready      ), //i
    .io_o_wt_2_1_payload    (data_cvt_io_o_wt_2_1_payload  ), //o
    .io_o_wt_2_2_valid      (data_cvt_io_o_wt_2_2_valid    ), //o
    .io_o_wt_2_2_ready      (conv_core_s_wt_2_2_ready      ), //i
    .io_o_wt_2_2_payload    (data_cvt_io_o_wt_2_2_payload  ), //o
    .io_o_wt_2_3_valid      (data_cvt_io_o_wt_2_3_valid    ), //o
    .io_o_wt_2_3_ready      (conv_core_s_wt_2_3_ready      ), //i
    .io_o_wt_2_3_payload    (data_cvt_io_o_wt_2_3_payload  ), //o
    .io_o_wt_2_4_valid      (data_cvt_io_o_wt_2_4_valid    ), //o
    .io_o_wt_2_4_ready      (conv_core_s_wt_2_4_ready      ), //i
    .io_o_wt_2_4_payload    (data_cvt_io_o_wt_2_4_payload  ), //o
    .io_o_wt_2_5_valid      (data_cvt_io_o_wt_2_5_valid    ), //o
    .io_o_wt_2_5_ready      (conv_core_s_wt_2_5_ready      ), //i
    .io_o_wt_2_5_payload    (data_cvt_io_o_wt_2_5_payload  ), //o
    .io_o_wt_2_6_valid      (data_cvt_io_o_wt_2_6_valid    ), //o
    .io_o_wt_2_6_ready      (conv_core_s_wt_2_6_ready      ), //i
    .io_o_wt_2_6_payload    (data_cvt_io_o_wt_2_6_payload  ), //o
    .io_o_wt_2_7_valid      (data_cvt_io_o_wt_2_7_valid    ), //o
    .io_o_wt_2_7_ready      (conv_core_s_wt_2_7_ready      ), //i
    .io_o_wt_2_7_payload    (data_cvt_io_o_wt_2_7_payload  ), //o
    .io_o_wt_3_0_valid      (data_cvt_io_o_wt_3_0_valid    ), //o
    .io_o_wt_3_0_ready      (conv_core_s_wt_3_0_ready      ), //i
    .io_o_wt_3_0_payload    (data_cvt_io_o_wt_3_0_payload  ), //o
    .io_o_wt_3_1_valid      (data_cvt_io_o_wt_3_1_valid    ), //o
    .io_o_wt_3_1_ready      (conv_core_s_wt_3_1_ready      ), //i
    .io_o_wt_3_1_payload    (data_cvt_io_o_wt_3_1_payload  ), //o
    .io_o_wt_3_2_valid      (data_cvt_io_o_wt_3_2_valid    ), //o
    .io_o_wt_3_2_ready      (conv_core_s_wt_3_2_ready      ), //i
    .io_o_wt_3_2_payload    (data_cvt_io_o_wt_3_2_payload  ), //o
    .io_o_wt_3_3_valid      (data_cvt_io_o_wt_3_3_valid    ), //o
    .io_o_wt_3_3_ready      (conv_core_s_wt_3_3_ready      ), //i
    .io_o_wt_3_3_payload    (data_cvt_io_o_wt_3_3_payload  ), //o
    .io_o_wt_3_4_valid      (data_cvt_io_o_wt_3_4_valid    ), //o
    .io_o_wt_3_4_ready      (conv_core_s_wt_3_4_ready      ), //i
    .io_o_wt_3_4_payload    (data_cvt_io_o_wt_3_4_payload  ), //o
    .io_o_wt_3_5_valid      (data_cvt_io_o_wt_3_5_valid    ), //o
    .io_o_wt_3_5_ready      (conv_core_s_wt_3_5_ready      ), //i
    .io_o_wt_3_5_payload    (data_cvt_io_o_wt_3_5_payload  ), //o
    .io_o_wt_3_6_valid      (data_cvt_io_o_wt_3_6_valid    ), //o
    .io_o_wt_3_6_ready      (conv_core_s_wt_3_6_ready      ), //i
    .io_o_wt_3_6_payload    (data_cvt_io_o_wt_3_6_payload  ), //o
    .io_o_wt_3_7_valid      (data_cvt_io_o_wt_3_7_valid    ), //o
    .io_o_wt_3_7_ready      (conv_core_s_wt_3_7_ready      ), //i
    .io_o_wt_3_7_payload    (data_cvt_io_o_wt_3_7_payload  ), //o
    .io_o_wt_4_0_valid      (data_cvt_io_o_wt_4_0_valid    ), //o
    .io_o_wt_4_0_ready      (conv_core_s_wt_4_0_ready      ), //i
    .io_o_wt_4_0_payload    (data_cvt_io_o_wt_4_0_payload  ), //o
    .io_o_wt_4_1_valid      (data_cvt_io_o_wt_4_1_valid    ), //o
    .io_o_wt_4_1_ready      (conv_core_s_wt_4_1_ready      ), //i
    .io_o_wt_4_1_payload    (data_cvt_io_o_wt_4_1_payload  ), //o
    .io_o_wt_4_2_valid      (data_cvt_io_o_wt_4_2_valid    ), //o
    .io_o_wt_4_2_ready      (conv_core_s_wt_4_2_ready      ), //i
    .io_o_wt_4_2_payload    (data_cvt_io_o_wt_4_2_payload  ), //o
    .io_o_wt_4_3_valid      (data_cvt_io_o_wt_4_3_valid    ), //o
    .io_o_wt_4_3_ready      (conv_core_s_wt_4_3_ready      ), //i
    .io_o_wt_4_3_payload    (data_cvt_io_o_wt_4_3_payload  ), //o
    .io_o_wt_4_4_valid      (data_cvt_io_o_wt_4_4_valid    ), //o
    .io_o_wt_4_4_ready      (conv_core_s_wt_4_4_ready      ), //i
    .io_o_wt_4_4_payload    (data_cvt_io_o_wt_4_4_payload  ), //o
    .io_o_wt_4_5_valid      (data_cvt_io_o_wt_4_5_valid    ), //o
    .io_o_wt_4_5_ready      (conv_core_s_wt_4_5_ready      ), //i
    .io_o_wt_4_5_payload    (data_cvt_io_o_wt_4_5_payload  ), //o
    .io_o_wt_4_6_valid      (data_cvt_io_o_wt_4_6_valid    ), //o
    .io_o_wt_4_6_ready      (conv_core_s_wt_4_6_ready      ), //i
    .io_o_wt_4_6_payload    (data_cvt_io_o_wt_4_6_payload  ), //o
    .io_o_wt_4_7_valid      (data_cvt_io_o_wt_4_7_valid    ), //o
    .io_o_wt_4_7_ready      (conv_core_s_wt_4_7_ready      ), //i
    .io_o_wt_4_7_payload    (data_cvt_io_o_wt_4_7_payload  ), //o
    .io_o_wt_5_0_valid      (data_cvt_io_o_wt_5_0_valid    ), //o
    .io_o_wt_5_0_ready      (conv_core_s_wt_5_0_ready      ), //i
    .io_o_wt_5_0_payload    (data_cvt_io_o_wt_5_0_payload  ), //o
    .io_o_wt_5_1_valid      (data_cvt_io_o_wt_5_1_valid    ), //o
    .io_o_wt_5_1_ready      (conv_core_s_wt_5_1_ready      ), //i
    .io_o_wt_5_1_payload    (data_cvt_io_o_wt_5_1_payload  ), //o
    .io_o_wt_5_2_valid      (data_cvt_io_o_wt_5_2_valid    ), //o
    .io_o_wt_5_2_ready      (conv_core_s_wt_5_2_ready      ), //i
    .io_o_wt_5_2_payload    (data_cvt_io_o_wt_5_2_payload  ), //o
    .io_o_wt_5_3_valid      (data_cvt_io_o_wt_5_3_valid    ), //o
    .io_o_wt_5_3_ready      (conv_core_s_wt_5_3_ready      ), //i
    .io_o_wt_5_3_payload    (data_cvt_io_o_wt_5_3_payload  ), //o
    .io_o_wt_5_4_valid      (data_cvt_io_o_wt_5_4_valid    ), //o
    .io_o_wt_5_4_ready      (conv_core_s_wt_5_4_ready      ), //i
    .io_o_wt_5_4_payload    (data_cvt_io_o_wt_5_4_payload  ), //o
    .io_o_wt_5_5_valid      (data_cvt_io_o_wt_5_5_valid    ), //o
    .io_o_wt_5_5_ready      (conv_core_s_wt_5_5_ready      ), //i
    .io_o_wt_5_5_payload    (data_cvt_io_o_wt_5_5_payload  ), //o
    .io_o_wt_5_6_valid      (data_cvt_io_o_wt_5_6_valid    ), //o
    .io_o_wt_5_6_ready      (conv_core_s_wt_5_6_ready      ), //i
    .io_o_wt_5_6_payload    (data_cvt_io_o_wt_5_6_payload  ), //o
    .io_o_wt_5_7_valid      (data_cvt_io_o_wt_5_7_valid    ), //o
    .io_o_wt_5_7_ready      (conv_core_s_wt_5_7_ready      ), //i
    .io_o_wt_5_7_payload    (data_cvt_io_o_wt_5_7_payload  ), //o
    .io_o_wt_6_0_valid      (data_cvt_io_o_wt_6_0_valid    ), //o
    .io_o_wt_6_0_ready      (conv_core_s_wt_6_0_ready      ), //i
    .io_o_wt_6_0_payload    (data_cvt_io_o_wt_6_0_payload  ), //o
    .io_o_wt_6_1_valid      (data_cvt_io_o_wt_6_1_valid    ), //o
    .io_o_wt_6_1_ready      (conv_core_s_wt_6_1_ready      ), //i
    .io_o_wt_6_1_payload    (data_cvt_io_o_wt_6_1_payload  ), //o
    .io_o_wt_6_2_valid      (data_cvt_io_o_wt_6_2_valid    ), //o
    .io_o_wt_6_2_ready      (conv_core_s_wt_6_2_ready      ), //i
    .io_o_wt_6_2_payload    (data_cvt_io_o_wt_6_2_payload  ), //o
    .io_o_wt_6_3_valid      (data_cvt_io_o_wt_6_3_valid    ), //o
    .io_o_wt_6_3_ready      (conv_core_s_wt_6_3_ready      ), //i
    .io_o_wt_6_3_payload    (data_cvt_io_o_wt_6_3_payload  ), //o
    .io_o_wt_6_4_valid      (data_cvt_io_o_wt_6_4_valid    ), //o
    .io_o_wt_6_4_ready      (conv_core_s_wt_6_4_ready      ), //i
    .io_o_wt_6_4_payload    (data_cvt_io_o_wt_6_4_payload  ), //o
    .io_o_wt_6_5_valid      (data_cvt_io_o_wt_6_5_valid    ), //o
    .io_o_wt_6_5_ready      (conv_core_s_wt_6_5_ready      ), //i
    .io_o_wt_6_5_payload    (data_cvt_io_o_wt_6_5_payload  ), //o
    .io_o_wt_6_6_valid      (data_cvt_io_o_wt_6_6_valid    ), //o
    .io_o_wt_6_6_ready      (conv_core_s_wt_6_6_ready      ), //i
    .io_o_wt_6_6_payload    (data_cvt_io_o_wt_6_6_payload  ), //o
    .io_o_wt_6_7_valid      (data_cvt_io_o_wt_6_7_valid    ), //o
    .io_o_wt_6_7_ready      (conv_core_s_wt_6_7_ready      ), //i
    .io_o_wt_6_7_payload    (data_cvt_io_o_wt_6_7_payload  ), //o
    .io_o_wt_7_0_valid      (data_cvt_io_o_wt_7_0_valid    ), //o
    .io_o_wt_7_0_ready      (conv_core_s_wt_7_0_ready      ), //i
    .io_o_wt_7_0_payload    (data_cvt_io_o_wt_7_0_payload  ), //o
    .io_o_wt_7_1_valid      (data_cvt_io_o_wt_7_1_valid    ), //o
    .io_o_wt_7_1_ready      (conv_core_s_wt_7_1_ready      ), //i
    .io_o_wt_7_1_payload    (data_cvt_io_o_wt_7_1_payload  ), //o
    .io_o_wt_7_2_valid      (data_cvt_io_o_wt_7_2_valid    ), //o
    .io_o_wt_7_2_ready      (conv_core_s_wt_7_2_ready      ), //i
    .io_o_wt_7_2_payload    (data_cvt_io_o_wt_7_2_payload  ), //o
    .io_o_wt_7_3_valid      (data_cvt_io_o_wt_7_3_valid    ), //o
    .io_o_wt_7_3_ready      (conv_core_s_wt_7_3_ready      ), //i
    .io_o_wt_7_3_payload    (data_cvt_io_o_wt_7_3_payload  ), //o
    .io_o_wt_7_4_valid      (data_cvt_io_o_wt_7_4_valid    ), //o
    .io_o_wt_7_4_ready      (conv_core_s_wt_7_4_ready      ), //i
    .io_o_wt_7_4_payload    (data_cvt_io_o_wt_7_4_payload  ), //o
    .io_o_wt_7_5_valid      (data_cvt_io_o_wt_7_5_valid    ), //o
    .io_o_wt_7_5_ready      (conv_core_s_wt_7_5_ready      ), //i
    .io_o_wt_7_5_payload    (data_cvt_io_o_wt_7_5_payload  ), //o
    .io_o_wt_7_6_valid      (data_cvt_io_o_wt_7_6_valid    ), //o
    .io_o_wt_7_6_ready      (conv_core_s_wt_7_6_ready      ), //i
    .io_o_wt_7_6_payload    (data_cvt_io_o_wt_7_6_payload  ), //o
    .io_o_wt_7_7_valid      (data_cvt_io_o_wt_7_7_valid    ), //o
    .io_o_wt_7_7_ready      (conv_core_s_wt_7_7_ready      ), //i
    .io_o_wt_7_7_payload    (data_cvt_io_o_wt_7_7_payload  )  //o
  );
  mac_acc_array conv_core (
    .s_ft_0_valid         (data_cvt_io_o_ft_0_valid      ), //i
    .s_ft_0_ready         (conv_core_s_ft_0_ready        ), //o
    .s_ft_0_payload       (data_cvt_io_o_ft_0_payload    ), //i
    .s_ft_1_valid         (data_cvt_io_o_ft_1_valid      ), //i
    .s_ft_1_ready         (conv_core_s_ft_1_ready        ), //o
    .s_ft_1_payload       (data_cvt_io_o_ft_1_payload    ), //i
    .s_ft_2_valid         (data_cvt_io_o_ft_2_valid      ), //i
    .s_ft_2_ready         (conv_core_s_ft_2_ready        ), //o
    .s_ft_2_payload       (data_cvt_io_o_ft_2_payload    ), //i
    .s_ft_3_valid         (data_cvt_io_o_ft_3_valid      ), //i
    .s_ft_3_ready         (conv_core_s_ft_3_ready        ), //o
    .s_ft_3_payload       (data_cvt_io_o_ft_3_payload    ), //i
    .s_ft_4_valid         (data_cvt_io_o_ft_4_valid      ), //i
    .s_ft_4_ready         (conv_core_s_ft_4_ready        ), //o
    .s_ft_4_payload       (data_cvt_io_o_ft_4_payload    ), //i
    .s_ft_5_valid         (data_cvt_io_o_ft_5_valid      ), //i
    .s_ft_5_ready         (conv_core_s_ft_5_ready        ), //o
    .s_ft_5_payload       (data_cvt_io_o_ft_5_payload    ), //i
    .s_ft_6_valid         (data_cvt_io_o_ft_6_valid      ), //i
    .s_ft_6_ready         (conv_core_s_ft_6_ready        ), //o
    .s_ft_6_payload       (data_cvt_io_o_ft_6_payload    ), //i
    .s_ft_7_valid         (data_cvt_io_o_ft_7_valid      ), //i
    .s_ft_7_ready         (conv_core_s_ft_7_ready        ), //o
    .s_ft_7_payload       (data_cvt_io_o_ft_7_payload    ), //i
    .s_wt_0_0_valid       (data_cvt_io_o_wt_0_0_valid    ), //i
    .s_wt_0_0_ready       (conv_core_s_wt_0_0_ready      ), //o
    .s_wt_0_0_payload     (data_cvt_io_o_wt_0_0_payload  ), //i
    .s_wt_0_1_valid       (data_cvt_io_o_wt_0_1_valid    ), //i
    .s_wt_0_1_ready       (conv_core_s_wt_0_1_ready      ), //o
    .s_wt_0_1_payload     (data_cvt_io_o_wt_0_1_payload  ), //i
    .s_wt_0_2_valid       (data_cvt_io_o_wt_0_2_valid    ), //i
    .s_wt_0_2_ready       (conv_core_s_wt_0_2_ready      ), //o
    .s_wt_0_2_payload     (data_cvt_io_o_wt_0_2_payload  ), //i
    .s_wt_0_3_valid       (data_cvt_io_o_wt_0_3_valid    ), //i
    .s_wt_0_3_ready       (conv_core_s_wt_0_3_ready      ), //o
    .s_wt_0_3_payload     (data_cvt_io_o_wt_0_3_payload  ), //i
    .s_wt_0_4_valid       (data_cvt_io_o_wt_0_4_valid    ), //i
    .s_wt_0_4_ready       (conv_core_s_wt_0_4_ready      ), //o
    .s_wt_0_4_payload     (data_cvt_io_o_wt_0_4_payload  ), //i
    .s_wt_0_5_valid       (data_cvt_io_o_wt_0_5_valid    ), //i
    .s_wt_0_5_ready       (conv_core_s_wt_0_5_ready      ), //o
    .s_wt_0_5_payload     (data_cvt_io_o_wt_0_5_payload  ), //i
    .s_wt_0_6_valid       (data_cvt_io_o_wt_0_6_valid    ), //i
    .s_wt_0_6_ready       (conv_core_s_wt_0_6_ready      ), //o
    .s_wt_0_6_payload     (data_cvt_io_o_wt_0_6_payload  ), //i
    .s_wt_0_7_valid       (data_cvt_io_o_wt_0_7_valid    ), //i
    .s_wt_0_7_ready       (conv_core_s_wt_0_7_ready      ), //o
    .s_wt_0_7_payload     (data_cvt_io_o_wt_0_7_payload  ), //i
    .s_wt_1_0_valid       (data_cvt_io_o_wt_1_0_valid    ), //i
    .s_wt_1_0_ready       (conv_core_s_wt_1_0_ready      ), //o
    .s_wt_1_0_payload     (data_cvt_io_o_wt_1_0_payload  ), //i
    .s_wt_1_1_valid       (data_cvt_io_o_wt_1_1_valid    ), //i
    .s_wt_1_1_ready       (conv_core_s_wt_1_1_ready      ), //o
    .s_wt_1_1_payload     (data_cvt_io_o_wt_1_1_payload  ), //i
    .s_wt_1_2_valid       (data_cvt_io_o_wt_1_2_valid    ), //i
    .s_wt_1_2_ready       (conv_core_s_wt_1_2_ready      ), //o
    .s_wt_1_2_payload     (data_cvt_io_o_wt_1_2_payload  ), //i
    .s_wt_1_3_valid       (data_cvt_io_o_wt_1_3_valid    ), //i
    .s_wt_1_3_ready       (conv_core_s_wt_1_3_ready      ), //o
    .s_wt_1_3_payload     (data_cvt_io_o_wt_1_3_payload  ), //i
    .s_wt_1_4_valid       (data_cvt_io_o_wt_1_4_valid    ), //i
    .s_wt_1_4_ready       (conv_core_s_wt_1_4_ready      ), //o
    .s_wt_1_4_payload     (data_cvt_io_o_wt_1_4_payload  ), //i
    .s_wt_1_5_valid       (data_cvt_io_o_wt_1_5_valid    ), //i
    .s_wt_1_5_ready       (conv_core_s_wt_1_5_ready      ), //o
    .s_wt_1_5_payload     (data_cvt_io_o_wt_1_5_payload  ), //i
    .s_wt_1_6_valid       (data_cvt_io_o_wt_1_6_valid    ), //i
    .s_wt_1_6_ready       (conv_core_s_wt_1_6_ready      ), //o
    .s_wt_1_6_payload     (data_cvt_io_o_wt_1_6_payload  ), //i
    .s_wt_1_7_valid       (data_cvt_io_o_wt_1_7_valid    ), //i
    .s_wt_1_7_ready       (conv_core_s_wt_1_7_ready      ), //o
    .s_wt_1_7_payload     (data_cvt_io_o_wt_1_7_payload  ), //i
    .s_wt_2_0_valid       (data_cvt_io_o_wt_2_0_valid    ), //i
    .s_wt_2_0_ready       (conv_core_s_wt_2_0_ready      ), //o
    .s_wt_2_0_payload     (data_cvt_io_o_wt_2_0_payload  ), //i
    .s_wt_2_1_valid       (data_cvt_io_o_wt_2_1_valid    ), //i
    .s_wt_2_1_ready       (conv_core_s_wt_2_1_ready      ), //o
    .s_wt_2_1_payload     (data_cvt_io_o_wt_2_1_payload  ), //i
    .s_wt_2_2_valid       (data_cvt_io_o_wt_2_2_valid    ), //i
    .s_wt_2_2_ready       (conv_core_s_wt_2_2_ready      ), //o
    .s_wt_2_2_payload     (data_cvt_io_o_wt_2_2_payload  ), //i
    .s_wt_2_3_valid       (data_cvt_io_o_wt_2_3_valid    ), //i
    .s_wt_2_3_ready       (conv_core_s_wt_2_3_ready      ), //o
    .s_wt_2_3_payload     (data_cvt_io_o_wt_2_3_payload  ), //i
    .s_wt_2_4_valid       (data_cvt_io_o_wt_2_4_valid    ), //i
    .s_wt_2_4_ready       (conv_core_s_wt_2_4_ready      ), //o
    .s_wt_2_4_payload     (data_cvt_io_o_wt_2_4_payload  ), //i
    .s_wt_2_5_valid       (data_cvt_io_o_wt_2_5_valid    ), //i
    .s_wt_2_5_ready       (conv_core_s_wt_2_5_ready      ), //o
    .s_wt_2_5_payload     (data_cvt_io_o_wt_2_5_payload  ), //i
    .s_wt_2_6_valid       (data_cvt_io_o_wt_2_6_valid    ), //i
    .s_wt_2_6_ready       (conv_core_s_wt_2_6_ready      ), //o
    .s_wt_2_6_payload     (data_cvt_io_o_wt_2_6_payload  ), //i
    .s_wt_2_7_valid       (data_cvt_io_o_wt_2_7_valid    ), //i
    .s_wt_2_7_ready       (conv_core_s_wt_2_7_ready      ), //o
    .s_wt_2_7_payload     (data_cvt_io_o_wt_2_7_payload  ), //i
    .s_wt_3_0_valid       (data_cvt_io_o_wt_3_0_valid    ), //i
    .s_wt_3_0_ready       (conv_core_s_wt_3_0_ready      ), //o
    .s_wt_3_0_payload     (data_cvt_io_o_wt_3_0_payload  ), //i
    .s_wt_3_1_valid       (data_cvt_io_o_wt_3_1_valid    ), //i
    .s_wt_3_1_ready       (conv_core_s_wt_3_1_ready      ), //o
    .s_wt_3_1_payload     (data_cvt_io_o_wt_3_1_payload  ), //i
    .s_wt_3_2_valid       (data_cvt_io_o_wt_3_2_valid    ), //i
    .s_wt_3_2_ready       (conv_core_s_wt_3_2_ready      ), //o
    .s_wt_3_2_payload     (data_cvt_io_o_wt_3_2_payload  ), //i
    .s_wt_3_3_valid       (data_cvt_io_o_wt_3_3_valid    ), //i
    .s_wt_3_3_ready       (conv_core_s_wt_3_3_ready      ), //o
    .s_wt_3_3_payload     (data_cvt_io_o_wt_3_3_payload  ), //i
    .s_wt_3_4_valid       (data_cvt_io_o_wt_3_4_valid    ), //i
    .s_wt_3_4_ready       (conv_core_s_wt_3_4_ready      ), //o
    .s_wt_3_4_payload     (data_cvt_io_o_wt_3_4_payload  ), //i
    .s_wt_3_5_valid       (data_cvt_io_o_wt_3_5_valid    ), //i
    .s_wt_3_5_ready       (conv_core_s_wt_3_5_ready      ), //o
    .s_wt_3_5_payload     (data_cvt_io_o_wt_3_5_payload  ), //i
    .s_wt_3_6_valid       (data_cvt_io_o_wt_3_6_valid    ), //i
    .s_wt_3_6_ready       (conv_core_s_wt_3_6_ready      ), //o
    .s_wt_3_6_payload     (data_cvt_io_o_wt_3_6_payload  ), //i
    .s_wt_3_7_valid       (data_cvt_io_o_wt_3_7_valid    ), //i
    .s_wt_3_7_ready       (conv_core_s_wt_3_7_ready      ), //o
    .s_wt_3_7_payload     (data_cvt_io_o_wt_3_7_payload  ), //i
    .s_wt_4_0_valid       (data_cvt_io_o_wt_4_0_valid    ), //i
    .s_wt_4_0_ready       (conv_core_s_wt_4_0_ready      ), //o
    .s_wt_4_0_payload     (data_cvt_io_o_wt_4_0_payload  ), //i
    .s_wt_4_1_valid       (data_cvt_io_o_wt_4_1_valid    ), //i
    .s_wt_4_1_ready       (conv_core_s_wt_4_1_ready      ), //o
    .s_wt_4_1_payload     (data_cvt_io_o_wt_4_1_payload  ), //i
    .s_wt_4_2_valid       (data_cvt_io_o_wt_4_2_valid    ), //i
    .s_wt_4_2_ready       (conv_core_s_wt_4_2_ready      ), //o
    .s_wt_4_2_payload     (data_cvt_io_o_wt_4_2_payload  ), //i
    .s_wt_4_3_valid       (data_cvt_io_o_wt_4_3_valid    ), //i
    .s_wt_4_3_ready       (conv_core_s_wt_4_3_ready      ), //o
    .s_wt_4_3_payload     (data_cvt_io_o_wt_4_3_payload  ), //i
    .s_wt_4_4_valid       (data_cvt_io_o_wt_4_4_valid    ), //i
    .s_wt_4_4_ready       (conv_core_s_wt_4_4_ready      ), //o
    .s_wt_4_4_payload     (data_cvt_io_o_wt_4_4_payload  ), //i
    .s_wt_4_5_valid       (data_cvt_io_o_wt_4_5_valid    ), //i
    .s_wt_4_5_ready       (conv_core_s_wt_4_5_ready      ), //o
    .s_wt_4_5_payload     (data_cvt_io_o_wt_4_5_payload  ), //i
    .s_wt_4_6_valid       (data_cvt_io_o_wt_4_6_valid    ), //i
    .s_wt_4_6_ready       (conv_core_s_wt_4_6_ready      ), //o
    .s_wt_4_6_payload     (data_cvt_io_o_wt_4_6_payload  ), //i
    .s_wt_4_7_valid       (data_cvt_io_o_wt_4_7_valid    ), //i
    .s_wt_4_7_ready       (conv_core_s_wt_4_7_ready      ), //o
    .s_wt_4_7_payload     (data_cvt_io_o_wt_4_7_payload  ), //i
    .s_wt_5_0_valid       (data_cvt_io_o_wt_5_0_valid    ), //i
    .s_wt_5_0_ready       (conv_core_s_wt_5_0_ready      ), //o
    .s_wt_5_0_payload     (data_cvt_io_o_wt_5_0_payload  ), //i
    .s_wt_5_1_valid       (data_cvt_io_o_wt_5_1_valid    ), //i
    .s_wt_5_1_ready       (conv_core_s_wt_5_1_ready      ), //o
    .s_wt_5_1_payload     (data_cvt_io_o_wt_5_1_payload  ), //i
    .s_wt_5_2_valid       (data_cvt_io_o_wt_5_2_valid    ), //i
    .s_wt_5_2_ready       (conv_core_s_wt_5_2_ready      ), //o
    .s_wt_5_2_payload     (data_cvt_io_o_wt_5_2_payload  ), //i
    .s_wt_5_3_valid       (data_cvt_io_o_wt_5_3_valid    ), //i
    .s_wt_5_3_ready       (conv_core_s_wt_5_3_ready      ), //o
    .s_wt_5_3_payload     (data_cvt_io_o_wt_5_3_payload  ), //i
    .s_wt_5_4_valid       (data_cvt_io_o_wt_5_4_valid    ), //i
    .s_wt_5_4_ready       (conv_core_s_wt_5_4_ready      ), //o
    .s_wt_5_4_payload     (data_cvt_io_o_wt_5_4_payload  ), //i
    .s_wt_5_5_valid       (data_cvt_io_o_wt_5_5_valid    ), //i
    .s_wt_5_5_ready       (conv_core_s_wt_5_5_ready      ), //o
    .s_wt_5_5_payload     (data_cvt_io_o_wt_5_5_payload  ), //i
    .s_wt_5_6_valid       (data_cvt_io_o_wt_5_6_valid    ), //i
    .s_wt_5_6_ready       (conv_core_s_wt_5_6_ready      ), //o
    .s_wt_5_6_payload     (data_cvt_io_o_wt_5_6_payload  ), //i
    .s_wt_5_7_valid       (data_cvt_io_o_wt_5_7_valid    ), //i
    .s_wt_5_7_ready       (conv_core_s_wt_5_7_ready      ), //o
    .s_wt_5_7_payload     (data_cvt_io_o_wt_5_7_payload  ), //i
    .s_wt_6_0_valid       (data_cvt_io_o_wt_6_0_valid    ), //i
    .s_wt_6_0_ready       (conv_core_s_wt_6_0_ready      ), //o
    .s_wt_6_0_payload     (data_cvt_io_o_wt_6_0_payload  ), //i
    .s_wt_6_1_valid       (data_cvt_io_o_wt_6_1_valid    ), //i
    .s_wt_6_1_ready       (conv_core_s_wt_6_1_ready      ), //o
    .s_wt_6_1_payload     (data_cvt_io_o_wt_6_1_payload  ), //i
    .s_wt_6_2_valid       (data_cvt_io_o_wt_6_2_valid    ), //i
    .s_wt_6_2_ready       (conv_core_s_wt_6_2_ready      ), //o
    .s_wt_6_2_payload     (data_cvt_io_o_wt_6_2_payload  ), //i
    .s_wt_6_3_valid       (data_cvt_io_o_wt_6_3_valid    ), //i
    .s_wt_6_3_ready       (conv_core_s_wt_6_3_ready      ), //o
    .s_wt_6_3_payload     (data_cvt_io_o_wt_6_3_payload  ), //i
    .s_wt_6_4_valid       (data_cvt_io_o_wt_6_4_valid    ), //i
    .s_wt_6_4_ready       (conv_core_s_wt_6_4_ready      ), //o
    .s_wt_6_4_payload     (data_cvt_io_o_wt_6_4_payload  ), //i
    .s_wt_6_5_valid       (data_cvt_io_o_wt_6_5_valid    ), //i
    .s_wt_6_5_ready       (conv_core_s_wt_6_5_ready      ), //o
    .s_wt_6_5_payload     (data_cvt_io_o_wt_6_5_payload  ), //i
    .s_wt_6_6_valid       (data_cvt_io_o_wt_6_6_valid    ), //i
    .s_wt_6_6_ready       (conv_core_s_wt_6_6_ready      ), //o
    .s_wt_6_6_payload     (data_cvt_io_o_wt_6_6_payload  ), //i
    .s_wt_6_7_valid       (data_cvt_io_o_wt_6_7_valid    ), //i
    .s_wt_6_7_ready       (conv_core_s_wt_6_7_ready      ), //o
    .s_wt_6_7_payload     (data_cvt_io_o_wt_6_7_payload  ), //i
    .s_wt_7_0_valid       (data_cvt_io_o_wt_7_0_valid    ), //i
    .s_wt_7_0_ready       (conv_core_s_wt_7_0_ready      ), //o
    .s_wt_7_0_payload     (data_cvt_io_o_wt_7_0_payload  ), //i
    .s_wt_7_1_valid       (data_cvt_io_o_wt_7_1_valid    ), //i
    .s_wt_7_1_ready       (conv_core_s_wt_7_1_ready      ), //o
    .s_wt_7_1_payload     (data_cvt_io_o_wt_7_1_payload  ), //i
    .s_wt_7_2_valid       (data_cvt_io_o_wt_7_2_valid    ), //i
    .s_wt_7_2_ready       (conv_core_s_wt_7_2_ready      ), //o
    .s_wt_7_2_payload     (data_cvt_io_o_wt_7_2_payload  ), //i
    .s_wt_7_3_valid       (data_cvt_io_o_wt_7_3_valid    ), //i
    .s_wt_7_3_ready       (conv_core_s_wt_7_3_ready      ), //o
    .s_wt_7_3_payload     (data_cvt_io_o_wt_7_3_payload  ), //i
    .s_wt_7_4_valid       (data_cvt_io_o_wt_7_4_valid    ), //i
    .s_wt_7_4_ready       (conv_core_s_wt_7_4_ready      ), //o
    .s_wt_7_4_payload     (data_cvt_io_o_wt_7_4_payload  ), //i
    .s_wt_7_5_valid       (data_cvt_io_o_wt_7_5_valid    ), //i
    .s_wt_7_5_ready       (conv_core_s_wt_7_5_ready      ), //o
    .s_wt_7_5_payload     (data_cvt_io_o_wt_7_5_payload  ), //i
    .s_wt_7_6_valid       (data_cvt_io_o_wt_7_6_valid    ), //i
    .s_wt_7_6_ready       (conv_core_s_wt_7_6_ready      ), //o
    .s_wt_7_6_payload     (data_cvt_io_o_wt_7_6_payload  ), //i
    .s_wt_7_7_valid       (data_cvt_io_o_wt_7_7_valid    ), //i
    .s_wt_7_7_ready       (conv_core_s_wt_7_7_ready      ), //o
    .s_wt_7_7_payload     (data_cvt_io_o_wt_7_7_payload  ), //i
    .s_out_0_0_valid      (conv_core_s_out_0_0_valid     ), //o
    .s_out_0_0_ready      (mux_io_indata_0_0_ready       ), //i
    .s_out_0_0_payload    (conv_core_s_out_0_0_payload   ), //o
    .s_out_0_1_valid      (conv_core_s_out_0_1_valid     ), //o
    .s_out_0_1_ready      (mux_io_indata_0_1_ready       ), //i
    .s_out_0_1_payload    (conv_core_s_out_0_1_payload   ), //o
    .s_out_0_2_valid      (conv_core_s_out_0_2_valid     ), //o
    .s_out_0_2_ready      (mux_io_indata_0_2_ready       ), //i
    .s_out_0_2_payload    (conv_core_s_out_0_2_payload   ), //o
    .s_out_0_3_valid      (conv_core_s_out_0_3_valid     ), //o
    .s_out_0_3_ready      (mux_io_indata_0_3_ready       ), //i
    .s_out_0_3_payload    (conv_core_s_out_0_3_payload   ), //o
    .s_out_0_4_valid      (conv_core_s_out_0_4_valid     ), //o
    .s_out_0_4_ready      (mux_io_indata_0_4_ready       ), //i
    .s_out_0_4_payload    (conv_core_s_out_0_4_payload   ), //o
    .s_out_0_5_valid      (conv_core_s_out_0_5_valid     ), //o
    .s_out_0_5_ready      (mux_io_indata_0_5_ready       ), //i
    .s_out_0_5_payload    (conv_core_s_out_0_5_payload   ), //o
    .s_out_0_6_valid      (conv_core_s_out_0_6_valid     ), //o
    .s_out_0_6_ready      (mux_io_indata_0_6_ready       ), //i
    .s_out_0_6_payload    (conv_core_s_out_0_6_payload   ), //o
    .s_out_0_7_valid      (conv_core_s_out_0_7_valid     ), //o
    .s_out_0_7_ready      (mux_io_indata_0_7_ready       ), //i
    .s_out_0_7_payload    (conv_core_s_out_0_7_payload   ), //o
    .s_out_1_0_valid      (conv_core_s_out_1_0_valid     ), //o
    .s_out_1_0_ready      (mux_io_indata_1_0_ready       ), //i
    .s_out_1_0_payload    (conv_core_s_out_1_0_payload   ), //o
    .s_out_1_1_valid      (conv_core_s_out_1_1_valid     ), //o
    .s_out_1_1_ready      (mux_io_indata_1_1_ready       ), //i
    .s_out_1_1_payload    (conv_core_s_out_1_1_payload   ), //o
    .s_out_1_2_valid      (conv_core_s_out_1_2_valid     ), //o
    .s_out_1_2_ready      (mux_io_indata_1_2_ready       ), //i
    .s_out_1_2_payload    (conv_core_s_out_1_2_payload   ), //o
    .s_out_1_3_valid      (conv_core_s_out_1_3_valid     ), //o
    .s_out_1_3_ready      (mux_io_indata_1_3_ready       ), //i
    .s_out_1_3_payload    (conv_core_s_out_1_3_payload   ), //o
    .s_out_1_4_valid      (conv_core_s_out_1_4_valid     ), //o
    .s_out_1_4_ready      (mux_io_indata_1_4_ready       ), //i
    .s_out_1_4_payload    (conv_core_s_out_1_4_payload   ), //o
    .s_out_1_5_valid      (conv_core_s_out_1_5_valid     ), //o
    .s_out_1_5_ready      (mux_io_indata_1_5_ready       ), //i
    .s_out_1_5_payload    (conv_core_s_out_1_5_payload   ), //o
    .s_out_1_6_valid      (conv_core_s_out_1_6_valid     ), //o
    .s_out_1_6_ready      (mux_io_indata_1_6_ready       ), //i
    .s_out_1_6_payload    (conv_core_s_out_1_6_payload   ), //o
    .s_out_1_7_valid      (conv_core_s_out_1_7_valid     ), //o
    .s_out_1_7_ready      (mux_io_indata_1_7_ready       ), //i
    .s_out_1_7_payload    (conv_core_s_out_1_7_payload   ), //o
    .s_out_2_0_valid      (conv_core_s_out_2_0_valid     ), //o
    .s_out_2_0_ready      (mux_io_indata_2_0_ready       ), //i
    .s_out_2_0_payload    (conv_core_s_out_2_0_payload   ), //o
    .s_out_2_1_valid      (conv_core_s_out_2_1_valid     ), //o
    .s_out_2_1_ready      (mux_io_indata_2_1_ready       ), //i
    .s_out_2_1_payload    (conv_core_s_out_2_1_payload   ), //o
    .s_out_2_2_valid      (conv_core_s_out_2_2_valid     ), //o
    .s_out_2_2_ready      (mux_io_indata_2_2_ready       ), //i
    .s_out_2_2_payload    (conv_core_s_out_2_2_payload   ), //o
    .s_out_2_3_valid      (conv_core_s_out_2_3_valid     ), //o
    .s_out_2_3_ready      (mux_io_indata_2_3_ready       ), //i
    .s_out_2_3_payload    (conv_core_s_out_2_3_payload   ), //o
    .s_out_2_4_valid      (conv_core_s_out_2_4_valid     ), //o
    .s_out_2_4_ready      (mux_io_indata_2_4_ready       ), //i
    .s_out_2_4_payload    (conv_core_s_out_2_4_payload   ), //o
    .s_out_2_5_valid      (conv_core_s_out_2_5_valid     ), //o
    .s_out_2_5_ready      (mux_io_indata_2_5_ready       ), //i
    .s_out_2_5_payload    (conv_core_s_out_2_5_payload   ), //o
    .s_out_2_6_valid      (conv_core_s_out_2_6_valid     ), //o
    .s_out_2_6_ready      (mux_io_indata_2_6_ready       ), //i
    .s_out_2_6_payload    (conv_core_s_out_2_6_payload   ), //o
    .s_out_2_7_valid      (conv_core_s_out_2_7_valid     ), //o
    .s_out_2_7_ready      (mux_io_indata_2_7_ready       ), //i
    .s_out_2_7_payload    (conv_core_s_out_2_7_payload   ), //o
    .s_out_3_0_valid      (conv_core_s_out_3_0_valid     ), //o
    .s_out_3_0_ready      (mux_io_indata_3_0_ready       ), //i
    .s_out_3_0_payload    (conv_core_s_out_3_0_payload   ), //o
    .s_out_3_1_valid      (conv_core_s_out_3_1_valid     ), //o
    .s_out_3_1_ready      (mux_io_indata_3_1_ready       ), //i
    .s_out_3_1_payload    (conv_core_s_out_3_1_payload   ), //o
    .s_out_3_2_valid      (conv_core_s_out_3_2_valid     ), //o
    .s_out_3_2_ready      (mux_io_indata_3_2_ready       ), //i
    .s_out_3_2_payload    (conv_core_s_out_3_2_payload   ), //o
    .s_out_3_3_valid      (conv_core_s_out_3_3_valid     ), //o
    .s_out_3_3_ready      (mux_io_indata_3_3_ready       ), //i
    .s_out_3_3_payload    (conv_core_s_out_3_3_payload   ), //o
    .s_out_3_4_valid      (conv_core_s_out_3_4_valid     ), //o
    .s_out_3_4_ready      (mux_io_indata_3_4_ready       ), //i
    .s_out_3_4_payload    (conv_core_s_out_3_4_payload   ), //o
    .s_out_3_5_valid      (conv_core_s_out_3_5_valid     ), //o
    .s_out_3_5_ready      (mux_io_indata_3_5_ready       ), //i
    .s_out_3_5_payload    (conv_core_s_out_3_5_payload   ), //o
    .s_out_3_6_valid      (conv_core_s_out_3_6_valid     ), //o
    .s_out_3_6_ready      (mux_io_indata_3_6_ready       ), //i
    .s_out_3_6_payload    (conv_core_s_out_3_6_payload   ), //o
    .s_out_3_7_valid      (conv_core_s_out_3_7_valid     ), //o
    .s_out_3_7_ready      (mux_io_indata_3_7_ready       ), //i
    .s_out_3_7_payload    (conv_core_s_out_3_7_payload   ), //o
    .s_out_4_0_valid      (conv_core_s_out_4_0_valid     ), //o
    .s_out_4_0_ready      (mux_io_indata_4_0_ready       ), //i
    .s_out_4_0_payload    (conv_core_s_out_4_0_payload   ), //o
    .s_out_4_1_valid      (conv_core_s_out_4_1_valid     ), //o
    .s_out_4_1_ready      (mux_io_indata_4_1_ready       ), //i
    .s_out_4_1_payload    (conv_core_s_out_4_1_payload   ), //o
    .s_out_4_2_valid      (conv_core_s_out_4_2_valid     ), //o
    .s_out_4_2_ready      (mux_io_indata_4_2_ready       ), //i
    .s_out_4_2_payload    (conv_core_s_out_4_2_payload   ), //o
    .s_out_4_3_valid      (conv_core_s_out_4_3_valid     ), //o
    .s_out_4_3_ready      (mux_io_indata_4_3_ready       ), //i
    .s_out_4_3_payload    (conv_core_s_out_4_3_payload   ), //o
    .s_out_4_4_valid      (conv_core_s_out_4_4_valid     ), //o
    .s_out_4_4_ready      (mux_io_indata_4_4_ready       ), //i
    .s_out_4_4_payload    (conv_core_s_out_4_4_payload   ), //o
    .s_out_4_5_valid      (conv_core_s_out_4_5_valid     ), //o
    .s_out_4_5_ready      (mux_io_indata_4_5_ready       ), //i
    .s_out_4_5_payload    (conv_core_s_out_4_5_payload   ), //o
    .s_out_4_6_valid      (conv_core_s_out_4_6_valid     ), //o
    .s_out_4_6_ready      (mux_io_indata_4_6_ready       ), //i
    .s_out_4_6_payload    (conv_core_s_out_4_6_payload   ), //o
    .s_out_4_7_valid      (conv_core_s_out_4_7_valid     ), //o
    .s_out_4_7_ready      (mux_io_indata_4_7_ready       ), //i
    .s_out_4_7_payload    (conv_core_s_out_4_7_payload   ), //o
    .s_out_5_0_valid      (conv_core_s_out_5_0_valid     ), //o
    .s_out_5_0_ready      (mux_io_indata_5_0_ready       ), //i
    .s_out_5_0_payload    (conv_core_s_out_5_0_payload   ), //o
    .s_out_5_1_valid      (conv_core_s_out_5_1_valid     ), //o
    .s_out_5_1_ready      (mux_io_indata_5_1_ready       ), //i
    .s_out_5_1_payload    (conv_core_s_out_5_1_payload   ), //o
    .s_out_5_2_valid      (conv_core_s_out_5_2_valid     ), //o
    .s_out_5_2_ready      (mux_io_indata_5_2_ready       ), //i
    .s_out_5_2_payload    (conv_core_s_out_5_2_payload   ), //o
    .s_out_5_3_valid      (conv_core_s_out_5_3_valid     ), //o
    .s_out_5_3_ready      (mux_io_indata_5_3_ready       ), //i
    .s_out_5_3_payload    (conv_core_s_out_5_3_payload   ), //o
    .s_out_5_4_valid      (conv_core_s_out_5_4_valid     ), //o
    .s_out_5_4_ready      (mux_io_indata_5_4_ready       ), //i
    .s_out_5_4_payload    (conv_core_s_out_5_4_payload   ), //o
    .s_out_5_5_valid      (conv_core_s_out_5_5_valid     ), //o
    .s_out_5_5_ready      (mux_io_indata_5_5_ready       ), //i
    .s_out_5_5_payload    (conv_core_s_out_5_5_payload   ), //o
    .s_out_5_6_valid      (conv_core_s_out_5_6_valid     ), //o
    .s_out_5_6_ready      (mux_io_indata_5_6_ready       ), //i
    .s_out_5_6_payload    (conv_core_s_out_5_6_payload   ), //o
    .s_out_5_7_valid      (conv_core_s_out_5_7_valid     ), //o
    .s_out_5_7_ready      (mux_io_indata_5_7_ready       ), //i
    .s_out_5_7_payload    (conv_core_s_out_5_7_payload   ), //o
    .s_out_6_0_valid      (conv_core_s_out_6_0_valid     ), //o
    .s_out_6_0_ready      (mux_io_indata_6_0_ready       ), //i
    .s_out_6_0_payload    (conv_core_s_out_6_0_payload   ), //o
    .s_out_6_1_valid      (conv_core_s_out_6_1_valid     ), //o
    .s_out_6_1_ready      (mux_io_indata_6_1_ready       ), //i
    .s_out_6_1_payload    (conv_core_s_out_6_1_payload   ), //o
    .s_out_6_2_valid      (conv_core_s_out_6_2_valid     ), //o
    .s_out_6_2_ready      (mux_io_indata_6_2_ready       ), //i
    .s_out_6_2_payload    (conv_core_s_out_6_2_payload   ), //o
    .s_out_6_3_valid      (conv_core_s_out_6_3_valid     ), //o
    .s_out_6_3_ready      (mux_io_indata_6_3_ready       ), //i
    .s_out_6_3_payload    (conv_core_s_out_6_3_payload   ), //o
    .s_out_6_4_valid      (conv_core_s_out_6_4_valid     ), //o
    .s_out_6_4_ready      (mux_io_indata_6_4_ready       ), //i
    .s_out_6_4_payload    (conv_core_s_out_6_4_payload   ), //o
    .s_out_6_5_valid      (conv_core_s_out_6_5_valid     ), //o
    .s_out_6_5_ready      (mux_io_indata_6_5_ready       ), //i
    .s_out_6_5_payload    (conv_core_s_out_6_5_payload   ), //o
    .s_out_6_6_valid      (conv_core_s_out_6_6_valid     ), //o
    .s_out_6_6_ready      (mux_io_indata_6_6_ready       ), //i
    .s_out_6_6_payload    (conv_core_s_out_6_6_payload   ), //o
    .s_out_6_7_valid      (conv_core_s_out_6_7_valid     ), //o
    .s_out_6_7_ready      (mux_io_indata_6_7_ready       ), //i
    .s_out_6_7_payload    (conv_core_s_out_6_7_payload   ), //o
    .s_out_7_0_valid      (conv_core_s_out_7_0_valid     ), //o
    .s_out_7_0_ready      (mux_io_indata_7_0_ready       ), //i
    .s_out_7_0_payload    (conv_core_s_out_7_0_payload   ), //o
    .s_out_7_1_valid      (conv_core_s_out_7_1_valid     ), //o
    .s_out_7_1_ready      (mux_io_indata_7_1_ready       ), //i
    .s_out_7_1_payload    (conv_core_s_out_7_1_payload   ), //o
    .s_out_7_2_valid      (conv_core_s_out_7_2_valid     ), //o
    .s_out_7_2_ready      (mux_io_indata_7_2_ready       ), //i
    .s_out_7_2_payload    (conv_core_s_out_7_2_payload   ), //o
    .s_out_7_3_valid      (conv_core_s_out_7_3_valid     ), //o
    .s_out_7_3_ready      (mux_io_indata_7_3_ready       ), //i
    .s_out_7_3_payload    (conv_core_s_out_7_3_payload   ), //o
    .s_out_7_4_valid      (conv_core_s_out_7_4_valid     ), //o
    .s_out_7_4_ready      (mux_io_indata_7_4_ready       ), //i
    .s_out_7_4_payload    (conv_core_s_out_7_4_payload   ), //o
    .s_out_7_5_valid      (conv_core_s_out_7_5_valid     ), //o
    .s_out_7_5_ready      (mux_io_indata_7_5_ready       ), //i
    .s_out_7_5_payload    (conv_core_s_out_7_5_payload   ), //o
    .s_out_7_6_valid      (conv_core_s_out_7_6_valid     ), //o
    .s_out_7_6_ready      (mux_io_indata_7_6_ready       ), //i
    .s_out_7_6_payload    (conv_core_s_out_7_6_payload   ), //o
    .s_out_7_7_valid      (conv_core_s_out_7_7_valid     ), //o
    .s_out_7_7_ready      (mux_io_indata_7_7_ready       ), //i
    .s_out_7_7_payload    (conv_core_s_out_7_7_payload   ), //o
    .par_acc_cnt          (conv_core_par_acc_cnt         ), //i
    .acc_enable           (acc_enable                    ), //i
    .clk                  (clk                           ), //i
    .reset                (reset                         )  //i
  );
  conv_mux mux (
    .io_is_delta_wt               (is_delta_wt                    ), //i
    .io_indata_0_0_valid          (conv_core_s_out_0_0_valid      ), //i
    .io_indata_0_0_ready          (mux_io_indata_0_0_ready        ), //o
    .io_indata_0_0_payload        (conv_core_s_out_0_0_payload    ), //i
    .io_indata_0_1_valid          (conv_core_s_out_0_1_valid      ), //i
    .io_indata_0_1_ready          (mux_io_indata_0_1_ready        ), //o
    .io_indata_0_1_payload        (conv_core_s_out_0_1_payload    ), //i
    .io_indata_0_2_valid          (conv_core_s_out_0_2_valid      ), //i
    .io_indata_0_2_ready          (mux_io_indata_0_2_ready        ), //o
    .io_indata_0_2_payload        (conv_core_s_out_0_2_payload    ), //i
    .io_indata_0_3_valid          (conv_core_s_out_0_3_valid      ), //i
    .io_indata_0_3_ready          (mux_io_indata_0_3_ready        ), //o
    .io_indata_0_3_payload        (conv_core_s_out_0_3_payload    ), //i
    .io_indata_0_4_valid          (conv_core_s_out_0_4_valid      ), //i
    .io_indata_0_4_ready          (mux_io_indata_0_4_ready        ), //o
    .io_indata_0_4_payload        (conv_core_s_out_0_4_payload    ), //i
    .io_indata_0_5_valid          (conv_core_s_out_0_5_valid      ), //i
    .io_indata_0_5_ready          (mux_io_indata_0_5_ready        ), //o
    .io_indata_0_5_payload        (conv_core_s_out_0_5_payload    ), //i
    .io_indata_0_6_valid          (conv_core_s_out_0_6_valid      ), //i
    .io_indata_0_6_ready          (mux_io_indata_0_6_ready        ), //o
    .io_indata_0_6_payload        (conv_core_s_out_0_6_payload    ), //i
    .io_indata_0_7_valid          (conv_core_s_out_0_7_valid      ), //i
    .io_indata_0_7_ready          (mux_io_indata_0_7_ready        ), //o
    .io_indata_0_7_payload        (conv_core_s_out_0_7_payload    ), //i
    .io_indata_1_0_valid          (conv_core_s_out_1_0_valid      ), //i
    .io_indata_1_0_ready          (mux_io_indata_1_0_ready        ), //o
    .io_indata_1_0_payload        (conv_core_s_out_1_0_payload    ), //i
    .io_indata_1_1_valid          (conv_core_s_out_1_1_valid      ), //i
    .io_indata_1_1_ready          (mux_io_indata_1_1_ready        ), //o
    .io_indata_1_1_payload        (conv_core_s_out_1_1_payload    ), //i
    .io_indata_1_2_valid          (conv_core_s_out_1_2_valid      ), //i
    .io_indata_1_2_ready          (mux_io_indata_1_2_ready        ), //o
    .io_indata_1_2_payload        (conv_core_s_out_1_2_payload    ), //i
    .io_indata_1_3_valid          (conv_core_s_out_1_3_valid      ), //i
    .io_indata_1_3_ready          (mux_io_indata_1_3_ready        ), //o
    .io_indata_1_3_payload        (conv_core_s_out_1_3_payload    ), //i
    .io_indata_1_4_valid          (conv_core_s_out_1_4_valid      ), //i
    .io_indata_1_4_ready          (mux_io_indata_1_4_ready        ), //o
    .io_indata_1_4_payload        (conv_core_s_out_1_4_payload    ), //i
    .io_indata_1_5_valid          (conv_core_s_out_1_5_valid      ), //i
    .io_indata_1_5_ready          (mux_io_indata_1_5_ready        ), //o
    .io_indata_1_5_payload        (conv_core_s_out_1_5_payload    ), //i
    .io_indata_1_6_valid          (conv_core_s_out_1_6_valid      ), //i
    .io_indata_1_6_ready          (mux_io_indata_1_6_ready        ), //o
    .io_indata_1_6_payload        (conv_core_s_out_1_6_payload    ), //i
    .io_indata_1_7_valid          (conv_core_s_out_1_7_valid      ), //i
    .io_indata_1_7_ready          (mux_io_indata_1_7_ready        ), //o
    .io_indata_1_7_payload        (conv_core_s_out_1_7_payload    ), //i
    .io_indata_2_0_valid          (conv_core_s_out_2_0_valid      ), //i
    .io_indata_2_0_ready          (mux_io_indata_2_0_ready        ), //o
    .io_indata_2_0_payload        (conv_core_s_out_2_0_payload    ), //i
    .io_indata_2_1_valid          (conv_core_s_out_2_1_valid      ), //i
    .io_indata_2_1_ready          (mux_io_indata_2_1_ready        ), //o
    .io_indata_2_1_payload        (conv_core_s_out_2_1_payload    ), //i
    .io_indata_2_2_valid          (conv_core_s_out_2_2_valid      ), //i
    .io_indata_2_2_ready          (mux_io_indata_2_2_ready        ), //o
    .io_indata_2_2_payload        (conv_core_s_out_2_2_payload    ), //i
    .io_indata_2_3_valid          (conv_core_s_out_2_3_valid      ), //i
    .io_indata_2_3_ready          (mux_io_indata_2_3_ready        ), //o
    .io_indata_2_3_payload        (conv_core_s_out_2_3_payload    ), //i
    .io_indata_2_4_valid          (conv_core_s_out_2_4_valid      ), //i
    .io_indata_2_4_ready          (mux_io_indata_2_4_ready        ), //o
    .io_indata_2_4_payload        (conv_core_s_out_2_4_payload    ), //i
    .io_indata_2_5_valid          (conv_core_s_out_2_5_valid      ), //i
    .io_indata_2_5_ready          (mux_io_indata_2_5_ready        ), //o
    .io_indata_2_5_payload        (conv_core_s_out_2_5_payload    ), //i
    .io_indata_2_6_valid          (conv_core_s_out_2_6_valid      ), //i
    .io_indata_2_6_ready          (mux_io_indata_2_6_ready        ), //o
    .io_indata_2_6_payload        (conv_core_s_out_2_6_payload    ), //i
    .io_indata_2_7_valid          (conv_core_s_out_2_7_valid      ), //i
    .io_indata_2_7_ready          (mux_io_indata_2_7_ready        ), //o
    .io_indata_2_7_payload        (conv_core_s_out_2_7_payload    ), //i
    .io_indata_3_0_valid          (conv_core_s_out_3_0_valid      ), //i
    .io_indata_3_0_ready          (mux_io_indata_3_0_ready        ), //o
    .io_indata_3_0_payload        (conv_core_s_out_3_0_payload    ), //i
    .io_indata_3_1_valid          (conv_core_s_out_3_1_valid      ), //i
    .io_indata_3_1_ready          (mux_io_indata_3_1_ready        ), //o
    .io_indata_3_1_payload        (conv_core_s_out_3_1_payload    ), //i
    .io_indata_3_2_valid          (conv_core_s_out_3_2_valid      ), //i
    .io_indata_3_2_ready          (mux_io_indata_3_2_ready        ), //o
    .io_indata_3_2_payload        (conv_core_s_out_3_2_payload    ), //i
    .io_indata_3_3_valid          (conv_core_s_out_3_3_valid      ), //i
    .io_indata_3_3_ready          (mux_io_indata_3_3_ready        ), //o
    .io_indata_3_3_payload        (conv_core_s_out_3_3_payload    ), //i
    .io_indata_3_4_valid          (conv_core_s_out_3_4_valid      ), //i
    .io_indata_3_4_ready          (mux_io_indata_3_4_ready        ), //o
    .io_indata_3_4_payload        (conv_core_s_out_3_4_payload    ), //i
    .io_indata_3_5_valid          (conv_core_s_out_3_5_valid      ), //i
    .io_indata_3_5_ready          (mux_io_indata_3_5_ready        ), //o
    .io_indata_3_5_payload        (conv_core_s_out_3_5_payload    ), //i
    .io_indata_3_6_valid          (conv_core_s_out_3_6_valid      ), //i
    .io_indata_3_6_ready          (mux_io_indata_3_6_ready        ), //o
    .io_indata_3_6_payload        (conv_core_s_out_3_6_payload    ), //i
    .io_indata_3_7_valid          (conv_core_s_out_3_7_valid      ), //i
    .io_indata_3_7_ready          (mux_io_indata_3_7_ready        ), //o
    .io_indata_3_7_payload        (conv_core_s_out_3_7_payload    ), //i
    .io_indata_4_0_valid          (conv_core_s_out_4_0_valid      ), //i
    .io_indata_4_0_ready          (mux_io_indata_4_0_ready        ), //o
    .io_indata_4_0_payload        (conv_core_s_out_4_0_payload    ), //i
    .io_indata_4_1_valid          (conv_core_s_out_4_1_valid      ), //i
    .io_indata_4_1_ready          (mux_io_indata_4_1_ready        ), //o
    .io_indata_4_1_payload        (conv_core_s_out_4_1_payload    ), //i
    .io_indata_4_2_valid          (conv_core_s_out_4_2_valid      ), //i
    .io_indata_4_2_ready          (mux_io_indata_4_2_ready        ), //o
    .io_indata_4_2_payload        (conv_core_s_out_4_2_payload    ), //i
    .io_indata_4_3_valid          (conv_core_s_out_4_3_valid      ), //i
    .io_indata_4_3_ready          (mux_io_indata_4_3_ready        ), //o
    .io_indata_4_3_payload        (conv_core_s_out_4_3_payload    ), //i
    .io_indata_4_4_valid          (conv_core_s_out_4_4_valid      ), //i
    .io_indata_4_4_ready          (mux_io_indata_4_4_ready        ), //o
    .io_indata_4_4_payload        (conv_core_s_out_4_4_payload    ), //i
    .io_indata_4_5_valid          (conv_core_s_out_4_5_valid      ), //i
    .io_indata_4_5_ready          (mux_io_indata_4_5_ready        ), //o
    .io_indata_4_5_payload        (conv_core_s_out_4_5_payload    ), //i
    .io_indata_4_6_valid          (conv_core_s_out_4_6_valid      ), //i
    .io_indata_4_6_ready          (mux_io_indata_4_6_ready        ), //o
    .io_indata_4_6_payload        (conv_core_s_out_4_6_payload    ), //i
    .io_indata_4_7_valid          (conv_core_s_out_4_7_valid      ), //i
    .io_indata_4_7_ready          (mux_io_indata_4_7_ready        ), //o
    .io_indata_4_7_payload        (conv_core_s_out_4_7_payload    ), //i
    .io_indata_5_0_valid          (conv_core_s_out_5_0_valid      ), //i
    .io_indata_5_0_ready          (mux_io_indata_5_0_ready        ), //o
    .io_indata_5_0_payload        (conv_core_s_out_5_0_payload    ), //i
    .io_indata_5_1_valid          (conv_core_s_out_5_1_valid      ), //i
    .io_indata_5_1_ready          (mux_io_indata_5_1_ready        ), //o
    .io_indata_5_1_payload        (conv_core_s_out_5_1_payload    ), //i
    .io_indata_5_2_valid          (conv_core_s_out_5_2_valid      ), //i
    .io_indata_5_2_ready          (mux_io_indata_5_2_ready        ), //o
    .io_indata_5_2_payload        (conv_core_s_out_5_2_payload    ), //i
    .io_indata_5_3_valid          (conv_core_s_out_5_3_valid      ), //i
    .io_indata_5_3_ready          (mux_io_indata_5_3_ready        ), //o
    .io_indata_5_3_payload        (conv_core_s_out_5_3_payload    ), //i
    .io_indata_5_4_valid          (conv_core_s_out_5_4_valid      ), //i
    .io_indata_5_4_ready          (mux_io_indata_5_4_ready        ), //o
    .io_indata_5_4_payload        (conv_core_s_out_5_4_payload    ), //i
    .io_indata_5_5_valid          (conv_core_s_out_5_5_valid      ), //i
    .io_indata_5_5_ready          (mux_io_indata_5_5_ready        ), //o
    .io_indata_5_5_payload        (conv_core_s_out_5_5_payload    ), //i
    .io_indata_5_6_valid          (conv_core_s_out_5_6_valid      ), //i
    .io_indata_5_6_ready          (mux_io_indata_5_6_ready        ), //o
    .io_indata_5_6_payload        (conv_core_s_out_5_6_payload    ), //i
    .io_indata_5_7_valid          (conv_core_s_out_5_7_valid      ), //i
    .io_indata_5_7_ready          (mux_io_indata_5_7_ready        ), //o
    .io_indata_5_7_payload        (conv_core_s_out_5_7_payload    ), //i
    .io_indata_6_0_valid          (conv_core_s_out_6_0_valid      ), //i
    .io_indata_6_0_ready          (mux_io_indata_6_0_ready        ), //o
    .io_indata_6_0_payload        (conv_core_s_out_6_0_payload    ), //i
    .io_indata_6_1_valid          (conv_core_s_out_6_1_valid      ), //i
    .io_indata_6_1_ready          (mux_io_indata_6_1_ready        ), //o
    .io_indata_6_1_payload        (conv_core_s_out_6_1_payload    ), //i
    .io_indata_6_2_valid          (conv_core_s_out_6_2_valid      ), //i
    .io_indata_6_2_ready          (mux_io_indata_6_2_ready        ), //o
    .io_indata_6_2_payload        (conv_core_s_out_6_2_payload    ), //i
    .io_indata_6_3_valid          (conv_core_s_out_6_3_valid      ), //i
    .io_indata_6_3_ready          (mux_io_indata_6_3_ready        ), //o
    .io_indata_6_3_payload        (conv_core_s_out_6_3_payload    ), //i
    .io_indata_6_4_valid          (conv_core_s_out_6_4_valid      ), //i
    .io_indata_6_4_ready          (mux_io_indata_6_4_ready        ), //o
    .io_indata_6_4_payload        (conv_core_s_out_6_4_payload    ), //i
    .io_indata_6_5_valid          (conv_core_s_out_6_5_valid      ), //i
    .io_indata_6_5_ready          (mux_io_indata_6_5_ready        ), //o
    .io_indata_6_5_payload        (conv_core_s_out_6_5_payload    ), //i
    .io_indata_6_6_valid          (conv_core_s_out_6_6_valid      ), //i
    .io_indata_6_6_ready          (mux_io_indata_6_6_ready        ), //o
    .io_indata_6_6_payload        (conv_core_s_out_6_6_payload    ), //i
    .io_indata_6_7_valid          (conv_core_s_out_6_7_valid      ), //i
    .io_indata_6_7_ready          (mux_io_indata_6_7_ready        ), //o
    .io_indata_6_7_payload        (conv_core_s_out_6_7_payload    ), //i
    .io_indata_7_0_valid          (conv_core_s_out_7_0_valid      ), //i
    .io_indata_7_0_ready          (mux_io_indata_7_0_ready        ), //o
    .io_indata_7_0_payload        (conv_core_s_out_7_0_payload    ), //i
    .io_indata_7_1_valid          (conv_core_s_out_7_1_valid      ), //i
    .io_indata_7_1_ready          (mux_io_indata_7_1_ready        ), //o
    .io_indata_7_1_payload        (conv_core_s_out_7_1_payload    ), //i
    .io_indata_7_2_valid          (conv_core_s_out_7_2_valid      ), //i
    .io_indata_7_2_ready          (mux_io_indata_7_2_ready        ), //o
    .io_indata_7_2_payload        (conv_core_s_out_7_2_payload    ), //i
    .io_indata_7_3_valid          (conv_core_s_out_7_3_valid      ), //i
    .io_indata_7_3_ready          (mux_io_indata_7_3_ready        ), //o
    .io_indata_7_3_payload        (conv_core_s_out_7_3_payload    ), //i
    .io_indata_7_4_valid          (conv_core_s_out_7_4_valid      ), //i
    .io_indata_7_4_ready          (mux_io_indata_7_4_ready        ), //o
    .io_indata_7_4_payload        (conv_core_s_out_7_4_payload    ), //i
    .io_indata_7_5_valid          (conv_core_s_out_7_5_valid      ), //i
    .io_indata_7_5_ready          (mux_io_indata_7_5_ready        ), //o
    .io_indata_7_5_payload        (conv_core_s_out_7_5_payload    ), //i
    .io_indata_7_6_valid          (conv_core_s_out_7_6_valid      ), //i
    .io_indata_7_6_ready          (mux_io_indata_7_6_ready        ), //o
    .io_indata_7_6_payload        (conv_core_s_out_7_6_payload    ), //i
    .io_indata_7_7_valid          (conv_core_s_out_7_7_valid      ), //i
    .io_indata_7_7_ready          (mux_io_indata_7_7_ready        ), //o
    .io_indata_7_7_payload        (conv_core_s_out_7_7_payload    ), //i
    .io_o_delta_wt_0_0_valid      (mux_io_o_delta_wt_0_0_valid    ), //o
    .io_o_delta_wt_0_0_ready      (o_delta_wt_0_0_ready           ), //i
    .io_o_delta_wt_0_0_payload    (mux_io_o_delta_wt_0_0_payload  ), //o
    .io_o_delta_wt_0_1_valid      (mux_io_o_delta_wt_0_1_valid    ), //o
    .io_o_delta_wt_0_1_ready      (o_delta_wt_0_1_ready           ), //i
    .io_o_delta_wt_0_1_payload    (mux_io_o_delta_wt_0_1_payload  ), //o
    .io_o_delta_wt_0_2_valid      (mux_io_o_delta_wt_0_2_valid    ), //o
    .io_o_delta_wt_0_2_ready      (o_delta_wt_0_2_ready           ), //i
    .io_o_delta_wt_0_2_payload    (mux_io_o_delta_wt_0_2_payload  ), //o
    .io_o_delta_wt_0_3_valid      (mux_io_o_delta_wt_0_3_valid    ), //o
    .io_o_delta_wt_0_3_ready      (o_delta_wt_0_3_ready           ), //i
    .io_o_delta_wt_0_3_payload    (mux_io_o_delta_wt_0_3_payload  ), //o
    .io_o_delta_wt_0_4_valid      (mux_io_o_delta_wt_0_4_valid    ), //o
    .io_o_delta_wt_0_4_ready      (o_delta_wt_0_4_ready           ), //i
    .io_o_delta_wt_0_4_payload    (mux_io_o_delta_wt_0_4_payload  ), //o
    .io_o_delta_wt_0_5_valid      (mux_io_o_delta_wt_0_5_valid    ), //o
    .io_o_delta_wt_0_5_ready      (o_delta_wt_0_5_ready           ), //i
    .io_o_delta_wt_0_5_payload    (mux_io_o_delta_wt_0_5_payload  ), //o
    .io_o_delta_wt_0_6_valid      (mux_io_o_delta_wt_0_6_valid    ), //o
    .io_o_delta_wt_0_6_ready      (o_delta_wt_0_6_ready           ), //i
    .io_o_delta_wt_0_6_payload    (mux_io_o_delta_wt_0_6_payload  ), //o
    .io_o_delta_wt_0_7_valid      (mux_io_o_delta_wt_0_7_valid    ), //o
    .io_o_delta_wt_0_7_ready      (o_delta_wt_0_7_ready           ), //i
    .io_o_delta_wt_0_7_payload    (mux_io_o_delta_wt_0_7_payload  ), //o
    .io_o_delta_wt_1_0_valid      (mux_io_o_delta_wt_1_0_valid    ), //o
    .io_o_delta_wt_1_0_ready      (o_delta_wt_1_0_ready           ), //i
    .io_o_delta_wt_1_0_payload    (mux_io_o_delta_wt_1_0_payload  ), //o
    .io_o_delta_wt_1_1_valid      (mux_io_o_delta_wt_1_1_valid    ), //o
    .io_o_delta_wt_1_1_ready      (o_delta_wt_1_1_ready           ), //i
    .io_o_delta_wt_1_1_payload    (mux_io_o_delta_wt_1_1_payload  ), //o
    .io_o_delta_wt_1_2_valid      (mux_io_o_delta_wt_1_2_valid    ), //o
    .io_o_delta_wt_1_2_ready      (o_delta_wt_1_2_ready           ), //i
    .io_o_delta_wt_1_2_payload    (mux_io_o_delta_wt_1_2_payload  ), //o
    .io_o_delta_wt_1_3_valid      (mux_io_o_delta_wt_1_3_valid    ), //o
    .io_o_delta_wt_1_3_ready      (o_delta_wt_1_3_ready           ), //i
    .io_o_delta_wt_1_3_payload    (mux_io_o_delta_wt_1_3_payload  ), //o
    .io_o_delta_wt_1_4_valid      (mux_io_o_delta_wt_1_4_valid    ), //o
    .io_o_delta_wt_1_4_ready      (o_delta_wt_1_4_ready           ), //i
    .io_o_delta_wt_1_4_payload    (mux_io_o_delta_wt_1_4_payload  ), //o
    .io_o_delta_wt_1_5_valid      (mux_io_o_delta_wt_1_5_valid    ), //o
    .io_o_delta_wt_1_5_ready      (o_delta_wt_1_5_ready           ), //i
    .io_o_delta_wt_1_5_payload    (mux_io_o_delta_wt_1_5_payload  ), //o
    .io_o_delta_wt_1_6_valid      (mux_io_o_delta_wt_1_6_valid    ), //o
    .io_o_delta_wt_1_6_ready      (o_delta_wt_1_6_ready           ), //i
    .io_o_delta_wt_1_6_payload    (mux_io_o_delta_wt_1_6_payload  ), //o
    .io_o_delta_wt_1_7_valid      (mux_io_o_delta_wt_1_7_valid    ), //o
    .io_o_delta_wt_1_7_ready      (o_delta_wt_1_7_ready           ), //i
    .io_o_delta_wt_1_7_payload    (mux_io_o_delta_wt_1_7_payload  ), //o
    .io_o_delta_wt_2_0_valid      (mux_io_o_delta_wt_2_0_valid    ), //o
    .io_o_delta_wt_2_0_ready      (o_delta_wt_2_0_ready           ), //i
    .io_o_delta_wt_2_0_payload    (mux_io_o_delta_wt_2_0_payload  ), //o
    .io_o_delta_wt_2_1_valid      (mux_io_o_delta_wt_2_1_valid    ), //o
    .io_o_delta_wt_2_1_ready      (o_delta_wt_2_1_ready           ), //i
    .io_o_delta_wt_2_1_payload    (mux_io_o_delta_wt_2_1_payload  ), //o
    .io_o_delta_wt_2_2_valid      (mux_io_o_delta_wt_2_2_valid    ), //o
    .io_o_delta_wt_2_2_ready      (o_delta_wt_2_2_ready           ), //i
    .io_o_delta_wt_2_2_payload    (mux_io_o_delta_wt_2_2_payload  ), //o
    .io_o_delta_wt_2_3_valid      (mux_io_o_delta_wt_2_3_valid    ), //o
    .io_o_delta_wt_2_3_ready      (o_delta_wt_2_3_ready           ), //i
    .io_o_delta_wt_2_3_payload    (mux_io_o_delta_wt_2_3_payload  ), //o
    .io_o_delta_wt_2_4_valid      (mux_io_o_delta_wt_2_4_valid    ), //o
    .io_o_delta_wt_2_4_ready      (o_delta_wt_2_4_ready           ), //i
    .io_o_delta_wt_2_4_payload    (mux_io_o_delta_wt_2_4_payload  ), //o
    .io_o_delta_wt_2_5_valid      (mux_io_o_delta_wt_2_5_valid    ), //o
    .io_o_delta_wt_2_5_ready      (o_delta_wt_2_5_ready           ), //i
    .io_o_delta_wt_2_5_payload    (mux_io_o_delta_wt_2_5_payload  ), //o
    .io_o_delta_wt_2_6_valid      (mux_io_o_delta_wt_2_6_valid    ), //o
    .io_o_delta_wt_2_6_ready      (o_delta_wt_2_6_ready           ), //i
    .io_o_delta_wt_2_6_payload    (mux_io_o_delta_wt_2_6_payload  ), //o
    .io_o_delta_wt_2_7_valid      (mux_io_o_delta_wt_2_7_valid    ), //o
    .io_o_delta_wt_2_7_ready      (o_delta_wt_2_7_ready           ), //i
    .io_o_delta_wt_2_7_payload    (mux_io_o_delta_wt_2_7_payload  ), //o
    .io_o_delta_wt_3_0_valid      (mux_io_o_delta_wt_3_0_valid    ), //o
    .io_o_delta_wt_3_0_ready      (o_delta_wt_3_0_ready           ), //i
    .io_o_delta_wt_3_0_payload    (mux_io_o_delta_wt_3_0_payload  ), //o
    .io_o_delta_wt_3_1_valid      (mux_io_o_delta_wt_3_1_valid    ), //o
    .io_o_delta_wt_3_1_ready      (o_delta_wt_3_1_ready           ), //i
    .io_o_delta_wt_3_1_payload    (mux_io_o_delta_wt_3_1_payload  ), //o
    .io_o_delta_wt_3_2_valid      (mux_io_o_delta_wt_3_2_valid    ), //o
    .io_o_delta_wt_3_2_ready      (o_delta_wt_3_2_ready           ), //i
    .io_o_delta_wt_3_2_payload    (mux_io_o_delta_wt_3_2_payload  ), //o
    .io_o_delta_wt_3_3_valid      (mux_io_o_delta_wt_3_3_valid    ), //o
    .io_o_delta_wt_3_3_ready      (o_delta_wt_3_3_ready           ), //i
    .io_o_delta_wt_3_3_payload    (mux_io_o_delta_wt_3_3_payload  ), //o
    .io_o_delta_wt_3_4_valid      (mux_io_o_delta_wt_3_4_valid    ), //o
    .io_o_delta_wt_3_4_ready      (o_delta_wt_3_4_ready           ), //i
    .io_o_delta_wt_3_4_payload    (mux_io_o_delta_wt_3_4_payload  ), //o
    .io_o_delta_wt_3_5_valid      (mux_io_o_delta_wt_3_5_valid    ), //o
    .io_o_delta_wt_3_5_ready      (o_delta_wt_3_5_ready           ), //i
    .io_o_delta_wt_3_5_payload    (mux_io_o_delta_wt_3_5_payload  ), //o
    .io_o_delta_wt_3_6_valid      (mux_io_o_delta_wt_3_6_valid    ), //o
    .io_o_delta_wt_3_6_ready      (o_delta_wt_3_6_ready           ), //i
    .io_o_delta_wt_3_6_payload    (mux_io_o_delta_wt_3_6_payload  ), //o
    .io_o_delta_wt_3_7_valid      (mux_io_o_delta_wt_3_7_valid    ), //o
    .io_o_delta_wt_3_7_ready      (o_delta_wt_3_7_ready           ), //i
    .io_o_delta_wt_3_7_payload    (mux_io_o_delta_wt_3_7_payload  ), //o
    .io_o_delta_wt_4_0_valid      (mux_io_o_delta_wt_4_0_valid    ), //o
    .io_o_delta_wt_4_0_ready      (o_delta_wt_4_0_ready           ), //i
    .io_o_delta_wt_4_0_payload    (mux_io_o_delta_wt_4_0_payload  ), //o
    .io_o_delta_wt_4_1_valid      (mux_io_o_delta_wt_4_1_valid    ), //o
    .io_o_delta_wt_4_1_ready      (o_delta_wt_4_1_ready           ), //i
    .io_o_delta_wt_4_1_payload    (mux_io_o_delta_wt_4_1_payload  ), //o
    .io_o_delta_wt_4_2_valid      (mux_io_o_delta_wt_4_2_valid    ), //o
    .io_o_delta_wt_4_2_ready      (o_delta_wt_4_2_ready           ), //i
    .io_o_delta_wt_4_2_payload    (mux_io_o_delta_wt_4_2_payload  ), //o
    .io_o_delta_wt_4_3_valid      (mux_io_o_delta_wt_4_3_valid    ), //o
    .io_o_delta_wt_4_3_ready      (o_delta_wt_4_3_ready           ), //i
    .io_o_delta_wt_4_3_payload    (mux_io_o_delta_wt_4_3_payload  ), //o
    .io_o_delta_wt_4_4_valid      (mux_io_o_delta_wt_4_4_valid    ), //o
    .io_o_delta_wt_4_4_ready      (o_delta_wt_4_4_ready           ), //i
    .io_o_delta_wt_4_4_payload    (mux_io_o_delta_wt_4_4_payload  ), //o
    .io_o_delta_wt_4_5_valid      (mux_io_o_delta_wt_4_5_valid    ), //o
    .io_o_delta_wt_4_5_ready      (o_delta_wt_4_5_ready           ), //i
    .io_o_delta_wt_4_5_payload    (mux_io_o_delta_wt_4_5_payload  ), //o
    .io_o_delta_wt_4_6_valid      (mux_io_o_delta_wt_4_6_valid    ), //o
    .io_o_delta_wt_4_6_ready      (o_delta_wt_4_6_ready           ), //i
    .io_o_delta_wt_4_6_payload    (mux_io_o_delta_wt_4_6_payload  ), //o
    .io_o_delta_wt_4_7_valid      (mux_io_o_delta_wt_4_7_valid    ), //o
    .io_o_delta_wt_4_7_ready      (o_delta_wt_4_7_ready           ), //i
    .io_o_delta_wt_4_7_payload    (mux_io_o_delta_wt_4_7_payload  ), //o
    .io_o_delta_wt_5_0_valid      (mux_io_o_delta_wt_5_0_valid    ), //o
    .io_o_delta_wt_5_0_ready      (o_delta_wt_5_0_ready           ), //i
    .io_o_delta_wt_5_0_payload    (mux_io_o_delta_wt_5_0_payload  ), //o
    .io_o_delta_wt_5_1_valid      (mux_io_o_delta_wt_5_1_valid    ), //o
    .io_o_delta_wt_5_1_ready      (o_delta_wt_5_1_ready           ), //i
    .io_o_delta_wt_5_1_payload    (mux_io_o_delta_wt_5_1_payload  ), //o
    .io_o_delta_wt_5_2_valid      (mux_io_o_delta_wt_5_2_valid    ), //o
    .io_o_delta_wt_5_2_ready      (o_delta_wt_5_2_ready           ), //i
    .io_o_delta_wt_5_2_payload    (mux_io_o_delta_wt_5_2_payload  ), //o
    .io_o_delta_wt_5_3_valid      (mux_io_o_delta_wt_5_3_valid    ), //o
    .io_o_delta_wt_5_3_ready      (o_delta_wt_5_3_ready           ), //i
    .io_o_delta_wt_5_3_payload    (mux_io_o_delta_wt_5_3_payload  ), //o
    .io_o_delta_wt_5_4_valid      (mux_io_o_delta_wt_5_4_valid    ), //o
    .io_o_delta_wt_5_4_ready      (o_delta_wt_5_4_ready           ), //i
    .io_o_delta_wt_5_4_payload    (mux_io_o_delta_wt_5_4_payload  ), //o
    .io_o_delta_wt_5_5_valid      (mux_io_o_delta_wt_5_5_valid    ), //o
    .io_o_delta_wt_5_5_ready      (o_delta_wt_5_5_ready           ), //i
    .io_o_delta_wt_5_5_payload    (mux_io_o_delta_wt_5_5_payload  ), //o
    .io_o_delta_wt_5_6_valid      (mux_io_o_delta_wt_5_6_valid    ), //o
    .io_o_delta_wt_5_6_ready      (o_delta_wt_5_6_ready           ), //i
    .io_o_delta_wt_5_6_payload    (mux_io_o_delta_wt_5_6_payload  ), //o
    .io_o_delta_wt_5_7_valid      (mux_io_o_delta_wt_5_7_valid    ), //o
    .io_o_delta_wt_5_7_ready      (o_delta_wt_5_7_ready           ), //i
    .io_o_delta_wt_5_7_payload    (mux_io_o_delta_wt_5_7_payload  ), //o
    .io_o_delta_wt_6_0_valid      (mux_io_o_delta_wt_6_0_valid    ), //o
    .io_o_delta_wt_6_0_ready      (o_delta_wt_6_0_ready           ), //i
    .io_o_delta_wt_6_0_payload    (mux_io_o_delta_wt_6_0_payload  ), //o
    .io_o_delta_wt_6_1_valid      (mux_io_o_delta_wt_6_1_valid    ), //o
    .io_o_delta_wt_6_1_ready      (o_delta_wt_6_1_ready           ), //i
    .io_o_delta_wt_6_1_payload    (mux_io_o_delta_wt_6_1_payload  ), //o
    .io_o_delta_wt_6_2_valid      (mux_io_o_delta_wt_6_2_valid    ), //o
    .io_o_delta_wt_6_2_ready      (o_delta_wt_6_2_ready           ), //i
    .io_o_delta_wt_6_2_payload    (mux_io_o_delta_wt_6_2_payload  ), //o
    .io_o_delta_wt_6_3_valid      (mux_io_o_delta_wt_6_3_valid    ), //o
    .io_o_delta_wt_6_3_ready      (o_delta_wt_6_3_ready           ), //i
    .io_o_delta_wt_6_3_payload    (mux_io_o_delta_wt_6_3_payload  ), //o
    .io_o_delta_wt_6_4_valid      (mux_io_o_delta_wt_6_4_valid    ), //o
    .io_o_delta_wt_6_4_ready      (o_delta_wt_6_4_ready           ), //i
    .io_o_delta_wt_6_4_payload    (mux_io_o_delta_wt_6_4_payload  ), //o
    .io_o_delta_wt_6_5_valid      (mux_io_o_delta_wt_6_5_valid    ), //o
    .io_o_delta_wt_6_5_ready      (o_delta_wt_6_5_ready           ), //i
    .io_o_delta_wt_6_5_payload    (mux_io_o_delta_wt_6_5_payload  ), //o
    .io_o_delta_wt_6_6_valid      (mux_io_o_delta_wt_6_6_valid    ), //o
    .io_o_delta_wt_6_6_ready      (o_delta_wt_6_6_ready           ), //i
    .io_o_delta_wt_6_6_payload    (mux_io_o_delta_wt_6_6_payload  ), //o
    .io_o_delta_wt_6_7_valid      (mux_io_o_delta_wt_6_7_valid    ), //o
    .io_o_delta_wt_6_7_ready      (o_delta_wt_6_7_ready           ), //i
    .io_o_delta_wt_6_7_payload    (mux_io_o_delta_wt_6_7_payload  ), //o
    .io_o_delta_wt_7_0_valid      (mux_io_o_delta_wt_7_0_valid    ), //o
    .io_o_delta_wt_7_0_ready      (o_delta_wt_7_0_ready           ), //i
    .io_o_delta_wt_7_0_payload    (mux_io_o_delta_wt_7_0_payload  ), //o
    .io_o_delta_wt_7_1_valid      (mux_io_o_delta_wt_7_1_valid    ), //o
    .io_o_delta_wt_7_1_ready      (o_delta_wt_7_1_ready           ), //i
    .io_o_delta_wt_7_1_payload    (mux_io_o_delta_wt_7_1_payload  ), //o
    .io_o_delta_wt_7_2_valid      (mux_io_o_delta_wt_7_2_valid    ), //o
    .io_o_delta_wt_7_2_ready      (o_delta_wt_7_2_ready           ), //i
    .io_o_delta_wt_7_2_payload    (mux_io_o_delta_wt_7_2_payload  ), //o
    .io_o_delta_wt_7_3_valid      (mux_io_o_delta_wt_7_3_valid    ), //o
    .io_o_delta_wt_7_3_ready      (o_delta_wt_7_3_ready           ), //i
    .io_o_delta_wt_7_3_payload    (mux_io_o_delta_wt_7_3_payload  ), //o
    .io_o_delta_wt_7_4_valid      (mux_io_o_delta_wt_7_4_valid    ), //o
    .io_o_delta_wt_7_4_ready      (o_delta_wt_7_4_ready           ), //i
    .io_o_delta_wt_7_4_payload    (mux_io_o_delta_wt_7_4_payload  ), //o
    .io_o_delta_wt_7_5_valid      (mux_io_o_delta_wt_7_5_valid    ), //o
    .io_o_delta_wt_7_5_ready      (o_delta_wt_7_5_ready           ), //i
    .io_o_delta_wt_7_5_payload    (mux_io_o_delta_wt_7_5_payload  ), //o
    .io_o_delta_wt_7_6_valid      (mux_io_o_delta_wt_7_6_valid    ), //o
    .io_o_delta_wt_7_6_ready      (o_delta_wt_7_6_ready           ), //i
    .io_o_delta_wt_7_6_payload    (mux_io_o_delta_wt_7_6_payload  ), //o
    .io_o_delta_wt_7_7_valid      (mux_io_o_delta_wt_7_7_valid    ), //o
    .io_o_delta_wt_7_7_ready      (o_delta_wt_7_7_ready           ), //i
    .io_o_delta_wt_7_7_payload    (mux_io_o_delta_wt_7_7_payload  ), //o
    .io_o_sigma_0_0_valid         (mux_io_o_sigma_0_0_valid       ), //o
    .io_o_sigma_0_0_ready         (o_sigma_0_0_ready              ), //i
    .io_o_sigma_0_0_payload       (mux_io_o_sigma_0_0_payload     ), //o
    .io_o_sigma_0_1_valid         (mux_io_o_sigma_0_1_valid       ), //o
    .io_o_sigma_0_1_ready         (o_sigma_0_1_ready              ), //i
    .io_o_sigma_0_1_payload       (mux_io_o_sigma_0_1_payload     ), //o
    .io_o_sigma_0_2_valid         (mux_io_o_sigma_0_2_valid       ), //o
    .io_o_sigma_0_2_ready         (o_sigma_0_2_ready              ), //i
    .io_o_sigma_0_2_payload       (mux_io_o_sigma_0_2_payload     ), //o
    .io_o_sigma_0_3_valid         (mux_io_o_sigma_0_3_valid       ), //o
    .io_o_sigma_0_3_ready         (o_sigma_0_3_ready              ), //i
    .io_o_sigma_0_3_payload       (mux_io_o_sigma_0_3_payload     ), //o
    .io_o_sigma_0_4_valid         (mux_io_o_sigma_0_4_valid       ), //o
    .io_o_sigma_0_4_ready         (o_sigma_0_4_ready              ), //i
    .io_o_sigma_0_4_payload       (mux_io_o_sigma_0_4_payload     ), //o
    .io_o_sigma_0_5_valid         (mux_io_o_sigma_0_5_valid       ), //o
    .io_o_sigma_0_5_ready         (o_sigma_0_5_ready              ), //i
    .io_o_sigma_0_5_payload       (mux_io_o_sigma_0_5_payload     ), //o
    .io_o_sigma_0_6_valid         (mux_io_o_sigma_0_6_valid       ), //o
    .io_o_sigma_0_6_ready         (o_sigma_0_6_ready              ), //i
    .io_o_sigma_0_6_payload       (mux_io_o_sigma_0_6_payload     ), //o
    .io_o_sigma_0_7_valid         (mux_io_o_sigma_0_7_valid       ), //o
    .io_o_sigma_0_7_ready         (o_sigma_0_7_ready              ), //i
    .io_o_sigma_0_7_payload       (mux_io_o_sigma_0_7_payload     ), //o
    .io_o_sigma_1_0_valid         (mux_io_o_sigma_1_0_valid       ), //o
    .io_o_sigma_1_0_ready         (o_sigma_1_0_ready              ), //i
    .io_o_sigma_1_0_payload       (mux_io_o_sigma_1_0_payload     ), //o
    .io_o_sigma_1_1_valid         (mux_io_o_sigma_1_1_valid       ), //o
    .io_o_sigma_1_1_ready         (o_sigma_1_1_ready              ), //i
    .io_o_sigma_1_1_payload       (mux_io_o_sigma_1_1_payload     ), //o
    .io_o_sigma_1_2_valid         (mux_io_o_sigma_1_2_valid       ), //o
    .io_o_sigma_1_2_ready         (o_sigma_1_2_ready              ), //i
    .io_o_sigma_1_2_payload       (mux_io_o_sigma_1_2_payload     ), //o
    .io_o_sigma_1_3_valid         (mux_io_o_sigma_1_3_valid       ), //o
    .io_o_sigma_1_3_ready         (o_sigma_1_3_ready              ), //i
    .io_o_sigma_1_3_payload       (mux_io_o_sigma_1_3_payload     ), //o
    .io_o_sigma_1_4_valid         (mux_io_o_sigma_1_4_valid       ), //o
    .io_o_sigma_1_4_ready         (o_sigma_1_4_ready              ), //i
    .io_o_sigma_1_4_payload       (mux_io_o_sigma_1_4_payload     ), //o
    .io_o_sigma_1_5_valid         (mux_io_o_sigma_1_5_valid       ), //o
    .io_o_sigma_1_5_ready         (o_sigma_1_5_ready              ), //i
    .io_o_sigma_1_5_payload       (mux_io_o_sigma_1_5_payload     ), //o
    .io_o_sigma_1_6_valid         (mux_io_o_sigma_1_6_valid       ), //o
    .io_o_sigma_1_6_ready         (o_sigma_1_6_ready              ), //i
    .io_o_sigma_1_6_payload       (mux_io_o_sigma_1_6_payload     ), //o
    .io_o_sigma_1_7_valid         (mux_io_o_sigma_1_7_valid       ), //o
    .io_o_sigma_1_7_ready         (o_sigma_1_7_ready              ), //i
    .io_o_sigma_1_7_payload       (mux_io_o_sigma_1_7_payload     ), //o
    .io_o_sigma_2_0_valid         (mux_io_o_sigma_2_0_valid       ), //o
    .io_o_sigma_2_0_ready         (o_sigma_2_0_ready              ), //i
    .io_o_sigma_2_0_payload       (mux_io_o_sigma_2_0_payload     ), //o
    .io_o_sigma_2_1_valid         (mux_io_o_sigma_2_1_valid       ), //o
    .io_o_sigma_2_1_ready         (o_sigma_2_1_ready              ), //i
    .io_o_sigma_2_1_payload       (mux_io_o_sigma_2_1_payload     ), //o
    .io_o_sigma_2_2_valid         (mux_io_o_sigma_2_2_valid       ), //o
    .io_o_sigma_2_2_ready         (o_sigma_2_2_ready              ), //i
    .io_o_sigma_2_2_payload       (mux_io_o_sigma_2_2_payload     ), //o
    .io_o_sigma_2_3_valid         (mux_io_o_sigma_2_3_valid       ), //o
    .io_o_sigma_2_3_ready         (o_sigma_2_3_ready              ), //i
    .io_o_sigma_2_3_payload       (mux_io_o_sigma_2_3_payload     ), //o
    .io_o_sigma_2_4_valid         (mux_io_o_sigma_2_4_valid       ), //o
    .io_o_sigma_2_4_ready         (o_sigma_2_4_ready              ), //i
    .io_o_sigma_2_4_payload       (mux_io_o_sigma_2_4_payload     ), //o
    .io_o_sigma_2_5_valid         (mux_io_o_sigma_2_5_valid       ), //o
    .io_o_sigma_2_5_ready         (o_sigma_2_5_ready              ), //i
    .io_o_sigma_2_5_payload       (mux_io_o_sigma_2_5_payload     ), //o
    .io_o_sigma_2_6_valid         (mux_io_o_sigma_2_6_valid       ), //o
    .io_o_sigma_2_6_ready         (o_sigma_2_6_ready              ), //i
    .io_o_sigma_2_6_payload       (mux_io_o_sigma_2_6_payload     ), //o
    .io_o_sigma_2_7_valid         (mux_io_o_sigma_2_7_valid       ), //o
    .io_o_sigma_2_7_ready         (o_sigma_2_7_ready              ), //i
    .io_o_sigma_2_7_payload       (mux_io_o_sigma_2_7_payload     ), //o
    .io_o_sigma_3_0_valid         (mux_io_o_sigma_3_0_valid       ), //o
    .io_o_sigma_3_0_ready         (o_sigma_3_0_ready              ), //i
    .io_o_sigma_3_0_payload       (mux_io_o_sigma_3_0_payload     ), //o
    .io_o_sigma_3_1_valid         (mux_io_o_sigma_3_1_valid       ), //o
    .io_o_sigma_3_1_ready         (o_sigma_3_1_ready              ), //i
    .io_o_sigma_3_1_payload       (mux_io_o_sigma_3_1_payload     ), //o
    .io_o_sigma_3_2_valid         (mux_io_o_sigma_3_2_valid       ), //o
    .io_o_sigma_3_2_ready         (o_sigma_3_2_ready              ), //i
    .io_o_sigma_3_2_payload       (mux_io_o_sigma_3_2_payload     ), //o
    .io_o_sigma_3_3_valid         (mux_io_o_sigma_3_3_valid       ), //o
    .io_o_sigma_3_3_ready         (o_sigma_3_3_ready              ), //i
    .io_o_sigma_3_3_payload       (mux_io_o_sigma_3_3_payload     ), //o
    .io_o_sigma_3_4_valid         (mux_io_o_sigma_3_4_valid       ), //o
    .io_o_sigma_3_4_ready         (o_sigma_3_4_ready              ), //i
    .io_o_sigma_3_4_payload       (mux_io_o_sigma_3_4_payload     ), //o
    .io_o_sigma_3_5_valid         (mux_io_o_sigma_3_5_valid       ), //o
    .io_o_sigma_3_5_ready         (o_sigma_3_5_ready              ), //i
    .io_o_sigma_3_5_payload       (mux_io_o_sigma_3_5_payload     ), //o
    .io_o_sigma_3_6_valid         (mux_io_o_sigma_3_6_valid       ), //o
    .io_o_sigma_3_6_ready         (o_sigma_3_6_ready              ), //i
    .io_o_sigma_3_6_payload       (mux_io_o_sigma_3_6_payload     ), //o
    .io_o_sigma_3_7_valid         (mux_io_o_sigma_3_7_valid       ), //o
    .io_o_sigma_3_7_ready         (o_sigma_3_7_ready              ), //i
    .io_o_sigma_3_7_payload       (mux_io_o_sigma_3_7_payload     ), //o
    .io_o_sigma_4_0_valid         (mux_io_o_sigma_4_0_valid       ), //o
    .io_o_sigma_4_0_ready         (o_sigma_4_0_ready              ), //i
    .io_o_sigma_4_0_payload       (mux_io_o_sigma_4_0_payload     ), //o
    .io_o_sigma_4_1_valid         (mux_io_o_sigma_4_1_valid       ), //o
    .io_o_sigma_4_1_ready         (o_sigma_4_1_ready              ), //i
    .io_o_sigma_4_1_payload       (mux_io_o_sigma_4_1_payload     ), //o
    .io_o_sigma_4_2_valid         (mux_io_o_sigma_4_2_valid       ), //o
    .io_o_sigma_4_2_ready         (o_sigma_4_2_ready              ), //i
    .io_o_sigma_4_2_payload       (mux_io_o_sigma_4_2_payload     ), //o
    .io_o_sigma_4_3_valid         (mux_io_o_sigma_4_3_valid       ), //o
    .io_o_sigma_4_3_ready         (o_sigma_4_3_ready              ), //i
    .io_o_sigma_4_3_payload       (mux_io_o_sigma_4_3_payload     ), //o
    .io_o_sigma_4_4_valid         (mux_io_o_sigma_4_4_valid       ), //o
    .io_o_sigma_4_4_ready         (o_sigma_4_4_ready              ), //i
    .io_o_sigma_4_4_payload       (mux_io_o_sigma_4_4_payload     ), //o
    .io_o_sigma_4_5_valid         (mux_io_o_sigma_4_5_valid       ), //o
    .io_o_sigma_4_5_ready         (o_sigma_4_5_ready              ), //i
    .io_o_sigma_4_5_payload       (mux_io_o_sigma_4_5_payload     ), //o
    .io_o_sigma_4_6_valid         (mux_io_o_sigma_4_6_valid       ), //o
    .io_o_sigma_4_6_ready         (o_sigma_4_6_ready              ), //i
    .io_o_sigma_4_6_payload       (mux_io_o_sigma_4_6_payload     ), //o
    .io_o_sigma_4_7_valid         (mux_io_o_sigma_4_7_valid       ), //o
    .io_o_sigma_4_7_ready         (o_sigma_4_7_ready              ), //i
    .io_o_sigma_4_7_payload       (mux_io_o_sigma_4_7_payload     ), //o
    .io_o_sigma_5_0_valid         (mux_io_o_sigma_5_0_valid       ), //o
    .io_o_sigma_5_0_ready         (o_sigma_5_0_ready              ), //i
    .io_o_sigma_5_0_payload       (mux_io_o_sigma_5_0_payload     ), //o
    .io_o_sigma_5_1_valid         (mux_io_o_sigma_5_1_valid       ), //o
    .io_o_sigma_5_1_ready         (o_sigma_5_1_ready              ), //i
    .io_o_sigma_5_1_payload       (mux_io_o_sigma_5_1_payload     ), //o
    .io_o_sigma_5_2_valid         (mux_io_o_sigma_5_2_valid       ), //o
    .io_o_sigma_5_2_ready         (o_sigma_5_2_ready              ), //i
    .io_o_sigma_5_2_payload       (mux_io_o_sigma_5_2_payload     ), //o
    .io_o_sigma_5_3_valid         (mux_io_o_sigma_5_3_valid       ), //o
    .io_o_sigma_5_3_ready         (o_sigma_5_3_ready              ), //i
    .io_o_sigma_5_3_payload       (mux_io_o_sigma_5_3_payload     ), //o
    .io_o_sigma_5_4_valid         (mux_io_o_sigma_5_4_valid       ), //o
    .io_o_sigma_5_4_ready         (o_sigma_5_4_ready              ), //i
    .io_o_sigma_5_4_payload       (mux_io_o_sigma_5_4_payload     ), //o
    .io_o_sigma_5_5_valid         (mux_io_o_sigma_5_5_valid       ), //o
    .io_o_sigma_5_5_ready         (o_sigma_5_5_ready              ), //i
    .io_o_sigma_5_5_payload       (mux_io_o_sigma_5_5_payload     ), //o
    .io_o_sigma_5_6_valid         (mux_io_o_sigma_5_6_valid       ), //o
    .io_o_sigma_5_6_ready         (o_sigma_5_6_ready              ), //i
    .io_o_sigma_5_6_payload       (mux_io_o_sigma_5_6_payload     ), //o
    .io_o_sigma_5_7_valid         (mux_io_o_sigma_5_7_valid       ), //o
    .io_o_sigma_5_7_ready         (o_sigma_5_7_ready              ), //i
    .io_o_sigma_5_7_payload       (mux_io_o_sigma_5_7_payload     ), //o
    .io_o_sigma_6_0_valid         (mux_io_o_sigma_6_0_valid       ), //o
    .io_o_sigma_6_0_ready         (o_sigma_6_0_ready              ), //i
    .io_o_sigma_6_0_payload       (mux_io_o_sigma_6_0_payload     ), //o
    .io_o_sigma_6_1_valid         (mux_io_o_sigma_6_1_valid       ), //o
    .io_o_sigma_6_1_ready         (o_sigma_6_1_ready              ), //i
    .io_o_sigma_6_1_payload       (mux_io_o_sigma_6_1_payload     ), //o
    .io_o_sigma_6_2_valid         (mux_io_o_sigma_6_2_valid       ), //o
    .io_o_sigma_6_2_ready         (o_sigma_6_2_ready              ), //i
    .io_o_sigma_6_2_payload       (mux_io_o_sigma_6_2_payload     ), //o
    .io_o_sigma_6_3_valid         (mux_io_o_sigma_6_3_valid       ), //o
    .io_o_sigma_6_3_ready         (o_sigma_6_3_ready              ), //i
    .io_o_sigma_6_3_payload       (mux_io_o_sigma_6_3_payload     ), //o
    .io_o_sigma_6_4_valid         (mux_io_o_sigma_6_4_valid       ), //o
    .io_o_sigma_6_4_ready         (o_sigma_6_4_ready              ), //i
    .io_o_sigma_6_4_payload       (mux_io_o_sigma_6_4_payload     ), //o
    .io_o_sigma_6_5_valid         (mux_io_o_sigma_6_5_valid       ), //o
    .io_o_sigma_6_5_ready         (o_sigma_6_5_ready              ), //i
    .io_o_sigma_6_5_payload       (mux_io_o_sigma_6_5_payload     ), //o
    .io_o_sigma_6_6_valid         (mux_io_o_sigma_6_6_valid       ), //o
    .io_o_sigma_6_6_ready         (o_sigma_6_6_ready              ), //i
    .io_o_sigma_6_6_payload       (mux_io_o_sigma_6_6_payload     ), //o
    .io_o_sigma_6_7_valid         (mux_io_o_sigma_6_7_valid       ), //o
    .io_o_sigma_6_7_ready         (o_sigma_6_7_ready              ), //i
    .io_o_sigma_6_7_payload       (mux_io_o_sigma_6_7_payload     ), //o
    .io_o_sigma_7_0_valid         (mux_io_o_sigma_7_0_valid       ), //o
    .io_o_sigma_7_0_ready         (o_sigma_7_0_ready              ), //i
    .io_o_sigma_7_0_payload       (mux_io_o_sigma_7_0_payload     ), //o
    .io_o_sigma_7_1_valid         (mux_io_o_sigma_7_1_valid       ), //o
    .io_o_sigma_7_1_ready         (o_sigma_7_1_ready              ), //i
    .io_o_sigma_7_1_payload       (mux_io_o_sigma_7_1_payload     ), //o
    .io_o_sigma_7_2_valid         (mux_io_o_sigma_7_2_valid       ), //o
    .io_o_sigma_7_2_ready         (o_sigma_7_2_ready              ), //i
    .io_o_sigma_7_2_payload       (mux_io_o_sigma_7_2_payload     ), //o
    .io_o_sigma_7_3_valid         (mux_io_o_sigma_7_3_valid       ), //o
    .io_o_sigma_7_3_ready         (o_sigma_7_3_ready              ), //i
    .io_o_sigma_7_3_payload       (mux_io_o_sigma_7_3_payload     ), //o
    .io_o_sigma_7_4_valid         (mux_io_o_sigma_7_4_valid       ), //o
    .io_o_sigma_7_4_ready         (o_sigma_7_4_ready              ), //i
    .io_o_sigma_7_4_payload       (mux_io_o_sigma_7_4_payload     ), //o
    .io_o_sigma_7_5_valid         (mux_io_o_sigma_7_5_valid       ), //o
    .io_o_sigma_7_5_ready         (o_sigma_7_5_ready              ), //i
    .io_o_sigma_7_5_payload       (mux_io_o_sigma_7_5_payload     ), //o
    .io_o_sigma_7_6_valid         (mux_io_o_sigma_7_6_valid       ), //o
    .io_o_sigma_7_6_ready         (o_sigma_7_6_ready              ), //i
    .io_o_sigma_7_6_payload       (mux_io_o_sigma_7_6_payload     ), //o
    .io_o_sigma_7_7_valid         (mux_io_o_sigma_7_7_valid       ), //o
    .io_o_sigma_7_7_ready         (o_sigma_7_7_ready              ), //i
    .io_o_sigma_7_7_payload       (mux_io_o_sigma_7_7_payload     ), //o
    .clk                          (clk                            ), //i
    .reset                        (reset                          )  //i
  );
  assign cfg_ready = read_req_cfg_ready;
  assign dt_ramrd_addr = read_req_dt_ramrd_addr;
  assign dt_ramrd_en = read_req_dt_ramrd_en;
  assign wt_ramrd_0_addr = read_req_wt_ramrd_0_addr;
  assign wt_ramrd_0_en = read_req_wt_ramrd_0_en;
  assign wt_ramrd_1_addr = read_req_wt_ramrd_1_addr;
  assign wt_ramrd_1_en = read_req_wt_ramrd_1_en;
  assign wt_ramrd_2_addr = read_req_wt_ramrd_2_addr;
  assign wt_ramrd_2_en = read_req_wt_ramrd_2_en;
  assign wt_ramrd_3_addr = read_req_wt_ramrd_3_addr;
  assign wt_ramrd_3_en = read_req_wt_ramrd_3_en;
  assign wt_ramrd_4_addr = read_req_wt_ramrd_4_addr;
  assign wt_ramrd_4_en = read_req_wt_ramrd_4_en;
  assign wt_ramrd_5_addr = read_req_wt_ramrd_5_addr;
  assign wt_ramrd_5_en = read_req_wt_ramrd_5_en;
  assign wt_ramrd_6_addr = read_req_wt_ramrd_6_addr;
  assign wt_ramrd_6_en = read_req_wt_ramrd_6_en;
  assign wt_ramrd_7_addr = read_req_wt_ramrd_7_addr;
  assign wt_ramrd_7_en = read_req_wt_ramrd_7_en;
  assign conv_core_par_acc_cnt = _zz_par_acc_cnt[15:0];
  assign o_delta_wt_0_0_valid = mux_io_o_delta_wt_0_0_valid;
  assign o_delta_wt_0_0_payload = mux_io_o_delta_wt_0_0_payload;
  assign o_delta_wt_0_1_valid = mux_io_o_delta_wt_0_1_valid;
  assign o_delta_wt_0_1_payload = mux_io_o_delta_wt_0_1_payload;
  assign o_delta_wt_0_2_valid = mux_io_o_delta_wt_0_2_valid;
  assign o_delta_wt_0_2_payload = mux_io_o_delta_wt_0_2_payload;
  assign o_delta_wt_0_3_valid = mux_io_o_delta_wt_0_3_valid;
  assign o_delta_wt_0_3_payload = mux_io_o_delta_wt_0_3_payload;
  assign o_delta_wt_0_4_valid = mux_io_o_delta_wt_0_4_valid;
  assign o_delta_wt_0_4_payload = mux_io_o_delta_wt_0_4_payload;
  assign o_delta_wt_0_5_valid = mux_io_o_delta_wt_0_5_valid;
  assign o_delta_wt_0_5_payload = mux_io_o_delta_wt_0_5_payload;
  assign o_delta_wt_0_6_valid = mux_io_o_delta_wt_0_6_valid;
  assign o_delta_wt_0_6_payload = mux_io_o_delta_wt_0_6_payload;
  assign o_delta_wt_0_7_valid = mux_io_o_delta_wt_0_7_valid;
  assign o_delta_wt_0_7_payload = mux_io_o_delta_wt_0_7_payload;
  assign o_delta_wt_1_0_valid = mux_io_o_delta_wt_1_0_valid;
  assign o_delta_wt_1_0_payload = mux_io_o_delta_wt_1_0_payload;
  assign o_delta_wt_1_1_valid = mux_io_o_delta_wt_1_1_valid;
  assign o_delta_wt_1_1_payload = mux_io_o_delta_wt_1_1_payload;
  assign o_delta_wt_1_2_valid = mux_io_o_delta_wt_1_2_valid;
  assign o_delta_wt_1_2_payload = mux_io_o_delta_wt_1_2_payload;
  assign o_delta_wt_1_3_valid = mux_io_o_delta_wt_1_3_valid;
  assign o_delta_wt_1_3_payload = mux_io_o_delta_wt_1_3_payload;
  assign o_delta_wt_1_4_valid = mux_io_o_delta_wt_1_4_valid;
  assign o_delta_wt_1_4_payload = mux_io_o_delta_wt_1_4_payload;
  assign o_delta_wt_1_5_valid = mux_io_o_delta_wt_1_5_valid;
  assign o_delta_wt_1_5_payload = mux_io_o_delta_wt_1_5_payload;
  assign o_delta_wt_1_6_valid = mux_io_o_delta_wt_1_6_valid;
  assign o_delta_wt_1_6_payload = mux_io_o_delta_wt_1_6_payload;
  assign o_delta_wt_1_7_valid = mux_io_o_delta_wt_1_7_valid;
  assign o_delta_wt_1_7_payload = mux_io_o_delta_wt_1_7_payload;
  assign o_delta_wt_2_0_valid = mux_io_o_delta_wt_2_0_valid;
  assign o_delta_wt_2_0_payload = mux_io_o_delta_wt_2_0_payload;
  assign o_delta_wt_2_1_valid = mux_io_o_delta_wt_2_1_valid;
  assign o_delta_wt_2_1_payload = mux_io_o_delta_wt_2_1_payload;
  assign o_delta_wt_2_2_valid = mux_io_o_delta_wt_2_2_valid;
  assign o_delta_wt_2_2_payload = mux_io_o_delta_wt_2_2_payload;
  assign o_delta_wt_2_3_valid = mux_io_o_delta_wt_2_3_valid;
  assign o_delta_wt_2_3_payload = mux_io_o_delta_wt_2_3_payload;
  assign o_delta_wt_2_4_valid = mux_io_o_delta_wt_2_4_valid;
  assign o_delta_wt_2_4_payload = mux_io_o_delta_wt_2_4_payload;
  assign o_delta_wt_2_5_valid = mux_io_o_delta_wt_2_5_valid;
  assign o_delta_wt_2_5_payload = mux_io_o_delta_wt_2_5_payload;
  assign o_delta_wt_2_6_valid = mux_io_o_delta_wt_2_6_valid;
  assign o_delta_wt_2_6_payload = mux_io_o_delta_wt_2_6_payload;
  assign o_delta_wt_2_7_valid = mux_io_o_delta_wt_2_7_valid;
  assign o_delta_wt_2_7_payload = mux_io_o_delta_wt_2_7_payload;
  assign o_delta_wt_3_0_valid = mux_io_o_delta_wt_3_0_valid;
  assign o_delta_wt_3_0_payload = mux_io_o_delta_wt_3_0_payload;
  assign o_delta_wt_3_1_valid = mux_io_o_delta_wt_3_1_valid;
  assign o_delta_wt_3_1_payload = mux_io_o_delta_wt_3_1_payload;
  assign o_delta_wt_3_2_valid = mux_io_o_delta_wt_3_2_valid;
  assign o_delta_wt_3_2_payload = mux_io_o_delta_wt_3_2_payload;
  assign o_delta_wt_3_3_valid = mux_io_o_delta_wt_3_3_valid;
  assign o_delta_wt_3_3_payload = mux_io_o_delta_wt_3_3_payload;
  assign o_delta_wt_3_4_valid = mux_io_o_delta_wt_3_4_valid;
  assign o_delta_wt_3_4_payload = mux_io_o_delta_wt_3_4_payload;
  assign o_delta_wt_3_5_valid = mux_io_o_delta_wt_3_5_valid;
  assign o_delta_wt_3_5_payload = mux_io_o_delta_wt_3_5_payload;
  assign o_delta_wt_3_6_valid = mux_io_o_delta_wt_3_6_valid;
  assign o_delta_wt_3_6_payload = mux_io_o_delta_wt_3_6_payload;
  assign o_delta_wt_3_7_valid = mux_io_o_delta_wt_3_7_valid;
  assign o_delta_wt_3_7_payload = mux_io_o_delta_wt_3_7_payload;
  assign o_delta_wt_4_0_valid = mux_io_o_delta_wt_4_0_valid;
  assign o_delta_wt_4_0_payload = mux_io_o_delta_wt_4_0_payload;
  assign o_delta_wt_4_1_valid = mux_io_o_delta_wt_4_1_valid;
  assign o_delta_wt_4_1_payload = mux_io_o_delta_wt_4_1_payload;
  assign o_delta_wt_4_2_valid = mux_io_o_delta_wt_4_2_valid;
  assign o_delta_wt_4_2_payload = mux_io_o_delta_wt_4_2_payload;
  assign o_delta_wt_4_3_valid = mux_io_o_delta_wt_4_3_valid;
  assign o_delta_wt_4_3_payload = mux_io_o_delta_wt_4_3_payload;
  assign o_delta_wt_4_4_valid = mux_io_o_delta_wt_4_4_valid;
  assign o_delta_wt_4_4_payload = mux_io_o_delta_wt_4_4_payload;
  assign o_delta_wt_4_5_valid = mux_io_o_delta_wt_4_5_valid;
  assign o_delta_wt_4_5_payload = mux_io_o_delta_wt_4_5_payload;
  assign o_delta_wt_4_6_valid = mux_io_o_delta_wt_4_6_valid;
  assign o_delta_wt_4_6_payload = mux_io_o_delta_wt_4_6_payload;
  assign o_delta_wt_4_7_valid = mux_io_o_delta_wt_4_7_valid;
  assign o_delta_wt_4_7_payload = mux_io_o_delta_wt_4_7_payload;
  assign o_delta_wt_5_0_valid = mux_io_o_delta_wt_5_0_valid;
  assign o_delta_wt_5_0_payload = mux_io_o_delta_wt_5_0_payload;
  assign o_delta_wt_5_1_valid = mux_io_o_delta_wt_5_1_valid;
  assign o_delta_wt_5_1_payload = mux_io_o_delta_wt_5_1_payload;
  assign o_delta_wt_5_2_valid = mux_io_o_delta_wt_5_2_valid;
  assign o_delta_wt_5_2_payload = mux_io_o_delta_wt_5_2_payload;
  assign o_delta_wt_5_3_valid = mux_io_o_delta_wt_5_3_valid;
  assign o_delta_wt_5_3_payload = mux_io_o_delta_wt_5_3_payload;
  assign o_delta_wt_5_4_valid = mux_io_o_delta_wt_5_4_valid;
  assign o_delta_wt_5_4_payload = mux_io_o_delta_wt_5_4_payload;
  assign o_delta_wt_5_5_valid = mux_io_o_delta_wt_5_5_valid;
  assign o_delta_wt_5_5_payload = mux_io_o_delta_wt_5_5_payload;
  assign o_delta_wt_5_6_valid = mux_io_o_delta_wt_5_6_valid;
  assign o_delta_wt_5_6_payload = mux_io_o_delta_wt_5_6_payload;
  assign o_delta_wt_5_7_valid = mux_io_o_delta_wt_5_7_valid;
  assign o_delta_wt_5_7_payload = mux_io_o_delta_wt_5_7_payload;
  assign o_delta_wt_6_0_valid = mux_io_o_delta_wt_6_0_valid;
  assign o_delta_wt_6_0_payload = mux_io_o_delta_wt_6_0_payload;
  assign o_delta_wt_6_1_valid = mux_io_o_delta_wt_6_1_valid;
  assign o_delta_wt_6_1_payload = mux_io_o_delta_wt_6_1_payload;
  assign o_delta_wt_6_2_valid = mux_io_o_delta_wt_6_2_valid;
  assign o_delta_wt_6_2_payload = mux_io_o_delta_wt_6_2_payload;
  assign o_delta_wt_6_3_valid = mux_io_o_delta_wt_6_3_valid;
  assign o_delta_wt_6_3_payload = mux_io_o_delta_wt_6_3_payload;
  assign o_delta_wt_6_4_valid = mux_io_o_delta_wt_6_4_valid;
  assign o_delta_wt_6_4_payload = mux_io_o_delta_wt_6_4_payload;
  assign o_delta_wt_6_5_valid = mux_io_o_delta_wt_6_5_valid;
  assign o_delta_wt_6_5_payload = mux_io_o_delta_wt_6_5_payload;
  assign o_delta_wt_6_6_valid = mux_io_o_delta_wt_6_6_valid;
  assign o_delta_wt_6_6_payload = mux_io_o_delta_wt_6_6_payload;
  assign o_delta_wt_6_7_valid = mux_io_o_delta_wt_6_7_valid;
  assign o_delta_wt_6_7_payload = mux_io_o_delta_wt_6_7_payload;
  assign o_delta_wt_7_0_valid = mux_io_o_delta_wt_7_0_valid;
  assign o_delta_wt_7_0_payload = mux_io_o_delta_wt_7_0_payload;
  assign o_delta_wt_7_1_valid = mux_io_o_delta_wt_7_1_valid;
  assign o_delta_wt_7_1_payload = mux_io_o_delta_wt_7_1_payload;
  assign o_delta_wt_7_2_valid = mux_io_o_delta_wt_7_2_valid;
  assign o_delta_wt_7_2_payload = mux_io_o_delta_wt_7_2_payload;
  assign o_delta_wt_7_3_valid = mux_io_o_delta_wt_7_3_valid;
  assign o_delta_wt_7_3_payload = mux_io_o_delta_wt_7_3_payload;
  assign o_delta_wt_7_4_valid = mux_io_o_delta_wt_7_4_valid;
  assign o_delta_wt_7_4_payload = mux_io_o_delta_wt_7_4_payload;
  assign o_delta_wt_7_5_valid = mux_io_o_delta_wt_7_5_valid;
  assign o_delta_wt_7_5_payload = mux_io_o_delta_wt_7_5_payload;
  assign o_delta_wt_7_6_valid = mux_io_o_delta_wt_7_6_valid;
  assign o_delta_wt_7_6_payload = mux_io_o_delta_wt_7_6_payload;
  assign o_delta_wt_7_7_valid = mux_io_o_delta_wt_7_7_valid;
  assign o_delta_wt_7_7_payload = mux_io_o_delta_wt_7_7_payload;
  assign o_sigma_0_0_valid = mux_io_o_sigma_0_0_valid;
  assign o_sigma_0_0_payload = mux_io_o_sigma_0_0_payload;
  assign o_sigma_0_1_valid = mux_io_o_sigma_0_1_valid;
  assign o_sigma_0_1_payload = mux_io_o_sigma_0_1_payload;
  assign o_sigma_0_2_valid = mux_io_o_sigma_0_2_valid;
  assign o_sigma_0_2_payload = mux_io_o_sigma_0_2_payload;
  assign o_sigma_0_3_valid = mux_io_o_sigma_0_3_valid;
  assign o_sigma_0_3_payload = mux_io_o_sigma_0_3_payload;
  assign o_sigma_0_4_valid = mux_io_o_sigma_0_4_valid;
  assign o_sigma_0_4_payload = mux_io_o_sigma_0_4_payload;
  assign o_sigma_0_5_valid = mux_io_o_sigma_0_5_valid;
  assign o_sigma_0_5_payload = mux_io_o_sigma_0_5_payload;
  assign o_sigma_0_6_valid = mux_io_o_sigma_0_6_valid;
  assign o_sigma_0_6_payload = mux_io_o_sigma_0_6_payload;
  assign o_sigma_0_7_valid = mux_io_o_sigma_0_7_valid;
  assign o_sigma_0_7_payload = mux_io_o_sigma_0_7_payload;
  assign o_sigma_1_0_valid = mux_io_o_sigma_1_0_valid;
  assign o_sigma_1_0_payload = mux_io_o_sigma_1_0_payload;
  assign o_sigma_1_1_valid = mux_io_o_sigma_1_1_valid;
  assign o_sigma_1_1_payload = mux_io_o_sigma_1_1_payload;
  assign o_sigma_1_2_valid = mux_io_o_sigma_1_2_valid;
  assign o_sigma_1_2_payload = mux_io_o_sigma_1_2_payload;
  assign o_sigma_1_3_valid = mux_io_o_sigma_1_3_valid;
  assign o_sigma_1_3_payload = mux_io_o_sigma_1_3_payload;
  assign o_sigma_1_4_valid = mux_io_o_sigma_1_4_valid;
  assign o_sigma_1_4_payload = mux_io_o_sigma_1_4_payload;
  assign o_sigma_1_5_valid = mux_io_o_sigma_1_5_valid;
  assign o_sigma_1_5_payload = mux_io_o_sigma_1_5_payload;
  assign o_sigma_1_6_valid = mux_io_o_sigma_1_6_valid;
  assign o_sigma_1_6_payload = mux_io_o_sigma_1_6_payload;
  assign o_sigma_1_7_valid = mux_io_o_sigma_1_7_valid;
  assign o_sigma_1_7_payload = mux_io_o_sigma_1_7_payload;
  assign o_sigma_2_0_valid = mux_io_o_sigma_2_0_valid;
  assign o_sigma_2_0_payload = mux_io_o_sigma_2_0_payload;
  assign o_sigma_2_1_valid = mux_io_o_sigma_2_1_valid;
  assign o_sigma_2_1_payload = mux_io_o_sigma_2_1_payload;
  assign o_sigma_2_2_valid = mux_io_o_sigma_2_2_valid;
  assign o_sigma_2_2_payload = mux_io_o_sigma_2_2_payload;
  assign o_sigma_2_3_valid = mux_io_o_sigma_2_3_valid;
  assign o_sigma_2_3_payload = mux_io_o_sigma_2_3_payload;
  assign o_sigma_2_4_valid = mux_io_o_sigma_2_4_valid;
  assign o_sigma_2_4_payload = mux_io_o_sigma_2_4_payload;
  assign o_sigma_2_5_valid = mux_io_o_sigma_2_5_valid;
  assign o_sigma_2_5_payload = mux_io_o_sigma_2_5_payload;
  assign o_sigma_2_6_valid = mux_io_o_sigma_2_6_valid;
  assign o_sigma_2_6_payload = mux_io_o_sigma_2_6_payload;
  assign o_sigma_2_7_valid = mux_io_o_sigma_2_7_valid;
  assign o_sigma_2_7_payload = mux_io_o_sigma_2_7_payload;
  assign o_sigma_3_0_valid = mux_io_o_sigma_3_0_valid;
  assign o_sigma_3_0_payload = mux_io_o_sigma_3_0_payload;
  assign o_sigma_3_1_valid = mux_io_o_sigma_3_1_valid;
  assign o_sigma_3_1_payload = mux_io_o_sigma_3_1_payload;
  assign o_sigma_3_2_valid = mux_io_o_sigma_3_2_valid;
  assign o_sigma_3_2_payload = mux_io_o_sigma_3_2_payload;
  assign o_sigma_3_3_valid = mux_io_o_sigma_3_3_valid;
  assign o_sigma_3_3_payload = mux_io_o_sigma_3_3_payload;
  assign o_sigma_3_4_valid = mux_io_o_sigma_3_4_valid;
  assign o_sigma_3_4_payload = mux_io_o_sigma_3_4_payload;
  assign o_sigma_3_5_valid = mux_io_o_sigma_3_5_valid;
  assign o_sigma_3_5_payload = mux_io_o_sigma_3_5_payload;
  assign o_sigma_3_6_valid = mux_io_o_sigma_3_6_valid;
  assign o_sigma_3_6_payload = mux_io_o_sigma_3_6_payload;
  assign o_sigma_3_7_valid = mux_io_o_sigma_3_7_valid;
  assign o_sigma_3_7_payload = mux_io_o_sigma_3_7_payload;
  assign o_sigma_4_0_valid = mux_io_o_sigma_4_0_valid;
  assign o_sigma_4_0_payload = mux_io_o_sigma_4_0_payload;
  assign o_sigma_4_1_valid = mux_io_o_sigma_4_1_valid;
  assign o_sigma_4_1_payload = mux_io_o_sigma_4_1_payload;
  assign o_sigma_4_2_valid = mux_io_o_sigma_4_2_valid;
  assign o_sigma_4_2_payload = mux_io_o_sigma_4_2_payload;
  assign o_sigma_4_3_valid = mux_io_o_sigma_4_3_valid;
  assign o_sigma_4_3_payload = mux_io_o_sigma_4_3_payload;
  assign o_sigma_4_4_valid = mux_io_o_sigma_4_4_valid;
  assign o_sigma_4_4_payload = mux_io_o_sigma_4_4_payload;
  assign o_sigma_4_5_valid = mux_io_o_sigma_4_5_valid;
  assign o_sigma_4_5_payload = mux_io_o_sigma_4_5_payload;
  assign o_sigma_4_6_valid = mux_io_o_sigma_4_6_valid;
  assign o_sigma_4_6_payload = mux_io_o_sigma_4_6_payload;
  assign o_sigma_4_7_valid = mux_io_o_sigma_4_7_valid;
  assign o_sigma_4_7_payload = mux_io_o_sigma_4_7_payload;
  assign o_sigma_5_0_valid = mux_io_o_sigma_5_0_valid;
  assign o_sigma_5_0_payload = mux_io_o_sigma_5_0_payload;
  assign o_sigma_5_1_valid = mux_io_o_sigma_5_1_valid;
  assign o_sigma_5_1_payload = mux_io_o_sigma_5_1_payload;
  assign o_sigma_5_2_valid = mux_io_o_sigma_5_2_valid;
  assign o_sigma_5_2_payload = mux_io_o_sigma_5_2_payload;
  assign o_sigma_5_3_valid = mux_io_o_sigma_5_3_valid;
  assign o_sigma_5_3_payload = mux_io_o_sigma_5_3_payload;
  assign o_sigma_5_4_valid = mux_io_o_sigma_5_4_valid;
  assign o_sigma_5_4_payload = mux_io_o_sigma_5_4_payload;
  assign o_sigma_5_5_valid = mux_io_o_sigma_5_5_valid;
  assign o_sigma_5_5_payload = mux_io_o_sigma_5_5_payload;
  assign o_sigma_5_6_valid = mux_io_o_sigma_5_6_valid;
  assign o_sigma_5_6_payload = mux_io_o_sigma_5_6_payload;
  assign o_sigma_5_7_valid = mux_io_o_sigma_5_7_valid;
  assign o_sigma_5_7_payload = mux_io_o_sigma_5_7_payload;
  assign o_sigma_6_0_valid = mux_io_o_sigma_6_0_valid;
  assign o_sigma_6_0_payload = mux_io_o_sigma_6_0_payload;
  assign o_sigma_6_1_valid = mux_io_o_sigma_6_1_valid;
  assign o_sigma_6_1_payload = mux_io_o_sigma_6_1_payload;
  assign o_sigma_6_2_valid = mux_io_o_sigma_6_2_valid;
  assign o_sigma_6_2_payload = mux_io_o_sigma_6_2_payload;
  assign o_sigma_6_3_valid = mux_io_o_sigma_6_3_valid;
  assign o_sigma_6_3_payload = mux_io_o_sigma_6_3_payload;
  assign o_sigma_6_4_valid = mux_io_o_sigma_6_4_valid;
  assign o_sigma_6_4_payload = mux_io_o_sigma_6_4_payload;
  assign o_sigma_6_5_valid = mux_io_o_sigma_6_5_valid;
  assign o_sigma_6_5_payload = mux_io_o_sigma_6_5_payload;
  assign o_sigma_6_6_valid = mux_io_o_sigma_6_6_valid;
  assign o_sigma_6_6_payload = mux_io_o_sigma_6_6_payload;
  assign o_sigma_6_7_valid = mux_io_o_sigma_6_7_valid;
  assign o_sigma_6_7_payload = mux_io_o_sigma_6_7_payload;
  assign o_sigma_7_0_valid = mux_io_o_sigma_7_0_valid;
  assign o_sigma_7_0_payload = mux_io_o_sigma_7_0_payload;
  assign o_sigma_7_1_valid = mux_io_o_sigma_7_1_valid;
  assign o_sigma_7_1_payload = mux_io_o_sigma_7_1_payload;
  assign o_sigma_7_2_valid = mux_io_o_sigma_7_2_valid;
  assign o_sigma_7_2_payload = mux_io_o_sigma_7_2_payload;
  assign o_sigma_7_3_valid = mux_io_o_sigma_7_3_valid;
  assign o_sigma_7_3_payload = mux_io_o_sigma_7_3_payload;
  assign o_sigma_7_4_valid = mux_io_o_sigma_7_4_valid;
  assign o_sigma_7_4_payload = mux_io_o_sigma_7_4_payload;
  assign o_sigma_7_5_valid = mux_io_o_sigma_7_5_valid;
  assign o_sigma_7_5_payload = mux_io_o_sigma_7_5_payload;
  assign o_sigma_7_6_valid = mux_io_o_sigma_7_6_valid;
  assign o_sigma_7_6_payload = mux_io_o_sigma_7_6_payload;
  assign o_sigma_7_7_valid = mux_io_o_sigma_7_7_valid;
  assign o_sigma_7_7_payload = mux_io_o_sigma_7_7_payload;

endmodule

module cbuff_top (
  input               io_input_valid,
  output              io_input_ready,
  input      [255:0]  io_input_payload,
  input               io_clear,
  input               io_is_dtwt_mux,
  input      [31:0]   io_dt_rd_addr,
  output     [255:0]  io_dt_rd_data,
  input               io_dt_rd_en,
  input      [31:0]   io_wt_rd_0_addr,
  output     [255:0]  io_wt_rd_0_data,
  input               io_wt_rd_0_en,
  input      [31:0]   io_wt_rd_1_addr,
  output     [255:0]  io_wt_rd_1_data,
  input               io_wt_rd_1_en,
  input      [31:0]   io_wt_rd_2_addr,
  output     [255:0]  io_wt_rd_2_data,
  input               io_wt_rd_2_en,
  input      [31:0]   io_wt_rd_3_addr,
  output     [255:0]  io_wt_rd_3_data,
  input               io_wt_rd_3_en,
  input      [31:0]   io_wt_rd_4_addr,
  output     [255:0]  io_wt_rd_4_data,
  input               io_wt_rd_4_en,
  input      [31:0]   io_wt_rd_5_addr,
  output     [255:0]  io_wt_rd_5_data,
  input               io_wt_rd_5_en,
  input      [31:0]   io_wt_rd_6_addr,
  output     [255:0]  io_wt_rd_6_data,
  input               io_wt_rd_6_en,
  input      [31:0]   io_wt_rd_7_addr,
  output     [255:0]  io_wt_rd_7_data,
  input               io_wt_rd_7_en,
  input               clk,
  input               reset
);
  wire                d2b_io_input_ready;
  wire       [31:0]   d2b_io_dt_wr_addr;
  wire       [255:0]  d2b_io_dt_wr_data;
  wire                d2b_io_dt_wr_en;
  wire       [31:0]   d2b_io_wt_wr_0_addr;
  wire       [255:0]  d2b_io_wt_wr_0_data;
  wire                d2b_io_wt_wr_0_en;
  wire       [31:0]   d2b_io_wt_wr_1_addr;
  wire       [255:0]  d2b_io_wt_wr_1_data;
  wire                d2b_io_wt_wr_1_en;
  wire       [31:0]   d2b_io_wt_wr_2_addr;
  wire       [255:0]  d2b_io_wt_wr_2_data;
  wire                d2b_io_wt_wr_2_en;
  wire       [31:0]   d2b_io_wt_wr_3_addr;
  wire       [255:0]  d2b_io_wt_wr_3_data;
  wire                d2b_io_wt_wr_3_en;
  wire       [31:0]   d2b_io_wt_wr_4_addr;
  wire       [255:0]  d2b_io_wt_wr_4_data;
  wire                d2b_io_wt_wr_4_en;
  wire       [31:0]   d2b_io_wt_wr_5_addr;
  wire       [255:0]  d2b_io_wt_wr_5_data;
  wire                d2b_io_wt_wr_5_en;
  wire       [31:0]   d2b_io_wt_wr_6_addr;
  wire       [255:0]  d2b_io_wt_wr_6_data;
  wire                d2b_io_wt_wr_6_en;
  wire       [31:0]   d2b_io_wt_wr_7_addr;
  wire       [255:0]  d2b_io_wt_wr_7_data;
  wire                d2b_io_wt_wr_7_en;
  wire       [255:0]  buff_io_dt_rd_data;
  wire       [255:0]  buff_io_wt_rd_0_data;
  wire       [255:0]  buff_io_wt_rd_1_data;
  wire       [255:0]  buff_io_wt_rd_2_data;
  wire       [255:0]  buff_io_wt_rd_3_data;
  wire       [255:0]  buff_io_wt_rd_4_data;
  wire       [255:0]  buff_io_wt_rd_5_data;
  wire       [255:0]  buff_io_wt_rd_6_data;
  wire       [255:0]  buff_io_wt_rd_7_data;

  dma2buff d2b (
    .io_input_valid      (io_input_valid       ), //i
    .io_input_ready      (d2b_io_input_ready   ), //o
    .io_input_payload    (io_input_payload     ), //i
    .io_clear            (io_clear             ), //i
    .io_is_dtwt_mux      (io_is_dtwt_mux       ), //i
    .io_dt_wr_addr       (d2b_io_dt_wr_addr    ), //o
    .io_dt_wr_data       (d2b_io_dt_wr_data    ), //o
    .io_dt_wr_en         (d2b_io_dt_wr_en      ), //o
    .io_wt_wr_0_addr     (d2b_io_wt_wr_0_addr  ), //o
    .io_wt_wr_0_data     (d2b_io_wt_wr_0_data  ), //o
    .io_wt_wr_0_en       (d2b_io_wt_wr_0_en    ), //o
    .io_wt_wr_1_addr     (d2b_io_wt_wr_1_addr  ), //o
    .io_wt_wr_1_data     (d2b_io_wt_wr_1_data  ), //o
    .io_wt_wr_1_en       (d2b_io_wt_wr_1_en    ), //o
    .io_wt_wr_2_addr     (d2b_io_wt_wr_2_addr  ), //o
    .io_wt_wr_2_data     (d2b_io_wt_wr_2_data  ), //o
    .io_wt_wr_2_en       (d2b_io_wt_wr_2_en    ), //o
    .io_wt_wr_3_addr     (d2b_io_wt_wr_3_addr  ), //o
    .io_wt_wr_3_data     (d2b_io_wt_wr_3_data  ), //o
    .io_wt_wr_3_en       (d2b_io_wt_wr_3_en    ), //o
    .io_wt_wr_4_addr     (d2b_io_wt_wr_4_addr  ), //o
    .io_wt_wr_4_data     (d2b_io_wt_wr_4_data  ), //o
    .io_wt_wr_4_en       (d2b_io_wt_wr_4_en    ), //o
    .io_wt_wr_5_addr     (d2b_io_wt_wr_5_addr  ), //o
    .io_wt_wr_5_data     (d2b_io_wt_wr_5_data  ), //o
    .io_wt_wr_5_en       (d2b_io_wt_wr_5_en    ), //o
    .io_wt_wr_6_addr     (d2b_io_wt_wr_6_addr  ), //o
    .io_wt_wr_6_data     (d2b_io_wt_wr_6_data  ), //o
    .io_wt_wr_6_en       (d2b_io_wt_wr_6_en    ), //o
    .io_wt_wr_7_addr     (d2b_io_wt_wr_7_addr  ), //o
    .io_wt_wr_7_data     (d2b_io_wt_wr_7_data  ), //o
    .io_wt_wr_7_en       (d2b_io_wt_wr_7_en    ), //o
    .clk                 (clk                  ), //i
    .reset               (reset                )  //i
  );
  conv_buff buff (
    .io_dt_wr_addr      (d2b_io_dt_wr_addr     ), //i
    .io_dt_wr_data      (d2b_io_dt_wr_data     ), //i
    .io_dt_wr_en        (d2b_io_dt_wr_en       ), //i
    .io_wt_wr_0_addr    (d2b_io_wt_wr_0_addr   ), //i
    .io_wt_wr_0_data    (d2b_io_wt_wr_0_data   ), //i
    .io_wt_wr_0_en      (d2b_io_wt_wr_0_en     ), //i
    .io_wt_wr_1_addr    (d2b_io_wt_wr_1_addr   ), //i
    .io_wt_wr_1_data    (d2b_io_wt_wr_1_data   ), //i
    .io_wt_wr_1_en      (d2b_io_wt_wr_1_en     ), //i
    .io_wt_wr_2_addr    (d2b_io_wt_wr_2_addr   ), //i
    .io_wt_wr_2_data    (d2b_io_wt_wr_2_data   ), //i
    .io_wt_wr_2_en      (d2b_io_wt_wr_2_en     ), //i
    .io_wt_wr_3_addr    (d2b_io_wt_wr_3_addr   ), //i
    .io_wt_wr_3_data    (d2b_io_wt_wr_3_data   ), //i
    .io_wt_wr_3_en      (d2b_io_wt_wr_3_en     ), //i
    .io_wt_wr_4_addr    (d2b_io_wt_wr_4_addr   ), //i
    .io_wt_wr_4_data    (d2b_io_wt_wr_4_data   ), //i
    .io_wt_wr_4_en      (d2b_io_wt_wr_4_en     ), //i
    .io_wt_wr_5_addr    (d2b_io_wt_wr_5_addr   ), //i
    .io_wt_wr_5_data    (d2b_io_wt_wr_5_data   ), //i
    .io_wt_wr_5_en      (d2b_io_wt_wr_5_en     ), //i
    .io_wt_wr_6_addr    (d2b_io_wt_wr_6_addr   ), //i
    .io_wt_wr_6_data    (d2b_io_wt_wr_6_data   ), //i
    .io_wt_wr_6_en      (d2b_io_wt_wr_6_en     ), //i
    .io_wt_wr_7_addr    (d2b_io_wt_wr_7_addr   ), //i
    .io_wt_wr_7_data    (d2b_io_wt_wr_7_data   ), //i
    .io_wt_wr_7_en      (d2b_io_wt_wr_7_en     ), //i
    .io_dt_rd_addr      (io_dt_rd_addr         ), //i
    .io_dt_rd_data      (buff_io_dt_rd_data    ), //o
    .io_dt_rd_en        (io_dt_rd_en           ), //i
    .io_wt_rd_0_addr    (io_wt_rd_0_addr       ), //i
    .io_wt_rd_0_data    (buff_io_wt_rd_0_data  ), //o
    .io_wt_rd_0_en      (io_wt_rd_0_en         ), //i
    .io_wt_rd_1_addr    (io_wt_rd_1_addr       ), //i
    .io_wt_rd_1_data    (buff_io_wt_rd_1_data  ), //o
    .io_wt_rd_1_en      (io_wt_rd_1_en         ), //i
    .io_wt_rd_2_addr    (io_wt_rd_2_addr       ), //i
    .io_wt_rd_2_data    (buff_io_wt_rd_2_data  ), //o
    .io_wt_rd_2_en      (io_wt_rd_2_en         ), //i
    .io_wt_rd_3_addr    (io_wt_rd_3_addr       ), //i
    .io_wt_rd_3_data    (buff_io_wt_rd_3_data  ), //o
    .io_wt_rd_3_en      (io_wt_rd_3_en         ), //i
    .io_wt_rd_4_addr    (io_wt_rd_4_addr       ), //i
    .io_wt_rd_4_data    (buff_io_wt_rd_4_data  ), //o
    .io_wt_rd_4_en      (io_wt_rd_4_en         ), //i
    .io_wt_rd_5_addr    (io_wt_rd_5_addr       ), //i
    .io_wt_rd_5_data    (buff_io_wt_rd_5_data  ), //o
    .io_wt_rd_5_en      (io_wt_rd_5_en         ), //i
    .io_wt_rd_6_addr    (io_wt_rd_6_addr       ), //i
    .io_wt_rd_6_data    (buff_io_wt_rd_6_data  ), //o
    .io_wt_rd_6_en      (io_wt_rd_6_en         ), //i
    .io_wt_rd_7_addr    (io_wt_rd_7_addr       ), //i
    .io_wt_rd_7_data    (buff_io_wt_rd_7_data  ), //o
    .io_wt_rd_7_en      (io_wt_rd_7_en         ), //i
    .clk                (clk                   ), //i
    .reset              (reset                 )  //i
  );
  assign io_input_ready = d2b_io_input_ready;
  assign io_dt_rd_data = buff_io_dt_rd_data;
  assign io_wt_rd_0_data = buff_io_wt_rd_0_data;
  assign io_wt_rd_1_data = buff_io_wt_rd_1_data;
  assign io_wt_rd_2_data = buff_io_wt_rd_2_data;
  assign io_wt_rd_3_data = buff_io_wt_rd_3_data;
  assign io_wt_rd_4_data = buff_io_wt_rd_4_data;
  assign io_wt_rd_5_data = buff_io_wt_rd_5_data;
  assign io_wt_rd_6_data = buff_io_wt_rd_6_data;
  assign io_wt_rd_7_data = buff_io_wt_rd_7_data;

endmodule

module dmaWriteCtrl (
  output reg          io_axim_aw_valid,
  input               io_axim_aw_ready,
  output     [31:0]   io_axim_aw_payload_addr,
  output     [5:0]    io_axim_aw_payload_id,
  output     [7:0]    io_axim_aw_payload_len,
  output     [2:0]    io_axim_aw_payload_size,
  output     [1:0]    io_axim_aw_payload_burst,
  output reg          io_axim_w_valid,
  input               io_axim_w_ready,
  output reg [255:0]  io_axim_w_payload_data,
  output     [31:0]   io_axim_w_payload_strb,
  output              io_axim_w_payload_last,
  input               io_axim_b_valid,
  output              io_axim_b_ready,
  input      [5:0]    io_axim_b_payload_id,
  input      [1:0]    io_axim_b_payload_resp,
  input               io_cfg_valid,
  output reg          io_cfg_ready,
  input      [31:0]   io_cfg_payload_rd_dtBaseAddr,
  input      [31:0]   io_cfg_payload_rd_wtBaseAddr,
  input      [31:0]   io_cfg_payload_wr_delta_wt_BaseAddr,
  input      [31:0]   io_cfg_payload_wr_sigma_BaseAddr,
  input      [15:0]   io_cfg_payload_dtWidth,
  input      [15:0]   io_cfg_payload_dtHeight,
  input      [15:0]   io_cfg_payload_wtWidth,
  input      [15:0]   io_cfg_payload_wtHeight,
  input      [15:0]   io_cfg_payload_oWidth,
  input      [15:0]   io_cfg_payload_oHeight,
  input               io_i_delta_wt_0_0_valid,
  output              io_i_delta_wt_0_0_ready,
  input      [31:0]   io_i_delta_wt_0_0_payload,
  input               io_i_delta_wt_0_1_valid,
  output              io_i_delta_wt_0_1_ready,
  input      [31:0]   io_i_delta_wt_0_1_payload,
  input               io_i_delta_wt_0_2_valid,
  output              io_i_delta_wt_0_2_ready,
  input      [31:0]   io_i_delta_wt_0_2_payload,
  input               io_i_delta_wt_0_3_valid,
  output              io_i_delta_wt_0_3_ready,
  input      [31:0]   io_i_delta_wt_0_3_payload,
  input               io_i_delta_wt_0_4_valid,
  output              io_i_delta_wt_0_4_ready,
  input      [31:0]   io_i_delta_wt_0_4_payload,
  input               io_i_delta_wt_0_5_valid,
  output              io_i_delta_wt_0_5_ready,
  input      [31:0]   io_i_delta_wt_0_5_payload,
  input               io_i_delta_wt_0_6_valid,
  output              io_i_delta_wt_0_6_ready,
  input      [31:0]   io_i_delta_wt_0_6_payload,
  input               io_i_delta_wt_0_7_valid,
  output              io_i_delta_wt_0_7_ready,
  input      [31:0]   io_i_delta_wt_0_7_payload,
  input               io_i_delta_wt_1_0_valid,
  output              io_i_delta_wt_1_0_ready,
  input      [31:0]   io_i_delta_wt_1_0_payload,
  input               io_i_delta_wt_1_1_valid,
  output              io_i_delta_wt_1_1_ready,
  input      [31:0]   io_i_delta_wt_1_1_payload,
  input               io_i_delta_wt_1_2_valid,
  output              io_i_delta_wt_1_2_ready,
  input      [31:0]   io_i_delta_wt_1_2_payload,
  input               io_i_delta_wt_1_3_valid,
  output              io_i_delta_wt_1_3_ready,
  input      [31:0]   io_i_delta_wt_1_3_payload,
  input               io_i_delta_wt_1_4_valid,
  output              io_i_delta_wt_1_4_ready,
  input      [31:0]   io_i_delta_wt_1_4_payload,
  input               io_i_delta_wt_1_5_valid,
  output              io_i_delta_wt_1_5_ready,
  input      [31:0]   io_i_delta_wt_1_5_payload,
  input               io_i_delta_wt_1_6_valid,
  output              io_i_delta_wt_1_6_ready,
  input      [31:0]   io_i_delta_wt_1_6_payload,
  input               io_i_delta_wt_1_7_valid,
  output              io_i_delta_wt_1_7_ready,
  input      [31:0]   io_i_delta_wt_1_7_payload,
  input               io_i_delta_wt_2_0_valid,
  output              io_i_delta_wt_2_0_ready,
  input      [31:0]   io_i_delta_wt_2_0_payload,
  input               io_i_delta_wt_2_1_valid,
  output              io_i_delta_wt_2_1_ready,
  input      [31:0]   io_i_delta_wt_2_1_payload,
  input               io_i_delta_wt_2_2_valid,
  output              io_i_delta_wt_2_2_ready,
  input      [31:0]   io_i_delta_wt_2_2_payload,
  input               io_i_delta_wt_2_3_valid,
  output              io_i_delta_wt_2_3_ready,
  input      [31:0]   io_i_delta_wt_2_3_payload,
  input               io_i_delta_wt_2_4_valid,
  output              io_i_delta_wt_2_4_ready,
  input      [31:0]   io_i_delta_wt_2_4_payload,
  input               io_i_delta_wt_2_5_valid,
  output              io_i_delta_wt_2_5_ready,
  input      [31:0]   io_i_delta_wt_2_5_payload,
  input               io_i_delta_wt_2_6_valid,
  output              io_i_delta_wt_2_6_ready,
  input      [31:0]   io_i_delta_wt_2_6_payload,
  input               io_i_delta_wt_2_7_valid,
  output              io_i_delta_wt_2_7_ready,
  input      [31:0]   io_i_delta_wt_2_7_payload,
  input               io_i_delta_wt_3_0_valid,
  output              io_i_delta_wt_3_0_ready,
  input      [31:0]   io_i_delta_wt_3_0_payload,
  input               io_i_delta_wt_3_1_valid,
  output              io_i_delta_wt_3_1_ready,
  input      [31:0]   io_i_delta_wt_3_1_payload,
  input               io_i_delta_wt_3_2_valid,
  output              io_i_delta_wt_3_2_ready,
  input      [31:0]   io_i_delta_wt_3_2_payload,
  input               io_i_delta_wt_3_3_valid,
  output              io_i_delta_wt_3_3_ready,
  input      [31:0]   io_i_delta_wt_3_3_payload,
  input               io_i_delta_wt_3_4_valid,
  output              io_i_delta_wt_3_4_ready,
  input      [31:0]   io_i_delta_wt_3_4_payload,
  input               io_i_delta_wt_3_5_valid,
  output              io_i_delta_wt_3_5_ready,
  input      [31:0]   io_i_delta_wt_3_5_payload,
  input               io_i_delta_wt_3_6_valid,
  output              io_i_delta_wt_3_6_ready,
  input      [31:0]   io_i_delta_wt_3_6_payload,
  input               io_i_delta_wt_3_7_valid,
  output              io_i_delta_wt_3_7_ready,
  input      [31:0]   io_i_delta_wt_3_7_payload,
  input               io_i_delta_wt_4_0_valid,
  output              io_i_delta_wt_4_0_ready,
  input      [31:0]   io_i_delta_wt_4_0_payload,
  input               io_i_delta_wt_4_1_valid,
  output              io_i_delta_wt_4_1_ready,
  input      [31:0]   io_i_delta_wt_4_1_payload,
  input               io_i_delta_wt_4_2_valid,
  output              io_i_delta_wt_4_2_ready,
  input      [31:0]   io_i_delta_wt_4_2_payload,
  input               io_i_delta_wt_4_3_valid,
  output              io_i_delta_wt_4_3_ready,
  input      [31:0]   io_i_delta_wt_4_3_payload,
  input               io_i_delta_wt_4_4_valid,
  output              io_i_delta_wt_4_4_ready,
  input      [31:0]   io_i_delta_wt_4_4_payload,
  input               io_i_delta_wt_4_5_valid,
  output              io_i_delta_wt_4_5_ready,
  input      [31:0]   io_i_delta_wt_4_5_payload,
  input               io_i_delta_wt_4_6_valid,
  output              io_i_delta_wt_4_6_ready,
  input      [31:0]   io_i_delta_wt_4_6_payload,
  input               io_i_delta_wt_4_7_valid,
  output              io_i_delta_wt_4_7_ready,
  input      [31:0]   io_i_delta_wt_4_7_payload,
  input               io_i_delta_wt_5_0_valid,
  output              io_i_delta_wt_5_0_ready,
  input      [31:0]   io_i_delta_wt_5_0_payload,
  input               io_i_delta_wt_5_1_valid,
  output              io_i_delta_wt_5_1_ready,
  input      [31:0]   io_i_delta_wt_5_1_payload,
  input               io_i_delta_wt_5_2_valid,
  output              io_i_delta_wt_5_2_ready,
  input      [31:0]   io_i_delta_wt_5_2_payload,
  input               io_i_delta_wt_5_3_valid,
  output              io_i_delta_wt_5_3_ready,
  input      [31:0]   io_i_delta_wt_5_3_payload,
  input               io_i_delta_wt_5_4_valid,
  output              io_i_delta_wt_5_4_ready,
  input      [31:0]   io_i_delta_wt_5_4_payload,
  input               io_i_delta_wt_5_5_valid,
  output              io_i_delta_wt_5_5_ready,
  input      [31:0]   io_i_delta_wt_5_5_payload,
  input               io_i_delta_wt_5_6_valid,
  output              io_i_delta_wt_5_6_ready,
  input      [31:0]   io_i_delta_wt_5_6_payload,
  input               io_i_delta_wt_5_7_valid,
  output              io_i_delta_wt_5_7_ready,
  input      [31:0]   io_i_delta_wt_5_7_payload,
  input               io_i_delta_wt_6_0_valid,
  output              io_i_delta_wt_6_0_ready,
  input      [31:0]   io_i_delta_wt_6_0_payload,
  input               io_i_delta_wt_6_1_valid,
  output              io_i_delta_wt_6_1_ready,
  input      [31:0]   io_i_delta_wt_6_1_payload,
  input               io_i_delta_wt_6_2_valid,
  output              io_i_delta_wt_6_2_ready,
  input      [31:0]   io_i_delta_wt_6_2_payload,
  input               io_i_delta_wt_6_3_valid,
  output              io_i_delta_wt_6_3_ready,
  input      [31:0]   io_i_delta_wt_6_3_payload,
  input               io_i_delta_wt_6_4_valid,
  output              io_i_delta_wt_6_4_ready,
  input      [31:0]   io_i_delta_wt_6_4_payload,
  input               io_i_delta_wt_6_5_valid,
  output              io_i_delta_wt_6_5_ready,
  input      [31:0]   io_i_delta_wt_6_5_payload,
  input               io_i_delta_wt_6_6_valid,
  output              io_i_delta_wt_6_6_ready,
  input      [31:0]   io_i_delta_wt_6_6_payload,
  input               io_i_delta_wt_6_7_valid,
  output              io_i_delta_wt_6_7_ready,
  input      [31:0]   io_i_delta_wt_6_7_payload,
  input               io_i_delta_wt_7_0_valid,
  output              io_i_delta_wt_7_0_ready,
  input      [31:0]   io_i_delta_wt_7_0_payload,
  input               io_i_delta_wt_7_1_valid,
  output              io_i_delta_wt_7_1_ready,
  input      [31:0]   io_i_delta_wt_7_1_payload,
  input               io_i_delta_wt_7_2_valid,
  output              io_i_delta_wt_7_2_ready,
  input      [31:0]   io_i_delta_wt_7_2_payload,
  input               io_i_delta_wt_7_3_valid,
  output              io_i_delta_wt_7_3_ready,
  input      [31:0]   io_i_delta_wt_7_3_payload,
  input               io_i_delta_wt_7_4_valid,
  output              io_i_delta_wt_7_4_ready,
  input      [31:0]   io_i_delta_wt_7_4_payload,
  input               io_i_delta_wt_7_5_valid,
  output              io_i_delta_wt_7_5_ready,
  input      [31:0]   io_i_delta_wt_7_5_payload,
  input               io_i_delta_wt_7_6_valid,
  output              io_i_delta_wt_7_6_ready,
  input      [31:0]   io_i_delta_wt_7_6_payload,
  input               io_i_delta_wt_7_7_valid,
  output              io_i_delta_wt_7_7_ready,
  input      [31:0]   io_i_delta_wt_7_7_payload,
  input               io_i_sigma_0_valid,
  output              io_i_sigma_0_ready,
  input      [31:0]   io_i_sigma_0_payload,
  input               io_i_sigma_1_valid,
  output              io_i_sigma_1_ready,
  input      [31:0]   io_i_sigma_1_payload,
  input               io_i_sigma_2_valid,
  output              io_i_sigma_2_ready,
  input      [31:0]   io_i_sigma_2_payload,
  input               io_i_sigma_3_valid,
  output              io_i_sigma_3_ready,
  input      [31:0]   io_i_sigma_3_payload,
  input               io_i_sigma_4_valid,
  output              io_i_sigma_4_ready,
  input      [31:0]   io_i_sigma_4_payload,
  input               io_i_sigma_5_valid,
  output              io_i_sigma_5_ready,
  input      [31:0]   io_i_sigma_5_payload,
  input               io_i_sigma_6_valid,
  output              io_i_sigma_6_ready,
  input      [31:0]   io_i_sigma_6_payload,
  input               io_i_sigma_7_valid,
  output              io_i_sigma_7_ready,
  input      [31:0]   io_i_sigma_7_payload,
  input               io_enable,
  input               io_is_delta_wt,
  input               clk,
  input               reset
);
  reg                 cvt_sgm_io_out_ready;
  wire                cvt_wt_0_io_in_0_ready;
  wire                cvt_wt_0_io_in_1_ready;
  wire                cvt_wt_0_io_in_2_ready;
  wire                cvt_wt_0_io_in_3_ready;
  wire                cvt_wt_0_io_in_4_ready;
  wire                cvt_wt_0_io_in_5_ready;
  wire                cvt_wt_0_io_in_6_ready;
  wire                cvt_wt_0_io_in_7_ready;
  wire                cvt_wt_0_io_out_valid;
  wire       [255:0]  cvt_wt_0_io_out_payload;
  wire                cvt_wt_1_io_in_0_ready;
  wire                cvt_wt_1_io_in_1_ready;
  wire                cvt_wt_1_io_in_2_ready;
  wire                cvt_wt_1_io_in_3_ready;
  wire                cvt_wt_1_io_in_4_ready;
  wire                cvt_wt_1_io_in_5_ready;
  wire                cvt_wt_1_io_in_6_ready;
  wire                cvt_wt_1_io_in_7_ready;
  wire                cvt_wt_1_io_out_valid;
  wire       [255:0]  cvt_wt_1_io_out_payload;
  wire                cvt_wt_2_io_in_0_ready;
  wire                cvt_wt_2_io_in_1_ready;
  wire                cvt_wt_2_io_in_2_ready;
  wire                cvt_wt_2_io_in_3_ready;
  wire                cvt_wt_2_io_in_4_ready;
  wire                cvt_wt_2_io_in_5_ready;
  wire                cvt_wt_2_io_in_6_ready;
  wire                cvt_wt_2_io_in_7_ready;
  wire                cvt_wt_2_io_out_valid;
  wire       [255:0]  cvt_wt_2_io_out_payload;
  wire                cvt_wt_3_io_in_0_ready;
  wire                cvt_wt_3_io_in_1_ready;
  wire                cvt_wt_3_io_in_2_ready;
  wire                cvt_wt_3_io_in_3_ready;
  wire                cvt_wt_3_io_in_4_ready;
  wire                cvt_wt_3_io_in_5_ready;
  wire                cvt_wt_3_io_in_6_ready;
  wire                cvt_wt_3_io_in_7_ready;
  wire                cvt_wt_3_io_out_valid;
  wire       [255:0]  cvt_wt_3_io_out_payload;
  wire                cvt_wt_4_io_in_0_ready;
  wire                cvt_wt_4_io_in_1_ready;
  wire                cvt_wt_4_io_in_2_ready;
  wire                cvt_wt_4_io_in_3_ready;
  wire                cvt_wt_4_io_in_4_ready;
  wire                cvt_wt_4_io_in_5_ready;
  wire                cvt_wt_4_io_in_6_ready;
  wire                cvt_wt_4_io_in_7_ready;
  wire                cvt_wt_4_io_out_valid;
  wire       [255:0]  cvt_wt_4_io_out_payload;
  wire                cvt_wt_5_io_in_0_ready;
  wire                cvt_wt_5_io_in_1_ready;
  wire                cvt_wt_5_io_in_2_ready;
  wire                cvt_wt_5_io_in_3_ready;
  wire                cvt_wt_5_io_in_4_ready;
  wire                cvt_wt_5_io_in_5_ready;
  wire                cvt_wt_5_io_in_6_ready;
  wire                cvt_wt_5_io_in_7_ready;
  wire                cvt_wt_5_io_out_valid;
  wire       [255:0]  cvt_wt_5_io_out_payload;
  wire                cvt_wt_6_io_in_0_ready;
  wire                cvt_wt_6_io_in_1_ready;
  wire                cvt_wt_6_io_in_2_ready;
  wire                cvt_wt_6_io_in_3_ready;
  wire                cvt_wt_6_io_in_4_ready;
  wire                cvt_wt_6_io_in_5_ready;
  wire                cvt_wt_6_io_in_6_ready;
  wire                cvt_wt_6_io_in_7_ready;
  wire                cvt_wt_6_io_out_valid;
  wire       [255:0]  cvt_wt_6_io_out_payload;
  wire                cvt_wt_7_io_in_0_ready;
  wire                cvt_wt_7_io_in_1_ready;
  wire                cvt_wt_7_io_in_2_ready;
  wire                cvt_wt_7_io_in_3_ready;
  wire                cvt_wt_7_io_in_4_ready;
  wire                cvt_wt_7_io_in_5_ready;
  wire                cvt_wt_7_io_in_6_ready;
  wire                cvt_wt_7_io_in_7_ready;
  wire                cvt_wt_7_io_out_valid;
  wire       [255:0]  cvt_wt_7_io_out_payload;
  wire                cvt_sgm_io_in_0_ready;
  wire                cvt_sgm_io_in_1_ready;
  wire                cvt_sgm_io_in_2_ready;
  wire                cvt_sgm_io_in_3_ready;
  wire                cvt_sgm_io_in_4_ready;
  wire                cvt_sgm_io_in_5_ready;
  wire                cvt_sgm_io_in_6_ready;
  wire                cvt_sgm_io_in_7_ready;
  wire                cvt_sgm_io_out_valid;
  wire       [255:0]  cvt_sgm_io_out_payload;
  wire       [7:0]    _zz_io_axim_w_payload_last;
  reg        [31:0]   addr;
  reg        [7:0]    burst_len;
  reg        [7:0]    burst_cnt;
  reg        [255:0]  data_wt_0;
  reg        [255:0]  data_wt_1;
  reg        [255:0]  data_wt_2;
  reg        [255:0]  data_wt_3;
  reg        [255:0]  data_wt_4;
  reg        [255:0]  data_wt_5;
  reg        [255:0]  data_wt_6;
  reg        [255:0]  data_wt_7;
  reg        [255:0]  data_sgm;
  reg        [3:0]    wt_cnt;
  reg        [31:0]   cfg_rd_dtBaseAddr;
  reg        [31:0]   cfg_rd_wtBaseAddr;
  reg        [31:0]   cfg_wr_delta_wt_BaseAddr;
  reg        [31:0]   cfg_wr_sigma_BaseAddr;
  reg        [15:0]   cfg_dtWidth;
  reg        [15:0]   cfg_dtHeight;
  reg        [15:0]   cfg_wtWidth;
  reg        [15:0]   cfg_wtHeight;
  reg        [15:0]   cfg_oWidth;
  reg        [15:0]   cfg_oHeight;
  reg                 cvt_wt_o_ready;
  wire                cvt_wt_o_valid;
  wire                when_dmaWriteCtrl_l73;
  wire                dma_wrctrl_fsm_wantExit;
  reg                 dma_wrctrl_fsm_wantStart;
  wire                dma_wrctrl_fsm_wantKill;
  reg        `dma_wrctrl_fsm_enumDefinition_binary_sequential_type dma_wrctrl_fsm_stateReg;
  reg        `dma_wrctrl_fsm_enumDefinition_binary_sequential_type dma_wrctrl_fsm_stateNext;
  wire                when_dmaWriteCtrl_l101;
  wire                when_dmaWriteCtrl_l104;
  wire                when_dmaWriteCtrl_l110;
  wire                when_dmaWriteCtrl_l123;
  wire                when_dmaWriteCtrl_l160;
  wire                when_dmaWriteCtrl_l169;
  wire                when_dmaWriteCtrl_l176;
  wire                when_dmaWriteCtrl_l186;
  wire                when_dmaWriteCtrl_l199;
  `ifndef SYNTHESIS
  reg [239:0] dma_wrctrl_fsm_stateReg_string;
  reg [239:0] dma_wrctrl_fsm_stateNext_string;
  `endif


  assign _zz_io_axim_w_payload_last = (burst_len - 8'h01);
  cvt_stream2uint cvt_wt_0 (
    .io_in_0_valid      (io_i_delta_wt_0_0_valid    ), //i
    .io_in_0_ready      (cvt_wt_0_io_in_0_ready     ), //o
    .io_in_0_payload    (io_i_delta_wt_0_0_payload  ), //i
    .io_in_1_valid      (io_i_delta_wt_0_1_valid    ), //i
    .io_in_1_ready      (cvt_wt_0_io_in_1_ready     ), //o
    .io_in_1_payload    (io_i_delta_wt_0_1_payload  ), //i
    .io_in_2_valid      (io_i_delta_wt_0_2_valid    ), //i
    .io_in_2_ready      (cvt_wt_0_io_in_2_ready     ), //o
    .io_in_2_payload    (io_i_delta_wt_0_2_payload  ), //i
    .io_in_3_valid      (io_i_delta_wt_0_3_valid    ), //i
    .io_in_3_ready      (cvt_wt_0_io_in_3_ready     ), //o
    .io_in_3_payload    (io_i_delta_wt_0_3_payload  ), //i
    .io_in_4_valid      (io_i_delta_wt_0_4_valid    ), //i
    .io_in_4_ready      (cvt_wt_0_io_in_4_ready     ), //o
    .io_in_4_payload    (io_i_delta_wt_0_4_payload  ), //i
    .io_in_5_valid      (io_i_delta_wt_0_5_valid    ), //i
    .io_in_5_ready      (cvt_wt_0_io_in_5_ready     ), //o
    .io_in_5_payload    (io_i_delta_wt_0_5_payload  ), //i
    .io_in_6_valid      (io_i_delta_wt_0_6_valid    ), //i
    .io_in_6_ready      (cvt_wt_0_io_in_6_ready     ), //o
    .io_in_6_payload    (io_i_delta_wt_0_6_payload  ), //i
    .io_in_7_valid      (io_i_delta_wt_0_7_valid    ), //i
    .io_in_7_ready      (cvt_wt_0_io_in_7_ready     ), //o
    .io_in_7_payload    (io_i_delta_wt_0_7_payload  ), //i
    .io_out_valid       (cvt_wt_0_io_out_valid      ), //o
    .io_out_ready       (cvt_wt_o_ready             ), //i
    .io_out_payload     (cvt_wt_0_io_out_payload    )  //o
  );
  cvt_stream2uint cvt_wt_1 (
    .io_in_0_valid      (io_i_delta_wt_1_0_valid    ), //i
    .io_in_0_ready      (cvt_wt_1_io_in_0_ready     ), //o
    .io_in_0_payload    (io_i_delta_wt_1_0_payload  ), //i
    .io_in_1_valid      (io_i_delta_wt_1_1_valid    ), //i
    .io_in_1_ready      (cvt_wt_1_io_in_1_ready     ), //o
    .io_in_1_payload    (io_i_delta_wt_1_1_payload  ), //i
    .io_in_2_valid      (io_i_delta_wt_1_2_valid    ), //i
    .io_in_2_ready      (cvt_wt_1_io_in_2_ready     ), //o
    .io_in_2_payload    (io_i_delta_wt_1_2_payload  ), //i
    .io_in_3_valid      (io_i_delta_wt_1_3_valid    ), //i
    .io_in_3_ready      (cvt_wt_1_io_in_3_ready     ), //o
    .io_in_3_payload    (io_i_delta_wt_1_3_payload  ), //i
    .io_in_4_valid      (io_i_delta_wt_1_4_valid    ), //i
    .io_in_4_ready      (cvt_wt_1_io_in_4_ready     ), //o
    .io_in_4_payload    (io_i_delta_wt_1_4_payload  ), //i
    .io_in_5_valid      (io_i_delta_wt_1_5_valid    ), //i
    .io_in_5_ready      (cvt_wt_1_io_in_5_ready     ), //o
    .io_in_5_payload    (io_i_delta_wt_1_5_payload  ), //i
    .io_in_6_valid      (io_i_delta_wt_1_6_valid    ), //i
    .io_in_6_ready      (cvt_wt_1_io_in_6_ready     ), //o
    .io_in_6_payload    (io_i_delta_wt_1_6_payload  ), //i
    .io_in_7_valid      (io_i_delta_wt_1_7_valid    ), //i
    .io_in_7_ready      (cvt_wt_1_io_in_7_ready     ), //o
    .io_in_7_payload    (io_i_delta_wt_1_7_payload  ), //i
    .io_out_valid       (cvt_wt_1_io_out_valid      ), //o
    .io_out_ready       (cvt_wt_o_ready             ), //i
    .io_out_payload     (cvt_wt_1_io_out_payload    )  //o
  );
  cvt_stream2uint cvt_wt_2 (
    .io_in_0_valid      (io_i_delta_wt_2_0_valid    ), //i
    .io_in_0_ready      (cvt_wt_2_io_in_0_ready     ), //o
    .io_in_0_payload    (io_i_delta_wt_2_0_payload  ), //i
    .io_in_1_valid      (io_i_delta_wt_2_1_valid    ), //i
    .io_in_1_ready      (cvt_wt_2_io_in_1_ready     ), //o
    .io_in_1_payload    (io_i_delta_wt_2_1_payload  ), //i
    .io_in_2_valid      (io_i_delta_wt_2_2_valid    ), //i
    .io_in_2_ready      (cvt_wt_2_io_in_2_ready     ), //o
    .io_in_2_payload    (io_i_delta_wt_2_2_payload  ), //i
    .io_in_3_valid      (io_i_delta_wt_2_3_valid    ), //i
    .io_in_3_ready      (cvt_wt_2_io_in_3_ready     ), //o
    .io_in_3_payload    (io_i_delta_wt_2_3_payload  ), //i
    .io_in_4_valid      (io_i_delta_wt_2_4_valid    ), //i
    .io_in_4_ready      (cvt_wt_2_io_in_4_ready     ), //o
    .io_in_4_payload    (io_i_delta_wt_2_4_payload  ), //i
    .io_in_5_valid      (io_i_delta_wt_2_5_valid    ), //i
    .io_in_5_ready      (cvt_wt_2_io_in_5_ready     ), //o
    .io_in_5_payload    (io_i_delta_wt_2_5_payload  ), //i
    .io_in_6_valid      (io_i_delta_wt_2_6_valid    ), //i
    .io_in_6_ready      (cvt_wt_2_io_in_6_ready     ), //o
    .io_in_6_payload    (io_i_delta_wt_2_6_payload  ), //i
    .io_in_7_valid      (io_i_delta_wt_2_7_valid    ), //i
    .io_in_7_ready      (cvt_wt_2_io_in_7_ready     ), //o
    .io_in_7_payload    (io_i_delta_wt_2_7_payload  ), //i
    .io_out_valid       (cvt_wt_2_io_out_valid      ), //o
    .io_out_ready       (cvt_wt_o_ready             ), //i
    .io_out_payload     (cvt_wt_2_io_out_payload    )  //o
  );
  cvt_stream2uint cvt_wt_3 (
    .io_in_0_valid      (io_i_delta_wt_3_0_valid    ), //i
    .io_in_0_ready      (cvt_wt_3_io_in_0_ready     ), //o
    .io_in_0_payload    (io_i_delta_wt_3_0_payload  ), //i
    .io_in_1_valid      (io_i_delta_wt_3_1_valid    ), //i
    .io_in_1_ready      (cvt_wt_3_io_in_1_ready     ), //o
    .io_in_1_payload    (io_i_delta_wt_3_1_payload  ), //i
    .io_in_2_valid      (io_i_delta_wt_3_2_valid    ), //i
    .io_in_2_ready      (cvt_wt_3_io_in_2_ready     ), //o
    .io_in_2_payload    (io_i_delta_wt_3_2_payload  ), //i
    .io_in_3_valid      (io_i_delta_wt_3_3_valid    ), //i
    .io_in_3_ready      (cvt_wt_3_io_in_3_ready     ), //o
    .io_in_3_payload    (io_i_delta_wt_3_3_payload  ), //i
    .io_in_4_valid      (io_i_delta_wt_3_4_valid    ), //i
    .io_in_4_ready      (cvt_wt_3_io_in_4_ready     ), //o
    .io_in_4_payload    (io_i_delta_wt_3_4_payload  ), //i
    .io_in_5_valid      (io_i_delta_wt_3_5_valid    ), //i
    .io_in_5_ready      (cvt_wt_3_io_in_5_ready     ), //o
    .io_in_5_payload    (io_i_delta_wt_3_5_payload  ), //i
    .io_in_6_valid      (io_i_delta_wt_3_6_valid    ), //i
    .io_in_6_ready      (cvt_wt_3_io_in_6_ready     ), //o
    .io_in_6_payload    (io_i_delta_wt_3_6_payload  ), //i
    .io_in_7_valid      (io_i_delta_wt_3_7_valid    ), //i
    .io_in_7_ready      (cvt_wt_3_io_in_7_ready     ), //o
    .io_in_7_payload    (io_i_delta_wt_3_7_payload  ), //i
    .io_out_valid       (cvt_wt_3_io_out_valid      ), //o
    .io_out_ready       (cvt_wt_o_ready             ), //i
    .io_out_payload     (cvt_wt_3_io_out_payload    )  //o
  );
  cvt_stream2uint cvt_wt_4 (
    .io_in_0_valid      (io_i_delta_wt_4_0_valid    ), //i
    .io_in_0_ready      (cvt_wt_4_io_in_0_ready     ), //o
    .io_in_0_payload    (io_i_delta_wt_4_0_payload  ), //i
    .io_in_1_valid      (io_i_delta_wt_4_1_valid    ), //i
    .io_in_1_ready      (cvt_wt_4_io_in_1_ready     ), //o
    .io_in_1_payload    (io_i_delta_wt_4_1_payload  ), //i
    .io_in_2_valid      (io_i_delta_wt_4_2_valid    ), //i
    .io_in_2_ready      (cvt_wt_4_io_in_2_ready     ), //o
    .io_in_2_payload    (io_i_delta_wt_4_2_payload  ), //i
    .io_in_3_valid      (io_i_delta_wt_4_3_valid    ), //i
    .io_in_3_ready      (cvt_wt_4_io_in_3_ready     ), //o
    .io_in_3_payload    (io_i_delta_wt_4_3_payload  ), //i
    .io_in_4_valid      (io_i_delta_wt_4_4_valid    ), //i
    .io_in_4_ready      (cvt_wt_4_io_in_4_ready     ), //o
    .io_in_4_payload    (io_i_delta_wt_4_4_payload  ), //i
    .io_in_5_valid      (io_i_delta_wt_4_5_valid    ), //i
    .io_in_5_ready      (cvt_wt_4_io_in_5_ready     ), //o
    .io_in_5_payload    (io_i_delta_wt_4_5_payload  ), //i
    .io_in_6_valid      (io_i_delta_wt_4_6_valid    ), //i
    .io_in_6_ready      (cvt_wt_4_io_in_6_ready     ), //o
    .io_in_6_payload    (io_i_delta_wt_4_6_payload  ), //i
    .io_in_7_valid      (io_i_delta_wt_4_7_valid    ), //i
    .io_in_7_ready      (cvt_wt_4_io_in_7_ready     ), //o
    .io_in_7_payload    (io_i_delta_wt_4_7_payload  ), //i
    .io_out_valid       (cvt_wt_4_io_out_valid      ), //o
    .io_out_ready       (cvt_wt_o_ready             ), //i
    .io_out_payload     (cvt_wt_4_io_out_payload    )  //o
  );
  cvt_stream2uint cvt_wt_5 (
    .io_in_0_valid      (io_i_delta_wt_5_0_valid    ), //i
    .io_in_0_ready      (cvt_wt_5_io_in_0_ready     ), //o
    .io_in_0_payload    (io_i_delta_wt_5_0_payload  ), //i
    .io_in_1_valid      (io_i_delta_wt_5_1_valid    ), //i
    .io_in_1_ready      (cvt_wt_5_io_in_1_ready     ), //o
    .io_in_1_payload    (io_i_delta_wt_5_1_payload  ), //i
    .io_in_2_valid      (io_i_delta_wt_5_2_valid    ), //i
    .io_in_2_ready      (cvt_wt_5_io_in_2_ready     ), //o
    .io_in_2_payload    (io_i_delta_wt_5_2_payload  ), //i
    .io_in_3_valid      (io_i_delta_wt_5_3_valid    ), //i
    .io_in_3_ready      (cvt_wt_5_io_in_3_ready     ), //o
    .io_in_3_payload    (io_i_delta_wt_5_3_payload  ), //i
    .io_in_4_valid      (io_i_delta_wt_5_4_valid    ), //i
    .io_in_4_ready      (cvt_wt_5_io_in_4_ready     ), //o
    .io_in_4_payload    (io_i_delta_wt_5_4_payload  ), //i
    .io_in_5_valid      (io_i_delta_wt_5_5_valid    ), //i
    .io_in_5_ready      (cvt_wt_5_io_in_5_ready     ), //o
    .io_in_5_payload    (io_i_delta_wt_5_5_payload  ), //i
    .io_in_6_valid      (io_i_delta_wt_5_6_valid    ), //i
    .io_in_6_ready      (cvt_wt_5_io_in_6_ready     ), //o
    .io_in_6_payload    (io_i_delta_wt_5_6_payload  ), //i
    .io_in_7_valid      (io_i_delta_wt_5_7_valid    ), //i
    .io_in_7_ready      (cvt_wt_5_io_in_7_ready     ), //o
    .io_in_7_payload    (io_i_delta_wt_5_7_payload  ), //i
    .io_out_valid       (cvt_wt_5_io_out_valid      ), //o
    .io_out_ready       (cvt_wt_o_ready             ), //i
    .io_out_payload     (cvt_wt_5_io_out_payload    )  //o
  );
  cvt_stream2uint cvt_wt_6 (
    .io_in_0_valid      (io_i_delta_wt_6_0_valid    ), //i
    .io_in_0_ready      (cvt_wt_6_io_in_0_ready     ), //o
    .io_in_0_payload    (io_i_delta_wt_6_0_payload  ), //i
    .io_in_1_valid      (io_i_delta_wt_6_1_valid    ), //i
    .io_in_1_ready      (cvt_wt_6_io_in_1_ready     ), //o
    .io_in_1_payload    (io_i_delta_wt_6_1_payload  ), //i
    .io_in_2_valid      (io_i_delta_wt_6_2_valid    ), //i
    .io_in_2_ready      (cvt_wt_6_io_in_2_ready     ), //o
    .io_in_2_payload    (io_i_delta_wt_6_2_payload  ), //i
    .io_in_3_valid      (io_i_delta_wt_6_3_valid    ), //i
    .io_in_3_ready      (cvt_wt_6_io_in_3_ready     ), //o
    .io_in_3_payload    (io_i_delta_wt_6_3_payload  ), //i
    .io_in_4_valid      (io_i_delta_wt_6_4_valid    ), //i
    .io_in_4_ready      (cvt_wt_6_io_in_4_ready     ), //o
    .io_in_4_payload    (io_i_delta_wt_6_4_payload  ), //i
    .io_in_5_valid      (io_i_delta_wt_6_5_valid    ), //i
    .io_in_5_ready      (cvt_wt_6_io_in_5_ready     ), //o
    .io_in_5_payload    (io_i_delta_wt_6_5_payload  ), //i
    .io_in_6_valid      (io_i_delta_wt_6_6_valid    ), //i
    .io_in_6_ready      (cvt_wt_6_io_in_6_ready     ), //o
    .io_in_6_payload    (io_i_delta_wt_6_6_payload  ), //i
    .io_in_7_valid      (io_i_delta_wt_6_7_valid    ), //i
    .io_in_7_ready      (cvt_wt_6_io_in_7_ready     ), //o
    .io_in_7_payload    (io_i_delta_wt_6_7_payload  ), //i
    .io_out_valid       (cvt_wt_6_io_out_valid      ), //o
    .io_out_ready       (cvt_wt_o_ready             ), //i
    .io_out_payload     (cvt_wt_6_io_out_payload    )  //o
  );
  cvt_stream2uint cvt_wt_7 (
    .io_in_0_valid      (io_i_delta_wt_7_0_valid    ), //i
    .io_in_0_ready      (cvt_wt_7_io_in_0_ready     ), //o
    .io_in_0_payload    (io_i_delta_wt_7_0_payload  ), //i
    .io_in_1_valid      (io_i_delta_wt_7_1_valid    ), //i
    .io_in_1_ready      (cvt_wt_7_io_in_1_ready     ), //o
    .io_in_1_payload    (io_i_delta_wt_7_1_payload  ), //i
    .io_in_2_valid      (io_i_delta_wt_7_2_valid    ), //i
    .io_in_2_ready      (cvt_wt_7_io_in_2_ready     ), //o
    .io_in_2_payload    (io_i_delta_wt_7_2_payload  ), //i
    .io_in_3_valid      (io_i_delta_wt_7_3_valid    ), //i
    .io_in_3_ready      (cvt_wt_7_io_in_3_ready     ), //o
    .io_in_3_payload    (io_i_delta_wt_7_3_payload  ), //i
    .io_in_4_valid      (io_i_delta_wt_7_4_valid    ), //i
    .io_in_4_ready      (cvt_wt_7_io_in_4_ready     ), //o
    .io_in_4_payload    (io_i_delta_wt_7_4_payload  ), //i
    .io_in_5_valid      (io_i_delta_wt_7_5_valid    ), //i
    .io_in_5_ready      (cvt_wt_7_io_in_5_ready     ), //o
    .io_in_5_payload    (io_i_delta_wt_7_5_payload  ), //i
    .io_in_6_valid      (io_i_delta_wt_7_6_valid    ), //i
    .io_in_6_ready      (cvt_wt_7_io_in_6_ready     ), //o
    .io_in_6_payload    (io_i_delta_wt_7_6_payload  ), //i
    .io_in_7_valid      (io_i_delta_wt_7_7_valid    ), //i
    .io_in_7_ready      (cvt_wt_7_io_in_7_ready     ), //o
    .io_in_7_payload    (io_i_delta_wt_7_7_payload  ), //i
    .io_out_valid       (cvt_wt_7_io_out_valid      ), //o
    .io_out_ready       (cvt_wt_o_ready             ), //i
    .io_out_payload     (cvt_wt_7_io_out_payload    )  //o
  );
  cvt_stream2uint cvt_sgm (
    .io_in_0_valid      (io_i_sigma_0_valid      ), //i
    .io_in_0_ready      (cvt_sgm_io_in_0_ready   ), //o
    .io_in_0_payload    (io_i_sigma_0_payload    ), //i
    .io_in_1_valid      (io_i_sigma_1_valid      ), //i
    .io_in_1_ready      (cvt_sgm_io_in_1_ready   ), //o
    .io_in_1_payload    (io_i_sigma_1_payload    ), //i
    .io_in_2_valid      (io_i_sigma_2_valid      ), //i
    .io_in_2_ready      (cvt_sgm_io_in_2_ready   ), //o
    .io_in_2_payload    (io_i_sigma_2_payload    ), //i
    .io_in_3_valid      (io_i_sigma_3_valid      ), //i
    .io_in_3_ready      (cvt_sgm_io_in_3_ready   ), //o
    .io_in_3_payload    (io_i_sigma_3_payload    ), //i
    .io_in_4_valid      (io_i_sigma_4_valid      ), //i
    .io_in_4_ready      (cvt_sgm_io_in_4_ready   ), //o
    .io_in_4_payload    (io_i_sigma_4_payload    ), //i
    .io_in_5_valid      (io_i_sigma_5_valid      ), //i
    .io_in_5_ready      (cvt_sgm_io_in_5_ready   ), //o
    .io_in_5_payload    (io_i_sigma_5_payload    ), //i
    .io_in_6_valid      (io_i_sigma_6_valid      ), //i
    .io_in_6_ready      (cvt_sgm_io_in_6_ready   ), //o
    .io_in_6_payload    (io_i_sigma_6_payload    ), //i
    .io_in_7_valid      (io_i_sigma_7_valid      ), //i
    .io_in_7_ready      (cvt_sgm_io_in_7_ready   ), //o
    .io_in_7_payload    (io_i_sigma_7_payload    ), //i
    .io_out_valid       (cvt_sgm_io_out_valid    ), //o
    .io_out_ready       (cvt_sgm_io_out_ready    ), //i
    .io_out_payload     (cvt_sgm_io_out_payload  )  //o
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(dma_wrctrl_fsm_stateReg)
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_BOOT : dma_wrctrl_fsm_stateReg_string = "dma_wrctrl_fsm_BOOT           ";
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_IDLE : dma_wrctrl_fsm_stateReg_string = "dma_wrctrl_fsm_IDLE           ";
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_CHECK_GET_PARAM : dma_wrctrl_fsm_stateReg_string = "dma_wrctrl_fsm_CHECK_GET_PARAM";
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_WT : dma_wrctrl_fsm_stateReg_string = "dma_wrctrl_fsm_GET_DATA_WT    ";
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_SGM : dma_wrctrl_fsm_stateReg_string = "dma_wrctrl_fsm_GET_DATA_SGM   ";
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_AW : dma_wrctrl_fsm_stateReg_string = "dma_wrctrl_fsm_AW             ";
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_DELTA_WT : dma_wrctrl_fsm_stateReg_string = "dma_wrctrl_fsm_W_DELTA_WT     ";
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_SIGMA : dma_wrctrl_fsm_stateReg_string = "dma_wrctrl_fsm_W_SIGMA        ";
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_END : dma_wrctrl_fsm_stateReg_string = "dma_wrctrl_fsm_END            ";
      default : dma_wrctrl_fsm_stateReg_string = "??????????????????????????????";
    endcase
  end
  always @(*) begin
    case(dma_wrctrl_fsm_stateNext)
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_BOOT : dma_wrctrl_fsm_stateNext_string = "dma_wrctrl_fsm_BOOT           ";
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_IDLE : dma_wrctrl_fsm_stateNext_string = "dma_wrctrl_fsm_IDLE           ";
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_CHECK_GET_PARAM : dma_wrctrl_fsm_stateNext_string = "dma_wrctrl_fsm_CHECK_GET_PARAM";
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_WT : dma_wrctrl_fsm_stateNext_string = "dma_wrctrl_fsm_GET_DATA_WT    ";
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_SGM : dma_wrctrl_fsm_stateNext_string = "dma_wrctrl_fsm_GET_DATA_SGM   ";
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_AW : dma_wrctrl_fsm_stateNext_string = "dma_wrctrl_fsm_AW             ";
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_DELTA_WT : dma_wrctrl_fsm_stateNext_string = "dma_wrctrl_fsm_W_DELTA_WT     ";
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_SIGMA : dma_wrctrl_fsm_stateNext_string = "dma_wrctrl_fsm_W_SIGMA        ";
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_END : dma_wrctrl_fsm_stateNext_string = "dma_wrctrl_fsm_END            ";
      default : dma_wrctrl_fsm_stateNext_string = "??????????????????????????????";
    endcase
  end
  `endif

  assign io_i_delta_wt_0_0_ready = cvt_wt_0_io_in_0_ready;
  assign io_i_delta_wt_0_1_ready = cvt_wt_0_io_in_1_ready;
  assign io_i_delta_wt_0_2_ready = cvt_wt_0_io_in_2_ready;
  assign io_i_delta_wt_0_3_ready = cvt_wt_0_io_in_3_ready;
  assign io_i_delta_wt_0_4_ready = cvt_wt_0_io_in_4_ready;
  assign io_i_delta_wt_0_5_ready = cvt_wt_0_io_in_5_ready;
  assign io_i_delta_wt_0_6_ready = cvt_wt_0_io_in_6_ready;
  assign io_i_delta_wt_0_7_ready = cvt_wt_0_io_in_7_ready;
  assign io_i_delta_wt_1_0_ready = cvt_wt_1_io_in_0_ready;
  assign io_i_delta_wt_1_1_ready = cvt_wt_1_io_in_1_ready;
  assign io_i_delta_wt_1_2_ready = cvt_wt_1_io_in_2_ready;
  assign io_i_delta_wt_1_3_ready = cvt_wt_1_io_in_3_ready;
  assign io_i_delta_wt_1_4_ready = cvt_wt_1_io_in_4_ready;
  assign io_i_delta_wt_1_5_ready = cvt_wt_1_io_in_5_ready;
  assign io_i_delta_wt_1_6_ready = cvt_wt_1_io_in_6_ready;
  assign io_i_delta_wt_1_7_ready = cvt_wt_1_io_in_7_ready;
  assign io_i_delta_wt_2_0_ready = cvt_wt_2_io_in_0_ready;
  assign io_i_delta_wt_2_1_ready = cvt_wt_2_io_in_1_ready;
  assign io_i_delta_wt_2_2_ready = cvt_wt_2_io_in_2_ready;
  assign io_i_delta_wt_2_3_ready = cvt_wt_2_io_in_3_ready;
  assign io_i_delta_wt_2_4_ready = cvt_wt_2_io_in_4_ready;
  assign io_i_delta_wt_2_5_ready = cvt_wt_2_io_in_5_ready;
  assign io_i_delta_wt_2_6_ready = cvt_wt_2_io_in_6_ready;
  assign io_i_delta_wt_2_7_ready = cvt_wt_2_io_in_7_ready;
  assign io_i_delta_wt_3_0_ready = cvt_wt_3_io_in_0_ready;
  assign io_i_delta_wt_3_1_ready = cvt_wt_3_io_in_1_ready;
  assign io_i_delta_wt_3_2_ready = cvt_wt_3_io_in_2_ready;
  assign io_i_delta_wt_3_3_ready = cvt_wt_3_io_in_3_ready;
  assign io_i_delta_wt_3_4_ready = cvt_wt_3_io_in_4_ready;
  assign io_i_delta_wt_3_5_ready = cvt_wt_3_io_in_5_ready;
  assign io_i_delta_wt_3_6_ready = cvt_wt_3_io_in_6_ready;
  assign io_i_delta_wt_3_7_ready = cvt_wt_3_io_in_7_ready;
  assign io_i_delta_wt_4_0_ready = cvt_wt_4_io_in_0_ready;
  assign io_i_delta_wt_4_1_ready = cvt_wt_4_io_in_1_ready;
  assign io_i_delta_wt_4_2_ready = cvt_wt_4_io_in_2_ready;
  assign io_i_delta_wt_4_3_ready = cvt_wt_4_io_in_3_ready;
  assign io_i_delta_wt_4_4_ready = cvt_wt_4_io_in_4_ready;
  assign io_i_delta_wt_4_5_ready = cvt_wt_4_io_in_5_ready;
  assign io_i_delta_wt_4_6_ready = cvt_wt_4_io_in_6_ready;
  assign io_i_delta_wt_4_7_ready = cvt_wt_4_io_in_7_ready;
  assign io_i_delta_wt_5_0_ready = cvt_wt_5_io_in_0_ready;
  assign io_i_delta_wt_5_1_ready = cvt_wt_5_io_in_1_ready;
  assign io_i_delta_wt_5_2_ready = cvt_wt_5_io_in_2_ready;
  assign io_i_delta_wt_5_3_ready = cvt_wt_5_io_in_3_ready;
  assign io_i_delta_wt_5_4_ready = cvt_wt_5_io_in_4_ready;
  assign io_i_delta_wt_5_5_ready = cvt_wt_5_io_in_5_ready;
  assign io_i_delta_wt_5_6_ready = cvt_wt_5_io_in_6_ready;
  assign io_i_delta_wt_5_7_ready = cvt_wt_5_io_in_7_ready;
  assign io_i_delta_wt_6_0_ready = cvt_wt_6_io_in_0_ready;
  assign io_i_delta_wt_6_1_ready = cvt_wt_6_io_in_1_ready;
  assign io_i_delta_wt_6_2_ready = cvt_wt_6_io_in_2_ready;
  assign io_i_delta_wt_6_3_ready = cvt_wt_6_io_in_3_ready;
  assign io_i_delta_wt_6_4_ready = cvt_wt_6_io_in_4_ready;
  assign io_i_delta_wt_6_5_ready = cvt_wt_6_io_in_5_ready;
  assign io_i_delta_wt_6_6_ready = cvt_wt_6_io_in_6_ready;
  assign io_i_delta_wt_6_7_ready = cvt_wt_6_io_in_7_ready;
  assign io_i_delta_wt_7_0_ready = cvt_wt_7_io_in_0_ready;
  assign io_i_delta_wt_7_1_ready = cvt_wt_7_io_in_1_ready;
  assign io_i_delta_wt_7_2_ready = cvt_wt_7_io_in_2_ready;
  assign io_i_delta_wt_7_3_ready = cvt_wt_7_io_in_3_ready;
  assign io_i_delta_wt_7_4_ready = cvt_wt_7_io_in_4_ready;
  assign io_i_delta_wt_7_5_ready = cvt_wt_7_io_in_5_ready;
  assign io_i_delta_wt_7_6_ready = cvt_wt_7_io_in_6_ready;
  assign io_i_delta_wt_7_7_ready = cvt_wt_7_io_in_7_ready;
  always @(*) begin
    cvt_wt_o_ready = 1'b0;
    case(dma_wrctrl_fsm_stateReg)
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_IDLE : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_CHECK_GET_PARAM : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_WT : begin
        cvt_wt_o_ready = 1'b1;
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_SGM : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_AW : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_DELTA_WT : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_SIGMA : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_END : begin
      end
      default : begin
      end
    endcase
  end

  assign cvt_wt_o_valid = (((((((cvt_wt_0_io_out_valid && cvt_wt_1_io_out_valid) && cvt_wt_2_io_out_valid) && cvt_wt_3_io_out_valid) && cvt_wt_4_io_out_valid) && cvt_wt_5_io_out_valid) && cvt_wt_6_io_out_valid) && cvt_wt_7_io_out_valid);
  always @(*) begin
    cvt_sgm_io_out_ready = 1'b0;
    case(dma_wrctrl_fsm_stateReg)
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_IDLE : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_CHECK_GET_PARAM : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_WT : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_SGM : begin
        cvt_sgm_io_out_ready = 1'b1;
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_AW : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_DELTA_WT : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_SIGMA : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_END : begin
      end
      default : begin
      end
    endcase
  end

  assign io_i_sigma_0_ready = cvt_sgm_io_in_0_ready;
  assign io_i_sigma_1_ready = cvt_sgm_io_in_1_ready;
  assign io_i_sigma_2_ready = cvt_sgm_io_in_2_ready;
  assign io_i_sigma_3_ready = cvt_sgm_io_in_3_ready;
  assign io_i_sigma_4_ready = cvt_sgm_io_in_4_ready;
  assign io_i_sigma_5_ready = cvt_sgm_io_in_5_ready;
  assign io_i_sigma_6_ready = cvt_sgm_io_in_6_ready;
  assign io_i_sigma_7_ready = cvt_sgm_io_in_7_ready;
  always @(*) begin
    io_axim_aw_valid = 1'b0;
    case(dma_wrctrl_fsm_stateReg)
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_IDLE : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_CHECK_GET_PARAM : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_WT : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_SGM : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_AW : begin
        io_axim_aw_valid = 1'b1;
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_DELTA_WT : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_SIGMA : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_END : begin
      end
      default : begin
      end
    endcase
  end

  assign io_axim_aw_payload_id = 6'h0;
  assign io_axim_aw_payload_addr = addr;
  assign io_axim_aw_payload_burst = 2'b01;
  assign io_axim_aw_payload_size = 3'b101;
  assign io_axim_aw_payload_len = (burst_len - 8'h01);
  always @(*) begin
    io_axim_w_valid = 1'b0;
    case(dma_wrctrl_fsm_stateReg)
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_IDLE : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_CHECK_GET_PARAM : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_WT : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_SGM : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_AW : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_DELTA_WT : begin
        io_axim_w_valid = 1'b1;
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_SIGMA : begin
        io_axim_w_valid = 1'b1;
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_END : begin
      end
      default : begin
      end
    endcase
  end

  assign io_axim_w_payload_last = (burst_cnt == _zz_io_axim_w_payload_last);
  assign when_dmaWriteCtrl_l73 = (io_is_delta_wt == 1'b1);
  always @(*) begin
    if(when_dmaWriteCtrl_l73) begin
      io_axim_w_payload_data = data_wt_0;
    end else begin
      io_axim_w_payload_data = data_sgm;
    end
  end

  assign io_axim_w_payload_strb = (~ 32'h0);
  assign io_axim_b_ready = 1'b0;
  always @(*) begin
    io_cfg_ready = 1'b0;
    case(dma_wrctrl_fsm_stateReg)
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_IDLE : begin
        io_cfg_ready = 1'b1;
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_CHECK_GET_PARAM : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_WT : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_SGM : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_AW : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_DELTA_WT : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_SIGMA : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_END : begin
      end
      default : begin
      end
    endcase
  end

  assign dma_wrctrl_fsm_wantExit = 1'b0;
  always @(*) begin
    dma_wrctrl_fsm_wantStart = 1'b0;
    case(dma_wrctrl_fsm_stateReg)
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_IDLE : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_CHECK_GET_PARAM : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_WT : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_SGM : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_AW : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_DELTA_WT : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_SIGMA : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_END : begin
      end
      default : begin
        dma_wrctrl_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign dma_wrctrl_fsm_wantKill = 1'b0;
  always @(*) begin
    dma_wrctrl_fsm_stateNext = dma_wrctrl_fsm_stateReg;
    case(dma_wrctrl_fsm_stateReg)
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_IDLE : begin
        if(when_dmaWriteCtrl_l104) begin
          dma_wrctrl_fsm_stateNext = `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_CHECK_GET_PARAM;
        end
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_CHECK_GET_PARAM : begin
        if(when_dmaWriteCtrl_l110) begin
          dma_wrctrl_fsm_stateNext = `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_WT;
        end else begin
          dma_wrctrl_fsm_stateNext = `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_SGM;
        end
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_WT : begin
        if(when_dmaWriteCtrl_l123) begin
          dma_wrctrl_fsm_stateNext = `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_AW;
        end
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_SGM : begin
        if(when_dmaWriteCtrl_l160) begin
          dma_wrctrl_fsm_stateNext = `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_AW;
        end
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_AW : begin
        if(when_dmaWriteCtrl_l169) begin
          dma_wrctrl_fsm_stateNext = `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_DELTA_WT;
        end
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_DELTA_WT : begin
        if(when_dmaWriteCtrl_l176) begin
          if(io_axim_w_payload_last) begin
            if(when_dmaWriteCtrl_l186) begin
              dma_wrctrl_fsm_stateNext = `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_END;
            end else begin
              dma_wrctrl_fsm_stateNext = `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_AW;
            end
          end
        end
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_SIGMA : begin
        if(when_dmaWriteCtrl_l199) begin
          dma_wrctrl_fsm_stateNext = `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_END;
        end
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_END : begin
        dma_wrctrl_fsm_stateNext = `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_IDLE;
      end
      default : begin
      end
    endcase
    if(dma_wrctrl_fsm_wantStart) begin
      dma_wrctrl_fsm_stateNext = `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_IDLE;
    end
    if(dma_wrctrl_fsm_wantKill) begin
      dma_wrctrl_fsm_stateNext = `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_BOOT;
    end
  end

  assign when_dmaWriteCtrl_l101 = (io_cfg_valid && io_cfg_ready);
  assign when_dmaWriteCtrl_l104 = (io_enable == 1'b1);
  assign when_dmaWriteCtrl_l110 = (io_is_delta_wt == 1'b1);
  assign when_dmaWriteCtrl_l123 = ((cvt_wt_o_ready == 1'b1) && (cvt_wt_o_valid == 1'b1));
  assign when_dmaWriteCtrl_l160 = ((cvt_sgm_io_out_valid == 1'b1) && (cvt_sgm_io_out_ready == 1'b1));
  assign when_dmaWriteCtrl_l169 = (io_axim_aw_valid && io_axim_aw_ready);
  assign when_dmaWriteCtrl_l176 = (io_axim_w_valid && io_axim_w_ready);
  assign when_dmaWriteCtrl_l186 = (burst_cnt == 8'h08);
  assign when_dmaWriteCtrl_l199 = (io_axim_w_valid && io_axim_w_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      addr <= 32'h0;
      burst_len <= 8'h0;
      burst_cnt <= 8'h0;
      data_wt_0 <= 256'h0;
      data_wt_1 <= 256'h0;
      data_wt_2 <= 256'h0;
      data_wt_3 <= 256'h0;
      data_wt_4 <= 256'h0;
      data_wt_5 <= 256'h0;
      data_wt_6 <= 256'h0;
      data_wt_7 <= 256'h0;
      data_sgm <= 256'h0;
      wt_cnt <= 4'b0000;
      dma_wrctrl_fsm_stateReg <= `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_BOOT;
    end else begin
      dma_wrctrl_fsm_stateReg <= dma_wrctrl_fsm_stateNext;
      case(dma_wrctrl_fsm_stateReg)
        `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_IDLE : begin
        end
        `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_CHECK_GET_PARAM : begin
          if(when_dmaWriteCtrl_l110) begin
            addr <= cfg_rd_dtBaseAddr;
            burst_len <= 8'h08;
          end else begin
            addr <= cfg_rd_wtBaseAddr;
            burst_len <= 8'h01;
          end
        end
        `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_WT : begin
          if(when_dmaWriteCtrl_l123) begin
            case(burst_cnt)
              8'h0 : begin
                data_wt_0 <= cvt_wt_0_io_out_payload;
              end
              8'h01 : begin
                data_wt_1 <= cvt_wt_1_io_out_payload;
              end
              8'h02 : begin
                data_wt_2 <= cvt_wt_2_io_out_payload;
              end
              8'h03 : begin
                data_wt_3 <= cvt_wt_3_io_out_payload;
              end
              8'h04 : begin
                data_wt_4 <= cvt_wt_4_io_out_payload;
              end
              8'h05 : begin
                data_wt_5 <= cvt_wt_5_io_out_payload;
              end
              8'h06 : begin
                data_wt_6 <= cvt_wt_6_io_out_payload;
              end
              8'h07 : begin
                data_wt_7 <= cvt_wt_7_io_out_payload;
              end
              default : begin
              end
            endcase
          end
        end
        `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_SGM : begin
          if(when_dmaWriteCtrl_l160) begin
            data_sgm <= cvt_sgm_io_out_payload;
          end
        end
        `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_AW : begin
        end
        `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_DELTA_WT : begin
          if(when_dmaWriteCtrl_l176) begin
            data_wt_0 <= data_wt_1;
            data_wt_1 <= data_wt_2;
            data_wt_2 <= data_wt_3;
            data_wt_3 <= data_wt_4;
            data_wt_4 <= data_wt_5;
            data_wt_5 <= data_wt_6;
            data_wt_6 <= data_wt_7;
            wt_cnt <= (wt_cnt + 4'b0001);
            if(io_axim_w_payload_last) begin
              wt_cnt <= 4'b0000;
              if(!when_dmaWriteCtrl_l186) begin
                burst_cnt <= (burst_cnt + 8'h01);
                addr <= (addr + 32'h00000020);
              end
            end
          end
        end
        `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_SIGMA : begin
        end
        `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_END : begin
        end
        default : begin
        end
      endcase
    end
  end

  always @(posedge clk) begin
    case(dma_wrctrl_fsm_stateReg)
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_IDLE : begin
        if(when_dmaWriteCtrl_l101) begin
          cfg_rd_dtBaseAddr <= io_cfg_payload_rd_dtBaseAddr;
          cfg_rd_wtBaseAddr <= io_cfg_payload_rd_wtBaseAddr;
          cfg_wr_delta_wt_BaseAddr <= io_cfg_payload_wr_delta_wt_BaseAddr;
          cfg_wr_sigma_BaseAddr <= io_cfg_payload_wr_sigma_BaseAddr;
          cfg_dtWidth <= io_cfg_payload_dtWidth;
          cfg_dtHeight <= io_cfg_payload_dtHeight;
          cfg_wtWidth <= io_cfg_payload_wtWidth;
          cfg_wtHeight <= io_cfg_payload_wtHeight;
          cfg_oWidth <= io_cfg_payload_oWidth;
          cfg_oHeight <= io_cfg_payload_oHeight;
        end
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_CHECK_GET_PARAM : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_WT : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_GET_DATA_SGM : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_AW : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_DELTA_WT : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_W_SIGMA : begin
      end
      `dma_wrctrl_fsm_enumDefinition_binary_sequential_dma_wrctrl_fsm_END : begin
      end
      default : begin
      end
    endcase
  end


endmodule

module dmaReadCtrl (
  output              axim_ar_valid,
  input               axim_ar_ready,
  output     [31:0]   axim_ar_payload_addr,
  output     [5:0]    axim_ar_payload_id,
  output     [7:0]    axim_ar_payload_len,
  output     [2:0]    axim_ar_payload_size,
  output     [1:0]    axim_ar_payload_burst,
  input               axim_r_valid,
  output              axim_r_ready,
  input      [255:0]  axim_r_payload_data,
  input      [5:0]    axim_r_payload_id,
  input      [1:0]    axim_r_payload_resp,
  input               axim_r_payload_last,
  input               cfg_valid,
  output reg          cfg_ready,
  input      [31:0]   cfg_payload_rd_dtBaseAddr,
  input      [31:0]   cfg_payload_rd_wtBaseAddr,
  input      [31:0]   cfg_payload_wr_delta_wt_BaseAddr,
  input      [31:0]   cfg_payload_wr_sigma_BaseAddr,
  input      [15:0]   cfg_payload_dtWidth,
  input      [15:0]   cfg_payload_dtHeight,
  input      [15:0]   cfg_payload_wtWidth,
  input      [15:0]   cfg_payload_wtHeight,
  input      [15:0]   cfg_payload_oWidth,
  input      [15:0]   cfg_payload_oHeight,
  output              output_valid,
  input               output_ready,
  output     [255:0]  output_payload,
  input               enable,
  output reg          isIdle,
  output              is_dtwt_mux,
  input               clk,
  input               reset
);
  reg                 dma_rd_enable;
  wire                dma_rd_axim_ar_valid;
  wire       [31:0]   dma_rd_axim_ar_payload_addr;
  wire       [5:0]    dma_rd_axim_ar_payload_id;
  wire       [7:0]    dma_rd_axim_ar_payload_len;
  wire       [2:0]    dma_rd_axim_ar_payload_size;
  wire       [1:0]    dma_rd_axim_ar_payload_burst;
  wire                dma_rd_axim_r_ready;
  wire                dma_rd_output_valid;
  wire       [255:0]  dma_rd_output_payload;
  wire                dma_rd_isIdle;
  reg        [31:0]   par_rd_dtBaseAddr;
  reg        [31:0]   par_rd_wtBaseAddr;
  reg        [31:0]   par_wr_delta_wt_BaseAddr;
  reg        [31:0]   par_wr_sigma_BaseAddr;
  reg        [15:0]   par_dtWidth;
  reg        [15:0]   par_dtHeight;
  reg        [15:0]   par_wtWidth;
  reg        [15:0]   par_wtHeight;
  reg        [15:0]   par_oWidth;
  reg        [15:0]   par_oHeight;
  reg        [7:0]    burstlen;
  reg        [31:0]   BaseAddr;
  reg        [15:0]   dt_wcnt;
  reg        [15:0]   dt_vcnt;
  reg        [15:0]   wt_wcnt;
  reg        [15:0]   wt_vcnt;
  reg                 is_dtwt_mux_1;
  wire                dma_rdctrl_fsm_wantExit;
  reg                 dma_rdctrl_fsm_wantStart;
  wire                dma_rdctrl_fsm_wantKill;
  reg        `dma_rdctrl_fsm_enumDefinition_binary_sequential_type dma_rdctrl_fsm_stateReg;
  reg        `dma_rdctrl_fsm_enumDefinition_binary_sequential_type dma_rdctrl_fsm_stateNext;
  wire                when_dmaReadCtrl_l65;
  wire                when_dmaReadCtrl_l68;
  wire                when_dmaReadCtrl_l82;
  wire                when_dmaReadCtrl_l84;
  wire                when_dmaReadCtrl_l95;
  wire                when_dmaReadCtrl_l96;
  wire                when_dmaReadCtrl_l108;
  wire                when_dmaReadCtrl_l111;
  wire                when_dmaReadCtrl_l123;
  wire                when_dmaReadCtrl_l124;
  `ifndef SYNTHESIS
  reg [191:0] dma_rdctrl_fsm_stateReg_string;
  reg [191:0] dma_rdctrl_fsm_stateNext_string;
  `endif


  dma_read dma_rd (
    .axim_ar_valid            (dma_rd_axim_ar_valid          ), //o
    .axim_ar_ready            (axim_ar_ready                 ), //i
    .axim_ar_payload_addr     (dma_rd_axim_ar_payload_addr   ), //o
    .axim_ar_payload_id       (dma_rd_axim_ar_payload_id     ), //o
    .axim_ar_payload_len      (dma_rd_axim_ar_payload_len    ), //o
    .axim_ar_payload_size     (dma_rd_axim_ar_payload_size   ), //o
    .axim_ar_payload_burst    (dma_rd_axim_ar_payload_burst  ), //o
    .axim_r_valid             (axim_r_valid                  ), //i
    .axim_r_ready             (dma_rd_axim_r_ready           ), //o
    .axim_r_payload_data      (axim_r_payload_data           ), //i
    .axim_r_payload_id        (axim_r_payload_id             ), //i
    .axim_r_payload_resp      (axim_r_payload_resp           ), //i
    .axim_r_payload_last      (axim_r_payload_last           ), //i
    .rd_para_BaseAddr         (BaseAddr                      ), //i
    .rd_para_burstlen         (burstlen                      ), //i
    .output_valid             (dma_rd_output_valid           ), //o
    .output_ready             (output_ready                  ), //i
    .output_payload           (dma_rd_output_payload         ), //o
    .enable                   (dma_rd_enable                 ), //i
    .isIdle                   (dma_rd_isIdle                 ), //o
    .clk                      (clk                           ), //i
    .reset                    (reset                         )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(dma_rdctrl_fsm_stateReg)
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_BOOT : dma_rdctrl_fsm_stateReg_string = "dma_rdctrl_fsm_BOOT     ";
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_IDLE : dma_rdctrl_fsm_stateReg_string = "dma_rdctrl_fsm_IDLE     ";
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_GET_PARAM : dma_rdctrl_fsm_stateReg_string = "dma_rdctrl_fsm_GET_PARAM";
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_DT : dma_rdctrl_fsm_stateReg_string = "dma_rdctrl_fsm_READ_DT  ";
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_DT : dma_rdctrl_fsm_stateReg_string = "dma_rdctrl_fsm_CHECK_DT ";
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_WT : dma_rdctrl_fsm_stateReg_string = "dma_rdctrl_fsm_READ_WT  ";
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_WT : dma_rdctrl_fsm_stateReg_string = "dma_rdctrl_fsm_CHECK_WT ";
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_END : dma_rdctrl_fsm_stateReg_string = "dma_rdctrl_fsm_END      ";
      default : dma_rdctrl_fsm_stateReg_string = "????????????????????????";
    endcase
  end
  always @(*) begin
    case(dma_rdctrl_fsm_stateNext)
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_BOOT : dma_rdctrl_fsm_stateNext_string = "dma_rdctrl_fsm_BOOT     ";
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_IDLE : dma_rdctrl_fsm_stateNext_string = "dma_rdctrl_fsm_IDLE     ";
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_GET_PARAM : dma_rdctrl_fsm_stateNext_string = "dma_rdctrl_fsm_GET_PARAM";
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_DT : dma_rdctrl_fsm_stateNext_string = "dma_rdctrl_fsm_READ_DT  ";
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_DT : dma_rdctrl_fsm_stateNext_string = "dma_rdctrl_fsm_CHECK_DT ";
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_WT : dma_rdctrl_fsm_stateNext_string = "dma_rdctrl_fsm_READ_WT  ";
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_WT : dma_rdctrl_fsm_stateNext_string = "dma_rdctrl_fsm_CHECK_WT ";
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_END : dma_rdctrl_fsm_stateNext_string = "dma_rdctrl_fsm_END      ";
      default : dma_rdctrl_fsm_stateNext_string = "????????????????????????";
    endcase
  end
  `endif

  assign is_dtwt_mux = is_dtwt_mux_1;
  always @(*) begin
    isIdle = 1'b0;
    case(dma_rdctrl_fsm_stateReg)
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_IDLE : begin
        isIdle = 1'b1;
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_GET_PARAM : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_DT : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_DT : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_WT : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_WT : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_END : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    cfg_ready = 1'b0;
    case(dma_rdctrl_fsm_stateReg)
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_IDLE : begin
        cfg_ready = 1'b1;
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_GET_PARAM : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_DT : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_DT : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_WT : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_WT : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_END : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    dma_rd_enable = 1'b0;
    case(dma_rdctrl_fsm_stateReg)
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_IDLE : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_GET_PARAM : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_DT : begin
        if(when_dmaReadCtrl_l82) begin
          dma_rd_enable = 1'b1;
        end
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_DT : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_WT : begin
        if(when_dmaReadCtrl_l108) begin
          dma_rd_enable = 1'b1;
        end
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_WT : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_END : begin
      end
      default : begin
      end
    endcase
  end

  assign axim_ar_valid = dma_rd_axim_ar_valid;
  assign axim_ar_payload_addr = dma_rd_axim_ar_payload_addr;
  assign axim_ar_payload_id = dma_rd_axim_ar_payload_id;
  assign axim_ar_payload_len = dma_rd_axim_ar_payload_len;
  assign axim_ar_payload_size = dma_rd_axim_ar_payload_size;
  assign axim_ar_payload_burst = dma_rd_axim_ar_payload_burst;
  assign axim_r_ready = dma_rd_axim_r_ready;
  assign output_valid = dma_rd_output_valid;
  assign output_payload = dma_rd_output_payload;
  assign dma_rdctrl_fsm_wantExit = 1'b0;
  always @(*) begin
    dma_rdctrl_fsm_wantStart = 1'b0;
    case(dma_rdctrl_fsm_stateReg)
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_IDLE : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_GET_PARAM : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_DT : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_DT : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_WT : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_WT : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_END : begin
      end
      default : begin
        dma_rdctrl_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign dma_rdctrl_fsm_wantKill = 1'b0;
  always @(*) begin
    dma_rdctrl_fsm_stateNext = dma_rdctrl_fsm_stateReg;
    case(dma_rdctrl_fsm_stateReg)
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_IDLE : begin
        if(when_dmaReadCtrl_l68) begin
          dma_rdctrl_fsm_stateNext = `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_GET_PARAM;
        end
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_GET_PARAM : begin
        dma_rdctrl_fsm_stateNext = `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_DT;
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_DT : begin
        if(when_dmaReadCtrl_l82) begin
          dma_rdctrl_fsm_stateNext = `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_DT;
        end
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_DT : begin
        if(when_dmaReadCtrl_l95) begin
          if(when_dmaReadCtrl_l96) begin
            dma_rdctrl_fsm_stateNext = `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_WT;
          end else begin
            dma_rdctrl_fsm_stateNext = `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_DT;
          end
        end
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_WT : begin
        if(when_dmaReadCtrl_l108) begin
          dma_rdctrl_fsm_stateNext = `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_WT;
        end
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_WT : begin
        if(when_dmaReadCtrl_l123) begin
          if(when_dmaReadCtrl_l124) begin
            dma_rdctrl_fsm_stateNext = `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_END;
          end else begin
            dma_rdctrl_fsm_stateNext = `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_WT;
          end
        end
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_END : begin
        dma_rdctrl_fsm_stateNext = `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_IDLE;
      end
      default : begin
      end
    endcase
    if(dma_rdctrl_fsm_wantStart) begin
      dma_rdctrl_fsm_stateNext = `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_IDLE;
    end
    if(dma_rdctrl_fsm_wantKill) begin
      dma_rdctrl_fsm_stateNext = `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_BOOT;
    end
  end

  assign when_dmaReadCtrl_l65 = (cfg_valid && cfg_ready);
  assign when_dmaReadCtrl_l68 = (enable == 1'b1);
  assign when_dmaReadCtrl_l82 = (dma_rd_isIdle == 1'b1);
  assign when_dmaReadCtrl_l84 = (dt_wcnt == par_dtWidth);
  assign when_dmaReadCtrl_l95 = (dma_rd_isIdle == 1'b1);
  assign when_dmaReadCtrl_l96 = ((dt_vcnt == par_dtHeight) && (dt_wcnt == par_dtWidth));
  assign when_dmaReadCtrl_l108 = (dma_rd_isIdle == 1'b1);
  assign when_dmaReadCtrl_l111 = (wt_wcnt == par_wtWidth);
  assign when_dmaReadCtrl_l123 = (dma_rd_isIdle == 1'b1);
  assign when_dmaReadCtrl_l124 = ((wt_vcnt == par_wtHeight) && (dt_wcnt == par_wtWidth));
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      burstlen <= 8'h0;
      BaseAddr <= 32'h0;
      dt_wcnt <= 16'h0;
      dt_vcnt <= 16'h0;
      wt_wcnt <= 16'h0;
      wt_vcnt <= 16'h0;
      is_dtwt_mux_1 <= 1'b0;
      dma_rdctrl_fsm_stateReg <= `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_BOOT;
    end else begin
      dma_rdctrl_fsm_stateReg <= dma_rdctrl_fsm_stateNext;
      case(dma_rdctrl_fsm_stateReg)
        `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_IDLE : begin
          dt_wcnt <= 16'h0;
          dt_vcnt <= 16'h0;
          wt_wcnt <= 16'h0;
          wt_vcnt <= 16'h0;
        end
        `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_GET_PARAM : begin
          is_dtwt_mux_1 <= 1'b1;
        end
        `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_DT : begin
          burstlen <= par_dtWidth[7:0];
          BaseAddr <= par_rd_dtBaseAddr;
          if(when_dmaReadCtrl_l82) begin
            if(when_dmaReadCtrl_l84) begin
              dt_vcnt <= (dt_vcnt + 16'h0001);
              dt_wcnt <= 16'h0;
            end else begin
              dt_wcnt <= (dt_wcnt + 16'h0001);
            end
          end
        end
        `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_DT : begin
          if(when_dmaReadCtrl_l95) begin
            if(when_dmaReadCtrl_l96) begin
              burstlen <= par_wtWidth[7:0];
              BaseAddr <= par_rd_wtBaseAddr;
              is_dtwt_mux_1 <= 1'b0;
            end
          end
        end
        `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_WT : begin
          if(when_dmaReadCtrl_l108) begin
            if(when_dmaReadCtrl_l111) begin
              wt_vcnt <= (wt_vcnt + 16'h0001);
              wt_wcnt <= 16'h0;
            end else begin
              wt_wcnt <= (wt_wcnt + 16'h0001);
            end
          end
        end
        `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_WT : begin
        end
        `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_END : begin
        end
        default : begin
        end
      endcase
    end
  end

  always @(posedge clk) begin
    case(dma_rdctrl_fsm_stateReg)
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_IDLE : begin
        if(when_dmaReadCtrl_l65) begin
          par_rd_dtBaseAddr <= cfg_payload_rd_dtBaseAddr;
          par_rd_wtBaseAddr <= cfg_payload_rd_wtBaseAddr;
          par_wr_delta_wt_BaseAddr <= cfg_payload_wr_delta_wt_BaseAddr;
          par_wr_sigma_BaseAddr <= cfg_payload_wr_sigma_BaseAddr;
          par_dtWidth <= cfg_payload_dtWidth;
          par_dtHeight <= cfg_payload_dtHeight;
          par_wtWidth <= cfg_payload_wtWidth;
          par_wtHeight <= cfg_payload_wtHeight;
          par_oWidth <= cfg_payload_oWidth;
          par_oHeight <= cfg_payload_oHeight;
        end
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_GET_PARAM : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_DT : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_DT : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_READ_WT : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_CHECK_WT : begin
      end
      `dma_rdctrl_fsm_enumDefinition_binary_sequential_dma_rdctrl_fsm_END : begin
      end
      default : begin
      end
    endcase
  end


endmodule

//atom_adder replaced by atom_adder

//atom_adder replaced by atom_adder

//atom_adder replaced by atom_adder

//atom_adder replaced by atom_adder

//atom_adder replaced by atom_adder

//atom_adder replaced by atom_adder

//atom_adder replaced by atom_adder

module atom_adder (
  input               io_in_0_valid,
  output              io_in_0_ready,
  input      [31:0]   io_in_0_payload,
  input               io_in_1_valid,
  output              io_in_1_ready,
  input      [31:0]   io_in_1_payload,
  input               io_in_2_valid,
  output              io_in_2_ready,
  input      [31:0]   io_in_2_payload,
  input               io_in_3_valid,
  output              io_in_3_ready,
  input      [31:0]   io_in_3_payload,
  input               io_in_4_valid,
  output              io_in_4_ready,
  input      [31:0]   io_in_4_payload,
  input               io_in_5_valid,
  output              io_in_5_ready,
  input      [31:0]   io_in_5_payload,
  input               io_in_6_valid,
  output              io_in_6_ready,
  input      [31:0]   io_in_6_payload,
  input               io_in_7_valid,
  output              io_in_7_ready,
  input      [31:0]   io_in_7_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               clk
);
  wire                fp_adder_l0_0_ina_ready;
  wire                fp_adder_l0_0_inb_ready;
  wire                fp_adder_l0_0_out_valid;
  wire       [31:0]   fp_adder_l0_0_out_payload;
  wire                fp_adder_l0_1_ina_ready;
  wire                fp_adder_l0_1_inb_ready;
  wire                fp_adder_l0_1_out_valid;
  wire       [31:0]   fp_adder_l0_1_out_payload;
  wire                fp_adder_l0_2_ina_ready;
  wire                fp_adder_l0_2_inb_ready;
  wire                fp_adder_l0_2_out_valid;
  wire       [31:0]   fp_adder_l0_2_out_payload;
  wire                fp_adder_l0_3_ina_ready;
  wire                fp_adder_l0_3_inb_ready;
  wire                fp_adder_l0_3_out_valid;
  wire       [31:0]   fp_adder_l0_3_out_payload;
  wire                fp_adder_l1_0_ina_ready;
  wire                fp_adder_l1_0_inb_ready;
  wire                fp_adder_l1_0_out_valid;
  wire       [31:0]   fp_adder_l1_0_out_payload;
  wire                fp_adder_l1_1_ina_ready;
  wire                fp_adder_l1_1_inb_ready;
  wire                fp_adder_l1_1_out_valid;
  wire       [31:0]   fp_adder_l1_1_out_payload;
  wire                fp_adder_l2_ina_ready;
  wire                fp_adder_l2_inb_ready;
  wire                fp_adder_l2_out_valid;
  wire       [31:0]   fp_adder_l2_out_payload;

  fp_adder fp_adder_l0_0 (
    .ina_valid      (io_in_0_valid              ), //i
    .ina_ready      (fp_adder_l0_0_ina_ready    ), //o
    .ina_payload    (io_in_0_payload            ), //i
    .inb_valid      (io_in_1_valid              ), //i
    .inb_ready      (fp_adder_l0_0_inb_ready    ), //o
    .inb_payload    (io_in_1_payload            ), //i
    .out_valid      (fp_adder_l0_0_out_valid    ), //o
    .out_ready      (fp_adder_l1_0_ina_ready    ), //i
    .out_payload    (fp_adder_l0_0_out_payload  ), //o
    .clk            (clk                        )  //i
  );
  fp_adder fp_adder_l0_1 (
    .ina_valid      (io_in_2_valid              ), //i
    .ina_ready      (fp_adder_l0_1_ina_ready    ), //o
    .ina_payload    (io_in_2_payload            ), //i
    .inb_valid      (io_in_3_valid              ), //i
    .inb_ready      (fp_adder_l0_1_inb_ready    ), //o
    .inb_payload    (io_in_3_payload            ), //i
    .out_valid      (fp_adder_l0_1_out_valid    ), //o
    .out_ready      (fp_adder_l1_0_inb_ready    ), //i
    .out_payload    (fp_adder_l0_1_out_payload  ), //o
    .clk            (clk                        )  //i
  );
  fp_adder fp_adder_l0_2 (
    .ina_valid      (io_in_4_valid              ), //i
    .ina_ready      (fp_adder_l0_2_ina_ready    ), //o
    .ina_payload    (io_in_4_payload            ), //i
    .inb_valid      (io_in_5_valid              ), //i
    .inb_ready      (fp_adder_l0_2_inb_ready    ), //o
    .inb_payload    (io_in_5_payload            ), //i
    .out_valid      (fp_adder_l0_2_out_valid    ), //o
    .out_ready      (fp_adder_l1_1_ina_ready    ), //i
    .out_payload    (fp_adder_l0_2_out_payload  ), //o
    .clk            (clk                        )  //i
  );
  fp_adder fp_adder_l0_3 (
    .ina_valid      (io_in_6_valid              ), //i
    .ina_ready      (fp_adder_l0_3_ina_ready    ), //o
    .ina_payload    (io_in_6_payload            ), //i
    .inb_valid      (io_in_7_valid              ), //i
    .inb_ready      (fp_adder_l0_3_inb_ready    ), //o
    .inb_payload    (io_in_7_payload            ), //i
    .out_valid      (fp_adder_l0_3_out_valid    ), //o
    .out_ready      (fp_adder_l1_1_inb_ready    ), //i
    .out_payload    (fp_adder_l0_3_out_payload  ), //o
    .clk            (clk                        )  //i
  );
  fp_adder fp_adder_l1_0 (
    .ina_valid      (fp_adder_l0_0_out_valid    ), //i
    .ina_ready      (fp_adder_l1_0_ina_ready    ), //o
    .ina_payload    (fp_adder_l0_0_out_payload  ), //i
    .inb_valid      (fp_adder_l0_1_out_valid    ), //i
    .inb_ready      (fp_adder_l1_0_inb_ready    ), //o
    .inb_payload    (fp_adder_l0_1_out_payload  ), //i
    .out_valid      (fp_adder_l1_0_out_valid    ), //o
    .out_ready      (fp_adder_l2_ina_ready      ), //i
    .out_payload    (fp_adder_l1_0_out_payload  ), //o
    .clk            (clk                        )  //i
  );
  fp_adder fp_adder_l1_1 (
    .ina_valid      (fp_adder_l0_2_out_valid    ), //i
    .ina_ready      (fp_adder_l1_1_ina_ready    ), //o
    .ina_payload    (fp_adder_l0_2_out_payload  ), //i
    .inb_valid      (fp_adder_l0_3_out_valid    ), //i
    .inb_ready      (fp_adder_l1_1_inb_ready    ), //o
    .inb_payload    (fp_adder_l0_3_out_payload  ), //i
    .out_valid      (fp_adder_l1_1_out_valid    ), //o
    .out_ready      (fp_adder_l2_inb_ready      ), //i
    .out_payload    (fp_adder_l1_1_out_payload  ), //o
    .clk            (clk                        )  //i
  );
  fp_adder fp_adder_l2 (
    .ina_valid      (fp_adder_l1_0_out_valid    ), //i
    .ina_ready      (fp_adder_l2_ina_ready      ), //o
    .ina_payload    (fp_adder_l1_0_out_payload  ), //i
    .inb_valid      (fp_adder_l1_1_out_valid    ), //i
    .inb_ready      (fp_adder_l2_inb_ready      ), //o
    .inb_payload    (fp_adder_l1_1_out_payload  ), //i
    .out_valid      (fp_adder_l2_out_valid      ), //o
    .out_ready      (io_out_ready               ), //i
    .out_payload    (fp_adder_l2_out_payload    ), //o
    .clk            (clk                        )  //i
  );
  assign io_in_0_ready = fp_adder_l0_0_ina_ready;
  assign io_in_1_ready = fp_adder_l0_0_inb_ready;
  assign io_in_2_ready = fp_adder_l0_1_ina_ready;
  assign io_in_3_ready = fp_adder_l0_1_inb_ready;
  assign io_in_4_ready = fp_adder_l0_2_ina_ready;
  assign io_in_5_ready = fp_adder_l0_2_inb_ready;
  assign io_in_6_ready = fp_adder_l0_3_ina_ready;
  assign io_in_7_ready = fp_adder_l0_3_inb_ready;
  assign io_out_valid = fp_adder_l2_out_valid;
  assign io_out_payload = fp_adder_l2_out_payload;

endmodule

module conv_mux (
  input               io_is_delta_wt,
  input               io_indata_0_0_valid,
  output              io_indata_0_0_ready,
  input      [31:0]   io_indata_0_0_payload,
  input               io_indata_0_1_valid,
  output              io_indata_0_1_ready,
  input      [31:0]   io_indata_0_1_payload,
  input               io_indata_0_2_valid,
  output              io_indata_0_2_ready,
  input      [31:0]   io_indata_0_2_payload,
  input               io_indata_0_3_valid,
  output              io_indata_0_3_ready,
  input      [31:0]   io_indata_0_3_payload,
  input               io_indata_0_4_valid,
  output              io_indata_0_4_ready,
  input      [31:0]   io_indata_0_4_payload,
  input               io_indata_0_5_valid,
  output              io_indata_0_5_ready,
  input      [31:0]   io_indata_0_5_payload,
  input               io_indata_0_6_valid,
  output              io_indata_0_6_ready,
  input      [31:0]   io_indata_0_6_payload,
  input               io_indata_0_7_valid,
  output              io_indata_0_7_ready,
  input      [31:0]   io_indata_0_7_payload,
  input               io_indata_1_0_valid,
  output              io_indata_1_0_ready,
  input      [31:0]   io_indata_1_0_payload,
  input               io_indata_1_1_valid,
  output              io_indata_1_1_ready,
  input      [31:0]   io_indata_1_1_payload,
  input               io_indata_1_2_valid,
  output              io_indata_1_2_ready,
  input      [31:0]   io_indata_1_2_payload,
  input               io_indata_1_3_valid,
  output              io_indata_1_3_ready,
  input      [31:0]   io_indata_1_3_payload,
  input               io_indata_1_4_valid,
  output              io_indata_1_4_ready,
  input      [31:0]   io_indata_1_4_payload,
  input               io_indata_1_5_valid,
  output              io_indata_1_5_ready,
  input      [31:0]   io_indata_1_5_payload,
  input               io_indata_1_6_valid,
  output              io_indata_1_6_ready,
  input      [31:0]   io_indata_1_6_payload,
  input               io_indata_1_7_valid,
  output              io_indata_1_7_ready,
  input      [31:0]   io_indata_1_7_payload,
  input               io_indata_2_0_valid,
  output              io_indata_2_0_ready,
  input      [31:0]   io_indata_2_0_payload,
  input               io_indata_2_1_valid,
  output              io_indata_2_1_ready,
  input      [31:0]   io_indata_2_1_payload,
  input               io_indata_2_2_valid,
  output              io_indata_2_2_ready,
  input      [31:0]   io_indata_2_2_payload,
  input               io_indata_2_3_valid,
  output              io_indata_2_3_ready,
  input      [31:0]   io_indata_2_3_payload,
  input               io_indata_2_4_valid,
  output              io_indata_2_4_ready,
  input      [31:0]   io_indata_2_4_payload,
  input               io_indata_2_5_valid,
  output              io_indata_2_5_ready,
  input      [31:0]   io_indata_2_5_payload,
  input               io_indata_2_6_valid,
  output              io_indata_2_6_ready,
  input      [31:0]   io_indata_2_6_payload,
  input               io_indata_2_7_valid,
  output              io_indata_2_7_ready,
  input      [31:0]   io_indata_2_7_payload,
  input               io_indata_3_0_valid,
  output              io_indata_3_0_ready,
  input      [31:0]   io_indata_3_0_payload,
  input               io_indata_3_1_valid,
  output              io_indata_3_1_ready,
  input      [31:0]   io_indata_3_1_payload,
  input               io_indata_3_2_valid,
  output              io_indata_3_2_ready,
  input      [31:0]   io_indata_3_2_payload,
  input               io_indata_3_3_valid,
  output              io_indata_3_3_ready,
  input      [31:0]   io_indata_3_3_payload,
  input               io_indata_3_4_valid,
  output              io_indata_3_4_ready,
  input      [31:0]   io_indata_3_4_payload,
  input               io_indata_3_5_valid,
  output              io_indata_3_5_ready,
  input      [31:0]   io_indata_3_5_payload,
  input               io_indata_3_6_valid,
  output              io_indata_3_6_ready,
  input      [31:0]   io_indata_3_6_payload,
  input               io_indata_3_7_valid,
  output              io_indata_3_7_ready,
  input      [31:0]   io_indata_3_7_payload,
  input               io_indata_4_0_valid,
  output              io_indata_4_0_ready,
  input      [31:0]   io_indata_4_0_payload,
  input               io_indata_4_1_valid,
  output              io_indata_4_1_ready,
  input      [31:0]   io_indata_4_1_payload,
  input               io_indata_4_2_valid,
  output              io_indata_4_2_ready,
  input      [31:0]   io_indata_4_2_payload,
  input               io_indata_4_3_valid,
  output              io_indata_4_3_ready,
  input      [31:0]   io_indata_4_3_payload,
  input               io_indata_4_4_valid,
  output              io_indata_4_4_ready,
  input      [31:0]   io_indata_4_4_payload,
  input               io_indata_4_5_valid,
  output              io_indata_4_5_ready,
  input      [31:0]   io_indata_4_5_payload,
  input               io_indata_4_6_valid,
  output              io_indata_4_6_ready,
  input      [31:0]   io_indata_4_6_payload,
  input               io_indata_4_7_valid,
  output              io_indata_4_7_ready,
  input      [31:0]   io_indata_4_7_payload,
  input               io_indata_5_0_valid,
  output              io_indata_5_0_ready,
  input      [31:0]   io_indata_5_0_payload,
  input               io_indata_5_1_valid,
  output              io_indata_5_1_ready,
  input      [31:0]   io_indata_5_1_payload,
  input               io_indata_5_2_valid,
  output              io_indata_5_2_ready,
  input      [31:0]   io_indata_5_2_payload,
  input               io_indata_5_3_valid,
  output              io_indata_5_3_ready,
  input      [31:0]   io_indata_5_3_payload,
  input               io_indata_5_4_valid,
  output              io_indata_5_4_ready,
  input      [31:0]   io_indata_5_4_payload,
  input               io_indata_5_5_valid,
  output              io_indata_5_5_ready,
  input      [31:0]   io_indata_5_5_payload,
  input               io_indata_5_6_valid,
  output              io_indata_5_6_ready,
  input      [31:0]   io_indata_5_6_payload,
  input               io_indata_5_7_valid,
  output              io_indata_5_7_ready,
  input      [31:0]   io_indata_5_7_payload,
  input               io_indata_6_0_valid,
  output              io_indata_6_0_ready,
  input      [31:0]   io_indata_6_0_payload,
  input               io_indata_6_1_valid,
  output              io_indata_6_1_ready,
  input      [31:0]   io_indata_6_1_payload,
  input               io_indata_6_2_valid,
  output              io_indata_6_2_ready,
  input      [31:0]   io_indata_6_2_payload,
  input               io_indata_6_3_valid,
  output              io_indata_6_3_ready,
  input      [31:0]   io_indata_6_3_payload,
  input               io_indata_6_4_valid,
  output              io_indata_6_4_ready,
  input      [31:0]   io_indata_6_4_payload,
  input               io_indata_6_5_valid,
  output              io_indata_6_5_ready,
  input      [31:0]   io_indata_6_5_payload,
  input               io_indata_6_6_valid,
  output              io_indata_6_6_ready,
  input      [31:0]   io_indata_6_6_payload,
  input               io_indata_6_7_valid,
  output              io_indata_6_7_ready,
  input      [31:0]   io_indata_6_7_payload,
  input               io_indata_7_0_valid,
  output              io_indata_7_0_ready,
  input      [31:0]   io_indata_7_0_payload,
  input               io_indata_7_1_valid,
  output              io_indata_7_1_ready,
  input      [31:0]   io_indata_7_1_payload,
  input               io_indata_7_2_valid,
  output              io_indata_7_2_ready,
  input      [31:0]   io_indata_7_2_payload,
  input               io_indata_7_3_valid,
  output              io_indata_7_3_ready,
  input      [31:0]   io_indata_7_3_payload,
  input               io_indata_7_4_valid,
  output              io_indata_7_4_ready,
  input      [31:0]   io_indata_7_4_payload,
  input               io_indata_7_5_valid,
  output              io_indata_7_5_ready,
  input      [31:0]   io_indata_7_5_payload,
  input               io_indata_7_6_valid,
  output              io_indata_7_6_ready,
  input      [31:0]   io_indata_7_6_payload,
  input               io_indata_7_7_valid,
  output              io_indata_7_7_ready,
  input      [31:0]   io_indata_7_7_payload,
  output              io_o_delta_wt_0_0_valid,
  input               io_o_delta_wt_0_0_ready,
  output     [31:0]   io_o_delta_wt_0_0_payload,
  output              io_o_delta_wt_0_1_valid,
  input               io_o_delta_wt_0_1_ready,
  output     [31:0]   io_o_delta_wt_0_1_payload,
  output              io_o_delta_wt_0_2_valid,
  input               io_o_delta_wt_0_2_ready,
  output     [31:0]   io_o_delta_wt_0_2_payload,
  output              io_o_delta_wt_0_3_valid,
  input               io_o_delta_wt_0_3_ready,
  output     [31:0]   io_o_delta_wt_0_3_payload,
  output              io_o_delta_wt_0_4_valid,
  input               io_o_delta_wt_0_4_ready,
  output     [31:0]   io_o_delta_wt_0_4_payload,
  output              io_o_delta_wt_0_5_valid,
  input               io_o_delta_wt_0_5_ready,
  output     [31:0]   io_o_delta_wt_0_5_payload,
  output              io_o_delta_wt_0_6_valid,
  input               io_o_delta_wt_0_6_ready,
  output     [31:0]   io_o_delta_wt_0_6_payload,
  output              io_o_delta_wt_0_7_valid,
  input               io_o_delta_wt_0_7_ready,
  output     [31:0]   io_o_delta_wt_0_7_payload,
  output              io_o_delta_wt_1_0_valid,
  input               io_o_delta_wt_1_0_ready,
  output     [31:0]   io_o_delta_wt_1_0_payload,
  output              io_o_delta_wt_1_1_valid,
  input               io_o_delta_wt_1_1_ready,
  output     [31:0]   io_o_delta_wt_1_1_payload,
  output              io_o_delta_wt_1_2_valid,
  input               io_o_delta_wt_1_2_ready,
  output     [31:0]   io_o_delta_wt_1_2_payload,
  output              io_o_delta_wt_1_3_valid,
  input               io_o_delta_wt_1_3_ready,
  output     [31:0]   io_o_delta_wt_1_3_payload,
  output              io_o_delta_wt_1_4_valid,
  input               io_o_delta_wt_1_4_ready,
  output     [31:0]   io_o_delta_wt_1_4_payload,
  output              io_o_delta_wt_1_5_valid,
  input               io_o_delta_wt_1_5_ready,
  output     [31:0]   io_o_delta_wt_1_5_payload,
  output              io_o_delta_wt_1_6_valid,
  input               io_o_delta_wt_1_6_ready,
  output     [31:0]   io_o_delta_wt_1_6_payload,
  output              io_o_delta_wt_1_7_valid,
  input               io_o_delta_wt_1_7_ready,
  output     [31:0]   io_o_delta_wt_1_7_payload,
  output              io_o_delta_wt_2_0_valid,
  input               io_o_delta_wt_2_0_ready,
  output     [31:0]   io_o_delta_wt_2_0_payload,
  output              io_o_delta_wt_2_1_valid,
  input               io_o_delta_wt_2_1_ready,
  output     [31:0]   io_o_delta_wt_2_1_payload,
  output              io_o_delta_wt_2_2_valid,
  input               io_o_delta_wt_2_2_ready,
  output     [31:0]   io_o_delta_wt_2_2_payload,
  output              io_o_delta_wt_2_3_valid,
  input               io_o_delta_wt_2_3_ready,
  output     [31:0]   io_o_delta_wt_2_3_payload,
  output              io_o_delta_wt_2_4_valid,
  input               io_o_delta_wt_2_4_ready,
  output     [31:0]   io_o_delta_wt_2_4_payload,
  output              io_o_delta_wt_2_5_valid,
  input               io_o_delta_wt_2_5_ready,
  output     [31:0]   io_o_delta_wt_2_5_payload,
  output              io_o_delta_wt_2_6_valid,
  input               io_o_delta_wt_2_6_ready,
  output     [31:0]   io_o_delta_wt_2_6_payload,
  output              io_o_delta_wt_2_7_valid,
  input               io_o_delta_wt_2_7_ready,
  output     [31:0]   io_o_delta_wt_2_7_payload,
  output              io_o_delta_wt_3_0_valid,
  input               io_o_delta_wt_3_0_ready,
  output     [31:0]   io_o_delta_wt_3_0_payload,
  output              io_o_delta_wt_3_1_valid,
  input               io_o_delta_wt_3_1_ready,
  output     [31:0]   io_o_delta_wt_3_1_payload,
  output              io_o_delta_wt_3_2_valid,
  input               io_o_delta_wt_3_2_ready,
  output     [31:0]   io_o_delta_wt_3_2_payload,
  output              io_o_delta_wt_3_3_valid,
  input               io_o_delta_wt_3_3_ready,
  output     [31:0]   io_o_delta_wt_3_3_payload,
  output              io_o_delta_wt_3_4_valid,
  input               io_o_delta_wt_3_4_ready,
  output     [31:0]   io_o_delta_wt_3_4_payload,
  output              io_o_delta_wt_3_5_valid,
  input               io_o_delta_wt_3_5_ready,
  output     [31:0]   io_o_delta_wt_3_5_payload,
  output              io_o_delta_wt_3_6_valid,
  input               io_o_delta_wt_3_6_ready,
  output     [31:0]   io_o_delta_wt_3_6_payload,
  output              io_o_delta_wt_3_7_valid,
  input               io_o_delta_wt_3_7_ready,
  output     [31:0]   io_o_delta_wt_3_7_payload,
  output              io_o_delta_wt_4_0_valid,
  input               io_o_delta_wt_4_0_ready,
  output     [31:0]   io_o_delta_wt_4_0_payload,
  output              io_o_delta_wt_4_1_valid,
  input               io_o_delta_wt_4_1_ready,
  output     [31:0]   io_o_delta_wt_4_1_payload,
  output              io_o_delta_wt_4_2_valid,
  input               io_o_delta_wt_4_2_ready,
  output     [31:0]   io_o_delta_wt_4_2_payload,
  output              io_o_delta_wt_4_3_valid,
  input               io_o_delta_wt_4_3_ready,
  output     [31:0]   io_o_delta_wt_4_3_payload,
  output              io_o_delta_wt_4_4_valid,
  input               io_o_delta_wt_4_4_ready,
  output     [31:0]   io_o_delta_wt_4_4_payload,
  output              io_o_delta_wt_4_5_valid,
  input               io_o_delta_wt_4_5_ready,
  output     [31:0]   io_o_delta_wt_4_5_payload,
  output              io_o_delta_wt_4_6_valid,
  input               io_o_delta_wt_4_6_ready,
  output     [31:0]   io_o_delta_wt_4_6_payload,
  output              io_o_delta_wt_4_7_valid,
  input               io_o_delta_wt_4_7_ready,
  output     [31:0]   io_o_delta_wt_4_7_payload,
  output              io_o_delta_wt_5_0_valid,
  input               io_o_delta_wt_5_0_ready,
  output     [31:0]   io_o_delta_wt_5_0_payload,
  output              io_o_delta_wt_5_1_valid,
  input               io_o_delta_wt_5_1_ready,
  output     [31:0]   io_o_delta_wt_5_1_payload,
  output              io_o_delta_wt_5_2_valid,
  input               io_o_delta_wt_5_2_ready,
  output     [31:0]   io_o_delta_wt_5_2_payload,
  output              io_o_delta_wt_5_3_valid,
  input               io_o_delta_wt_5_3_ready,
  output     [31:0]   io_o_delta_wt_5_3_payload,
  output              io_o_delta_wt_5_4_valid,
  input               io_o_delta_wt_5_4_ready,
  output     [31:0]   io_o_delta_wt_5_4_payload,
  output              io_o_delta_wt_5_5_valid,
  input               io_o_delta_wt_5_5_ready,
  output     [31:0]   io_o_delta_wt_5_5_payload,
  output              io_o_delta_wt_5_6_valid,
  input               io_o_delta_wt_5_6_ready,
  output     [31:0]   io_o_delta_wt_5_6_payload,
  output              io_o_delta_wt_5_7_valid,
  input               io_o_delta_wt_5_7_ready,
  output     [31:0]   io_o_delta_wt_5_7_payload,
  output              io_o_delta_wt_6_0_valid,
  input               io_o_delta_wt_6_0_ready,
  output     [31:0]   io_o_delta_wt_6_0_payload,
  output              io_o_delta_wt_6_1_valid,
  input               io_o_delta_wt_6_1_ready,
  output     [31:0]   io_o_delta_wt_6_1_payload,
  output              io_o_delta_wt_6_2_valid,
  input               io_o_delta_wt_6_2_ready,
  output     [31:0]   io_o_delta_wt_6_2_payload,
  output              io_o_delta_wt_6_3_valid,
  input               io_o_delta_wt_6_3_ready,
  output     [31:0]   io_o_delta_wt_6_3_payload,
  output              io_o_delta_wt_6_4_valid,
  input               io_o_delta_wt_6_4_ready,
  output     [31:0]   io_o_delta_wt_6_4_payload,
  output              io_o_delta_wt_6_5_valid,
  input               io_o_delta_wt_6_5_ready,
  output     [31:0]   io_o_delta_wt_6_5_payload,
  output              io_o_delta_wt_6_6_valid,
  input               io_o_delta_wt_6_6_ready,
  output     [31:0]   io_o_delta_wt_6_6_payload,
  output              io_o_delta_wt_6_7_valid,
  input               io_o_delta_wt_6_7_ready,
  output     [31:0]   io_o_delta_wt_6_7_payload,
  output              io_o_delta_wt_7_0_valid,
  input               io_o_delta_wt_7_0_ready,
  output     [31:0]   io_o_delta_wt_7_0_payload,
  output              io_o_delta_wt_7_1_valid,
  input               io_o_delta_wt_7_1_ready,
  output     [31:0]   io_o_delta_wt_7_1_payload,
  output              io_o_delta_wt_7_2_valid,
  input               io_o_delta_wt_7_2_ready,
  output     [31:0]   io_o_delta_wt_7_2_payload,
  output              io_o_delta_wt_7_3_valid,
  input               io_o_delta_wt_7_3_ready,
  output     [31:0]   io_o_delta_wt_7_3_payload,
  output              io_o_delta_wt_7_4_valid,
  input               io_o_delta_wt_7_4_ready,
  output     [31:0]   io_o_delta_wt_7_4_payload,
  output              io_o_delta_wt_7_5_valid,
  input               io_o_delta_wt_7_5_ready,
  output     [31:0]   io_o_delta_wt_7_5_payload,
  output              io_o_delta_wt_7_6_valid,
  input               io_o_delta_wt_7_6_ready,
  output     [31:0]   io_o_delta_wt_7_6_payload,
  output              io_o_delta_wt_7_7_valid,
  input               io_o_delta_wt_7_7_ready,
  output     [31:0]   io_o_delta_wt_7_7_payload,
  output              io_o_sigma_0_0_valid,
  input               io_o_sigma_0_0_ready,
  output     [31:0]   io_o_sigma_0_0_payload,
  output              io_o_sigma_0_1_valid,
  input               io_o_sigma_0_1_ready,
  output     [31:0]   io_o_sigma_0_1_payload,
  output              io_o_sigma_0_2_valid,
  input               io_o_sigma_0_2_ready,
  output     [31:0]   io_o_sigma_0_2_payload,
  output              io_o_sigma_0_3_valid,
  input               io_o_sigma_0_3_ready,
  output     [31:0]   io_o_sigma_0_3_payload,
  output              io_o_sigma_0_4_valid,
  input               io_o_sigma_0_4_ready,
  output     [31:0]   io_o_sigma_0_4_payload,
  output              io_o_sigma_0_5_valid,
  input               io_o_sigma_0_5_ready,
  output     [31:0]   io_o_sigma_0_5_payload,
  output              io_o_sigma_0_6_valid,
  input               io_o_sigma_0_6_ready,
  output     [31:0]   io_o_sigma_0_6_payload,
  output              io_o_sigma_0_7_valid,
  input               io_o_sigma_0_7_ready,
  output     [31:0]   io_o_sigma_0_7_payload,
  output              io_o_sigma_1_0_valid,
  input               io_o_sigma_1_0_ready,
  output     [31:0]   io_o_sigma_1_0_payload,
  output              io_o_sigma_1_1_valid,
  input               io_o_sigma_1_1_ready,
  output     [31:0]   io_o_sigma_1_1_payload,
  output              io_o_sigma_1_2_valid,
  input               io_o_sigma_1_2_ready,
  output     [31:0]   io_o_sigma_1_2_payload,
  output              io_o_sigma_1_3_valid,
  input               io_o_sigma_1_3_ready,
  output     [31:0]   io_o_sigma_1_3_payload,
  output              io_o_sigma_1_4_valid,
  input               io_o_sigma_1_4_ready,
  output     [31:0]   io_o_sigma_1_4_payload,
  output              io_o_sigma_1_5_valid,
  input               io_o_sigma_1_5_ready,
  output     [31:0]   io_o_sigma_1_5_payload,
  output              io_o_sigma_1_6_valid,
  input               io_o_sigma_1_6_ready,
  output     [31:0]   io_o_sigma_1_6_payload,
  output              io_o_sigma_1_7_valid,
  input               io_o_sigma_1_7_ready,
  output     [31:0]   io_o_sigma_1_7_payload,
  output              io_o_sigma_2_0_valid,
  input               io_o_sigma_2_0_ready,
  output     [31:0]   io_o_sigma_2_0_payload,
  output              io_o_sigma_2_1_valid,
  input               io_o_sigma_2_1_ready,
  output     [31:0]   io_o_sigma_2_1_payload,
  output              io_o_sigma_2_2_valid,
  input               io_o_sigma_2_2_ready,
  output     [31:0]   io_o_sigma_2_2_payload,
  output              io_o_sigma_2_3_valid,
  input               io_o_sigma_2_3_ready,
  output     [31:0]   io_o_sigma_2_3_payload,
  output              io_o_sigma_2_4_valid,
  input               io_o_sigma_2_4_ready,
  output     [31:0]   io_o_sigma_2_4_payload,
  output              io_o_sigma_2_5_valid,
  input               io_o_sigma_2_5_ready,
  output     [31:0]   io_o_sigma_2_5_payload,
  output              io_o_sigma_2_6_valid,
  input               io_o_sigma_2_6_ready,
  output     [31:0]   io_o_sigma_2_6_payload,
  output              io_o_sigma_2_7_valid,
  input               io_o_sigma_2_7_ready,
  output     [31:0]   io_o_sigma_2_7_payload,
  output              io_o_sigma_3_0_valid,
  input               io_o_sigma_3_0_ready,
  output     [31:0]   io_o_sigma_3_0_payload,
  output              io_o_sigma_3_1_valid,
  input               io_o_sigma_3_1_ready,
  output     [31:0]   io_o_sigma_3_1_payload,
  output              io_o_sigma_3_2_valid,
  input               io_o_sigma_3_2_ready,
  output     [31:0]   io_o_sigma_3_2_payload,
  output              io_o_sigma_3_3_valid,
  input               io_o_sigma_3_3_ready,
  output     [31:0]   io_o_sigma_3_3_payload,
  output              io_o_sigma_3_4_valid,
  input               io_o_sigma_3_4_ready,
  output     [31:0]   io_o_sigma_3_4_payload,
  output              io_o_sigma_3_5_valid,
  input               io_o_sigma_3_5_ready,
  output     [31:0]   io_o_sigma_3_5_payload,
  output              io_o_sigma_3_6_valid,
  input               io_o_sigma_3_6_ready,
  output     [31:0]   io_o_sigma_3_6_payload,
  output              io_o_sigma_3_7_valid,
  input               io_o_sigma_3_7_ready,
  output     [31:0]   io_o_sigma_3_7_payload,
  output              io_o_sigma_4_0_valid,
  input               io_o_sigma_4_0_ready,
  output     [31:0]   io_o_sigma_4_0_payload,
  output              io_o_sigma_4_1_valid,
  input               io_o_sigma_4_1_ready,
  output     [31:0]   io_o_sigma_4_1_payload,
  output              io_o_sigma_4_2_valid,
  input               io_o_sigma_4_2_ready,
  output     [31:0]   io_o_sigma_4_2_payload,
  output              io_o_sigma_4_3_valid,
  input               io_o_sigma_4_3_ready,
  output     [31:0]   io_o_sigma_4_3_payload,
  output              io_o_sigma_4_4_valid,
  input               io_o_sigma_4_4_ready,
  output     [31:0]   io_o_sigma_4_4_payload,
  output              io_o_sigma_4_5_valid,
  input               io_o_sigma_4_5_ready,
  output     [31:0]   io_o_sigma_4_5_payload,
  output              io_o_sigma_4_6_valid,
  input               io_o_sigma_4_6_ready,
  output     [31:0]   io_o_sigma_4_6_payload,
  output              io_o_sigma_4_7_valid,
  input               io_o_sigma_4_7_ready,
  output     [31:0]   io_o_sigma_4_7_payload,
  output              io_o_sigma_5_0_valid,
  input               io_o_sigma_5_0_ready,
  output     [31:0]   io_o_sigma_5_0_payload,
  output              io_o_sigma_5_1_valid,
  input               io_o_sigma_5_1_ready,
  output     [31:0]   io_o_sigma_5_1_payload,
  output              io_o_sigma_5_2_valid,
  input               io_o_sigma_5_2_ready,
  output     [31:0]   io_o_sigma_5_2_payload,
  output              io_o_sigma_5_3_valid,
  input               io_o_sigma_5_3_ready,
  output     [31:0]   io_o_sigma_5_3_payload,
  output              io_o_sigma_5_4_valid,
  input               io_o_sigma_5_4_ready,
  output     [31:0]   io_o_sigma_5_4_payload,
  output              io_o_sigma_5_5_valid,
  input               io_o_sigma_5_5_ready,
  output     [31:0]   io_o_sigma_5_5_payload,
  output              io_o_sigma_5_6_valid,
  input               io_o_sigma_5_6_ready,
  output     [31:0]   io_o_sigma_5_6_payload,
  output              io_o_sigma_5_7_valid,
  input               io_o_sigma_5_7_ready,
  output     [31:0]   io_o_sigma_5_7_payload,
  output              io_o_sigma_6_0_valid,
  input               io_o_sigma_6_0_ready,
  output     [31:0]   io_o_sigma_6_0_payload,
  output              io_o_sigma_6_1_valid,
  input               io_o_sigma_6_1_ready,
  output     [31:0]   io_o_sigma_6_1_payload,
  output              io_o_sigma_6_2_valid,
  input               io_o_sigma_6_2_ready,
  output     [31:0]   io_o_sigma_6_2_payload,
  output              io_o_sigma_6_3_valid,
  input               io_o_sigma_6_3_ready,
  output     [31:0]   io_o_sigma_6_3_payload,
  output              io_o_sigma_6_4_valid,
  input               io_o_sigma_6_4_ready,
  output     [31:0]   io_o_sigma_6_4_payload,
  output              io_o_sigma_6_5_valid,
  input               io_o_sigma_6_5_ready,
  output     [31:0]   io_o_sigma_6_5_payload,
  output              io_o_sigma_6_6_valid,
  input               io_o_sigma_6_6_ready,
  output     [31:0]   io_o_sigma_6_6_payload,
  output              io_o_sigma_6_7_valid,
  input               io_o_sigma_6_7_ready,
  output     [31:0]   io_o_sigma_6_7_payload,
  output              io_o_sigma_7_0_valid,
  input               io_o_sigma_7_0_ready,
  output     [31:0]   io_o_sigma_7_0_payload,
  output              io_o_sigma_7_1_valid,
  input               io_o_sigma_7_1_ready,
  output     [31:0]   io_o_sigma_7_1_payload,
  output              io_o_sigma_7_2_valid,
  input               io_o_sigma_7_2_ready,
  output     [31:0]   io_o_sigma_7_2_payload,
  output              io_o_sigma_7_3_valid,
  input               io_o_sigma_7_3_ready,
  output     [31:0]   io_o_sigma_7_3_payload,
  output              io_o_sigma_7_4_valid,
  input               io_o_sigma_7_4_ready,
  output     [31:0]   io_o_sigma_7_4_payload,
  output              io_o_sigma_7_5_valid,
  input               io_o_sigma_7_5_ready,
  output     [31:0]   io_o_sigma_7_5_payload,
  output              io_o_sigma_7_6_valid,
  input               io_o_sigma_7_6_ready,
  output     [31:0]   io_o_sigma_7_6_payload,
  output              io_o_sigma_7_7_valid,
  input               io_o_sigma_7_7_ready,
  output     [31:0]   io_o_sigma_7_7_payload,
  input               clk,
  input               reset
);
  reg        [31:0]   temp_0_0;
  reg        [31:0]   temp_0_1;
  reg        [31:0]   temp_0_2;
  reg        [31:0]   temp_0_3;
  reg        [31:0]   temp_0_4;
  reg        [31:0]   temp_0_5;
  reg        [31:0]   temp_0_6;
  reg        [31:0]   temp_0_7;
  reg        [31:0]   temp_1_0;
  reg        [31:0]   temp_1_1;
  reg        [31:0]   temp_1_2;
  reg        [31:0]   temp_1_3;
  reg        [31:0]   temp_1_4;
  reg        [31:0]   temp_1_5;
  reg        [31:0]   temp_1_6;
  reg        [31:0]   temp_1_7;
  reg        [31:0]   temp_2_0;
  reg        [31:0]   temp_2_1;
  reg        [31:0]   temp_2_2;
  reg        [31:0]   temp_2_3;
  reg        [31:0]   temp_2_4;
  reg        [31:0]   temp_2_5;
  reg        [31:0]   temp_2_6;
  reg        [31:0]   temp_2_7;
  reg        [31:0]   temp_3_0;
  reg        [31:0]   temp_3_1;
  reg        [31:0]   temp_3_2;
  reg        [31:0]   temp_3_3;
  reg        [31:0]   temp_3_4;
  reg        [31:0]   temp_3_5;
  reg        [31:0]   temp_3_6;
  reg        [31:0]   temp_3_7;
  reg        [31:0]   temp_4_0;
  reg        [31:0]   temp_4_1;
  reg        [31:0]   temp_4_2;
  reg        [31:0]   temp_4_3;
  reg        [31:0]   temp_4_4;
  reg        [31:0]   temp_4_5;
  reg        [31:0]   temp_4_6;
  reg        [31:0]   temp_4_7;
  reg        [31:0]   temp_5_0;
  reg        [31:0]   temp_5_1;
  reg        [31:0]   temp_5_2;
  reg        [31:0]   temp_5_3;
  reg        [31:0]   temp_5_4;
  reg        [31:0]   temp_5_5;
  reg        [31:0]   temp_5_6;
  reg        [31:0]   temp_5_7;
  reg        [31:0]   temp_6_0;
  reg        [31:0]   temp_6_1;
  reg        [31:0]   temp_6_2;
  reg        [31:0]   temp_6_3;
  reg        [31:0]   temp_6_4;
  reg        [31:0]   temp_6_5;
  reg        [31:0]   temp_6_6;
  reg        [31:0]   temp_6_7;
  reg        [31:0]   temp_7_0;
  reg        [31:0]   temp_7_1;
  reg        [31:0]   temp_7_2;
  reg        [31:0]   temp_7_3;
  reg        [31:0]   temp_7_4;
  reg        [31:0]   temp_7_5;
  reg        [31:0]   temp_7_6;
  reg        [31:0]   temp_7_7;
  reg                 indata_ready;
  wire                o_delta_wt_ready;
  wire                o_sigma_ready;
  wire                indata_valid;
  reg                 o_delta_wt_valid;
  reg                 o_sigma_valid;
  wire                w_indata_valid_0;
  wire                w_indata_valid_1;
  wire                w_indata_valid_2;
  wire                w_indata_valid_3;
  wire                w_indata_valid_4;
  wire                w_indata_valid_5;
  wire                w_indata_valid_6;
  wire                w_indata_valid_7;
  wire                w_o_delta_wt_ready_0;
  wire                w_o_delta_wt_ready_1;
  wire                w_o_delta_wt_ready_2;
  wire                w_o_delta_wt_ready_3;
  wire                w_o_delta_wt_ready_4;
  wire                w_o_delta_wt_ready_5;
  wire                w_o_delta_wt_ready_6;
  wire                w_o_delta_wt_ready_7;
  wire                w_o_sigma_ready_0;
  wire                w_o_sigma_ready_1;
  wire                w_o_sigma_ready_2;
  wire                w_o_sigma_ready_3;
  wire                w_o_sigma_ready_4;
  wire                w_o_sigma_ready_5;
  wire                w_o_sigma_ready_6;
  wire                w_o_sigma_ready_7;
  wire                mux_fsm_wantExit;
  reg                 mux_fsm_wantStart;
  wire                mux_fsm_wantKill;
  reg        `mux_fsm_enumDefinition_binary_sequential_type mux_fsm_stateReg;
  reg        `mux_fsm_enumDefinition_binary_sequential_type mux_fsm_stateNext;
  wire                when_conv_mux_l83;
  wire                when_conv_mux_l92;
  wire                when_conv_mux_l103;
  wire                when_conv_mux_l110;
  `ifndef SYNTHESIS
  reg [111:0] mux_fsm_stateReg_string;
  reg [111:0] mux_fsm_stateNext_string;
  `endif


  `ifndef SYNTHESIS
  always @(*) begin
    case(mux_fsm_stateReg)
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_BOOT : mux_fsm_stateReg_string = "mux_fsm_BOOT  ";
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV : mux_fsm_stateReg_string = "mux_fsm_RCV   ";
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA : mux_fsm_stateReg_string = "mux_fsm_ODELTA";
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA : mux_fsm_stateReg_string = "mux_fsm_OSIGMA";
      default : mux_fsm_stateReg_string = "??????????????";
    endcase
  end
  always @(*) begin
    case(mux_fsm_stateNext)
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_BOOT : mux_fsm_stateNext_string = "mux_fsm_BOOT  ";
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV : mux_fsm_stateNext_string = "mux_fsm_RCV   ";
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA : mux_fsm_stateNext_string = "mux_fsm_ODELTA";
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA : mux_fsm_stateNext_string = "mux_fsm_OSIGMA";
      default : mux_fsm_stateNext_string = "??????????????";
    endcase
  end
  `endif

  always @(*) begin
    indata_ready = 1'b0;
    case(mux_fsm_stateReg)
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV : begin
        indata_ready = 1'b1;
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA : begin
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    o_delta_wt_valid = 1'b0;
    case(mux_fsm_stateReg)
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV : begin
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA : begin
        o_delta_wt_valid = 1'b1;
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    o_sigma_valid = 1'b0;
    case(mux_fsm_stateReg)
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV : begin
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA : begin
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA : begin
        o_sigma_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign io_indata_0_0_ready = indata_ready;
  assign io_indata_0_1_ready = indata_ready;
  assign io_indata_0_2_ready = indata_ready;
  assign io_indata_0_3_ready = indata_ready;
  assign io_indata_0_4_ready = indata_ready;
  assign io_indata_0_5_ready = indata_ready;
  assign io_indata_0_6_ready = indata_ready;
  assign io_indata_0_7_ready = indata_ready;
  assign io_indata_1_0_ready = indata_ready;
  assign io_indata_1_1_ready = indata_ready;
  assign io_indata_1_2_ready = indata_ready;
  assign io_indata_1_3_ready = indata_ready;
  assign io_indata_1_4_ready = indata_ready;
  assign io_indata_1_5_ready = indata_ready;
  assign io_indata_1_6_ready = indata_ready;
  assign io_indata_1_7_ready = indata_ready;
  assign io_indata_2_0_ready = indata_ready;
  assign io_indata_2_1_ready = indata_ready;
  assign io_indata_2_2_ready = indata_ready;
  assign io_indata_2_3_ready = indata_ready;
  assign io_indata_2_4_ready = indata_ready;
  assign io_indata_2_5_ready = indata_ready;
  assign io_indata_2_6_ready = indata_ready;
  assign io_indata_2_7_ready = indata_ready;
  assign io_indata_3_0_ready = indata_ready;
  assign io_indata_3_1_ready = indata_ready;
  assign io_indata_3_2_ready = indata_ready;
  assign io_indata_3_3_ready = indata_ready;
  assign io_indata_3_4_ready = indata_ready;
  assign io_indata_3_5_ready = indata_ready;
  assign io_indata_3_6_ready = indata_ready;
  assign io_indata_3_7_ready = indata_ready;
  assign io_indata_4_0_ready = indata_ready;
  assign io_indata_4_1_ready = indata_ready;
  assign io_indata_4_2_ready = indata_ready;
  assign io_indata_4_3_ready = indata_ready;
  assign io_indata_4_4_ready = indata_ready;
  assign io_indata_4_5_ready = indata_ready;
  assign io_indata_4_6_ready = indata_ready;
  assign io_indata_4_7_ready = indata_ready;
  assign io_indata_5_0_ready = indata_ready;
  assign io_indata_5_1_ready = indata_ready;
  assign io_indata_5_2_ready = indata_ready;
  assign io_indata_5_3_ready = indata_ready;
  assign io_indata_5_4_ready = indata_ready;
  assign io_indata_5_5_ready = indata_ready;
  assign io_indata_5_6_ready = indata_ready;
  assign io_indata_5_7_ready = indata_ready;
  assign io_indata_6_0_ready = indata_ready;
  assign io_indata_6_1_ready = indata_ready;
  assign io_indata_6_2_ready = indata_ready;
  assign io_indata_6_3_ready = indata_ready;
  assign io_indata_6_4_ready = indata_ready;
  assign io_indata_6_5_ready = indata_ready;
  assign io_indata_6_6_ready = indata_ready;
  assign io_indata_6_7_ready = indata_ready;
  assign io_indata_7_0_ready = indata_ready;
  assign io_indata_7_1_ready = indata_ready;
  assign io_indata_7_2_ready = indata_ready;
  assign io_indata_7_3_ready = indata_ready;
  assign io_indata_7_4_ready = indata_ready;
  assign io_indata_7_5_ready = indata_ready;
  assign io_indata_7_6_ready = indata_ready;
  assign io_indata_7_7_ready = indata_ready;
  assign w_indata_valid_0 = (((((((io_indata_0_0_valid && io_indata_0_1_valid) && io_indata_0_2_valid) && io_indata_0_3_valid) && io_indata_0_4_valid) && io_indata_0_5_valid) && io_indata_0_6_valid) && io_indata_0_7_valid);
  assign w_indata_valid_1 = (((((((io_indata_1_0_valid && io_indata_1_1_valid) && io_indata_1_2_valid) && io_indata_1_3_valid) && io_indata_1_4_valid) && io_indata_1_5_valid) && io_indata_1_6_valid) && io_indata_1_7_valid);
  assign w_indata_valid_2 = (((((((io_indata_2_0_valid && io_indata_2_1_valid) && io_indata_2_2_valid) && io_indata_2_3_valid) && io_indata_2_4_valid) && io_indata_2_5_valid) && io_indata_2_6_valid) && io_indata_2_7_valid);
  assign w_indata_valid_3 = (((((((io_indata_3_0_valid && io_indata_3_1_valid) && io_indata_3_2_valid) && io_indata_3_3_valid) && io_indata_3_4_valid) && io_indata_3_5_valid) && io_indata_3_6_valid) && io_indata_3_7_valid);
  assign w_indata_valid_4 = (((((((io_indata_4_0_valid && io_indata_4_1_valid) && io_indata_4_2_valid) && io_indata_4_3_valid) && io_indata_4_4_valid) && io_indata_4_5_valid) && io_indata_4_6_valid) && io_indata_4_7_valid);
  assign w_indata_valid_5 = (((((((io_indata_5_0_valid && io_indata_5_1_valid) && io_indata_5_2_valid) && io_indata_5_3_valid) && io_indata_5_4_valid) && io_indata_5_5_valid) && io_indata_5_6_valid) && io_indata_5_7_valid);
  assign w_indata_valid_6 = (((((((io_indata_6_0_valid && io_indata_6_1_valid) && io_indata_6_2_valid) && io_indata_6_3_valid) && io_indata_6_4_valid) && io_indata_6_5_valid) && io_indata_6_6_valid) && io_indata_6_7_valid);
  assign w_indata_valid_7 = (((((((io_indata_7_0_valid && io_indata_7_1_valid) && io_indata_7_2_valid) && io_indata_7_3_valid) && io_indata_7_4_valid) && io_indata_7_5_valid) && io_indata_7_6_valid) && io_indata_7_7_valid);
  assign indata_valid = (((((((w_indata_valid_0 && w_indata_valid_1) && w_indata_valid_2) && w_indata_valid_3) && w_indata_valid_4) && w_indata_valid_5) && w_indata_valid_6) && w_indata_valid_7);
  assign io_o_delta_wt_0_0_valid = o_delta_wt_valid;
  assign io_o_delta_wt_0_1_valid = o_delta_wt_valid;
  assign io_o_delta_wt_0_2_valid = o_delta_wt_valid;
  assign io_o_delta_wt_0_3_valid = o_delta_wt_valid;
  assign io_o_delta_wt_0_4_valid = o_delta_wt_valid;
  assign io_o_delta_wt_0_5_valid = o_delta_wt_valid;
  assign io_o_delta_wt_0_6_valid = o_delta_wt_valid;
  assign io_o_delta_wt_0_7_valid = o_delta_wt_valid;
  assign io_o_delta_wt_1_0_valid = o_delta_wt_valid;
  assign io_o_delta_wt_1_1_valid = o_delta_wt_valid;
  assign io_o_delta_wt_1_2_valid = o_delta_wt_valid;
  assign io_o_delta_wt_1_3_valid = o_delta_wt_valid;
  assign io_o_delta_wt_1_4_valid = o_delta_wt_valid;
  assign io_o_delta_wt_1_5_valid = o_delta_wt_valid;
  assign io_o_delta_wt_1_6_valid = o_delta_wt_valid;
  assign io_o_delta_wt_1_7_valid = o_delta_wt_valid;
  assign io_o_delta_wt_2_0_valid = o_delta_wt_valid;
  assign io_o_delta_wt_2_1_valid = o_delta_wt_valid;
  assign io_o_delta_wt_2_2_valid = o_delta_wt_valid;
  assign io_o_delta_wt_2_3_valid = o_delta_wt_valid;
  assign io_o_delta_wt_2_4_valid = o_delta_wt_valid;
  assign io_o_delta_wt_2_5_valid = o_delta_wt_valid;
  assign io_o_delta_wt_2_6_valid = o_delta_wt_valid;
  assign io_o_delta_wt_2_7_valid = o_delta_wt_valid;
  assign io_o_delta_wt_3_0_valid = o_delta_wt_valid;
  assign io_o_delta_wt_3_1_valid = o_delta_wt_valid;
  assign io_o_delta_wt_3_2_valid = o_delta_wt_valid;
  assign io_o_delta_wt_3_3_valid = o_delta_wt_valid;
  assign io_o_delta_wt_3_4_valid = o_delta_wt_valid;
  assign io_o_delta_wt_3_5_valid = o_delta_wt_valid;
  assign io_o_delta_wt_3_6_valid = o_delta_wt_valid;
  assign io_o_delta_wt_3_7_valid = o_delta_wt_valid;
  assign io_o_delta_wt_4_0_valid = o_delta_wt_valid;
  assign io_o_delta_wt_4_1_valid = o_delta_wt_valid;
  assign io_o_delta_wt_4_2_valid = o_delta_wt_valid;
  assign io_o_delta_wt_4_3_valid = o_delta_wt_valid;
  assign io_o_delta_wt_4_4_valid = o_delta_wt_valid;
  assign io_o_delta_wt_4_5_valid = o_delta_wt_valid;
  assign io_o_delta_wt_4_6_valid = o_delta_wt_valid;
  assign io_o_delta_wt_4_7_valid = o_delta_wt_valid;
  assign io_o_delta_wt_5_0_valid = o_delta_wt_valid;
  assign io_o_delta_wt_5_1_valid = o_delta_wt_valid;
  assign io_o_delta_wt_5_2_valid = o_delta_wt_valid;
  assign io_o_delta_wt_5_3_valid = o_delta_wt_valid;
  assign io_o_delta_wt_5_4_valid = o_delta_wt_valid;
  assign io_o_delta_wt_5_5_valid = o_delta_wt_valid;
  assign io_o_delta_wt_5_6_valid = o_delta_wt_valid;
  assign io_o_delta_wt_5_7_valid = o_delta_wt_valid;
  assign io_o_delta_wt_6_0_valid = o_delta_wt_valid;
  assign io_o_delta_wt_6_1_valid = o_delta_wt_valid;
  assign io_o_delta_wt_6_2_valid = o_delta_wt_valid;
  assign io_o_delta_wt_6_3_valid = o_delta_wt_valid;
  assign io_o_delta_wt_6_4_valid = o_delta_wt_valid;
  assign io_o_delta_wt_6_5_valid = o_delta_wt_valid;
  assign io_o_delta_wt_6_6_valid = o_delta_wt_valid;
  assign io_o_delta_wt_6_7_valid = o_delta_wt_valid;
  assign io_o_delta_wt_7_0_valid = o_delta_wt_valid;
  assign io_o_delta_wt_7_1_valid = o_delta_wt_valid;
  assign io_o_delta_wt_7_2_valid = o_delta_wt_valid;
  assign io_o_delta_wt_7_3_valid = o_delta_wt_valid;
  assign io_o_delta_wt_7_4_valid = o_delta_wt_valid;
  assign io_o_delta_wt_7_5_valid = o_delta_wt_valid;
  assign io_o_delta_wt_7_6_valid = o_delta_wt_valid;
  assign io_o_delta_wt_7_7_valid = o_delta_wt_valid;
  assign w_o_delta_wt_ready_0 = (((((((io_o_delta_wt_0_0_ready && io_o_delta_wt_0_1_ready) && io_o_delta_wt_0_2_ready) && io_o_delta_wt_0_3_ready) && io_o_delta_wt_0_4_ready) && io_o_delta_wt_0_5_ready) && io_o_delta_wt_0_6_ready) && io_o_delta_wt_0_7_ready);
  assign w_o_delta_wt_ready_1 = (((((((io_o_delta_wt_1_0_ready && io_o_delta_wt_1_1_ready) && io_o_delta_wt_1_2_ready) && io_o_delta_wt_1_3_ready) && io_o_delta_wt_1_4_ready) && io_o_delta_wt_1_5_ready) && io_o_delta_wt_1_6_ready) && io_o_delta_wt_1_7_ready);
  assign w_o_delta_wt_ready_2 = (((((((io_o_delta_wt_2_0_ready && io_o_delta_wt_2_1_ready) && io_o_delta_wt_2_2_ready) && io_o_delta_wt_2_3_ready) && io_o_delta_wt_2_4_ready) && io_o_delta_wt_2_5_ready) && io_o_delta_wt_2_6_ready) && io_o_delta_wt_2_7_ready);
  assign w_o_delta_wt_ready_3 = (((((((io_o_delta_wt_3_0_ready && io_o_delta_wt_3_1_ready) && io_o_delta_wt_3_2_ready) && io_o_delta_wt_3_3_ready) && io_o_delta_wt_3_4_ready) && io_o_delta_wt_3_5_ready) && io_o_delta_wt_3_6_ready) && io_o_delta_wt_3_7_ready);
  assign w_o_delta_wt_ready_4 = (((((((io_o_delta_wt_4_0_ready && io_o_delta_wt_4_1_ready) && io_o_delta_wt_4_2_ready) && io_o_delta_wt_4_3_ready) && io_o_delta_wt_4_4_ready) && io_o_delta_wt_4_5_ready) && io_o_delta_wt_4_6_ready) && io_o_delta_wt_4_7_ready);
  assign w_o_delta_wt_ready_5 = (((((((io_o_delta_wt_5_0_ready && io_o_delta_wt_5_1_ready) && io_o_delta_wt_5_2_ready) && io_o_delta_wt_5_3_ready) && io_o_delta_wt_5_4_ready) && io_o_delta_wt_5_5_ready) && io_o_delta_wt_5_6_ready) && io_o_delta_wt_5_7_ready);
  assign w_o_delta_wt_ready_6 = (((((((io_o_delta_wt_6_0_ready && io_o_delta_wt_6_1_ready) && io_o_delta_wt_6_2_ready) && io_o_delta_wt_6_3_ready) && io_o_delta_wt_6_4_ready) && io_o_delta_wt_6_5_ready) && io_o_delta_wt_6_6_ready) && io_o_delta_wt_6_7_ready);
  assign w_o_delta_wt_ready_7 = (((((((io_o_delta_wt_7_0_ready && io_o_delta_wt_7_1_ready) && io_o_delta_wt_7_2_ready) && io_o_delta_wt_7_3_ready) && io_o_delta_wt_7_4_ready) && io_o_delta_wt_7_5_ready) && io_o_delta_wt_7_6_ready) && io_o_delta_wt_7_7_ready);
  assign o_delta_wt_ready = (((((((w_o_delta_wt_ready_0 && w_o_delta_wt_ready_1) && w_o_delta_wt_ready_2) && w_o_delta_wt_ready_3) && w_o_delta_wt_ready_4) && w_o_delta_wt_ready_5) && w_o_delta_wt_ready_6) && w_o_delta_wt_ready_7);
  assign io_o_sigma_0_0_valid = o_sigma_valid;
  assign io_o_sigma_0_1_valid = o_sigma_valid;
  assign io_o_sigma_0_2_valid = o_sigma_valid;
  assign io_o_sigma_0_3_valid = o_sigma_valid;
  assign io_o_sigma_0_4_valid = o_sigma_valid;
  assign io_o_sigma_0_5_valid = o_sigma_valid;
  assign io_o_sigma_0_6_valid = o_sigma_valid;
  assign io_o_sigma_0_7_valid = o_sigma_valid;
  assign io_o_sigma_1_0_valid = o_sigma_valid;
  assign io_o_sigma_1_1_valid = o_sigma_valid;
  assign io_o_sigma_1_2_valid = o_sigma_valid;
  assign io_o_sigma_1_3_valid = o_sigma_valid;
  assign io_o_sigma_1_4_valid = o_sigma_valid;
  assign io_o_sigma_1_5_valid = o_sigma_valid;
  assign io_o_sigma_1_6_valid = o_sigma_valid;
  assign io_o_sigma_1_7_valid = o_sigma_valid;
  assign io_o_sigma_2_0_valid = o_sigma_valid;
  assign io_o_sigma_2_1_valid = o_sigma_valid;
  assign io_o_sigma_2_2_valid = o_sigma_valid;
  assign io_o_sigma_2_3_valid = o_sigma_valid;
  assign io_o_sigma_2_4_valid = o_sigma_valid;
  assign io_o_sigma_2_5_valid = o_sigma_valid;
  assign io_o_sigma_2_6_valid = o_sigma_valid;
  assign io_o_sigma_2_7_valid = o_sigma_valid;
  assign io_o_sigma_3_0_valid = o_sigma_valid;
  assign io_o_sigma_3_1_valid = o_sigma_valid;
  assign io_o_sigma_3_2_valid = o_sigma_valid;
  assign io_o_sigma_3_3_valid = o_sigma_valid;
  assign io_o_sigma_3_4_valid = o_sigma_valid;
  assign io_o_sigma_3_5_valid = o_sigma_valid;
  assign io_o_sigma_3_6_valid = o_sigma_valid;
  assign io_o_sigma_3_7_valid = o_sigma_valid;
  assign io_o_sigma_4_0_valid = o_sigma_valid;
  assign io_o_sigma_4_1_valid = o_sigma_valid;
  assign io_o_sigma_4_2_valid = o_sigma_valid;
  assign io_o_sigma_4_3_valid = o_sigma_valid;
  assign io_o_sigma_4_4_valid = o_sigma_valid;
  assign io_o_sigma_4_5_valid = o_sigma_valid;
  assign io_o_sigma_4_6_valid = o_sigma_valid;
  assign io_o_sigma_4_7_valid = o_sigma_valid;
  assign io_o_sigma_5_0_valid = o_sigma_valid;
  assign io_o_sigma_5_1_valid = o_sigma_valid;
  assign io_o_sigma_5_2_valid = o_sigma_valid;
  assign io_o_sigma_5_3_valid = o_sigma_valid;
  assign io_o_sigma_5_4_valid = o_sigma_valid;
  assign io_o_sigma_5_5_valid = o_sigma_valid;
  assign io_o_sigma_5_6_valid = o_sigma_valid;
  assign io_o_sigma_5_7_valid = o_sigma_valid;
  assign io_o_sigma_6_0_valid = o_sigma_valid;
  assign io_o_sigma_6_1_valid = o_sigma_valid;
  assign io_o_sigma_6_2_valid = o_sigma_valid;
  assign io_o_sigma_6_3_valid = o_sigma_valid;
  assign io_o_sigma_6_4_valid = o_sigma_valid;
  assign io_o_sigma_6_5_valid = o_sigma_valid;
  assign io_o_sigma_6_6_valid = o_sigma_valid;
  assign io_o_sigma_6_7_valid = o_sigma_valid;
  assign io_o_sigma_7_0_valid = o_sigma_valid;
  assign io_o_sigma_7_1_valid = o_sigma_valid;
  assign io_o_sigma_7_2_valid = o_sigma_valid;
  assign io_o_sigma_7_3_valid = o_sigma_valid;
  assign io_o_sigma_7_4_valid = o_sigma_valid;
  assign io_o_sigma_7_5_valid = o_sigma_valid;
  assign io_o_sigma_7_6_valid = o_sigma_valid;
  assign io_o_sigma_7_7_valid = o_sigma_valid;
  assign w_o_sigma_ready_0 = (((((((io_o_sigma_0_0_ready && io_o_sigma_0_1_ready) && io_o_sigma_0_2_ready) && io_o_sigma_0_3_ready) && io_o_sigma_0_4_ready) && io_o_sigma_0_5_ready) && io_o_sigma_0_6_ready) && io_o_sigma_0_7_ready);
  assign w_o_sigma_ready_1 = (((((((io_o_sigma_1_0_ready && io_o_sigma_1_1_ready) && io_o_sigma_1_2_ready) && io_o_sigma_1_3_ready) && io_o_sigma_1_4_ready) && io_o_sigma_1_5_ready) && io_o_sigma_1_6_ready) && io_o_sigma_1_7_ready);
  assign w_o_sigma_ready_2 = (((((((io_o_sigma_2_0_ready && io_o_sigma_2_1_ready) && io_o_sigma_2_2_ready) && io_o_sigma_2_3_ready) && io_o_sigma_2_4_ready) && io_o_sigma_2_5_ready) && io_o_sigma_2_6_ready) && io_o_sigma_2_7_ready);
  assign w_o_sigma_ready_3 = (((((((io_o_sigma_3_0_ready && io_o_sigma_3_1_ready) && io_o_sigma_3_2_ready) && io_o_sigma_3_3_ready) && io_o_sigma_3_4_ready) && io_o_sigma_3_5_ready) && io_o_sigma_3_6_ready) && io_o_sigma_3_7_ready);
  assign w_o_sigma_ready_4 = (((((((io_o_sigma_4_0_ready && io_o_sigma_4_1_ready) && io_o_sigma_4_2_ready) && io_o_sigma_4_3_ready) && io_o_sigma_4_4_ready) && io_o_sigma_4_5_ready) && io_o_sigma_4_6_ready) && io_o_sigma_4_7_ready);
  assign w_o_sigma_ready_5 = (((((((io_o_sigma_5_0_ready && io_o_sigma_5_1_ready) && io_o_sigma_5_2_ready) && io_o_sigma_5_3_ready) && io_o_sigma_5_4_ready) && io_o_sigma_5_5_ready) && io_o_sigma_5_6_ready) && io_o_sigma_5_7_ready);
  assign w_o_sigma_ready_6 = (((((((io_o_sigma_6_0_ready && io_o_sigma_6_1_ready) && io_o_sigma_6_2_ready) && io_o_sigma_6_3_ready) && io_o_sigma_6_4_ready) && io_o_sigma_6_5_ready) && io_o_sigma_6_6_ready) && io_o_sigma_6_7_ready);
  assign w_o_sigma_ready_7 = (((((((io_o_sigma_7_0_ready && io_o_sigma_7_1_ready) && io_o_sigma_7_2_ready) && io_o_sigma_7_3_ready) && io_o_sigma_7_4_ready) && io_o_sigma_7_5_ready) && io_o_sigma_7_6_ready) && io_o_sigma_7_7_ready);
  assign o_sigma_ready = (((((((w_o_sigma_ready_0 && w_o_sigma_ready_1) && w_o_sigma_ready_2) && w_o_sigma_ready_3) && w_o_sigma_ready_4) && w_o_sigma_ready_5) && w_o_sigma_ready_6) && w_o_sigma_ready_7);
  assign io_o_delta_wt_0_0_payload = temp_0_0;
  assign io_o_sigma_0_0_payload = temp_0_0;
  assign io_o_delta_wt_0_1_payload = temp_0_1;
  assign io_o_sigma_0_1_payload = temp_0_1;
  assign io_o_delta_wt_0_2_payload = temp_0_2;
  assign io_o_sigma_0_2_payload = temp_0_2;
  assign io_o_delta_wt_0_3_payload = temp_0_3;
  assign io_o_sigma_0_3_payload = temp_0_3;
  assign io_o_delta_wt_0_4_payload = temp_0_4;
  assign io_o_sigma_0_4_payload = temp_0_4;
  assign io_o_delta_wt_0_5_payload = temp_0_5;
  assign io_o_sigma_0_5_payload = temp_0_5;
  assign io_o_delta_wt_0_6_payload = temp_0_6;
  assign io_o_sigma_0_6_payload = temp_0_6;
  assign io_o_delta_wt_0_7_payload = temp_0_7;
  assign io_o_sigma_0_7_payload = temp_0_7;
  assign io_o_delta_wt_1_0_payload = temp_1_0;
  assign io_o_sigma_1_0_payload = temp_1_0;
  assign io_o_delta_wt_1_1_payload = temp_1_1;
  assign io_o_sigma_1_1_payload = temp_1_1;
  assign io_o_delta_wt_1_2_payload = temp_1_2;
  assign io_o_sigma_1_2_payload = temp_1_2;
  assign io_o_delta_wt_1_3_payload = temp_1_3;
  assign io_o_sigma_1_3_payload = temp_1_3;
  assign io_o_delta_wt_1_4_payload = temp_1_4;
  assign io_o_sigma_1_4_payload = temp_1_4;
  assign io_o_delta_wt_1_5_payload = temp_1_5;
  assign io_o_sigma_1_5_payload = temp_1_5;
  assign io_o_delta_wt_1_6_payload = temp_1_6;
  assign io_o_sigma_1_6_payload = temp_1_6;
  assign io_o_delta_wt_1_7_payload = temp_1_7;
  assign io_o_sigma_1_7_payload = temp_1_7;
  assign io_o_delta_wt_2_0_payload = temp_2_0;
  assign io_o_sigma_2_0_payload = temp_2_0;
  assign io_o_delta_wt_2_1_payload = temp_2_1;
  assign io_o_sigma_2_1_payload = temp_2_1;
  assign io_o_delta_wt_2_2_payload = temp_2_2;
  assign io_o_sigma_2_2_payload = temp_2_2;
  assign io_o_delta_wt_2_3_payload = temp_2_3;
  assign io_o_sigma_2_3_payload = temp_2_3;
  assign io_o_delta_wt_2_4_payload = temp_2_4;
  assign io_o_sigma_2_4_payload = temp_2_4;
  assign io_o_delta_wt_2_5_payload = temp_2_5;
  assign io_o_sigma_2_5_payload = temp_2_5;
  assign io_o_delta_wt_2_6_payload = temp_2_6;
  assign io_o_sigma_2_6_payload = temp_2_6;
  assign io_o_delta_wt_2_7_payload = temp_2_7;
  assign io_o_sigma_2_7_payload = temp_2_7;
  assign io_o_delta_wt_3_0_payload = temp_3_0;
  assign io_o_sigma_3_0_payload = temp_3_0;
  assign io_o_delta_wt_3_1_payload = temp_3_1;
  assign io_o_sigma_3_1_payload = temp_3_1;
  assign io_o_delta_wt_3_2_payload = temp_3_2;
  assign io_o_sigma_3_2_payload = temp_3_2;
  assign io_o_delta_wt_3_3_payload = temp_3_3;
  assign io_o_sigma_3_3_payload = temp_3_3;
  assign io_o_delta_wt_3_4_payload = temp_3_4;
  assign io_o_sigma_3_4_payload = temp_3_4;
  assign io_o_delta_wt_3_5_payload = temp_3_5;
  assign io_o_sigma_3_5_payload = temp_3_5;
  assign io_o_delta_wt_3_6_payload = temp_3_6;
  assign io_o_sigma_3_6_payload = temp_3_6;
  assign io_o_delta_wt_3_7_payload = temp_3_7;
  assign io_o_sigma_3_7_payload = temp_3_7;
  assign io_o_delta_wt_4_0_payload = temp_4_0;
  assign io_o_sigma_4_0_payload = temp_4_0;
  assign io_o_delta_wt_4_1_payload = temp_4_1;
  assign io_o_sigma_4_1_payload = temp_4_1;
  assign io_o_delta_wt_4_2_payload = temp_4_2;
  assign io_o_sigma_4_2_payload = temp_4_2;
  assign io_o_delta_wt_4_3_payload = temp_4_3;
  assign io_o_sigma_4_3_payload = temp_4_3;
  assign io_o_delta_wt_4_4_payload = temp_4_4;
  assign io_o_sigma_4_4_payload = temp_4_4;
  assign io_o_delta_wt_4_5_payload = temp_4_5;
  assign io_o_sigma_4_5_payload = temp_4_5;
  assign io_o_delta_wt_4_6_payload = temp_4_6;
  assign io_o_sigma_4_6_payload = temp_4_6;
  assign io_o_delta_wt_4_7_payload = temp_4_7;
  assign io_o_sigma_4_7_payload = temp_4_7;
  assign io_o_delta_wt_5_0_payload = temp_5_0;
  assign io_o_sigma_5_0_payload = temp_5_0;
  assign io_o_delta_wt_5_1_payload = temp_5_1;
  assign io_o_sigma_5_1_payload = temp_5_1;
  assign io_o_delta_wt_5_2_payload = temp_5_2;
  assign io_o_sigma_5_2_payload = temp_5_2;
  assign io_o_delta_wt_5_3_payload = temp_5_3;
  assign io_o_sigma_5_3_payload = temp_5_3;
  assign io_o_delta_wt_5_4_payload = temp_5_4;
  assign io_o_sigma_5_4_payload = temp_5_4;
  assign io_o_delta_wt_5_5_payload = temp_5_5;
  assign io_o_sigma_5_5_payload = temp_5_5;
  assign io_o_delta_wt_5_6_payload = temp_5_6;
  assign io_o_sigma_5_6_payload = temp_5_6;
  assign io_o_delta_wt_5_7_payload = temp_5_7;
  assign io_o_sigma_5_7_payload = temp_5_7;
  assign io_o_delta_wt_6_0_payload = temp_6_0;
  assign io_o_sigma_6_0_payload = temp_6_0;
  assign io_o_delta_wt_6_1_payload = temp_6_1;
  assign io_o_sigma_6_1_payload = temp_6_1;
  assign io_o_delta_wt_6_2_payload = temp_6_2;
  assign io_o_sigma_6_2_payload = temp_6_2;
  assign io_o_delta_wt_6_3_payload = temp_6_3;
  assign io_o_sigma_6_3_payload = temp_6_3;
  assign io_o_delta_wt_6_4_payload = temp_6_4;
  assign io_o_sigma_6_4_payload = temp_6_4;
  assign io_o_delta_wt_6_5_payload = temp_6_5;
  assign io_o_sigma_6_5_payload = temp_6_5;
  assign io_o_delta_wt_6_6_payload = temp_6_6;
  assign io_o_sigma_6_6_payload = temp_6_6;
  assign io_o_delta_wt_6_7_payload = temp_6_7;
  assign io_o_sigma_6_7_payload = temp_6_7;
  assign io_o_delta_wt_7_0_payload = temp_7_0;
  assign io_o_sigma_7_0_payload = temp_7_0;
  assign io_o_delta_wt_7_1_payload = temp_7_1;
  assign io_o_sigma_7_1_payload = temp_7_1;
  assign io_o_delta_wt_7_2_payload = temp_7_2;
  assign io_o_sigma_7_2_payload = temp_7_2;
  assign io_o_delta_wt_7_3_payload = temp_7_3;
  assign io_o_sigma_7_3_payload = temp_7_3;
  assign io_o_delta_wt_7_4_payload = temp_7_4;
  assign io_o_sigma_7_4_payload = temp_7_4;
  assign io_o_delta_wt_7_5_payload = temp_7_5;
  assign io_o_sigma_7_5_payload = temp_7_5;
  assign io_o_delta_wt_7_6_payload = temp_7_6;
  assign io_o_sigma_7_6_payload = temp_7_6;
  assign io_o_delta_wt_7_7_payload = temp_7_7;
  assign io_o_sigma_7_7_payload = temp_7_7;
  assign mux_fsm_wantExit = 1'b0;
  always @(*) begin
    mux_fsm_wantStart = 1'b0;
    case(mux_fsm_stateReg)
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV : begin
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA : begin
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA : begin
      end
      default : begin
        mux_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign mux_fsm_wantKill = 1'b0;
  always @(*) begin
    mux_fsm_stateNext = mux_fsm_stateReg;
    case(mux_fsm_stateReg)
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV : begin
        if(when_conv_mux_l83) begin
          if(when_conv_mux_l92) begin
            mux_fsm_stateNext = `mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA;
          end else begin
            mux_fsm_stateNext = `mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA;
          end
        end
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA : begin
        if(when_conv_mux_l103) begin
          mux_fsm_stateNext = `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV;
        end
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA : begin
        if(when_conv_mux_l110) begin
          mux_fsm_stateNext = `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV;
        end
      end
      default : begin
      end
    endcase
    if(mux_fsm_wantStart) begin
      mux_fsm_stateNext = `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV;
    end
    if(mux_fsm_wantKill) begin
      mux_fsm_stateNext = `mux_fsm_enumDefinition_binary_sequential_mux_fsm_BOOT;
    end
  end

  assign when_conv_mux_l83 = (indata_valid && indata_ready);
  assign when_conv_mux_l92 = (io_is_delta_wt == 1'b1);
  assign when_conv_mux_l103 = (o_delta_wt_valid && o_delta_wt_ready);
  assign when_conv_mux_l110 = (o_sigma_valid && o_sigma_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      temp_0_0 <= 32'h0;
      temp_0_1 <= 32'h0;
      temp_0_2 <= 32'h0;
      temp_0_3 <= 32'h0;
      temp_0_4 <= 32'h0;
      temp_0_5 <= 32'h0;
      temp_0_6 <= 32'h0;
      temp_0_7 <= 32'h0;
      temp_1_0 <= 32'h0;
      temp_1_1 <= 32'h0;
      temp_1_2 <= 32'h0;
      temp_1_3 <= 32'h0;
      temp_1_4 <= 32'h0;
      temp_1_5 <= 32'h0;
      temp_1_6 <= 32'h0;
      temp_1_7 <= 32'h0;
      temp_2_0 <= 32'h0;
      temp_2_1 <= 32'h0;
      temp_2_2 <= 32'h0;
      temp_2_3 <= 32'h0;
      temp_2_4 <= 32'h0;
      temp_2_5 <= 32'h0;
      temp_2_6 <= 32'h0;
      temp_2_7 <= 32'h0;
      temp_3_0 <= 32'h0;
      temp_3_1 <= 32'h0;
      temp_3_2 <= 32'h0;
      temp_3_3 <= 32'h0;
      temp_3_4 <= 32'h0;
      temp_3_5 <= 32'h0;
      temp_3_6 <= 32'h0;
      temp_3_7 <= 32'h0;
      temp_4_0 <= 32'h0;
      temp_4_1 <= 32'h0;
      temp_4_2 <= 32'h0;
      temp_4_3 <= 32'h0;
      temp_4_4 <= 32'h0;
      temp_4_5 <= 32'h0;
      temp_4_6 <= 32'h0;
      temp_4_7 <= 32'h0;
      temp_5_0 <= 32'h0;
      temp_5_1 <= 32'h0;
      temp_5_2 <= 32'h0;
      temp_5_3 <= 32'h0;
      temp_5_4 <= 32'h0;
      temp_5_5 <= 32'h0;
      temp_5_6 <= 32'h0;
      temp_5_7 <= 32'h0;
      temp_6_0 <= 32'h0;
      temp_6_1 <= 32'h0;
      temp_6_2 <= 32'h0;
      temp_6_3 <= 32'h0;
      temp_6_4 <= 32'h0;
      temp_6_5 <= 32'h0;
      temp_6_6 <= 32'h0;
      temp_6_7 <= 32'h0;
      temp_7_0 <= 32'h0;
      temp_7_1 <= 32'h0;
      temp_7_2 <= 32'h0;
      temp_7_3 <= 32'h0;
      temp_7_4 <= 32'h0;
      temp_7_5 <= 32'h0;
      temp_7_6 <= 32'h0;
      temp_7_7 <= 32'h0;
      mux_fsm_stateReg <= `mux_fsm_enumDefinition_binary_sequential_mux_fsm_BOOT;
    end else begin
      mux_fsm_stateReg <= mux_fsm_stateNext;
      case(mux_fsm_stateReg)
        `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV : begin
          if(when_conv_mux_l83) begin
            temp_0_0 <= io_indata_0_0_payload;
            temp_0_1 <= io_indata_0_1_payload;
            temp_0_2 <= io_indata_0_2_payload;
            temp_0_3 <= io_indata_0_3_payload;
            temp_0_4 <= io_indata_0_4_payload;
            temp_0_5 <= io_indata_0_5_payload;
            temp_0_6 <= io_indata_0_6_payload;
            temp_0_7 <= io_indata_0_7_payload;
            temp_1_0 <= io_indata_1_0_payload;
            temp_1_1 <= io_indata_1_1_payload;
            temp_1_2 <= io_indata_1_2_payload;
            temp_1_3 <= io_indata_1_3_payload;
            temp_1_4 <= io_indata_1_4_payload;
            temp_1_5 <= io_indata_1_5_payload;
            temp_1_6 <= io_indata_1_6_payload;
            temp_1_7 <= io_indata_1_7_payload;
            temp_2_0 <= io_indata_2_0_payload;
            temp_2_1 <= io_indata_2_1_payload;
            temp_2_2 <= io_indata_2_2_payload;
            temp_2_3 <= io_indata_2_3_payload;
            temp_2_4 <= io_indata_2_4_payload;
            temp_2_5 <= io_indata_2_5_payload;
            temp_2_6 <= io_indata_2_6_payload;
            temp_2_7 <= io_indata_2_7_payload;
            temp_3_0 <= io_indata_3_0_payload;
            temp_3_1 <= io_indata_3_1_payload;
            temp_3_2 <= io_indata_3_2_payload;
            temp_3_3 <= io_indata_3_3_payload;
            temp_3_4 <= io_indata_3_4_payload;
            temp_3_5 <= io_indata_3_5_payload;
            temp_3_6 <= io_indata_3_6_payload;
            temp_3_7 <= io_indata_3_7_payload;
            temp_4_0 <= io_indata_4_0_payload;
            temp_4_1 <= io_indata_4_1_payload;
            temp_4_2 <= io_indata_4_2_payload;
            temp_4_3 <= io_indata_4_3_payload;
            temp_4_4 <= io_indata_4_4_payload;
            temp_4_5 <= io_indata_4_5_payload;
            temp_4_6 <= io_indata_4_6_payload;
            temp_4_7 <= io_indata_4_7_payload;
            temp_5_0 <= io_indata_5_0_payload;
            temp_5_1 <= io_indata_5_1_payload;
            temp_5_2 <= io_indata_5_2_payload;
            temp_5_3 <= io_indata_5_3_payload;
            temp_5_4 <= io_indata_5_4_payload;
            temp_5_5 <= io_indata_5_5_payload;
            temp_5_6 <= io_indata_5_6_payload;
            temp_5_7 <= io_indata_5_7_payload;
            temp_6_0 <= io_indata_6_0_payload;
            temp_6_1 <= io_indata_6_1_payload;
            temp_6_2 <= io_indata_6_2_payload;
            temp_6_3 <= io_indata_6_3_payload;
            temp_6_4 <= io_indata_6_4_payload;
            temp_6_5 <= io_indata_6_5_payload;
            temp_6_6 <= io_indata_6_6_payload;
            temp_6_7 <= io_indata_6_7_payload;
            temp_7_0 <= io_indata_7_0_payload;
            temp_7_1 <= io_indata_7_1_payload;
            temp_7_2 <= io_indata_7_2_payload;
            temp_7_3 <= io_indata_7_3_payload;
            temp_7_4 <= io_indata_7_4_payload;
            temp_7_5 <= io_indata_7_5_payload;
            temp_7_6 <= io_indata_7_6_payload;
            temp_7_7 <= io_indata_7_7_payload;
          end
        end
        `mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA : begin
        end
        `mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

module mac_acc_array (
  input               s_ft_0_valid,
  output              s_ft_0_ready,
  input      [31:0]   s_ft_0_payload,
  input               s_ft_1_valid,
  output              s_ft_1_ready,
  input      [31:0]   s_ft_1_payload,
  input               s_ft_2_valid,
  output              s_ft_2_ready,
  input      [31:0]   s_ft_2_payload,
  input               s_ft_3_valid,
  output              s_ft_3_ready,
  input      [31:0]   s_ft_3_payload,
  input               s_ft_4_valid,
  output              s_ft_4_ready,
  input      [31:0]   s_ft_4_payload,
  input               s_ft_5_valid,
  output              s_ft_5_ready,
  input      [31:0]   s_ft_5_payload,
  input               s_ft_6_valid,
  output              s_ft_6_ready,
  input      [31:0]   s_ft_6_payload,
  input               s_ft_7_valid,
  output              s_ft_7_ready,
  input      [31:0]   s_ft_7_payload,
  input               s_wt_0_0_valid,
  output              s_wt_0_0_ready,
  input      [31:0]   s_wt_0_0_payload,
  input               s_wt_0_1_valid,
  output              s_wt_0_1_ready,
  input      [31:0]   s_wt_0_1_payload,
  input               s_wt_0_2_valid,
  output              s_wt_0_2_ready,
  input      [31:0]   s_wt_0_2_payload,
  input               s_wt_0_3_valid,
  output              s_wt_0_3_ready,
  input      [31:0]   s_wt_0_3_payload,
  input               s_wt_0_4_valid,
  output              s_wt_0_4_ready,
  input      [31:0]   s_wt_0_4_payload,
  input               s_wt_0_5_valid,
  output              s_wt_0_5_ready,
  input      [31:0]   s_wt_0_5_payload,
  input               s_wt_0_6_valid,
  output              s_wt_0_6_ready,
  input      [31:0]   s_wt_0_6_payload,
  input               s_wt_0_7_valid,
  output              s_wt_0_7_ready,
  input      [31:0]   s_wt_0_7_payload,
  input               s_wt_1_0_valid,
  output              s_wt_1_0_ready,
  input      [31:0]   s_wt_1_0_payload,
  input               s_wt_1_1_valid,
  output              s_wt_1_1_ready,
  input      [31:0]   s_wt_1_1_payload,
  input               s_wt_1_2_valid,
  output              s_wt_1_2_ready,
  input      [31:0]   s_wt_1_2_payload,
  input               s_wt_1_3_valid,
  output              s_wt_1_3_ready,
  input      [31:0]   s_wt_1_3_payload,
  input               s_wt_1_4_valid,
  output              s_wt_1_4_ready,
  input      [31:0]   s_wt_1_4_payload,
  input               s_wt_1_5_valid,
  output              s_wt_1_5_ready,
  input      [31:0]   s_wt_1_5_payload,
  input               s_wt_1_6_valid,
  output              s_wt_1_6_ready,
  input      [31:0]   s_wt_1_6_payload,
  input               s_wt_1_7_valid,
  output              s_wt_1_7_ready,
  input      [31:0]   s_wt_1_7_payload,
  input               s_wt_2_0_valid,
  output              s_wt_2_0_ready,
  input      [31:0]   s_wt_2_0_payload,
  input               s_wt_2_1_valid,
  output              s_wt_2_1_ready,
  input      [31:0]   s_wt_2_1_payload,
  input               s_wt_2_2_valid,
  output              s_wt_2_2_ready,
  input      [31:0]   s_wt_2_2_payload,
  input               s_wt_2_3_valid,
  output              s_wt_2_3_ready,
  input      [31:0]   s_wt_2_3_payload,
  input               s_wt_2_4_valid,
  output              s_wt_2_4_ready,
  input      [31:0]   s_wt_2_4_payload,
  input               s_wt_2_5_valid,
  output              s_wt_2_5_ready,
  input      [31:0]   s_wt_2_5_payload,
  input               s_wt_2_6_valid,
  output              s_wt_2_6_ready,
  input      [31:0]   s_wt_2_6_payload,
  input               s_wt_2_7_valid,
  output              s_wt_2_7_ready,
  input      [31:0]   s_wt_2_7_payload,
  input               s_wt_3_0_valid,
  output              s_wt_3_0_ready,
  input      [31:0]   s_wt_3_0_payload,
  input               s_wt_3_1_valid,
  output              s_wt_3_1_ready,
  input      [31:0]   s_wt_3_1_payload,
  input               s_wt_3_2_valid,
  output              s_wt_3_2_ready,
  input      [31:0]   s_wt_3_2_payload,
  input               s_wt_3_3_valid,
  output              s_wt_3_3_ready,
  input      [31:0]   s_wt_3_3_payload,
  input               s_wt_3_4_valid,
  output              s_wt_3_4_ready,
  input      [31:0]   s_wt_3_4_payload,
  input               s_wt_3_5_valid,
  output              s_wt_3_5_ready,
  input      [31:0]   s_wt_3_5_payload,
  input               s_wt_3_6_valid,
  output              s_wt_3_6_ready,
  input      [31:0]   s_wt_3_6_payload,
  input               s_wt_3_7_valid,
  output              s_wt_3_7_ready,
  input      [31:0]   s_wt_3_7_payload,
  input               s_wt_4_0_valid,
  output              s_wt_4_0_ready,
  input      [31:0]   s_wt_4_0_payload,
  input               s_wt_4_1_valid,
  output              s_wt_4_1_ready,
  input      [31:0]   s_wt_4_1_payload,
  input               s_wt_4_2_valid,
  output              s_wt_4_2_ready,
  input      [31:0]   s_wt_4_2_payload,
  input               s_wt_4_3_valid,
  output              s_wt_4_3_ready,
  input      [31:0]   s_wt_4_3_payload,
  input               s_wt_4_4_valid,
  output              s_wt_4_4_ready,
  input      [31:0]   s_wt_4_4_payload,
  input               s_wt_4_5_valid,
  output              s_wt_4_5_ready,
  input      [31:0]   s_wt_4_5_payload,
  input               s_wt_4_6_valid,
  output              s_wt_4_6_ready,
  input      [31:0]   s_wt_4_6_payload,
  input               s_wt_4_7_valid,
  output              s_wt_4_7_ready,
  input      [31:0]   s_wt_4_7_payload,
  input               s_wt_5_0_valid,
  output              s_wt_5_0_ready,
  input      [31:0]   s_wt_5_0_payload,
  input               s_wt_5_1_valid,
  output              s_wt_5_1_ready,
  input      [31:0]   s_wt_5_1_payload,
  input               s_wt_5_2_valid,
  output              s_wt_5_2_ready,
  input      [31:0]   s_wt_5_2_payload,
  input               s_wt_5_3_valid,
  output              s_wt_5_3_ready,
  input      [31:0]   s_wt_5_3_payload,
  input               s_wt_5_4_valid,
  output              s_wt_5_4_ready,
  input      [31:0]   s_wt_5_4_payload,
  input               s_wt_5_5_valid,
  output              s_wt_5_5_ready,
  input      [31:0]   s_wt_5_5_payload,
  input               s_wt_5_6_valid,
  output              s_wt_5_6_ready,
  input      [31:0]   s_wt_5_6_payload,
  input               s_wt_5_7_valid,
  output              s_wt_5_7_ready,
  input      [31:0]   s_wt_5_7_payload,
  input               s_wt_6_0_valid,
  output              s_wt_6_0_ready,
  input      [31:0]   s_wt_6_0_payload,
  input               s_wt_6_1_valid,
  output              s_wt_6_1_ready,
  input      [31:0]   s_wt_6_1_payload,
  input               s_wt_6_2_valid,
  output              s_wt_6_2_ready,
  input      [31:0]   s_wt_6_2_payload,
  input               s_wt_6_3_valid,
  output              s_wt_6_3_ready,
  input      [31:0]   s_wt_6_3_payload,
  input               s_wt_6_4_valid,
  output              s_wt_6_4_ready,
  input      [31:0]   s_wt_6_4_payload,
  input               s_wt_6_5_valid,
  output              s_wt_6_5_ready,
  input      [31:0]   s_wt_6_5_payload,
  input               s_wt_6_6_valid,
  output              s_wt_6_6_ready,
  input      [31:0]   s_wt_6_6_payload,
  input               s_wt_6_7_valid,
  output              s_wt_6_7_ready,
  input      [31:0]   s_wt_6_7_payload,
  input               s_wt_7_0_valid,
  output              s_wt_7_0_ready,
  input      [31:0]   s_wt_7_0_payload,
  input               s_wt_7_1_valid,
  output              s_wt_7_1_ready,
  input      [31:0]   s_wt_7_1_payload,
  input               s_wt_7_2_valid,
  output              s_wt_7_2_ready,
  input      [31:0]   s_wt_7_2_payload,
  input               s_wt_7_3_valid,
  output              s_wt_7_3_ready,
  input      [31:0]   s_wt_7_3_payload,
  input               s_wt_7_4_valid,
  output              s_wt_7_4_ready,
  input      [31:0]   s_wt_7_4_payload,
  input               s_wt_7_5_valid,
  output              s_wt_7_5_ready,
  input      [31:0]   s_wt_7_5_payload,
  input               s_wt_7_6_valid,
  output              s_wt_7_6_ready,
  input      [31:0]   s_wt_7_6_payload,
  input               s_wt_7_7_valid,
  output              s_wt_7_7_ready,
  input      [31:0]   s_wt_7_7_payload,
  output              s_out_0_0_valid,
  input               s_out_0_0_ready,
  output     [31:0]   s_out_0_0_payload,
  output              s_out_0_1_valid,
  input               s_out_0_1_ready,
  output     [31:0]   s_out_0_1_payload,
  output              s_out_0_2_valid,
  input               s_out_0_2_ready,
  output     [31:0]   s_out_0_2_payload,
  output              s_out_0_3_valid,
  input               s_out_0_3_ready,
  output     [31:0]   s_out_0_3_payload,
  output              s_out_0_4_valid,
  input               s_out_0_4_ready,
  output     [31:0]   s_out_0_4_payload,
  output              s_out_0_5_valid,
  input               s_out_0_5_ready,
  output     [31:0]   s_out_0_5_payload,
  output              s_out_0_6_valid,
  input               s_out_0_6_ready,
  output     [31:0]   s_out_0_6_payload,
  output              s_out_0_7_valid,
  input               s_out_0_7_ready,
  output     [31:0]   s_out_0_7_payload,
  output              s_out_1_0_valid,
  input               s_out_1_0_ready,
  output     [31:0]   s_out_1_0_payload,
  output              s_out_1_1_valid,
  input               s_out_1_1_ready,
  output     [31:0]   s_out_1_1_payload,
  output              s_out_1_2_valid,
  input               s_out_1_2_ready,
  output     [31:0]   s_out_1_2_payload,
  output              s_out_1_3_valid,
  input               s_out_1_3_ready,
  output     [31:0]   s_out_1_3_payload,
  output              s_out_1_4_valid,
  input               s_out_1_4_ready,
  output     [31:0]   s_out_1_4_payload,
  output              s_out_1_5_valid,
  input               s_out_1_5_ready,
  output     [31:0]   s_out_1_5_payload,
  output              s_out_1_6_valid,
  input               s_out_1_6_ready,
  output     [31:0]   s_out_1_6_payload,
  output              s_out_1_7_valid,
  input               s_out_1_7_ready,
  output     [31:0]   s_out_1_7_payload,
  output              s_out_2_0_valid,
  input               s_out_2_0_ready,
  output     [31:0]   s_out_2_0_payload,
  output              s_out_2_1_valid,
  input               s_out_2_1_ready,
  output     [31:0]   s_out_2_1_payload,
  output              s_out_2_2_valid,
  input               s_out_2_2_ready,
  output     [31:0]   s_out_2_2_payload,
  output              s_out_2_3_valid,
  input               s_out_2_3_ready,
  output     [31:0]   s_out_2_3_payload,
  output              s_out_2_4_valid,
  input               s_out_2_4_ready,
  output     [31:0]   s_out_2_4_payload,
  output              s_out_2_5_valid,
  input               s_out_2_5_ready,
  output     [31:0]   s_out_2_5_payload,
  output              s_out_2_6_valid,
  input               s_out_2_6_ready,
  output     [31:0]   s_out_2_6_payload,
  output              s_out_2_7_valid,
  input               s_out_2_7_ready,
  output     [31:0]   s_out_2_7_payload,
  output              s_out_3_0_valid,
  input               s_out_3_0_ready,
  output     [31:0]   s_out_3_0_payload,
  output              s_out_3_1_valid,
  input               s_out_3_1_ready,
  output     [31:0]   s_out_3_1_payload,
  output              s_out_3_2_valid,
  input               s_out_3_2_ready,
  output     [31:0]   s_out_3_2_payload,
  output              s_out_3_3_valid,
  input               s_out_3_3_ready,
  output     [31:0]   s_out_3_3_payload,
  output              s_out_3_4_valid,
  input               s_out_3_4_ready,
  output     [31:0]   s_out_3_4_payload,
  output              s_out_3_5_valid,
  input               s_out_3_5_ready,
  output     [31:0]   s_out_3_5_payload,
  output              s_out_3_6_valid,
  input               s_out_3_6_ready,
  output     [31:0]   s_out_3_6_payload,
  output              s_out_3_7_valid,
  input               s_out_3_7_ready,
  output     [31:0]   s_out_3_7_payload,
  output              s_out_4_0_valid,
  input               s_out_4_0_ready,
  output     [31:0]   s_out_4_0_payload,
  output              s_out_4_1_valid,
  input               s_out_4_1_ready,
  output     [31:0]   s_out_4_1_payload,
  output              s_out_4_2_valid,
  input               s_out_4_2_ready,
  output     [31:0]   s_out_4_2_payload,
  output              s_out_4_3_valid,
  input               s_out_4_3_ready,
  output     [31:0]   s_out_4_3_payload,
  output              s_out_4_4_valid,
  input               s_out_4_4_ready,
  output     [31:0]   s_out_4_4_payload,
  output              s_out_4_5_valid,
  input               s_out_4_5_ready,
  output     [31:0]   s_out_4_5_payload,
  output              s_out_4_6_valid,
  input               s_out_4_6_ready,
  output     [31:0]   s_out_4_6_payload,
  output              s_out_4_7_valid,
  input               s_out_4_7_ready,
  output     [31:0]   s_out_4_7_payload,
  output              s_out_5_0_valid,
  input               s_out_5_0_ready,
  output     [31:0]   s_out_5_0_payload,
  output              s_out_5_1_valid,
  input               s_out_5_1_ready,
  output     [31:0]   s_out_5_1_payload,
  output              s_out_5_2_valid,
  input               s_out_5_2_ready,
  output     [31:0]   s_out_5_2_payload,
  output              s_out_5_3_valid,
  input               s_out_5_3_ready,
  output     [31:0]   s_out_5_3_payload,
  output              s_out_5_4_valid,
  input               s_out_5_4_ready,
  output     [31:0]   s_out_5_4_payload,
  output              s_out_5_5_valid,
  input               s_out_5_5_ready,
  output     [31:0]   s_out_5_5_payload,
  output              s_out_5_6_valid,
  input               s_out_5_6_ready,
  output     [31:0]   s_out_5_6_payload,
  output              s_out_5_7_valid,
  input               s_out_5_7_ready,
  output     [31:0]   s_out_5_7_payload,
  output              s_out_6_0_valid,
  input               s_out_6_0_ready,
  output     [31:0]   s_out_6_0_payload,
  output              s_out_6_1_valid,
  input               s_out_6_1_ready,
  output     [31:0]   s_out_6_1_payload,
  output              s_out_6_2_valid,
  input               s_out_6_2_ready,
  output     [31:0]   s_out_6_2_payload,
  output              s_out_6_3_valid,
  input               s_out_6_3_ready,
  output     [31:0]   s_out_6_3_payload,
  output              s_out_6_4_valid,
  input               s_out_6_4_ready,
  output     [31:0]   s_out_6_4_payload,
  output              s_out_6_5_valid,
  input               s_out_6_5_ready,
  output     [31:0]   s_out_6_5_payload,
  output              s_out_6_6_valid,
  input               s_out_6_6_ready,
  output     [31:0]   s_out_6_6_payload,
  output              s_out_6_7_valid,
  input               s_out_6_7_ready,
  output     [31:0]   s_out_6_7_payload,
  output              s_out_7_0_valid,
  input               s_out_7_0_ready,
  output     [31:0]   s_out_7_0_payload,
  output              s_out_7_1_valid,
  input               s_out_7_1_ready,
  output     [31:0]   s_out_7_1_payload,
  output              s_out_7_2_valid,
  input               s_out_7_2_ready,
  output     [31:0]   s_out_7_2_payload,
  output              s_out_7_3_valid,
  input               s_out_7_3_ready,
  output     [31:0]   s_out_7_3_payload,
  output              s_out_7_4_valid,
  input               s_out_7_4_ready,
  output     [31:0]   s_out_7_4_payload,
  output              s_out_7_5_valid,
  input               s_out_7_5_ready,
  output     [31:0]   s_out_7_5_payload,
  output              s_out_7_6_valid,
  input               s_out_7_6_ready,
  output     [31:0]   s_out_7_6_payload,
  output              s_out_7_7_valid,
  input               s_out_7_7_ready,
  output     [31:0]   s_out_7_7_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                mac_acc_atom_0_ina_0_ready;
  wire                mac_acc_atom_0_ina_1_ready;
  wire                mac_acc_atom_0_ina_2_ready;
  wire                mac_acc_atom_0_ina_3_ready;
  wire                mac_acc_atom_0_ina_4_ready;
  wire                mac_acc_atom_0_ina_5_ready;
  wire                mac_acc_atom_0_ina_6_ready;
  wire                mac_acc_atom_0_ina_7_ready;
  wire                mac_acc_atom_0_inb_0_ready;
  wire                mac_acc_atom_0_inb_1_ready;
  wire                mac_acc_atom_0_inb_2_ready;
  wire                mac_acc_atom_0_inb_3_ready;
  wire                mac_acc_atom_0_inb_4_ready;
  wire                mac_acc_atom_0_inb_5_ready;
  wire                mac_acc_atom_0_inb_6_ready;
  wire                mac_acc_atom_0_inb_7_ready;
  wire                mac_acc_atom_0_out_0_valid;
  wire       [31:0]   mac_acc_atom_0_out_0_payload;
  wire                mac_acc_atom_0_out_1_valid;
  wire       [31:0]   mac_acc_atom_0_out_1_payload;
  wire                mac_acc_atom_0_out_2_valid;
  wire       [31:0]   mac_acc_atom_0_out_2_payload;
  wire                mac_acc_atom_0_out_3_valid;
  wire       [31:0]   mac_acc_atom_0_out_3_payload;
  wire                mac_acc_atom_0_out_4_valid;
  wire       [31:0]   mac_acc_atom_0_out_4_payload;
  wire                mac_acc_atom_0_out_5_valid;
  wire       [31:0]   mac_acc_atom_0_out_5_payload;
  wire                mac_acc_atom_0_out_6_valid;
  wire       [31:0]   mac_acc_atom_0_out_6_payload;
  wire                mac_acc_atom_0_out_7_valid;
  wire       [31:0]   mac_acc_atom_0_out_7_payload;
  wire                mac_acc_atom_1_1_ina_0_ready;
  wire                mac_acc_atom_1_1_ina_1_ready;
  wire                mac_acc_atom_1_1_ina_2_ready;
  wire                mac_acc_atom_1_1_ina_3_ready;
  wire                mac_acc_atom_1_1_ina_4_ready;
  wire                mac_acc_atom_1_1_ina_5_ready;
  wire                mac_acc_atom_1_1_ina_6_ready;
  wire                mac_acc_atom_1_1_ina_7_ready;
  wire                mac_acc_atom_1_1_inb_0_ready;
  wire                mac_acc_atom_1_1_inb_1_ready;
  wire                mac_acc_atom_1_1_inb_2_ready;
  wire                mac_acc_atom_1_1_inb_3_ready;
  wire                mac_acc_atom_1_1_inb_4_ready;
  wire                mac_acc_atom_1_1_inb_5_ready;
  wire                mac_acc_atom_1_1_inb_6_ready;
  wire                mac_acc_atom_1_1_inb_7_ready;
  wire                mac_acc_atom_1_1_out_0_valid;
  wire       [31:0]   mac_acc_atom_1_1_out_0_payload;
  wire                mac_acc_atom_1_1_out_1_valid;
  wire       [31:0]   mac_acc_atom_1_1_out_1_payload;
  wire                mac_acc_atom_1_1_out_2_valid;
  wire       [31:0]   mac_acc_atom_1_1_out_2_payload;
  wire                mac_acc_atom_1_1_out_3_valid;
  wire       [31:0]   mac_acc_atom_1_1_out_3_payload;
  wire                mac_acc_atom_1_1_out_4_valid;
  wire       [31:0]   mac_acc_atom_1_1_out_4_payload;
  wire                mac_acc_atom_1_1_out_5_valid;
  wire       [31:0]   mac_acc_atom_1_1_out_5_payload;
  wire                mac_acc_atom_1_1_out_6_valid;
  wire       [31:0]   mac_acc_atom_1_1_out_6_payload;
  wire                mac_acc_atom_1_1_out_7_valid;
  wire       [31:0]   mac_acc_atom_1_1_out_7_payload;
  wire                mac_acc_atom_2_1_ina_0_ready;
  wire                mac_acc_atom_2_1_ina_1_ready;
  wire                mac_acc_atom_2_1_ina_2_ready;
  wire                mac_acc_atom_2_1_ina_3_ready;
  wire                mac_acc_atom_2_1_ina_4_ready;
  wire                mac_acc_atom_2_1_ina_5_ready;
  wire                mac_acc_atom_2_1_ina_6_ready;
  wire                mac_acc_atom_2_1_ina_7_ready;
  wire                mac_acc_atom_2_1_inb_0_ready;
  wire                mac_acc_atom_2_1_inb_1_ready;
  wire                mac_acc_atom_2_1_inb_2_ready;
  wire                mac_acc_atom_2_1_inb_3_ready;
  wire                mac_acc_atom_2_1_inb_4_ready;
  wire                mac_acc_atom_2_1_inb_5_ready;
  wire                mac_acc_atom_2_1_inb_6_ready;
  wire                mac_acc_atom_2_1_inb_7_ready;
  wire                mac_acc_atom_2_1_out_0_valid;
  wire       [31:0]   mac_acc_atom_2_1_out_0_payload;
  wire                mac_acc_atom_2_1_out_1_valid;
  wire       [31:0]   mac_acc_atom_2_1_out_1_payload;
  wire                mac_acc_atom_2_1_out_2_valid;
  wire       [31:0]   mac_acc_atom_2_1_out_2_payload;
  wire                mac_acc_atom_2_1_out_3_valid;
  wire       [31:0]   mac_acc_atom_2_1_out_3_payload;
  wire                mac_acc_atom_2_1_out_4_valid;
  wire       [31:0]   mac_acc_atom_2_1_out_4_payload;
  wire                mac_acc_atom_2_1_out_5_valid;
  wire       [31:0]   mac_acc_atom_2_1_out_5_payload;
  wire                mac_acc_atom_2_1_out_6_valid;
  wire       [31:0]   mac_acc_atom_2_1_out_6_payload;
  wire                mac_acc_atom_2_1_out_7_valid;
  wire       [31:0]   mac_acc_atom_2_1_out_7_payload;
  wire                mac_acc_atom_3_1_ina_0_ready;
  wire                mac_acc_atom_3_1_ina_1_ready;
  wire                mac_acc_atom_3_1_ina_2_ready;
  wire                mac_acc_atom_3_1_ina_3_ready;
  wire                mac_acc_atom_3_1_ina_4_ready;
  wire                mac_acc_atom_3_1_ina_5_ready;
  wire                mac_acc_atom_3_1_ina_6_ready;
  wire                mac_acc_atom_3_1_ina_7_ready;
  wire                mac_acc_atom_3_1_inb_0_ready;
  wire                mac_acc_atom_3_1_inb_1_ready;
  wire                mac_acc_atom_3_1_inb_2_ready;
  wire                mac_acc_atom_3_1_inb_3_ready;
  wire                mac_acc_atom_3_1_inb_4_ready;
  wire                mac_acc_atom_3_1_inb_5_ready;
  wire                mac_acc_atom_3_1_inb_6_ready;
  wire                mac_acc_atom_3_1_inb_7_ready;
  wire                mac_acc_atom_3_1_out_0_valid;
  wire       [31:0]   mac_acc_atom_3_1_out_0_payload;
  wire                mac_acc_atom_3_1_out_1_valid;
  wire       [31:0]   mac_acc_atom_3_1_out_1_payload;
  wire                mac_acc_atom_3_1_out_2_valid;
  wire       [31:0]   mac_acc_atom_3_1_out_2_payload;
  wire                mac_acc_atom_3_1_out_3_valid;
  wire       [31:0]   mac_acc_atom_3_1_out_3_payload;
  wire                mac_acc_atom_3_1_out_4_valid;
  wire       [31:0]   mac_acc_atom_3_1_out_4_payload;
  wire                mac_acc_atom_3_1_out_5_valid;
  wire       [31:0]   mac_acc_atom_3_1_out_5_payload;
  wire                mac_acc_atom_3_1_out_6_valid;
  wire       [31:0]   mac_acc_atom_3_1_out_6_payload;
  wire                mac_acc_atom_3_1_out_7_valid;
  wire       [31:0]   mac_acc_atom_3_1_out_7_payload;
  wire                mac_acc_atom_4_1_ina_0_ready;
  wire                mac_acc_atom_4_1_ina_1_ready;
  wire                mac_acc_atom_4_1_ina_2_ready;
  wire                mac_acc_atom_4_1_ina_3_ready;
  wire                mac_acc_atom_4_1_ina_4_ready;
  wire                mac_acc_atom_4_1_ina_5_ready;
  wire                mac_acc_atom_4_1_ina_6_ready;
  wire                mac_acc_atom_4_1_ina_7_ready;
  wire                mac_acc_atom_4_1_inb_0_ready;
  wire                mac_acc_atom_4_1_inb_1_ready;
  wire                mac_acc_atom_4_1_inb_2_ready;
  wire                mac_acc_atom_4_1_inb_3_ready;
  wire                mac_acc_atom_4_1_inb_4_ready;
  wire                mac_acc_atom_4_1_inb_5_ready;
  wire                mac_acc_atom_4_1_inb_6_ready;
  wire                mac_acc_atom_4_1_inb_7_ready;
  wire                mac_acc_atom_4_1_out_0_valid;
  wire       [31:0]   mac_acc_atom_4_1_out_0_payload;
  wire                mac_acc_atom_4_1_out_1_valid;
  wire       [31:0]   mac_acc_atom_4_1_out_1_payload;
  wire                mac_acc_atom_4_1_out_2_valid;
  wire       [31:0]   mac_acc_atom_4_1_out_2_payload;
  wire                mac_acc_atom_4_1_out_3_valid;
  wire       [31:0]   mac_acc_atom_4_1_out_3_payload;
  wire                mac_acc_atom_4_1_out_4_valid;
  wire       [31:0]   mac_acc_atom_4_1_out_4_payload;
  wire                mac_acc_atom_4_1_out_5_valid;
  wire       [31:0]   mac_acc_atom_4_1_out_5_payload;
  wire                mac_acc_atom_4_1_out_6_valid;
  wire       [31:0]   mac_acc_atom_4_1_out_6_payload;
  wire                mac_acc_atom_4_1_out_7_valid;
  wire       [31:0]   mac_acc_atom_4_1_out_7_payload;
  wire                mac_acc_atom_5_1_ina_0_ready;
  wire                mac_acc_atom_5_1_ina_1_ready;
  wire                mac_acc_atom_5_1_ina_2_ready;
  wire                mac_acc_atom_5_1_ina_3_ready;
  wire                mac_acc_atom_5_1_ina_4_ready;
  wire                mac_acc_atom_5_1_ina_5_ready;
  wire                mac_acc_atom_5_1_ina_6_ready;
  wire                mac_acc_atom_5_1_ina_7_ready;
  wire                mac_acc_atom_5_1_inb_0_ready;
  wire                mac_acc_atom_5_1_inb_1_ready;
  wire                mac_acc_atom_5_1_inb_2_ready;
  wire                mac_acc_atom_5_1_inb_3_ready;
  wire                mac_acc_atom_5_1_inb_4_ready;
  wire                mac_acc_atom_5_1_inb_5_ready;
  wire                mac_acc_atom_5_1_inb_6_ready;
  wire                mac_acc_atom_5_1_inb_7_ready;
  wire                mac_acc_atom_5_1_out_0_valid;
  wire       [31:0]   mac_acc_atom_5_1_out_0_payload;
  wire                mac_acc_atom_5_1_out_1_valid;
  wire       [31:0]   mac_acc_atom_5_1_out_1_payload;
  wire                mac_acc_atom_5_1_out_2_valid;
  wire       [31:0]   mac_acc_atom_5_1_out_2_payload;
  wire                mac_acc_atom_5_1_out_3_valid;
  wire       [31:0]   mac_acc_atom_5_1_out_3_payload;
  wire                mac_acc_atom_5_1_out_4_valid;
  wire       [31:0]   mac_acc_atom_5_1_out_4_payload;
  wire                mac_acc_atom_5_1_out_5_valid;
  wire       [31:0]   mac_acc_atom_5_1_out_5_payload;
  wire                mac_acc_atom_5_1_out_6_valid;
  wire       [31:0]   mac_acc_atom_5_1_out_6_payload;
  wire                mac_acc_atom_5_1_out_7_valid;
  wire       [31:0]   mac_acc_atom_5_1_out_7_payload;
  wire                mac_acc_atom_6_1_ina_0_ready;
  wire                mac_acc_atom_6_1_ina_1_ready;
  wire                mac_acc_atom_6_1_ina_2_ready;
  wire                mac_acc_atom_6_1_ina_3_ready;
  wire                mac_acc_atom_6_1_ina_4_ready;
  wire                mac_acc_atom_6_1_ina_5_ready;
  wire                mac_acc_atom_6_1_ina_6_ready;
  wire                mac_acc_atom_6_1_ina_7_ready;
  wire                mac_acc_atom_6_1_inb_0_ready;
  wire                mac_acc_atom_6_1_inb_1_ready;
  wire                mac_acc_atom_6_1_inb_2_ready;
  wire                mac_acc_atom_6_1_inb_3_ready;
  wire                mac_acc_atom_6_1_inb_4_ready;
  wire                mac_acc_atom_6_1_inb_5_ready;
  wire                mac_acc_atom_6_1_inb_6_ready;
  wire                mac_acc_atom_6_1_inb_7_ready;
  wire                mac_acc_atom_6_1_out_0_valid;
  wire       [31:0]   mac_acc_atom_6_1_out_0_payload;
  wire                mac_acc_atom_6_1_out_1_valid;
  wire       [31:0]   mac_acc_atom_6_1_out_1_payload;
  wire                mac_acc_atom_6_1_out_2_valid;
  wire       [31:0]   mac_acc_atom_6_1_out_2_payload;
  wire                mac_acc_atom_6_1_out_3_valid;
  wire       [31:0]   mac_acc_atom_6_1_out_3_payload;
  wire                mac_acc_atom_6_1_out_4_valid;
  wire       [31:0]   mac_acc_atom_6_1_out_4_payload;
  wire                mac_acc_atom_6_1_out_5_valid;
  wire       [31:0]   mac_acc_atom_6_1_out_5_payload;
  wire                mac_acc_atom_6_1_out_6_valid;
  wire       [31:0]   mac_acc_atom_6_1_out_6_payload;
  wire                mac_acc_atom_6_1_out_7_valid;
  wire       [31:0]   mac_acc_atom_6_1_out_7_payload;
  wire                mac_acc_atom_7_1_ina_0_ready;
  wire                mac_acc_atom_7_1_ina_1_ready;
  wire                mac_acc_atom_7_1_ina_2_ready;
  wire                mac_acc_atom_7_1_ina_3_ready;
  wire                mac_acc_atom_7_1_ina_4_ready;
  wire                mac_acc_atom_7_1_ina_5_ready;
  wire                mac_acc_atom_7_1_ina_6_ready;
  wire                mac_acc_atom_7_1_ina_7_ready;
  wire                mac_acc_atom_7_1_inb_0_ready;
  wire                mac_acc_atom_7_1_inb_1_ready;
  wire                mac_acc_atom_7_1_inb_2_ready;
  wire                mac_acc_atom_7_1_inb_3_ready;
  wire                mac_acc_atom_7_1_inb_4_ready;
  wire                mac_acc_atom_7_1_inb_5_ready;
  wire                mac_acc_atom_7_1_inb_6_ready;
  wire                mac_acc_atom_7_1_inb_7_ready;
  wire                mac_acc_atom_7_1_out_0_valid;
  wire       [31:0]   mac_acc_atom_7_1_out_0_payload;
  wire                mac_acc_atom_7_1_out_1_valid;
  wire       [31:0]   mac_acc_atom_7_1_out_1_payload;
  wire                mac_acc_atom_7_1_out_2_valid;
  wire       [31:0]   mac_acc_atom_7_1_out_2_payload;
  wire                mac_acc_atom_7_1_out_3_valid;
  wire       [31:0]   mac_acc_atom_7_1_out_3_payload;
  wire                mac_acc_atom_7_1_out_4_valid;
  wire       [31:0]   mac_acc_atom_7_1_out_4_payload;
  wire                mac_acc_atom_7_1_out_5_valid;
  wire       [31:0]   mac_acc_atom_7_1_out_5_payload;
  wire                mac_acc_atom_7_1_out_6_valid;
  wire       [31:0]   mac_acc_atom_7_1_out_6_payload;
  wire                mac_acc_atom_7_1_out_7_valid;
  wire       [31:0]   mac_acc_atom_7_1_out_7_payload;

  mac_acc_atom mac_acc_atom_0 (
    .ina_0_valid      (s_ft_0_valid                  ), //i
    .ina_0_ready      (mac_acc_atom_0_ina_0_ready    ), //o
    .ina_0_payload    (s_ft_0_payload                ), //i
    .ina_1_valid      (s_ft_1_valid                  ), //i
    .ina_1_ready      (mac_acc_atom_0_ina_1_ready    ), //o
    .ina_1_payload    (s_ft_1_payload                ), //i
    .ina_2_valid      (s_ft_2_valid                  ), //i
    .ina_2_ready      (mac_acc_atom_0_ina_2_ready    ), //o
    .ina_2_payload    (s_ft_2_payload                ), //i
    .ina_3_valid      (s_ft_3_valid                  ), //i
    .ina_3_ready      (mac_acc_atom_0_ina_3_ready    ), //o
    .ina_3_payload    (s_ft_3_payload                ), //i
    .ina_4_valid      (s_ft_4_valid                  ), //i
    .ina_4_ready      (mac_acc_atom_0_ina_4_ready    ), //o
    .ina_4_payload    (s_ft_4_payload                ), //i
    .ina_5_valid      (s_ft_5_valid                  ), //i
    .ina_5_ready      (mac_acc_atom_0_ina_5_ready    ), //o
    .ina_5_payload    (s_ft_5_payload                ), //i
    .ina_6_valid      (s_ft_6_valid                  ), //i
    .ina_6_ready      (mac_acc_atom_0_ina_6_ready    ), //o
    .ina_6_payload    (s_ft_6_payload                ), //i
    .ina_7_valid      (s_ft_7_valid                  ), //i
    .ina_7_ready      (mac_acc_atom_0_ina_7_ready    ), //o
    .ina_7_payload    (s_ft_7_payload                ), //i
    .inb_0_valid      (s_wt_0_0_valid                ), //i
    .inb_0_ready      (mac_acc_atom_0_inb_0_ready    ), //o
    .inb_0_payload    (s_wt_0_0_payload              ), //i
    .inb_1_valid      (s_wt_0_1_valid                ), //i
    .inb_1_ready      (mac_acc_atom_0_inb_1_ready    ), //o
    .inb_1_payload    (s_wt_0_1_payload              ), //i
    .inb_2_valid      (s_wt_0_2_valid                ), //i
    .inb_2_ready      (mac_acc_atom_0_inb_2_ready    ), //o
    .inb_2_payload    (s_wt_0_2_payload              ), //i
    .inb_3_valid      (s_wt_0_3_valid                ), //i
    .inb_3_ready      (mac_acc_atom_0_inb_3_ready    ), //o
    .inb_3_payload    (s_wt_0_3_payload              ), //i
    .inb_4_valid      (s_wt_0_4_valid                ), //i
    .inb_4_ready      (mac_acc_atom_0_inb_4_ready    ), //o
    .inb_4_payload    (s_wt_0_4_payload              ), //i
    .inb_5_valid      (s_wt_0_5_valid                ), //i
    .inb_5_ready      (mac_acc_atom_0_inb_5_ready    ), //o
    .inb_5_payload    (s_wt_0_5_payload              ), //i
    .inb_6_valid      (s_wt_0_6_valid                ), //i
    .inb_6_ready      (mac_acc_atom_0_inb_6_ready    ), //o
    .inb_6_payload    (s_wt_0_6_payload              ), //i
    .inb_7_valid      (s_wt_0_7_valid                ), //i
    .inb_7_ready      (mac_acc_atom_0_inb_7_ready    ), //o
    .inb_7_payload    (s_wt_0_7_payload              ), //i
    .out_0_valid      (mac_acc_atom_0_out_0_valid    ), //o
    .out_0_ready      (s_out_0_0_ready               ), //i
    .out_0_payload    (mac_acc_atom_0_out_0_payload  ), //o
    .out_1_valid      (mac_acc_atom_0_out_1_valid    ), //o
    .out_1_ready      (s_out_0_1_ready               ), //i
    .out_1_payload    (mac_acc_atom_0_out_1_payload  ), //o
    .out_2_valid      (mac_acc_atom_0_out_2_valid    ), //o
    .out_2_ready      (s_out_0_2_ready               ), //i
    .out_2_payload    (mac_acc_atom_0_out_2_payload  ), //o
    .out_3_valid      (mac_acc_atom_0_out_3_valid    ), //o
    .out_3_ready      (s_out_0_3_ready               ), //i
    .out_3_payload    (mac_acc_atom_0_out_3_payload  ), //o
    .out_4_valid      (mac_acc_atom_0_out_4_valid    ), //o
    .out_4_ready      (s_out_0_4_ready               ), //i
    .out_4_payload    (mac_acc_atom_0_out_4_payload  ), //o
    .out_5_valid      (mac_acc_atom_0_out_5_valid    ), //o
    .out_5_ready      (s_out_0_5_ready               ), //i
    .out_5_payload    (mac_acc_atom_0_out_5_payload  ), //o
    .out_6_valid      (mac_acc_atom_0_out_6_valid    ), //o
    .out_6_ready      (s_out_0_6_ready               ), //i
    .out_6_payload    (mac_acc_atom_0_out_6_payload  ), //o
    .out_7_valid      (mac_acc_atom_0_out_7_valid    ), //o
    .out_7_ready      (s_out_0_7_ready               ), //i
    .out_7_payload    (mac_acc_atom_0_out_7_payload  ), //o
    .par_acc_cnt      (par_acc_cnt                   ), //i
    .acc_enable       (acc_enable                    ), //i
    .clk              (clk                           ), //i
    .reset            (reset                         )  //i
  );
  mac_acc_atom_1 mac_acc_atom_1_1 (
    .ina_0_valid      (s_ft_0_valid                    ), //i
    .ina_0_ready      (mac_acc_atom_1_1_ina_0_ready    ), //o
    .ina_0_payload    (s_ft_0_payload                  ), //i
    .ina_1_valid      (s_ft_1_valid                    ), //i
    .ina_1_ready      (mac_acc_atom_1_1_ina_1_ready    ), //o
    .ina_1_payload    (s_ft_1_payload                  ), //i
    .ina_2_valid      (s_ft_2_valid                    ), //i
    .ina_2_ready      (mac_acc_atom_1_1_ina_2_ready    ), //o
    .ina_2_payload    (s_ft_2_payload                  ), //i
    .ina_3_valid      (s_ft_3_valid                    ), //i
    .ina_3_ready      (mac_acc_atom_1_1_ina_3_ready    ), //o
    .ina_3_payload    (s_ft_3_payload                  ), //i
    .ina_4_valid      (s_ft_4_valid                    ), //i
    .ina_4_ready      (mac_acc_atom_1_1_ina_4_ready    ), //o
    .ina_4_payload    (s_ft_4_payload                  ), //i
    .ina_5_valid      (s_ft_5_valid                    ), //i
    .ina_5_ready      (mac_acc_atom_1_1_ina_5_ready    ), //o
    .ina_5_payload    (s_ft_5_payload                  ), //i
    .ina_6_valid      (s_ft_6_valid                    ), //i
    .ina_6_ready      (mac_acc_atom_1_1_ina_6_ready    ), //o
    .ina_6_payload    (s_ft_6_payload                  ), //i
    .ina_7_valid      (s_ft_7_valid                    ), //i
    .ina_7_ready      (mac_acc_atom_1_1_ina_7_ready    ), //o
    .ina_7_payload    (s_ft_7_payload                  ), //i
    .inb_0_valid      (s_wt_1_0_valid                  ), //i
    .inb_0_ready      (mac_acc_atom_1_1_inb_0_ready    ), //o
    .inb_0_payload    (s_wt_1_0_payload                ), //i
    .inb_1_valid      (s_wt_1_1_valid                  ), //i
    .inb_1_ready      (mac_acc_atom_1_1_inb_1_ready    ), //o
    .inb_1_payload    (s_wt_1_1_payload                ), //i
    .inb_2_valid      (s_wt_1_2_valid                  ), //i
    .inb_2_ready      (mac_acc_atom_1_1_inb_2_ready    ), //o
    .inb_2_payload    (s_wt_1_2_payload                ), //i
    .inb_3_valid      (s_wt_1_3_valid                  ), //i
    .inb_3_ready      (mac_acc_atom_1_1_inb_3_ready    ), //o
    .inb_3_payload    (s_wt_1_3_payload                ), //i
    .inb_4_valid      (s_wt_1_4_valid                  ), //i
    .inb_4_ready      (mac_acc_atom_1_1_inb_4_ready    ), //o
    .inb_4_payload    (s_wt_1_4_payload                ), //i
    .inb_5_valid      (s_wt_1_5_valid                  ), //i
    .inb_5_ready      (mac_acc_atom_1_1_inb_5_ready    ), //o
    .inb_5_payload    (s_wt_1_5_payload                ), //i
    .inb_6_valid      (s_wt_1_6_valid                  ), //i
    .inb_6_ready      (mac_acc_atom_1_1_inb_6_ready    ), //o
    .inb_6_payload    (s_wt_1_6_payload                ), //i
    .inb_7_valid      (s_wt_1_7_valid                  ), //i
    .inb_7_ready      (mac_acc_atom_1_1_inb_7_ready    ), //o
    .inb_7_payload    (s_wt_1_7_payload                ), //i
    .out_0_valid      (mac_acc_atom_1_1_out_0_valid    ), //o
    .out_0_ready      (s_out_1_0_ready                 ), //i
    .out_0_payload    (mac_acc_atom_1_1_out_0_payload  ), //o
    .out_1_valid      (mac_acc_atom_1_1_out_1_valid    ), //o
    .out_1_ready      (s_out_1_1_ready                 ), //i
    .out_1_payload    (mac_acc_atom_1_1_out_1_payload  ), //o
    .out_2_valid      (mac_acc_atom_1_1_out_2_valid    ), //o
    .out_2_ready      (s_out_1_2_ready                 ), //i
    .out_2_payload    (mac_acc_atom_1_1_out_2_payload  ), //o
    .out_3_valid      (mac_acc_atom_1_1_out_3_valid    ), //o
    .out_3_ready      (s_out_1_3_ready                 ), //i
    .out_3_payload    (mac_acc_atom_1_1_out_3_payload  ), //o
    .out_4_valid      (mac_acc_atom_1_1_out_4_valid    ), //o
    .out_4_ready      (s_out_1_4_ready                 ), //i
    .out_4_payload    (mac_acc_atom_1_1_out_4_payload  ), //o
    .out_5_valid      (mac_acc_atom_1_1_out_5_valid    ), //o
    .out_5_ready      (s_out_1_5_ready                 ), //i
    .out_5_payload    (mac_acc_atom_1_1_out_5_payload  ), //o
    .out_6_valid      (mac_acc_atom_1_1_out_6_valid    ), //o
    .out_6_ready      (s_out_1_6_ready                 ), //i
    .out_6_payload    (mac_acc_atom_1_1_out_6_payload  ), //o
    .out_7_valid      (mac_acc_atom_1_1_out_7_valid    ), //o
    .out_7_ready      (s_out_1_7_ready                 ), //i
    .out_7_payload    (mac_acc_atom_1_1_out_7_payload  ), //o
    .par_acc_cnt      (par_acc_cnt                     ), //i
    .acc_enable       (acc_enable                      ), //i
    .clk              (clk                             ), //i
    .reset            (reset                           )  //i
  );
  mac_acc_atom_2 mac_acc_atom_2_1 (
    .ina_0_valid      (s_ft_0_valid                    ), //i
    .ina_0_ready      (mac_acc_atom_2_1_ina_0_ready    ), //o
    .ina_0_payload    (s_ft_0_payload                  ), //i
    .ina_1_valid      (s_ft_1_valid                    ), //i
    .ina_1_ready      (mac_acc_atom_2_1_ina_1_ready    ), //o
    .ina_1_payload    (s_ft_1_payload                  ), //i
    .ina_2_valid      (s_ft_2_valid                    ), //i
    .ina_2_ready      (mac_acc_atom_2_1_ina_2_ready    ), //o
    .ina_2_payload    (s_ft_2_payload                  ), //i
    .ina_3_valid      (s_ft_3_valid                    ), //i
    .ina_3_ready      (mac_acc_atom_2_1_ina_3_ready    ), //o
    .ina_3_payload    (s_ft_3_payload                  ), //i
    .ina_4_valid      (s_ft_4_valid                    ), //i
    .ina_4_ready      (mac_acc_atom_2_1_ina_4_ready    ), //o
    .ina_4_payload    (s_ft_4_payload                  ), //i
    .ina_5_valid      (s_ft_5_valid                    ), //i
    .ina_5_ready      (mac_acc_atom_2_1_ina_5_ready    ), //o
    .ina_5_payload    (s_ft_5_payload                  ), //i
    .ina_6_valid      (s_ft_6_valid                    ), //i
    .ina_6_ready      (mac_acc_atom_2_1_ina_6_ready    ), //o
    .ina_6_payload    (s_ft_6_payload                  ), //i
    .ina_7_valid      (s_ft_7_valid                    ), //i
    .ina_7_ready      (mac_acc_atom_2_1_ina_7_ready    ), //o
    .ina_7_payload    (s_ft_7_payload                  ), //i
    .inb_0_valid      (s_wt_2_0_valid                  ), //i
    .inb_0_ready      (mac_acc_atom_2_1_inb_0_ready    ), //o
    .inb_0_payload    (s_wt_2_0_payload                ), //i
    .inb_1_valid      (s_wt_2_1_valid                  ), //i
    .inb_1_ready      (mac_acc_atom_2_1_inb_1_ready    ), //o
    .inb_1_payload    (s_wt_2_1_payload                ), //i
    .inb_2_valid      (s_wt_2_2_valid                  ), //i
    .inb_2_ready      (mac_acc_atom_2_1_inb_2_ready    ), //o
    .inb_2_payload    (s_wt_2_2_payload                ), //i
    .inb_3_valid      (s_wt_2_3_valid                  ), //i
    .inb_3_ready      (mac_acc_atom_2_1_inb_3_ready    ), //o
    .inb_3_payload    (s_wt_2_3_payload                ), //i
    .inb_4_valid      (s_wt_2_4_valid                  ), //i
    .inb_4_ready      (mac_acc_atom_2_1_inb_4_ready    ), //o
    .inb_4_payload    (s_wt_2_4_payload                ), //i
    .inb_5_valid      (s_wt_2_5_valid                  ), //i
    .inb_5_ready      (mac_acc_atom_2_1_inb_5_ready    ), //o
    .inb_5_payload    (s_wt_2_5_payload                ), //i
    .inb_6_valid      (s_wt_2_6_valid                  ), //i
    .inb_6_ready      (mac_acc_atom_2_1_inb_6_ready    ), //o
    .inb_6_payload    (s_wt_2_6_payload                ), //i
    .inb_7_valid      (s_wt_2_7_valid                  ), //i
    .inb_7_ready      (mac_acc_atom_2_1_inb_7_ready    ), //o
    .inb_7_payload    (s_wt_2_7_payload                ), //i
    .out_0_valid      (mac_acc_atom_2_1_out_0_valid    ), //o
    .out_0_ready      (s_out_2_0_ready                 ), //i
    .out_0_payload    (mac_acc_atom_2_1_out_0_payload  ), //o
    .out_1_valid      (mac_acc_atom_2_1_out_1_valid    ), //o
    .out_1_ready      (s_out_2_1_ready                 ), //i
    .out_1_payload    (mac_acc_atom_2_1_out_1_payload  ), //o
    .out_2_valid      (mac_acc_atom_2_1_out_2_valid    ), //o
    .out_2_ready      (s_out_2_2_ready                 ), //i
    .out_2_payload    (mac_acc_atom_2_1_out_2_payload  ), //o
    .out_3_valid      (mac_acc_atom_2_1_out_3_valid    ), //o
    .out_3_ready      (s_out_2_3_ready                 ), //i
    .out_3_payload    (mac_acc_atom_2_1_out_3_payload  ), //o
    .out_4_valid      (mac_acc_atom_2_1_out_4_valid    ), //o
    .out_4_ready      (s_out_2_4_ready                 ), //i
    .out_4_payload    (mac_acc_atom_2_1_out_4_payload  ), //o
    .out_5_valid      (mac_acc_atom_2_1_out_5_valid    ), //o
    .out_5_ready      (s_out_2_5_ready                 ), //i
    .out_5_payload    (mac_acc_atom_2_1_out_5_payload  ), //o
    .out_6_valid      (mac_acc_atom_2_1_out_6_valid    ), //o
    .out_6_ready      (s_out_2_6_ready                 ), //i
    .out_6_payload    (mac_acc_atom_2_1_out_6_payload  ), //o
    .out_7_valid      (mac_acc_atom_2_1_out_7_valid    ), //o
    .out_7_ready      (s_out_2_7_ready                 ), //i
    .out_7_payload    (mac_acc_atom_2_1_out_7_payload  ), //o
    .par_acc_cnt      (par_acc_cnt                     ), //i
    .acc_enable       (acc_enable                      ), //i
    .clk              (clk                             ), //i
    .reset            (reset                           )  //i
  );
  mac_acc_atom_3 mac_acc_atom_3_1 (
    .ina_0_valid      (s_ft_0_valid                    ), //i
    .ina_0_ready      (mac_acc_atom_3_1_ina_0_ready    ), //o
    .ina_0_payload    (s_ft_0_payload                  ), //i
    .ina_1_valid      (s_ft_1_valid                    ), //i
    .ina_1_ready      (mac_acc_atom_3_1_ina_1_ready    ), //o
    .ina_1_payload    (s_ft_1_payload                  ), //i
    .ina_2_valid      (s_ft_2_valid                    ), //i
    .ina_2_ready      (mac_acc_atom_3_1_ina_2_ready    ), //o
    .ina_2_payload    (s_ft_2_payload                  ), //i
    .ina_3_valid      (s_ft_3_valid                    ), //i
    .ina_3_ready      (mac_acc_atom_3_1_ina_3_ready    ), //o
    .ina_3_payload    (s_ft_3_payload                  ), //i
    .ina_4_valid      (s_ft_4_valid                    ), //i
    .ina_4_ready      (mac_acc_atom_3_1_ina_4_ready    ), //o
    .ina_4_payload    (s_ft_4_payload                  ), //i
    .ina_5_valid      (s_ft_5_valid                    ), //i
    .ina_5_ready      (mac_acc_atom_3_1_ina_5_ready    ), //o
    .ina_5_payload    (s_ft_5_payload                  ), //i
    .ina_6_valid      (s_ft_6_valid                    ), //i
    .ina_6_ready      (mac_acc_atom_3_1_ina_6_ready    ), //o
    .ina_6_payload    (s_ft_6_payload                  ), //i
    .ina_7_valid      (s_ft_7_valid                    ), //i
    .ina_7_ready      (mac_acc_atom_3_1_ina_7_ready    ), //o
    .ina_7_payload    (s_ft_7_payload                  ), //i
    .inb_0_valid      (s_wt_3_0_valid                  ), //i
    .inb_0_ready      (mac_acc_atom_3_1_inb_0_ready    ), //o
    .inb_0_payload    (s_wt_3_0_payload                ), //i
    .inb_1_valid      (s_wt_3_1_valid                  ), //i
    .inb_1_ready      (mac_acc_atom_3_1_inb_1_ready    ), //o
    .inb_1_payload    (s_wt_3_1_payload                ), //i
    .inb_2_valid      (s_wt_3_2_valid                  ), //i
    .inb_2_ready      (mac_acc_atom_3_1_inb_2_ready    ), //o
    .inb_2_payload    (s_wt_3_2_payload                ), //i
    .inb_3_valid      (s_wt_3_3_valid                  ), //i
    .inb_3_ready      (mac_acc_atom_3_1_inb_3_ready    ), //o
    .inb_3_payload    (s_wt_3_3_payload                ), //i
    .inb_4_valid      (s_wt_3_4_valid                  ), //i
    .inb_4_ready      (mac_acc_atom_3_1_inb_4_ready    ), //o
    .inb_4_payload    (s_wt_3_4_payload                ), //i
    .inb_5_valid      (s_wt_3_5_valid                  ), //i
    .inb_5_ready      (mac_acc_atom_3_1_inb_5_ready    ), //o
    .inb_5_payload    (s_wt_3_5_payload                ), //i
    .inb_6_valid      (s_wt_3_6_valid                  ), //i
    .inb_6_ready      (mac_acc_atom_3_1_inb_6_ready    ), //o
    .inb_6_payload    (s_wt_3_6_payload                ), //i
    .inb_7_valid      (s_wt_3_7_valid                  ), //i
    .inb_7_ready      (mac_acc_atom_3_1_inb_7_ready    ), //o
    .inb_7_payload    (s_wt_3_7_payload                ), //i
    .out_0_valid      (mac_acc_atom_3_1_out_0_valid    ), //o
    .out_0_ready      (s_out_3_0_ready                 ), //i
    .out_0_payload    (mac_acc_atom_3_1_out_0_payload  ), //o
    .out_1_valid      (mac_acc_atom_3_1_out_1_valid    ), //o
    .out_1_ready      (s_out_3_1_ready                 ), //i
    .out_1_payload    (mac_acc_atom_3_1_out_1_payload  ), //o
    .out_2_valid      (mac_acc_atom_3_1_out_2_valid    ), //o
    .out_2_ready      (s_out_3_2_ready                 ), //i
    .out_2_payload    (mac_acc_atom_3_1_out_2_payload  ), //o
    .out_3_valid      (mac_acc_atom_3_1_out_3_valid    ), //o
    .out_3_ready      (s_out_3_3_ready                 ), //i
    .out_3_payload    (mac_acc_atom_3_1_out_3_payload  ), //o
    .out_4_valid      (mac_acc_atom_3_1_out_4_valid    ), //o
    .out_4_ready      (s_out_3_4_ready                 ), //i
    .out_4_payload    (mac_acc_atom_3_1_out_4_payload  ), //o
    .out_5_valid      (mac_acc_atom_3_1_out_5_valid    ), //o
    .out_5_ready      (s_out_3_5_ready                 ), //i
    .out_5_payload    (mac_acc_atom_3_1_out_5_payload  ), //o
    .out_6_valid      (mac_acc_atom_3_1_out_6_valid    ), //o
    .out_6_ready      (s_out_3_6_ready                 ), //i
    .out_6_payload    (mac_acc_atom_3_1_out_6_payload  ), //o
    .out_7_valid      (mac_acc_atom_3_1_out_7_valid    ), //o
    .out_7_ready      (s_out_3_7_ready                 ), //i
    .out_7_payload    (mac_acc_atom_3_1_out_7_payload  ), //o
    .par_acc_cnt      (par_acc_cnt                     ), //i
    .acc_enable       (acc_enable                      ), //i
    .clk              (clk                             ), //i
    .reset            (reset                           )  //i
  );
  mac_acc_atom_4 mac_acc_atom_4_1 (
    .ina_0_valid      (s_ft_0_valid                    ), //i
    .ina_0_ready      (mac_acc_atom_4_1_ina_0_ready    ), //o
    .ina_0_payload    (s_ft_0_payload                  ), //i
    .ina_1_valid      (s_ft_1_valid                    ), //i
    .ina_1_ready      (mac_acc_atom_4_1_ina_1_ready    ), //o
    .ina_1_payload    (s_ft_1_payload                  ), //i
    .ina_2_valid      (s_ft_2_valid                    ), //i
    .ina_2_ready      (mac_acc_atom_4_1_ina_2_ready    ), //o
    .ina_2_payload    (s_ft_2_payload                  ), //i
    .ina_3_valid      (s_ft_3_valid                    ), //i
    .ina_3_ready      (mac_acc_atom_4_1_ina_3_ready    ), //o
    .ina_3_payload    (s_ft_3_payload                  ), //i
    .ina_4_valid      (s_ft_4_valid                    ), //i
    .ina_4_ready      (mac_acc_atom_4_1_ina_4_ready    ), //o
    .ina_4_payload    (s_ft_4_payload                  ), //i
    .ina_5_valid      (s_ft_5_valid                    ), //i
    .ina_5_ready      (mac_acc_atom_4_1_ina_5_ready    ), //o
    .ina_5_payload    (s_ft_5_payload                  ), //i
    .ina_6_valid      (s_ft_6_valid                    ), //i
    .ina_6_ready      (mac_acc_atom_4_1_ina_6_ready    ), //o
    .ina_6_payload    (s_ft_6_payload                  ), //i
    .ina_7_valid      (s_ft_7_valid                    ), //i
    .ina_7_ready      (mac_acc_atom_4_1_ina_7_ready    ), //o
    .ina_7_payload    (s_ft_7_payload                  ), //i
    .inb_0_valid      (s_wt_4_0_valid                  ), //i
    .inb_0_ready      (mac_acc_atom_4_1_inb_0_ready    ), //o
    .inb_0_payload    (s_wt_4_0_payload                ), //i
    .inb_1_valid      (s_wt_4_1_valid                  ), //i
    .inb_1_ready      (mac_acc_atom_4_1_inb_1_ready    ), //o
    .inb_1_payload    (s_wt_4_1_payload                ), //i
    .inb_2_valid      (s_wt_4_2_valid                  ), //i
    .inb_2_ready      (mac_acc_atom_4_1_inb_2_ready    ), //o
    .inb_2_payload    (s_wt_4_2_payload                ), //i
    .inb_3_valid      (s_wt_4_3_valid                  ), //i
    .inb_3_ready      (mac_acc_atom_4_1_inb_3_ready    ), //o
    .inb_3_payload    (s_wt_4_3_payload                ), //i
    .inb_4_valid      (s_wt_4_4_valid                  ), //i
    .inb_4_ready      (mac_acc_atom_4_1_inb_4_ready    ), //o
    .inb_4_payload    (s_wt_4_4_payload                ), //i
    .inb_5_valid      (s_wt_4_5_valid                  ), //i
    .inb_5_ready      (mac_acc_atom_4_1_inb_5_ready    ), //o
    .inb_5_payload    (s_wt_4_5_payload                ), //i
    .inb_6_valid      (s_wt_4_6_valid                  ), //i
    .inb_6_ready      (mac_acc_atom_4_1_inb_6_ready    ), //o
    .inb_6_payload    (s_wt_4_6_payload                ), //i
    .inb_7_valid      (s_wt_4_7_valid                  ), //i
    .inb_7_ready      (mac_acc_atom_4_1_inb_7_ready    ), //o
    .inb_7_payload    (s_wt_4_7_payload                ), //i
    .out_0_valid      (mac_acc_atom_4_1_out_0_valid    ), //o
    .out_0_ready      (s_out_4_0_ready                 ), //i
    .out_0_payload    (mac_acc_atom_4_1_out_0_payload  ), //o
    .out_1_valid      (mac_acc_atom_4_1_out_1_valid    ), //o
    .out_1_ready      (s_out_4_1_ready                 ), //i
    .out_1_payload    (mac_acc_atom_4_1_out_1_payload  ), //o
    .out_2_valid      (mac_acc_atom_4_1_out_2_valid    ), //o
    .out_2_ready      (s_out_4_2_ready                 ), //i
    .out_2_payload    (mac_acc_atom_4_1_out_2_payload  ), //o
    .out_3_valid      (mac_acc_atom_4_1_out_3_valid    ), //o
    .out_3_ready      (s_out_4_3_ready                 ), //i
    .out_3_payload    (mac_acc_atom_4_1_out_3_payload  ), //o
    .out_4_valid      (mac_acc_atom_4_1_out_4_valid    ), //o
    .out_4_ready      (s_out_4_4_ready                 ), //i
    .out_4_payload    (mac_acc_atom_4_1_out_4_payload  ), //o
    .out_5_valid      (mac_acc_atom_4_1_out_5_valid    ), //o
    .out_5_ready      (s_out_4_5_ready                 ), //i
    .out_5_payload    (mac_acc_atom_4_1_out_5_payload  ), //o
    .out_6_valid      (mac_acc_atom_4_1_out_6_valid    ), //o
    .out_6_ready      (s_out_4_6_ready                 ), //i
    .out_6_payload    (mac_acc_atom_4_1_out_6_payload  ), //o
    .out_7_valid      (mac_acc_atom_4_1_out_7_valid    ), //o
    .out_7_ready      (s_out_4_7_ready                 ), //i
    .out_7_payload    (mac_acc_atom_4_1_out_7_payload  ), //o
    .par_acc_cnt      (par_acc_cnt                     ), //i
    .acc_enable       (acc_enable                      ), //i
    .clk              (clk                             ), //i
    .reset            (reset                           )  //i
  );
  mac_acc_atom_5 mac_acc_atom_5_1 (
    .ina_0_valid      (s_ft_0_valid                    ), //i
    .ina_0_ready      (mac_acc_atom_5_1_ina_0_ready    ), //o
    .ina_0_payload    (s_ft_0_payload                  ), //i
    .ina_1_valid      (s_ft_1_valid                    ), //i
    .ina_1_ready      (mac_acc_atom_5_1_ina_1_ready    ), //o
    .ina_1_payload    (s_ft_1_payload                  ), //i
    .ina_2_valid      (s_ft_2_valid                    ), //i
    .ina_2_ready      (mac_acc_atom_5_1_ina_2_ready    ), //o
    .ina_2_payload    (s_ft_2_payload                  ), //i
    .ina_3_valid      (s_ft_3_valid                    ), //i
    .ina_3_ready      (mac_acc_atom_5_1_ina_3_ready    ), //o
    .ina_3_payload    (s_ft_3_payload                  ), //i
    .ina_4_valid      (s_ft_4_valid                    ), //i
    .ina_4_ready      (mac_acc_atom_5_1_ina_4_ready    ), //o
    .ina_4_payload    (s_ft_4_payload                  ), //i
    .ina_5_valid      (s_ft_5_valid                    ), //i
    .ina_5_ready      (mac_acc_atom_5_1_ina_5_ready    ), //o
    .ina_5_payload    (s_ft_5_payload                  ), //i
    .ina_6_valid      (s_ft_6_valid                    ), //i
    .ina_6_ready      (mac_acc_atom_5_1_ina_6_ready    ), //o
    .ina_6_payload    (s_ft_6_payload                  ), //i
    .ina_7_valid      (s_ft_7_valid                    ), //i
    .ina_7_ready      (mac_acc_atom_5_1_ina_7_ready    ), //o
    .ina_7_payload    (s_ft_7_payload                  ), //i
    .inb_0_valid      (s_wt_5_0_valid                  ), //i
    .inb_0_ready      (mac_acc_atom_5_1_inb_0_ready    ), //o
    .inb_0_payload    (s_wt_5_0_payload                ), //i
    .inb_1_valid      (s_wt_5_1_valid                  ), //i
    .inb_1_ready      (mac_acc_atom_5_1_inb_1_ready    ), //o
    .inb_1_payload    (s_wt_5_1_payload                ), //i
    .inb_2_valid      (s_wt_5_2_valid                  ), //i
    .inb_2_ready      (mac_acc_atom_5_1_inb_2_ready    ), //o
    .inb_2_payload    (s_wt_5_2_payload                ), //i
    .inb_3_valid      (s_wt_5_3_valid                  ), //i
    .inb_3_ready      (mac_acc_atom_5_1_inb_3_ready    ), //o
    .inb_3_payload    (s_wt_5_3_payload                ), //i
    .inb_4_valid      (s_wt_5_4_valid                  ), //i
    .inb_4_ready      (mac_acc_atom_5_1_inb_4_ready    ), //o
    .inb_4_payload    (s_wt_5_4_payload                ), //i
    .inb_5_valid      (s_wt_5_5_valid                  ), //i
    .inb_5_ready      (mac_acc_atom_5_1_inb_5_ready    ), //o
    .inb_5_payload    (s_wt_5_5_payload                ), //i
    .inb_6_valid      (s_wt_5_6_valid                  ), //i
    .inb_6_ready      (mac_acc_atom_5_1_inb_6_ready    ), //o
    .inb_6_payload    (s_wt_5_6_payload                ), //i
    .inb_7_valid      (s_wt_5_7_valid                  ), //i
    .inb_7_ready      (mac_acc_atom_5_1_inb_7_ready    ), //o
    .inb_7_payload    (s_wt_5_7_payload                ), //i
    .out_0_valid      (mac_acc_atom_5_1_out_0_valid    ), //o
    .out_0_ready      (s_out_5_0_ready                 ), //i
    .out_0_payload    (mac_acc_atom_5_1_out_0_payload  ), //o
    .out_1_valid      (mac_acc_atom_5_1_out_1_valid    ), //o
    .out_1_ready      (s_out_5_1_ready                 ), //i
    .out_1_payload    (mac_acc_atom_5_1_out_1_payload  ), //o
    .out_2_valid      (mac_acc_atom_5_1_out_2_valid    ), //o
    .out_2_ready      (s_out_5_2_ready                 ), //i
    .out_2_payload    (mac_acc_atom_5_1_out_2_payload  ), //o
    .out_3_valid      (mac_acc_atom_5_1_out_3_valid    ), //o
    .out_3_ready      (s_out_5_3_ready                 ), //i
    .out_3_payload    (mac_acc_atom_5_1_out_3_payload  ), //o
    .out_4_valid      (mac_acc_atom_5_1_out_4_valid    ), //o
    .out_4_ready      (s_out_5_4_ready                 ), //i
    .out_4_payload    (mac_acc_atom_5_1_out_4_payload  ), //o
    .out_5_valid      (mac_acc_atom_5_1_out_5_valid    ), //o
    .out_5_ready      (s_out_5_5_ready                 ), //i
    .out_5_payload    (mac_acc_atom_5_1_out_5_payload  ), //o
    .out_6_valid      (mac_acc_atom_5_1_out_6_valid    ), //o
    .out_6_ready      (s_out_5_6_ready                 ), //i
    .out_6_payload    (mac_acc_atom_5_1_out_6_payload  ), //o
    .out_7_valid      (mac_acc_atom_5_1_out_7_valid    ), //o
    .out_7_ready      (s_out_5_7_ready                 ), //i
    .out_7_payload    (mac_acc_atom_5_1_out_7_payload  ), //o
    .par_acc_cnt      (par_acc_cnt                     ), //i
    .acc_enable       (acc_enable                      ), //i
    .clk              (clk                             ), //i
    .reset            (reset                           )  //i
  );
  mac_acc_atom_6 mac_acc_atom_6_1 (
    .ina_0_valid      (s_ft_0_valid                    ), //i
    .ina_0_ready      (mac_acc_atom_6_1_ina_0_ready    ), //o
    .ina_0_payload    (s_ft_0_payload                  ), //i
    .ina_1_valid      (s_ft_1_valid                    ), //i
    .ina_1_ready      (mac_acc_atom_6_1_ina_1_ready    ), //o
    .ina_1_payload    (s_ft_1_payload                  ), //i
    .ina_2_valid      (s_ft_2_valid                    ), //i
    .ina_2_ready      (mac_acc_atom_6_1_ina_2_ready    ), //o
    .ina_2_payload    (s_ft_2_payload                  ), //i
    .ina_3_valid      (s_ft_3_valid                    ), //i
    .ina_3_ready      (mac_acc_atom_6_1_ina_3_ready    ), //o
    .ina_3_payload    (s_ft_3_payload                  ), //i
    .ina_4_valid      (s_ft_4_valid                    ), //i
    .ina_4_ready      (mac_acc_atom_6_1_ina_4_ready    ), //o
    .ina_4_payload    (s_ft_4_payload                  ), //i
    .ina_5_valid      (s_ft_5_valid                    ), //i
    .ina_5_ready      (mac_acc_atom_6_1_ina_5_ready    ), //o
    .ina_5_payload    (s_ft_5_payload                  ), //i
    .ina_6_valid      (s_ft_6_valid                    ), //i
    .ina_6_ready      (mac_acc_atom_6_1_ina_6_ready    ), //o
    .ina_6_payload    (s_ft_6_payload                  ), //i
    .ina_7_valid      (s_ft_7_valid                    ), //i
    .ina_7_ready      (mac_acc_atom_6_1_ina_7_ready    ), //o
    .ina_7_payload    (s_ft_7_payload                  ), //i
    .inb_0_valid      (s_wt_6_0_valid                  ), //i
    .inb_0_ready      (mac_acc_atom_6_1_inb_0_ready    ), //o
    .inb_0_payload    (s_wt_6_0_payload                ), //i
    .inb_1_valid      (s_wt_6_1_valid                  ), //i
    .inb_1_ready      (mac_acc_atom_6_1_inb_1_ready    ), //o
    .inb_1_payload    (s_wt_6_1_payload                ), //i
    .inb_2_valid      (s_wt_6_2_valid                  ), //i
    .inb_2_ready      (mac_acc_atom_6_1_inb_2_ready    ), //o
    .inb_2_payload    (s_wt_6_2_payload                ), //i
    .inb_3_valid      (s_wt_6_3_valid                  ), //i
    .inb_3_ready      (mac_acc_atom_6_1_inb_3_ready    ), //o
    .inb_3_payload    (s_wt_6_3_payload                ), //i
    .inb_4_valid      (s_wt_6_4_valid                  ), //i
    .inb_4_ready      (mac_acc_atom_6_1_inb_4_ready    ), //o
    .inb_4_payload    (s_wt_6_4_payload                ), //i
    .inb_5_valid      (s_wt_6_5_valid                  ), //i
    .inb_5_ready      (mac_acc_atom_6_1_inb_5_ready    ), //o
    .inb_5_payload    (s_wt_6_5_payload                ), //i
    .inb_6_valid      (s_wt_6_6_valid                  ), //i
    .inb_6_ready      (mac_acc_atom_6_1_inb_6_ready    ), //o
    .inb_6_payload    (s_wt_6_6_payload                ), //i
    .inb_7_valid      (s_wt_6_7_valid                  ), //i
    .inb_7_ready      (mac_acc_atom_6_1_inb_7_ready    ), //o
    .inb_7_payload    (s_wt_6_7_payload                ), //i
    .out_0_valid      (mac_acc_atom_6_1_out_0_valid    ), //o
    .out_0_ready      (s_out_6_0_ready                 ), //i
    .out_0_payload    (mac_acc_atom_6_1_out_0_payload  ), //o
    .out_1_valid      (mac_acc_atom_6_1_out_1_valid    ), //o
    .out_1_ready      (s_out_6_1_ready                 ), //i
    .out_1_payload    (mac_acc_atom_6_1_out_1_payload  ), //o
    .out_2_valid      (mac_acc_atom_6_1_out_2_valid    ), //o
    .out_2_ready      (s_out_6_2_ready                 ), //i
    .out_2_payload    (mac_acc_atom_6_1_out_2_payload  ), //o
    .out_3_valid      (mac_acc_atom_6_1_out_3_valid    ), //o
    .out_3_ready      (s_out_6_3_ready                 ), //i
    .out_3_payload    (mac_acc_atom_6_1_out_3_payload  ), //o
    .out_4_valid      (mac_acc_atom_6_1_out_4_valid    ), //o
    .out_4_ready      (s_out_6_4_ready                 ), //i
    .out_4_payload    (mac_acc_atom_6_1_out_4_payload  ), //o
    .out_5_valid      (mac_acc_atom_6_1_out_5_valid    ), //o
    .out_5_ready      (s_out_6_5_ready                 ), //i
    .out_5_payload    (mac_acc_atom_6_1_out_5_payload  ), //o
    .out_6_valid      (mac_acc_atom_6_1_out_6_valid    ), //o
    .out_6_ready      (s_out_6_6_ready                 ), //i
    .out_6_payload    (mac_acc_atom_6_1_out_6_payload  ), //o
    .out_7_valid      (mac_acc_atom_6_1_out_7_valid    ), //o
    .out_7_ready      (s_out_6_7_ready                 ), //i
    .out_7_payload    (mac_acc_atom_6_1_out_7_payload  ), //o
    .par_acc_cnt      (par_acc_cnt                     ), //i
    .acc_enable       (acc_enable                      ), //i
    .clk              (clk                             ), //i
    .reset            (reset                           )  //i
  );
  mac_acc_atom_7 mac_acc_atom_7_1 (
    .ina_0_valid      (s_ft_0_valid                    ), //i
    .ina_0_ready      (mac_acc_atom_7_1_ina_0_ready    ), //o
    .ina_0_payload    (s_ft_0_payload                  ), //i
    .ina_1_valid      (s_ft_1_valid                    ), //i
    .ina_1_ready      (mac_acc_atom_7_1_ina_1_ready    ), //o
    .ina_1_payload    (s_ft_1_payload                  ), //i
    .ina_2_valid      (s_ft_2_valid                    ), //i
    .ina_2_ready      (mac_acc_atom_7_1_ina_2_ready    ), //o
    .ina_2_payload    (s_ft_2_payload                  ), //i
    .ina_3_valid      (s_ft_3_valid                    ), //i
    .ina_3_ready      (mac_acc_atom_7_1_ina_3_ready    ), //o
    .ina_3_payload    (s_ft_3_payload                  ), //i
    .ina_4_valid      (s_ft_4_valid                    ), //i
    .ina_4_ready      (mac_acc_atom_7_1_ina_4_ready    ), //o
    .ina_4_payload    (s_ft_4_payload                  ), //i
    .ina_5_valid      (s_ft_5_valid                    ), //i
    .ina_5_ready      (mac_acc_atom_7_1_ina_5_ready    ), //o
    .ina_5_payload    (s_ft_5_payload                  ), //i
    .ina_6_valid      (s_ft_6_valid                    ), //i
    .ina_6_ready      (mac_acc_atom_7_1_ina_6_ready    ), //o
    .ina_6_payload    (s_ft_6_payload                  ), //i
    .ina_7_valid      (s_ft_7_valid                    ), //i
    .ina_7_ready      (mac_acc_atom_7_1_ina_7_ready    ), //o
    .ina_7_payload    (s_ft_7_payload                  ), //i
    .inb_0_valid      (s_wt_7_0_valid                  ), //i
    .inb_0_ready      (mac_acc_atom_7_1_inb_0_ready    ), //o
    .inb_0_payload    (s_wt_7_0_payload                ), //i
    .inb_1_valid      (s_wt_7_1_valid                  ), //i
    .inb_1_ready      (mac_acc_atom_7_1_inb_1_ready    ), //o
    .inb_1_payload    (s_wt_7_1_payload                ), //i
    .inb_2_valid      (s_wt_7_2_valid                  ), //i
    .inb_2_ready      (mac_acc_atom_7_1_inb_2_ready    ), //o
    .inb_2_payload    (s_wt_7_2_payload                ), //i
    .inb_3_valid      (s_wt_7_3_valid                  ), //i
    .inb_3_ready      (mac_acc_atom_7_1_inb_3_ready    ), //o
    .inb_3_payload    (s_wt_7_3_payload                ), //i
    .inb_4_valid      (s_wt_7_4_valid                  ), //i
    .inb_4_ready      (mac_acc_atom_7_1_inb_4_ready    ), //o
    .inb_4_payload    (s_wt_7_4_payload                ), //i
    .inb_5_valid      (s_wt_7_5_valid                  ), //i
    .inb_5_ready      (mac_acc_atom_7_1_inb_5_ready    ), //o
    .inb_5_payload    (s_wt_7_5_payload                ), //i
    .inb_6_valid      (s_wt_7_6_valid                  ), //i
    .inb_6_ready      (mac_acc_atom_7_1_inb_6_ready    ), //o
    .inb_6_payload    (s_wt_7_6_payload                ), //i
    .inb_7_valid      (s_wt_7_7_valid                  ), //i
    .inb_7_ready      (mac_acc_atom_7_1_inb_7_ready    ), //o
    .inb_7_payload    (s_wt_7_7_payload                ), //i
    .out_0_valid      (mac_acc_atom_7_1_out_0_valid    ), //o
    .out_0_ready      (s_out_7_0_ready                 ), //i
    .out_0_payload    (mac_acc_atom_7_1_out_0_payload  ), //o
    .out_1_valid      (mac_acc_atom_7_1_out_1_valid    ), //o
    .out_1_ready      (s_out_7_1_ready                 ), //i
    .out_1_payload    (mac_acc_atom_7_1_out_1_payload  ), //o
    .out_2_valid      (mac_acc_atom_7_1_out_2_valid    ), //o
    .out_2_ready      (s_out_7_2_ready                 ), //i
    .out_2_payload    (mac_acc_atom_7_1_out_2_payload  ), //o
    .out_3_valid      (mac_acc_atom_7_1_out_3_valid    ), //o
    .out_3_ready      (s_out_7_3_ready                 ), //i
    .out_3_payload    (mac_acc_atom_7_1_out_3_payload  ), //o
    .out_4_valid      (mac_acc_atom_7_1_out_4_valid    ), //o
    .out_4_ready      (s_out_7_4_ready                 ), //i
    .out_4_payload    (mac_acc_atom_7_1_out_4_payload  ), //o
    .out_5_valid      (mac_acc_atom_7_1_out_5_valid    ), //o
    .out_5_ready      (s_out_7_5_ready                 ), //i
    .out_5_payload    (mac_acc_atom_7_1_out_5_payload  ), //o
    .out_6_valid      (mac_acc_atom_7_1_out_6_valid    ), //o
    .out_6_ready      (s_out_7_6_ready                 ), //i
    .out_6_payload    (mac_acc_atom_7_1_out_6_payload  ), //o
    .out_7_valid      (mac_acc_atom_7_1_out_7_valid    ), //o
    .out_7_ready      (s_out_7_7_ready                 ), //i
    .out_7_payload    (mac_acc_atom_7_1_out_7_payload  ), //o
    .par_acc_cnt      (par_acc_cnt                     ), //i
    .acc_enable       (acc_enable                      ), //i
    .clk              (clk                             ), //i
    .reset            (reset                           )  //i
  );
  assign s_ft_0_ready = (((((((mac_acc_atom_0_ina_0_ready && mac_acc_atom_1_1_ina_0_ready) && mac_acc_atom_2_1_ina_0_ready) && mac_acc_atom_3_1_ina_0_ready) && mac_acc_atom_4_1_ina_0_ready) && mac_acc_atom_5_1_ina_0_ready) && mac_acc_atom_6_1_ina_0_ready) && mac_acc_atom_7_1_ina_0_ready);
  assign s_ft_1_ready = (((((((mac_acc_atom_0_ina_1_ready && mac_acc_atom_1_1_ina_1_ready) && mac_acc_atom_2_1_ina_1_ready) && mac_acc_atom_3_1_ina_1_ready) && mac_acc_atom_4_1_ina_1_ready) && mac_acc_atom_5_1_ina_1_ready) && mac_acc_atom_6_1_ina_1_ready) && mac_acc_atom_7_1_ina_1_ready);
  assign s_ft_2_ready = (((((((mac_acc_atom_0_ina_2_ready && mac_acc_atom_1_1_ina_2_ready) && mac_acc_atom_2_1_ina_2_ready) && mac_acc_atom_3_1_ina_2_ready) && mac_acc_atom_4_1_ina_2_ready) && mac_acc_atom_5_1_ina_2_ready) && mac_acc_atom_6_1_ina_2_ready) && mac_acc_atom_7_1_ina_2_ready);
  assign s_ft_3_ready = (((((((mac_acc_atom_0_ina_3_ready && mac_acc_atom_1_1_ina_3_ready) && mac_acc_atom_2_1_ina_3_ready) && mac_acc_atom_3_1_ina_3_ready) && mac_acc_atom_4_1_ina_3_ready) && mac_acc_atom_5_1_ina_3_ready) && mac_acc_atom_6_1_ina_3_ready) && mac_acc_atom_7_1_ina_3_ready);
  assign s_ft_4_ready = (((((((mac_acc_atom_0_ina_4_ready && mac_acc_atom_1_1_ina_4_ready) && mac_acc_atom_2_1_ina_4_ready) && mac_acc_atom_3_1_ina_4_ready) && mac_acc_atom_4_1_ina_4_ready) && mac_acc_atom_5_1_ina_4_ready) && mac_acc_atom_6_1_ina_4_ready) && mac_acc_atom_7_1_ina_4_ready);
  assign s_ft_5_ready = (((((((mac_acc_atom_0_ina_5_ready && mac_acc_atom_1_1_ina_5_ready) && mac_acc_atom_2_1_ina_5_ready) && mac_acc_atom_3_1_ina_5_ready) && mac_acc_atom_4_1_ina_5_ready) && mac_acc_atom_5_1_ina_5_ready) && mac_acc_atom_6_1_ina_5_ready) && mac_acc_atom_7_1_ina_5_ready);
  assign s_ft_6_ready = (((((((mac_acc_atom_0_ina_6_ready && mac_acc_atom_1_1_ina_6_ready) && mac_acc_atom_2_1_ina_6_ready) && mac_acc_atom_3_1_ina_6_ready) && mac_acc_atom_4_1_ina_6_ready) && mac_acc_atom_5_1_ina_6_ready) && mac_acc_atom_6_1_ina_6_ready) && mac_acc_atom_7_1_ina_6_ready);
  assign s_ft_7_ready = (((((((mac_acc_atom_0_ina_7_ready && mac_acc_atom_1_1_ina_7_ready) && mac_acc_atom_2_1_ina_7_ready) && mac_acc_atom_3_1_ina_7_ready) && mac_acc_atom_4_1_ina_7_ready) && mac_acc_atom_5_1_ina_7_ready) && mac_acc_atom_6_1_ina_7_ready) && mac_acc_atom_7_1_ina_7_ready);
  assign s_wt_0_0_ready = mac_acc_atom_0_inb_0_ready;
  assign s_wt_0_1_ready = mac_acc_atom_0_inb_1_ready;
  assign s_wt_0_2_ready = mac_acc_atom_0_inb_2_ready;
  assign s_wt_0_3_ready = mac_acc_atom_0_inb_3_ready;
  assign s_wt_0_4_ready = mac_acc_atom_0_inb_4_ready;
  assign s_wt_0_5_ready = mac_acc_atom_0_inb_5_ready;
  assign s_wt_0_6_ready = mac_acc_atom_0_inb_6_ready;
  assign s_wt_0_7_ready = mac_acc_atom_0_inb_7_ready;
  assign s_wt_1_0_ready = mac_acc_atom_1_1_inb_0_ready;
  assign s_wt_1_1_ready = mac_acc_atom_1_1_inb_1_ready;
  assign s_wt_1_2_ready = mac_acc_atom_1_1_inb_2_ready;
  assign s_wt_1_3_ready = mac_acc_atom_1_1_inb_3_ready;
  assign s_wt_1_4_ready = mac_acc_atom_1_1_inb_4_ready;
  assign s_wt_1_5_ready = mac_acc_atom_1_1_inb_5_ready;
  assign s_wt_1_6_ready = mac_acc_atom_1_1_inb_6_ready;
  assign s_wt_1_7_ready = mac_acc_atom_1_1_inb_7_ready;
  assign s_wt_2_0_ready = mac_acc_atom_2_1_inb_0_ready;
  assign s_wt_2_1_ready = mac_acc_atom_2_1_inb_1_ready;
  assign s_wt_2_2_ready = mac_acc_atom_2_1_inb_2_ready;
  assign s_wt_2_3_ready = mac_acc_atom_2_1_inb_3_ready;
  assign s_wt_2_4_ready = mac_acc_atom_2_1_inb_4_ready;
  assign s_wt_2_5_ready = mac_acc_atom_2_1_inb_5_ready;
  assign s_wt_2_6_ready = mac_acc_atom_2_1_inb_6_ready;
  assign s_wt_2_7_ready = mac_acc_atom_2_1_inb_7_ready;
  assign s_wt_3_0_ready = mac_acc_atom_3_1_inb_0_ready;
  assign s_wt_3_1_ready = mac_acc_atom_3_1_inb_1_ready;
  assign s_wt_3_2_ready = mac_acc_atom_3_1_inb_2_ready;
  assign s_wt_3_3_ready = mac_acc_atom_3_1_inb_3_ready;
  assign s_wt_3_4_ready = mac_acc_atom_3_1_inb_4_ready;
  assign s_wt_3_5_ready = mac_acc_atom_3_1_inb_5_ready;
  assign s_wt_3_6_ready = mac_acc_atom_3_1_inb_6_ready;
  assign s_wt_3_7_ready = mac_acc_atom_3_1_inb_7_ready;
  assign s_wt_4_0_ready = mac_acc_atom_4_1_inb_0_ready;
  assign s_wt_4_1_ready = mac_acc_atom_4_1_inb_1_ready;
  assign s_wt_4_2_ready = mac_acc_atom_4_1_inb_2_ready;
  assign s_wt_4_3_ready = mac_acc_atom_4_1_inb_3_ready;
  assign s_wt_4_4_ready = mac_acc_atom_4_1_inb_4_ready;
  assign s_wt_4_5_ready = mac_acc_atom_4_1_inb_5_ready;
  assign s_wt_4_6_ready = mac_acc_atom_4_1_inb_6_ready;
  assign s_wt_4_7_ready = mac_acc_atom_4_1_inb_7_ready;
  assign s_wt_5_0_ready = mac_acc_atom_5_1_inb_0_ready;
  assign s_wt_5_1_ready = mac_acc_atom_5_1_inb_1_ready;
  assign s_wt_5_2_ready = mac_acc_atom_5_1_inb_2_ready;
  assign s_wt_5_3_ready = mac_acc_atom_5_1_inb_3_ready;
  assign s_wt_5_4_ready = mac_acc_atom_5_1_inb_4_ready;
  assign s_wt_5_5_ready = mac_acc_atom_5_1_inb_5_ready;
  assign s_wt_5_6_ready = mac_acc_atom_5_1_inb_6_ready;
  assign s_wt_5_7_ready = mac_acc_atom_5_1_inb_7_ready;
  assign s_wt_6_0_ready = mac_acc_atom_6_1_inb_0_ready;
  assign s_wt_6_1_ready = mac_acc_atom_6_1_inb_1_ready;
  assign s_wt_6_2_ready = mac_acc_atom_6_1_inb_2_ready;
  assign s_wt_6_3_ready = mac_acc_atom_6_1_inb_3_ready;
  assign s_wt_6_4_ready = mac_acc_atom_6_1_inb_4_ready;
  assign s_wt_6_5_ready = mac_acc_atom_6_1_inb_5_ready;
  assign s_wt_6_6_ready = mac_acc_atom_6_1_inb_6_ready;
  assign s_wt_6_7_ready = mac_acc_atom_6_1_inb_7_ready;
  assign s_wt_7_0_ready = mac_acc_atom_7_1_inb_0_ready;
  assign s_wt_7_1_ready = mac_acc_atom_7_1_inb_1_ready;
  assign s_wt_7_2_ready = mac_acc_atom_7_1_inb_2_ready;
  assign s_wt_7_3_ready = mac_acc_atom_7_1_inb_3_ready;
  assign s_wt_7_4_ready = mac_acc_atom_7_1_inb_4_ready;
  assign s_wt_7_5_ready = mac_acc_atom_7_1_inb_5_ready;
  assign s_wt_7_6_ready = mac_acc_atom_7_1_inb_6_ready;
  assign s_wt_7_7_ready = mac_acc_atom_7_1_inb_7_ready;
  assign s_out_0_0_valid = mac_acc_atom_0_out_0_valid;
  assign s_out_0_0_payload = mac_acc_atom_0_out_0_payload;
  assign s_out_0_1_valid = mac_acc_atom_0_out_1_valid;
  assign s_out_0_1_payload = mac_acc_atom_0_out_1_payload;
  assign s_out_0_2_valid = mac_acc_atom_0_out_2_valid;
  assign s_out_0_2_payload = mac_acc_atom_0_out_2_payload;
  assign s_out_0_3_valid = mac_acc_atom_0_out_3_valid;
  assign s_out_0_3_payload = mac_acc_atom_0_out_3_payload;
  assign s_out_0_4_valid = mac_acc_atom_0_out_4_valid;
  assign s_out_0_4_payload = mac_acc_atom_0_out_4_payload;
  assign s_out_0_5_valid = mac_acc_atom_0_out_5_valid;
  assign s_out_0_5_payload = mac_acc_atom_0_out_5_payload;
  assign s_out_0_6_valid = mac_acc_atom_0_out_6_valid;
  assign s_out_0_6_payload = mac_acc_atom_0_out_6_payload;
  assign s_out_0_7_valid = mac_acc_atom_0_out_7_valid;
  assign s_out_0_7_payload = mac_acc_atom_0_out_7_payload;
  assign s_out_1_0_valid = mac_acc_atom_1_1_out_0_valid;
  assign s_out_1_0_payload = mac_acc_atom_1_1_out_0_payload;
  assign s_out_1_1_valid = mac_acc_atom_1_1_out_1_valid;
  assign s_out_1_1_payload = mac_acc_atom_1_1_out_1_payload;
  assign s_out_1_2_valid = mac_acc_atom_1_1_out_2_valid;
  assign s_out_1_2_payload = mac_acc_atom_1_1_out_2_payload;
  assign s_out_1_3_valid = mac_acc_atom_1_1_out_3_valid;
  assign s_out_1_3_payload = mac_acc_atom_1_1_out_3_payload;
  assign s_out_1_4_valid = mac_acc_atom_1_1_out_4_valid;
  assign s_out_1_4_payload = mac_acc_atom_1_1_out_4_payload;
  assign s_out_1_5_valid = mac_acc_atom_1_1_out_5_valid;
  assign s_out_1_5_payload = mac_acc_atom_1_1_out_5_payload;
  assign s_out_1_6_valid = mac_acc_atom_1_1_out_6_valid;
  assign s_out_1_6_payload = mac_acc_atom_1_1_out_6_payload;
  assign s_out_1_7_valid = mac_acc_atom_1_1_out_7_valid;
  assign s_out_1_7_payload = mac_acc_atom_1_1_out_7_payload;
  assign s_out_2_0_valid = mac_acc_atom_2_1_out_0_valid;
  assign s_out_2_0_payload = mac_acc_atom_2_1_out_0_payload;
  assign s_out_2_1_valid = mac_acc_atom_2_1_out_1_valid;
  assign s_out_2_1_payload = mac_acc_atom_2_1_out_1_payload;
  assign s_out_2_2_valid = mac_acc_atom_2_1_out_2_valid;
  assign s_out_2_2_payload = mac_acc_atom_2_1_out_2_payload;
  assign s_out_2_3_valid = mac_acc_atom_2_1_out_3_valid;
  assign s_out_2_3_payload = mac_acc_atom_2_1_out_3_payload;
  assign s_out_2_4_valid = mac_acc_atom_2_1_out_4_valid;
  assign s_out_2_4_payload = mac_acc_atom_2_1_out_4_payload;
  assign s_out_2_5_valid = mac_acc_atom_2_1_out_5_valid;
  assign s_out_2_5_payload = mac_acc_atom_2_1_out_5_payload;
  assign s_out_2_6_valid = mac_acc_atom_2_1_out_6_valid;
  assign s_out_2_6_payload = mac_acc_atom_2_1_out_6_payload;
  assign s_out_2_7_valid = mac_acc_atom_2_1_out_7_valid;
  assign s_out_2_7_payload = mac_acc_atom_2_1_out_7_payload;
  assign s_out_3_0_valid = mac_acc_atom_3_1_out_0_valid;
  assign s_out_3_0_payload = mac_acc_atom_3_1_out_0_payload;
  assign s_out_3_1_valid = mac_acc_atom_3_1_out_1_valid;
  assign s_out_3_1_payload = mac_acc_atom_3_1_out_1_payload;
  assign s_out_3_2_valid = mac_acc_atom_3_1_out_2_valid;
  assign s_out_3_2_payload = mac_acc_atom_3_1_out_2_payload;
  assign s_out_3_3_valid = mac_acc_atom_3_1_out_3_valid;
  assign s_out_3_3_payload = mac_acc_atom_3_1_out_3_payload;
  assign s_out_3_4_valid = mac_acc_atom_3_1_out_4_valid;
  assign s_out_3_4_payload = mac_acc_atom_3_1_out_4_payload;
  assign s_out_3_5_valid = mac_acc_atom_3_1_out_5_valid;
  assign s_out_3_5_payload = mac_acc_atom_3_1_out_5_payload;
  assign s_out_3_6_valid = mac_acc_atom_3_1_out_6_valid;
  assign s_out_3_6_payload = mac_acc_atom_3_1_out_6_payload;
  assign s_out_3_7_valid = mac_acc_atom_3_1_out_7_valid;
  assign s_out_3_7_payload = mac_acc_atom_3_1_out_7_payload;
  assign s_out_4_0_valid = mac_acc_atom_4_1_out_0_valid;
  assign s_out_4_0_payload = mac_acc_atom_4_1_out_0_payload;
  assign s_out_4_1_valid = mac_acc_atom_4_1_out_1_valid;
  assign s_out_4_1_payload = mac_acc_atom_4_1_out_1_payload;
  assign s_out_4_2_valid = mac_acc_atom_4_1_out_2_valid;
  assign s_out_4_2_payload = mac_acc_atom_4_1_out_2_payload;
  assign s_out_4_3_valid = mac_acc_atom_4_1_out_3_valid;
  assign s_out_4_3_payload = mac_acc_atom_4_1_out_3_payload;
  assign s_out_4_4_valid = mac_acc_atom_4_1_out_4_valid;
  assign s_out_4_4_payload = mac_acc_atom_4_1_out_4_payload;
  assign s_out_4_5_valid = mac_acc_atom_4_1_out_5_valid;
  assign s_out_4_5_payload = mac_acc_atom_4_1_out_5_payload;
  assign s_out_4_6_valid = mac_acc_atom_4_1_out_6_valid;
  assign s_out_4_6_payload = mac_acc_atom_4_1_out_6_payload;
  assign s_out_4_7_valid = mac_acc_atom_4_1_out_7_valid;
  assign s_out_4_7_payload = mac_acc_atom_4_1_out_7_payload;
  assign s_out_5_0_valid = mac_acc_atom_5_1_out_0_valid;
  assign s_out_5_0_payload = mac_acc_atom_5_1_out_0_payload;
  assign s_out_5_1_valid = mac_acc_atom_5_1_out_1_valid;
  assign s_out_5_1_payload = mac_acc_atom_5_1_out_1_payload;
  assign s_out_5_2_valid = mac_acc_atom_5_1_out_2_valid;
  assign s_out_5_2_payload = mac_acc_atom_5_1_out_2_payload;
  assign s_out_5_3_valid = mac_acc_atom_5_1_out_3_valid;
  assign s_out_5_3_payload = mac_acc_atom_5_1_out_3_payload;
  assign s_out_5_4_valid = mac_acc_atom_5_1_out_4_valid;
  assign s_out_5_4_payload = mac_acc_atom_5_1_out_4_payload;
  assign s_out_5_5_valid = mac_acc_atom_5_1_out_5_valid;
  assign s_out_5_5_payload = mac_acc_atom_5_1_out_5_payload;
  assign s_out_5_6_valid = mac_acc_atom_5_1_out_6_valid;
  assign s_out_5_6_payload = mac_acc_atom_5_1_out_6_payload;
  assign s_out_5_7_valid = mac_acc_atom_5_1_out_7_valid;
  assign s_out_5_7_payload = mac_acc_atom_5_1_out_7_payload;
  assign s_out_6_0_valid = mac_acc_atom_6_1_out_0_valid;
  assign s_out_6_0_payload = mac_acc_atom_6_1_out_0_payload;
  assign s_out_6_1_valid = mac_acc_atom_6_1_out_1_valid;
  assign s_out_6_1_payload = mac_acc_atom_6_1_out_1_payload;
  assign s_out_6_2_valid = mac_acc_atom_6_1_out_2_valid;
  assign s_out_6_2_payload = mac_acc_atom_6_1_out_2_payload;
  assign s_out_6_3_valid = mac_acc_atom_6_1_out_3_valid;
  assign s_out_6_3_payload = mac_acc_atom_6_1_out_3_payload;
  assign s_out_6_4_valid = mac_acc_atom_6_1_out_4_valid;
  assign s_out_6_4_payload = mac_acc_atom_6_1_out_4_payload;
  assign s_out_6_5_valid = mac_acc_atom_6_1_out_5_valid;
  assign s_out_6_5_payload = mac_acc_atom_6_1_out_5_payload;
  assign s_out_6_6_valid = mac_acc_atom_6_1_out_6_valid;
  assign s_out_6_6_payload = mac_acc_atom_6_1_out_6_payload;
  assign s_out_6_7_valid = mac_acc_atom_6_1_out_7_valid;
  assign s_out_6_7_payload = mac_acc_atom_6_1_out_7_payload;
  assign s_out_7_0_valid = mac_acc_atom_7_1_out_0_valid;
  assign s_out_7_0_payload = mac_acc_atom_7_1_out_0_payload;
  assign s_out_7_1_valid = mac_acc_atom_7_1_out_1_valid;
  assign s_out_7_1_payload = mac_acc_atom_7_1_out_1_payload;
  assign s_out_7_2_valid = mac_acc_atom_7_1_out_2_valid;
  assign s_out_7_2_payload = mac_acc_atom_7_1_out_2_payload;
  assign s_out_7_3_valid = mac_acc_atom_7_1_out_3_valid;
  assign s_out_7_3_payload = mac_acc_atom_7_1_out_3_payload;
  assign s_out_7_4_valid = mac_acc_atom_7_1_out_4_valid;
  assign s_out_7_4_payload = mac_acc_atom_7_1_out_4_payload;
  assign s_out_7_5_valid = mac_acc_atom_7_1_out_5_valid;
  assign s_out_7_5_payload = mac_acc_atom_7_1_out_5_payload;
  assign s_out_7_6_valid = mac_acc_atom_7_1_out_6_valid;
  assign s_out_7_6_payload = mac_acc_atom_7_1_out_6_payload;
  assign s_out_7_7_valid = mac_acc_atom_7_1_out_7_valid;
  assign s_out_7_7_payload = mac_acc_atom_7_1_out_7_payload;

endmodule

module dataType_cvt_in (
  input               io_i_ft_valid,
  output              io_i_ft_ready,
  input      [255:0]  io_i_ft_payload,
  input               io_i_wt_0_valid,
  output              io_i_wt_0_ready,
  input      [255:0]  io_i_wt_0_payload,
  input               io_i_wt_1_valid,
  output              io_i_wt_1_ready,
  input      [255:0]  io_i_wt_1_payload,
  input               io_i_wt_2_valid,
  output              io_i_wt_2_ready,
  input      [255:0]  io_i_wt_2_payload,
  input               io_i_wt_3_valid,
  output              io_i_wt_3_ready,
  input      [255:0]  io_i_wt_3_payload,
  input               io_i_wt_4_valid,
  output              io_i_wt_4_ready,
  input      [255:0]  io_i_wt_4_payload,
  input               io_i_wt_5_valid,
  output              io_i_wt_5_ready,
  input      [255:0]  io_i_wt_5_payload,
  input               io_i_wt_6_valid,
  output              io_i_wt_6_ready,
  input      [255:0]  io_i_wt_6_payload,
  input               io_i_wt_7_valid,
  output              io_i_wt_7_ready,
  input      [255:0]  io_i_wt_7_payload,
  output              io_o_ft_0_valid,
  input               io_o_ft_0_ready,
  output     [31:0]   io_o_ft_0_payload,
  output              io_o_ft_1_valid,
  input               io_o_ft_1_ready,
  output     [31:0]   io_o_ft_1_payload,
  output              io_o_ft_2_valid,
  input               io_o_ft_2_ready,
  output     [31:0]   io_o_ft_2_payload,
  output              io_o_ft_3_valid,
  input               io_o_ft_3_ready,
  output     [31:0]   io_o_ft_3_payload,
  output              io_o_ft_4_valid,
  input               io_o_ft_4_ready,
  output     [31:0]   io_o_ft_4_payload,
  output              io_o_ft_5_valid,
  input               io_o_ft_5_ready,
  output     [31:0]   io_o_ft_5_payload,
  output              io_o_ft_6_valid,
  input               io_o_ft_6_ready,
  output     [31:0]   io_o_ft_6_payload,
  output              io_o_ft_7_valid,
  input               io_o_ft_7_ready,
  output     [31:0]   io_o_ft_7_payload,
  output              io_o_wt_0_0_valid,
  input               io_o_wt_0_0_ready,
  output     [31:0]   io_o_wt_0_0_payload,
  output              io_o_wt_0_1_valid,
  input               io_o_wt_0_1_ready,
  output     [31:0]   io_o_wt_0_1_payload,
  output              io_o_wt_0_2_valid,
  input               io_o_wt_0_2_ready,
  output     [31:0]   io_o_wt_0_2_payload,
  output              io_o_wt_0_3_valid,
  input               io_o_wt_0_3_ready,
  output     [31:0]   io_o_wt_0_3_payload,
  output              io_o_wt_0_4_valid,
  input               io_o_wt_0_4_ready,
  output     [31:0]   io_o_wt_0_4_payload,
  output              io_o_wt_0_5_valid,
  input               io_o_wt_0_5_ready,
  output     [31:0]   io_o_wt_0_5_payload,
  output              io_o_wt_0_6_valid,
  input               io_o_wt_0_6_ready,
  output     [31:0]   io_o_wt_0_6_payload,
  output              io_o_wt_0_7_valid,
  input               io_o_wt_0_7_ready,
  output     [31:0]   io_o_wt_0_7_payload,
  output              io_o_wt_1_0_valid,
  input               io_o_wt_1_0_ready,
  output     [31:0]   io_o_wt_1_0_payload,
  output              io_o_wt_1_1_valid,
  input               io_o_wt_1_1_ready,
  output     [31:0]   io_o_wt_1_1_payload,
  output              io_o_wt_1_2_valid,
  input               io_o_wt_1_2_ready,
  output     [31:0]   io_o_wt_1_2_payload,
  output              io_o_wt_1_3_valid,
  input               io_o_wt_1_3_ready,
  output     [31:0]   io_o_wt_1_3_payload,
  output              io_o_wt_1_4_valid,
  input               io_o_wt_1_4_ready,
  output     [31:0]   io_o_wt_1_4_payload,
  output              io_o_wt_1_5_valid,
  input               io_o_wt_1_5_ready,
  output     [31:0]   io_o_wt_1_5_payload,
  output              io_o_wt_1_6_valid,
  input               io_o_wt_1_6_ready,
  output     [31:0]   io_o_wt_1_6_payload,
  output              io_o_wt_1_7_valid,
  input               io_o_wt_1_7_ready,
  output     [31:0]   io_o_wt_1_7_payload,
  output              io_o_wt_2_0_valid,
  input               io_o_wt_2_0_ready,
  output     [31:0]   io_o_wt_2_0_payload,
  output              io_o_wt_2_1_valid,
  input               io_o_wt_2_1_ready,
  output     [31:0]   io_o_wt_2_1_payload,
  output              io_o_wt_2_2_valid,
  input               io_o_wt_2_2_ready,
  output     [31:0]   io_o_wt_2_2_payload,
  output              io_o_wt_2_3_valid,
  input               io_o_wt_2_3_ready,
  output     [31:0]   io_o_wt_2_3_payload,
  output              io_o_wt_2_4_valid,
  input               io_o_wt_2_4_ready,
  output     [31:0]   io_o_wt_2_4_payload,
  output              io_o_wt_2_5_valid,
  input               io_o_wt_2_5_ready,
  output     [31:0]   io_o_wt_2_5_payload,
  output              io_o_wt_2_6_valid,
  input               io_o_wt_2_6_ready,
  output     [31:0]   io_o_wt_2_6_payload,
  output              io_o_wt_2_7_valid,
  input               io_o_wt_2_7_ready,
  output     [31:0]   io_o_wt_2_7_payload,
  output              io_o_wt_3_0_valid,
  input               io_o_wt_3_0_ready,
  output     [31:0]   io_o_wt_3_0_payload,
  output              io_o_wt_3_1_valid,
  input               io_o_wt_3_1_ready,
  output     [31:0]   io_o_wt_3_1_payload,
  output              io_o_wt_3_2_valid,
  input               io_o_wt_3_2_ready,
  output     [31:0]   io_o_wt_3_2_payload,
  output              io_o_wt_3_3_valid,
  input               io_o_wt_3_3_ready,
  output     [31:0]   io_o_wt_3_3_payload,
  output              io_o_wt_3_4_valid,
  input               io_o_wt_3_4_ready,
  output     [31:0]   io_o_wt_3_4_payload,
  output              io_o_wt_3_5_valid,
  input               io_o_wt_3_5_ready,
  output     [31:0]   io_o_wt_3_5_payload,
  output              io_o_wt_3_6_valid,
  input               io_o_wt_3_6_ready,
  output     [31:0]   io_o_wt_3_6_payload,
  output              io_o_wt_3_7_valid,
  input               io_o_wt_3_7_ready,
  output     [31:0]   io_o_wt_3_7_payload,
  output              io_o_wt_4_0_valid,
  input               io_o_wt_4_0_ready,
  output     [31:0]   io_o_wt_4_0_payload,
  output              io_o_wt_4_1_valid,
  input               io_o_wt_4_1_ready,
  output     [31:0]   io_o_wt_4_1_payload,
  output              io_o_wt_4_2_valid,
  input               io_o_wt_4_2_ready,
  output     [31:0]   io_o_wt_4_2_payload,
  output              io_o_wt_4_3_valid,
  input               io_o_wt_4_3_ready,
  output     [31:0]   io_o_wt_4_3_payload,
  output              io_o_wt_4_4_valid,
  input               io_o_wt_4_4_ready,
  output     [31:0]   io_o_wt_4_4_payload,
  output              io_o_wt_4_5_valid,
  input               io_o_wt_4_5_ready,
  output     [31:0]   io_o_wt_4_5_payload,
  output              io_o_wt_4_6_valid,
  input               io_o_wt_4_6_ready,
  output     [31:0]   io_o_wt_4_6_payload,
  output              io_o_wt_4_7_valid,
  input               io_o_wt_4_7_ready,
  output     [31:0]   io_o_wt_4_7_payload,
  output              io_o_wt_5_0_valid,
  input               io_o_wt_5_0_ready,
  output     [31:0]   io_o_wt_5_0_payload,
  output              io_o_wt_5_1_valid,
  input               io_o_wt_5_1_ready,
  output     [31:0]   io_o_wt_5_1_payload,
  output              io_o_wt_5_2_valid,
  input               io_o_wt_5_2_ready,
  output     [31:0]   io_o_wt_5_2_payload,
  output              io_o_wt_5_3_valid,
  input               io_o_wt_5_3_ready,
  output     [31:0]   io_o_wt_5_3_payload,
  output              io_o_wt_5_4_valid,
  input               io_o_wt_5_4_ready,
  output     [31:0]   io_o_wt_5_4_payload,
  output              io_o_wt_5_5_valid,
  input               io_o_wt_5_5_ready,
  output     [31:0]   io_o_wt_5_5_payload,
  output              io_o_wt_5_6_valid,
  input               io_o_wt_5_6_ready,
  output     [31:0]   io_o_wt_5_6_payload,
  output              io_o_wt_5_7_valid,
  input               io_o_wt_5_7_ready,
  output     [31:0]   io_o_wt_5_7_payload,
  output              io_o_wt_6_0_valid,
  input               io_o_wt_6_0_ready,
  output     [31:0]   io_o_wt_6_0_payload,
  output              io_o_wt_6_1_valid,
  input               io_o_wt_6_1_ready,
  output     [31:0]   io_o_wt_6_1_payload,
  output              io_o_wt_6_2_valid,
  input               io_o_wt_6_2_ready,
  output     [31:0]   io_o_wt_6_2_payload,
  output              io_o_wt_6_3_valid,
  input               io_o_wt_6_3_ready,
  output     [31:0]   io_o_wt_6_3_payload,
  output              io_o_wt_6_4_valid,
  input               io_o_wt_6_4_ready,
  output     [31:0]   io_o_wt_6_4_payload,
  output              io_o_wt_6_5_valid,
  input               io_o_wt_6_5_ready,
  output     [31:0]   io_o_wt_6_5_payload,
  output              io_o_wt_6_6_valid,
  input               io_o_wt_6_6_ready,
  output     [31:0]   io_o_wt_6_6_payload,
  output              io_o_wt_6_7_valid,
  input               io_o_wt_6_7_ready,
  output     [31:0]   io_o_wt_6_7_payload,
  output              io_o_wt_7_0_valid,
  input               io_o_wt_7_0_ready,
  output     [31:0]   io_o_wt_7_0_payload,
  output              io_o_wt_7_1_valid,
  input               io_o_wt_7_1_ready,
  output     [31:0]   io_o_wt_7_1_payload,
  output              io_o_wt_7_2_valid,
  input               io_o_wt_7_2_ready,
  output     [31:0]   io_o_wt_7_2_payload,
  output              io_o_wt_7_3_valid,
  input               io_o_wt_7_3_ready,
  output     [31:0]   io_o_wt_7_3_payload,
  output              io_o_wt_7_4_valid,
  input               io_o_wt_7_4_ready,
  output     [31:0]   io_o_wt_7_4_payload,
  output              io_o_wt_7_5_valid,
  input               io_o_wt_7_5_ready,
  output     [31:0]   io_o_wt_7_5_payload,
  output              io_o_wt_7_6_valid,
  input               io_o_wt_7_6_ready,
  output     [31:0]   io_o_wt_7_6_payload,
  output              io_o_wt_7_7_valid,
  input               io_o_wt_7_7_ready,
  output     [31:0]   io_o_wt_7_7_payload
);
  wire                temp_ft_0_valid;
  wire                temp_ft_0_ready;
  wire       [31:0]   temp_ft_0_payload;
  wire                temp_ft_1_valid;
  wire                temp_ft_1_ready;
  wire       [31:0]   temp_ft_1_payload;
  wire                temp_ft_2_valid;
  wire                temp_ft_2_ready;
  wire       [31:0]   temp_ft_2_payload;
  wire                temp_ft_3_valid;
  wire                temp_ft_3_ready;
  wire       [31:0]   temp_ft_3_payload;
  wire                temp_ft_4_valid;
  wire                temp_ft_4_ready;
  wire       [31:0]   temp_ft_4_payload;
  wire                temp_ft_5_valid;
  wire                temp_ft_5_ready;
  wire       [31:0]   temp_ft_5_payload;
  wire                temp_ft_6_valid;
  wire                temp_ft_6_ready;
  wire       [31:0]   temp_ft_6_payload;
  wire                temp_ft_7_valid;
  wire                temp_ft_7_ready;
  wire       [31:0]   temp_ft_7_payload;
  wire                temp_wt_0_0_valid;
  wire                temp_wt_0_0_ready;
  wire       [31:0]   temp_wt_0_0_payload;
  wire                temp_wt_0_1_valid;
  wire                temp_wt_0_1_ready;
  wire       [31:0]   temp_wt_0_1_payload;
  wire                temp_wt_0_2_valid;
  wire                temp_wt_0_2_ready;
  wire       [31:0]   temp_wt_0_2_payload;
  wire                temp_wt_0_3_valid;
  wire                temp_wt_0_3_ready;
  wire       [31:0]   temp_wt_0_3_payload;
  wire                temp_wt_0_4_valid;
  wire                temp_wt_0_4_ready;
  wire       [31:0]   temp_wt_0_4_payload;
  wire                temp_wt_0_5_valid;
  wire                temp_wt_0_5_ready;
  wire       [31:0]   temp_wt_0_5_payload;
  wire                temp_wt_0_6_valid;
  wire                temp_wt_0_6_ready;
  wire       [31:0]   temp_wt_0_6_payload;
  wire                temp_wt_0_7_valid;
  wire                temp_wt_0_7_ready;
  wire       [31:0]   temp_wt_0_7_payload;
  wire                temp_wt_1_0_valid;
  wire                temp_wt_1_0_ready;
  wire       [31:0]   temp_wt_1_0_payload;
  wire                temp_wt_1_1_valid;
  wire                temp_wt_1_1_ready;
  wire       [31:0]   temp_wt_1_1_payload;
  wire                temp_wt_1_2_valid;
  wire                temp_wt_1_2_ready;
  wire       [31:0]   temp_wt_1_2_payload;
  wire                temp_wt_1_3_valid;
  wire                temp_wt_1_3_ready;
  wire       [31:0]   temp_wt_1_3_payload;
  wire                temp_wt_1_4_valid;
  wire                temp_wt_1_4_ready;
  wire       [31:0]   temp_wt_1_4_payload;
  wire                temp_wt_1_5_valid;
  wire                temp_wt_1_5_ready;
  wire       [31:0]   temp_wt_1_5_payload;
  wire                temp_wt_1_6_valid;
  wire                temp_wt_1_6_ready;
  wire       [31:0]   temp_wt_1_6_payload;
  wire                temp_wt_1_7_valid;
  wire                temp_wt_1_7_ready;
  wire       [31:0]   temp_wt_1_7_payload;
  wire                temp_wt_2_0_valid;
  wire                temp_wt_2_0_ready;
  wire       [31:0]   temp_wt_2_0_payload;
  wire                temp_wt_2_1_valid;
  wire                temp_wt_2_1_ready;
  wire       [31:0]   temp_wt_2_1_payload;
  wire                temp_wt_2_2_valid;
  wire                temp_wt_2_2_ready;
  wire       [31:0]   temp_wt_2_2_payload;
  wire                temp_wt_2_3_valid;
  wire                temp_wt_2_3_ready;
  wire       [31:0]   temp_wt_2_3_payload;
  wire                temp_wt_2_4_valid;
  wire                temp_wt_2_4_ready;
  wire       [31:0]   temp_wt_2_4_payload;
  wire                temp_wt_2_5_valid;
  wire                temp_wt_2_5_ready;
  wire       [31:0]   temp_wt_2_5_payload;
  wire                temp_wt_2_6_valid;
  wire                temp_wt_2_6_ready;
  wire       [31:0]   temp_wt_2_6_payload;
  wire                temp_wt_2_7_valid;
  wire                temp_wt_2_7_ready;
  wire       [31:0]   temp_wt_2_7_payload;
  wire                temp_wt_3_0_valid;
  wire                temp_wt_3_0_ready;
  wire       [31:0]   temp_wt_3_0_payload;
  wire                temp_wt_3_1_valid;
  wire                temp_wt_3_1_ready;
  wire       [31:0]   temp_wt_3_1_payload;
  wire                temp_wt_3_2_valid;
  wire                temp_wt_3_2_ready;
  wire       [31:0]   temp_wt_3_2_payload;
  wire                temp_wt_3_3_valid;
  wire                temp_wt_3_3_ready;
  wire       [31:0]   temp_wt_3_3_payload;
  wire                temp_wt_3_4_valid;
  wire                temp_wt_3_4_ready;
  wire       [31:0]   temp_wt_3_4_payload;
  wire                temp_wt_3_5_valid;
  wire                temp_wt_3_5_ready;
  wire       [31:0]   temp_wt_3_5_payload;
  wire                temp_wt_3_6_valid;
  wire                temp_wt_3_6_ready;
  wire       [31:0]   temp_wt_3_6_payload;
  wire                temp_wt_3_7_valid;
  wire                temp_wt_3_7_ready;
  wire       [31:0]   temp_wt_3_7_payload;
  wire                temp_wt_4_0_valid;
  wire                temp_wt_4_0_ready;
  wire       [31:0]   temp_wt_4_0_payload;
  wire                temp_wt_4_1_valid;
  wire                temp_wt_4_1_ready;
  wire       [31:0]   temp_wt_4_1_payload;
  wire                temp_wt_4_2_valid;
  wire                temp_wt_4_2_ready;
  wire       [31:0]   temp_wt_4_2_payload;
  wire                temp_wt_4_3_valid;
  wire                temp_wt_4_3_ready;
  wire       [31:0]   temp_wt_4_3_payload;
  wire                temp_wt_4_4_valid;
  wire                temp_wt_4_4_ready;
  wire       [31:0]   temp_wt_4_4_payload;
  wire                temp_wt_4_5_valid;
  wire                temp_wt_4_5_ready;
  wire       [31:0]   temp_wt_4_5_payload;
  wire                temp_wt_4_6_valid;
  wire                temp_wt_4_6_ready;
  wire       [31:0]   temp_wt_4_6_payload;
  wire                temp_wt_4_7_valid;
  wire                temp_wt_4_7_ready;
  wire       [31:0]   temp_wt_4_7_payload;
  wire                temp_wt_5_0_valid;
  wire                temp_wt_5_0_ready;
  wire       [31:0]   temp_wt_5_0_payload;
  wire                temp_wt_5_1_valid;
  wire                temp_wt_5_1_ready;
  wire       [31:0]   temp_wt_5_1_payload;
  wire                temp_wt_5_2_valid;
  wire                temp_wt_5_2_ready;
  wire       [31:0]   temp_wt_5_2_payload;
  wire                temp_wt_5_3_valid;
  wire                temp_wt_5_3_ready;
  wire       [31:0]   temp_wt_5_3_payload;
  wire                temp_wt_5_4_valid;
  wire                temp_wt_5_4_ready;
  wire       [31:0]   temp_wt_5_4_payload;
  wire                temp_wt_5_5_valid;
  wire                temp_wt_5_5_ready;
  wire       [31:0]   temp_wt_5_5_payload;
  wire                temp_wt_5_6_valid;
  wire                temp_wt_5_6_ready;
  wire       [31:0]   temp_wt_5_6_payload;
  wire                temp_wt_5_7_valid;
  wire                temp_wt_5_7_ready;
  wire       [31:0]   temp_wt_5_7_payload;
  wire                temp_wt_6_0_valid;
  wire                temp_wt_6_0_ready;
  wire       [31:0]   temp_wt_6_0_payload;
  wire                temp_wt_6_1_valid;
  wire                temp_wt_6_1_ready;
  wire       [31:0]   temp_wt_6_1_payload;
  wire                temp_wt_6_2_valid;
  wire                temp_wt_6_2_ready;
  wire       [31:0]   temp_wt_6_2_payload;
  wire                temp_wt_6_3_valid;
  wire                temp_wt_6_3_ready;
  wire       [31:0]   temp_wt_6_3_payload;
  wire                temp_wt_6_4_valid;
  wire                temp_wt_6_4_ready;
  wire       [31:0]   temp_wt_6_4_payload;
  wire                temp_wt_6_5_valid;
  wire                temp_wt_6_5_ready;
  wire       [31:0]   temp_wt_6_5_payload;
  wire                temp_wt_6_6_valid;
  wire                temp_wt_6_6_ready;
  wire       [31:0]   temp_wt_6_6_payload;
  wire                temp_wt_6_7_valid;
  wire                temp_wt_6_7_ready;
  wire       [31:0]   temp_wt_6_7_payload;
  wire                temp_wt_7_0_valid;
  wire                temp_wt_7_0_ready;
  wire       [31:0]   temp_wt_7_0_payload;
  wire                temp_wt_7_1_valid;
  wire                temp_wt_7_1_ready;
  wire       [31:0]   temp_wt_7_1_payload;
  wire                temp_wt_7_2_valid;
  wire                temp_wt_7_2_ready;
  wire       [31:0]   temp_wt_7_2_payload;
  wire                temp_wt_7_3_valid;
  wire                temp_wt_7_3_ready;
  wire       [31:0]   temp_wt_7_3_payload;
  wire                temp_wt_7_4_valid;
  wire                temp_wt_7_4_ready;
  wire       [31:0]   temp_wt_7_4_payload;
  wire                temp_wt_7_5_valid;
  wire                temp_wt_7_5_ready;
  wire       [31:0]   temp_wt_7_5_payload;
  wire                temp_wt_7_6_valid;
  wire                temp_wt_7_6_ready;
  wire       [31:0]   temp_wt_7_6_payload;
  wire                temp_wt_7_7_valid;
  wire                temp_wt_7_7_ready;
  wire       [31:0]   temp_wt_7_7_payload;

  assign io_o_ft_0_valid = temp_ft_0_valid;
  assign temp_ft_0_ready = io_o_ft_0_ready;
  assign io_o_ft_0_payload = temp_ft_0_payload;
  assign io_o_ft_1_valid = temp_ft_1_valid;
  assign temp_ft_1_ready = io_o_ft_1_ready;
  assign io_o_ft_1_payload = temp_ft_1_payload;
  assign io_o_ft_2_valid = temp_ft_2_valid;
  assign temp_ft_2_ready = io_o_ft_2_ready;
  assign io_o_ft_2_payload = temp_ft_2_payload;
  assign io_o_ft_3_valid = temp_ft_3_valid;
  assign temp_ft_3_ready = io_o_ft_3_ready;
  assign io_o_ft_3_payload = temp_ft_3_payload;
  assign io_o_ft_4_valid = temp_ft_4_valid;
  assign temp_ft_4_ready = io_o_ft_4_ready;
  assign io_o_ft_4_payload = temp_ft_4_payload;
  assign io_o_ft_5_valid = temp_ft_5_valid;
  assign temp_ft_5_ready = io_o_ft_5_ready;
  assign io_o_ft_5_payload = temp_ft_5_payload;
  assign io_o_ft_6_valid = temp_ft_6_valid;
  assign temp_ft_6_ready = io_o_ft_6_ready;
  assign io_o_ft_6_payload = temp_ft_6_payload;
  assign io_o_ft_7_valid = temp_ft_7_valid;
  assign temp_ft_7_ready = io_o_ft_7_ready;
  assign io_o_ft_7_payload = temp_ft_7_payload;
  assign io_o_wt_0_0_valid = temp_wt_0_0_valid;
  assign temp_wt_0_0_ready = io_o_wt_0_0_ready;
  assign io_o_wt_0_0_payload = temp_wt_0_0_payload;
  assign io_o_wt_0_1_valid = temp_wt_0_1_valid;
  assign temp_wt_0_1_ready = io_o_wt_0_1_ready;
  assign io_o_wt_0_1_payload = temp_wt_0_1_payload;
  assign io_o_wt_0_2_valid = temp_wt_0_2_valid;
  assign temp_wt_0_2_ready = io_o_wt_0_2_ready;
  assign io_o_wt_0_2_payload = temp_wt_0_2_payload;
  assign io_o_wt_0_3_valid = temp_wt_0_3_valid;
  assign temp_wt_0_3_ready = io_o_wt_0_3_ready;
  assign io_o_wt_0_3_payload = temp_wt_0_3_payload;
  assign io_o_wt_0_4_valid = temp_wt_0_4_valid;
  assign temp_wt_0_4_ready = io_o_wt_0_4_ready;
  assign io_o_wt_0_4_payload = temp_wt_0_4_payload;
  assign io_o_wt_0_5_valid = temp_wt_0_5_valid;
  assign temp_wt_0_5_ready = io_o_wt_0_5_ready;
  assign io_o_wt_0_5_payload = temp_wt_0_5_payload;
  assign io_o_wt_0_6_valid = temp_wt_0_6_valid;
  assign temp_wt_0_6_ready = io_o_wt_0_6_ready;
  assign io_o_wt_0_6_payload = temp_wt_0_6_payload;
  assign io_o_wt_0_7_valid = temp_wt_0_7_valid;
  assign temp_wt_0_7_ready = io_o_wt_0_7_ready;
  assign io_o_wt_0_7_payload = temp_wt_0_7_payload;
  assign io_o_wt_1_0_valid = temp_wt_1_0_valid;
  assign temp_wt_1_0_ready = io_o_wt_1_0_ready;
  assign io_o_wt_1_0_payload = temp_wt_1_0_payload;
  assign io_o_wt_1_1_valid = temp_wt_1_1_valid;
  assign temp_wt_1_1_ready = io_o_wt_1_1_ready;
  assign io_o_wt_1_1_payload = temp_wt_1_1_payload;
  assign io_o_wt_1_2_valid = temp_wt_1_2_valid;
  assign temp_wt_1_2_ready = io_o_wt_1_2_ready;
  assign io_o_wt_1_2_payload = temp_wt_1_2_payload;
  assign io_o_wt_1_3_valid = temp_wt_1_3_valid;
  assign temp_wt_1_3_ready = io_o_wt_1_3_ready;
  assign io_o_wt_1_3_payload = temp_wt_1_3_payload;
  assign io_o_wt_1_4_valid = temp_wt_1_4_valid;
  assign temp_wt_1_4_ready = io_o_wt_1_4_ready;
  assign io_o_wt_1_4_payload = temp_wt_1_4_payload;
  assign io_o_wt_1_5_valid = temp_wt_1_5_valid;
  assign temp_wt_1_5_ready = io_o_wt_1_5_ready;
  assign io_o_wt_1_5_payload = temp_wt_1_5_payload;
  assign io_o_wt_1_6_valid = temp_wt_1_6_valid;
  assign temp_wt_1_6_ready = io_o_wt_1_6_ready;
  assign io_o_wt_1_6_payload = temp_wt_1_6_payload;
  assign io_o_wt_1_7_valid = temp_wt_1_7_valid;
  assign temp_wt_1_7_ready = io_o_wt_1_7_ready;
  assign io_o_wt_1_7_payload = temp_wt_1_7_payload;
  assign io_o_wt_2_0_valid = temp_wt_2_0_valid;
  assign temp_wt_2_0_ready = io_o_wt_2_0_ready;
  assign io_o_wt_2_0_payload = temp_wt_2_0_payload;
  assign io_o_wt_2_1_valid = temp_wt_2_1_valid;
  assign temp_wt_2_1_ready = io_o_wt_2_1_ready;
  assign io_o_wt_2_1_payload = temp_wt_2_1_payload;
  assign io_o_wt_2_2_valid = temp_wt_2_2_valid;
  assign temp_wt_2_2_ready = io_o_wt_2_2_ready;
  assign io_o_wt_2_2_payload = temp_wt_2_2_payload;
  assign io_o_wt_2_3_valid = temp_wt_2_3_valid;
  assign temp_wt_2_3_ready = io_o_wt_2_3_ready;
  assign io_o_wt_2_3_payload = temp_wt_2_3_payload;
  assign io_o_wt_2_4_valid = temp_wt_2_4_valid;
  assign temp_wt_2_4_ready = io_o_wt_2_4_ready;
  assign io_o_wt_2_4_payload = temp_wt_2_4_payload;
  assign io_o_wt_2_5_valid = temp_wt_2_5_valid;
  assign temp_wt_2_5_ready = io_o_wt_2_5_ready;
  assign io_o_wt_2_5_payload = temp_wt_2_5_payload;
  assign io_o_wt_2_6_valid = temp_wt_2_6_valid;
  assign temp_wt_2_6_ready = io_o_wt_2_6_ready;
  assign io_o_wt_2_6_payload = temp_wt_2_6_payload;
  assign io_o_wt_2_7_valid = temp_wt_2_7_valid;
  assign temp_wt_2_7_ready = io_o_wt_2_7_ready;
  assign io_o_wt_2_7_payload = temp_wt_2_7_payload;
  assign io_o_wt_3_0_valid = temp_wt_3_0_valid;
  assign temp_wt_3_0_ready = io_o_wt_3_0_ready;
  assign io_o_wt_3_0_payload = temp_wt_3_0_payload;
  assign io_o_wt_3_1_valid = temp_wt_3_1_valid;
  assign temp_wt_3_1_ready = io_o_wt_3_1_ready;
  assign io_o_wt_3_1_payload = temp_wt_3_1_payload;
  assign io_o_wt_3_2_valid = temp_wt_3_2_valid;
  assign temp_wt_3_2_ready = io_o_wt_3_2_ready;
  assign io_o_wt_3_2_payload = temp_wt_3_2_payload;
  assign io_o_wt_3_3_valid = temp_wt_3_3_valid;
  assign temp_wt_3_3_ready = io_o_wt_3_3_ready;
  assign io_o_wt_3_3_payload = temp_wt_3_3_payload;
  assign io_o_wt_3_4_valid = temp_wt_3_4_valid;
  assign temp_wt_3_4_ready = io_o_wt_3_4_ready;
  assign io_o_wt_3_4_payload = temp_wt_3_4_payload;
  assign io_o_wt_3_5_valid = temp_wt_3_5_valid;
  assign temp_wt_3_5_ready = io_o_wt_3_5_ready;
  assign io_o_wt_3_5_payload = temp_wt_3_5_payload;
  assign io_o_wt_3_6_valid = temp_wt_3_6_valid;
  assign temp_wt_3_6_ready = io_o_wt_3_6_ready;
  assign io_o_wt_3_6_payload = temp_wt_3_6_payload;
  assign io_o_wt_3_7_valid = temp_wt_3_7_valid;
  assign temp_wt_3_7_ready = io_o_wt_3_7_ready;
  assign io_o_wt_3_7_payload = temp_wt_3_7_payload;
  assign io_o_wt_4_0_valid = temp_wt_4_0_valid;
  assign temp_wt_4_0_ready = io_o_wt_4_0_ready;
  assign io_o_wt_4_0_payload = temp_wt_4_0_payload;
  assign io_o_wt_4_1_valid = temp_wt_4_1_valid;
  assign temp_wt_4_1_ready = io_o_wt_4_1_ready;
  assign io_o_wt_4_1_payload = temp_wt_4_1_payload;
  assign io_o_wt_4_2_valid = temp_wt_4_2_valid;
  assign temp_wt_4_2_ready = io_o_wt_4_2_ready;
  assign io_o_wt_4_2_payload = temp_wt_4_2_payload;
  assign io_o_wt_4_3_valid = temp_wt_4_3_valid;
  assign temp_wt_4_3_ready = io_o_wt_4_3_ready;
  assign io_o_wt_4_3_payload = temp_wt_4_3_payload;
  assign io_o_wt_4_4_valid = temp_wt_4_4_valid;
  assign temp_wt_4_4_ready = io_o_wt_4_4_ready;
  assign io_o_wt_4_4_payload = temp_wt_4_4_payload;
  assign io_o_wt_4_5_valid = temp_wt_4_5_valid;
  assign temp_wt_4_5_ready = io_o_wt_4_5_ready;
  assign io_o_wt_4_5_payload = temp_wt_4_5_payload;
  assign io_o_wt_4_6_valid = temp_wt_4_6_valid;
  assign temp_wt_4_6_ready = io_o_wt_4_6_ready;
  assign io_o_wt_4_6_payload = temp_wt_4_6_payload;
  assign io_o_wt_4_7_valid = temp_wt_4_7_valid;
  assign temp_wt_4_7_ready = io_o_wt_4_7_ready;
  assign io_o_wt_4_7_payload = temp_wt_4_7_payload;
  assign io_o_wt_5_0_valid = temp_wt_5_0_valid;
  assign temp_wt_5_0_ready = io_o_wt_5_0_ready;
  assign io_o_wt_5_0_payload = temp_wt_5_0_payload;
  assign io_o_wt_5_1_valid = temp_wt_5_1_valid;
  assign temp_wt_5_1_ready = io_o_wt_5_1_ready;
  assign io_o_wt_5_1_payload = temp_wt_5_1_payload;
  assign io_o_wt_5_2_valid = temp_wt_5_2_valid;
  assign temp_wt_5_2_ready = io_o_wt_5_2_ready;
  assign io_o_wt_5_2_payload = temp_wt_5_2_payload;
  assign io_o_wt_5_3_valid = temp_wt_5_3_valid;
  assign temp_wt_5_3_ready = io_o_wt_5_3_ready;
  assign io_o_wt_5_3_payload = temp_wt_5_3_payload;
  assign io_o_wt_5_4_valid = temp_wt_5_4_valid;
  assign temp_wt_5_4_ready = io_o_wt_5_4_ready;
  assign io_o_wt_5_4_payload = temp_wt_5_4_payload;
  assign io_o_wt_5_5_valid = temp_wt_5_5_valid;
  assign temp_wt_5_5_ready = io_o_wt_5_5_ready;
  assign io_o_wt_5_5_payload = temp_wt_5_5_payload;
  assign io_o_wt_5_6_valid = temp_wt_5_6_valid;
  assign temp_wt_5_6_ready = io_o_wt_5_6_ready;
  assign io_o_wt_5_6_payload = temp_wt_5_6_payload;
  assign io_o_wt_5_7_valid = temp_wt_5_7_valid;
  assign temp_wt_5_7_ready = io_o_wt_5_7_ready;
  assign io_o_wt_5_7_payload = temp_wt_5_7_payload;
  assign io_o_wt_6_0_valid = temp_wt_6_0_valid;
  assign temp_wt_6_0_ready = io_o_wt_6_0_ready;
  assign io_o_wt_6_0_payload = temp_wt_6_0_payload;
  assign io_o_wt_6_1_valid = temp_wt_6_1_valid;
  assign temp_wt_6_1_ready = io_o_wt_6_1_ready;
  assign io_o_wt_6_1_payload = temp_wt_6_1_payload;
  assign io_o_wt_6_2_valid = temp_wt_6_2_valid;
  assign temp_wt_6_2_ready = io_o_wt_6_2_ready;
  assign io_o_wt_6_2_payload = temp_wt_6_2_payload;
  assign io_o_wt_6_3_valid = temp_wt_6_3_valid;
  assign temp_wt_6_3_ready = io_o_wt_6_3_ready;
  assign io_o_wt_6_3_payload = temp_wt_6_3_payload;
  assign io_o_wt_6_4_valid = temp_wt_6_4_valid;
  assign temp_wt_6_4_ready = io_o_wt_6_4_ready;
  assign io_o_wt_6_4_payload = temp_wt_6_4_payload;
  assign io_o_wt_6_5_valid = temp_wt_6_5_valid;
  assign temp_wt_6_5_ready = io_o_wt_6_5_ready;
  assign io_o_wt_6_5_payload = temp_wt_6_5_payload;
  assign io_o_wt_6_6_valid = temp_wt_6_6_valid;
  assign temp_wt_6_6_ready = io_o_wt_6_6_ready;
  assign io_o_wt_6_6_payload = temp_wt_6_6_payload;
  assign io_o_wt_6_7_valid = temp_wt_6_7_valid;
  assign temp_wt_6_7_ready = io_o_wt_6_7_ready;
  assign io_o_wt_6_7_payload = temp_wt_6_7_payload;
  assign io_o_wt_7_0_valid = temp_wt_7_0_valid;
  assign temp_wt_7_0_ready = io_o_wt_7_0_ready;
  assign io_o_wt_7_0_payload = temp_wt_7_0_payload;
  assign io_o_wt_7_1_valid = temp_wt_7_1_valid;
  assign temp_wt_7_1_ready = io_o_wt_7_1_ready;
  assign io_o_wt_7_1_payload = temp_wt_7_1_payload;
  assign io_o_wt_7_2_valid = temp_wt_7_2_valid;
  assign temp_wt_7_2_ready = io_o_wt_7_2_ready;
  assign io_o_wt_7_2_payload = temp_wt_7_2_payload;
  assign io_o_wt_7_3_valid = temp_wt_7_3_valid;
  assign temp_wt_7_3_ready = io_o_wt_7_3_ready;
  assign io_o_wt_7_3_payload = temp_wt_7_3_payload;
  assign io_o_wt_7_4_valid = temp_wt_7_4_valid;
  assign temp_wt_7_4_ready = io_o_wt_7_4_ready;
  assign io_o_wt_7_4_payload = temp_wt_7_4_payload;
  assign io_o_wt_7_5_valid = temp_wt_7_5_valid;
  assign temp_wt_7_5_ready = io_o_wt_7_5_ready;
  assign io_o_wt_7_5_payload = temp_wt_7_5_payload;
  assign io_o_wt_7_6_valid = temp_wt_7_6_valid;
  assign temp_wt_7_6_ready = io_o_wt_7_6_ready;
  assign io_o_wt_7_6_payload = temp_wt_7_6_payload;
  assign io_o_wt_7_7_valid = temp_wt_7_7_valid;
  assign temp_wt_7_7_ready = io_o_wt_7_7_ready;
  assign io_o_wt_7_7_payload = temp_wt_7_7_payload;
  assign io_i_ft_ready = (((((((temp_ft_0_ready && temp_ft_1_ready) && temp_ft_2_ready) && temp_ft_3_ready) && temp_ft_4_ready) && temp_ft_5_ready) && temp_ft_6_ready) && temp_ft_7_ready);
  assign temp_ft_0_valid = io_i_ft_valid;
  assign temp_ft_0_payload = io_i_ft_payload[31 : 0];
  assign temp_ft_1_valid = io_i_ft_valid;
  assign temp_ft_1_payload = io_i_ft_payload[63 : 32];
  assign temp_ft_2_valid = io_i_ft_valid;
  assign temp_ft_2_payload = io_i_ft_payload[95 : 64];
  assign temp_ft_3_valid = io_i_ft_valid;
  assign temp_ft_3_payload = io_i_ft_payload[127 : 96];
  assign temp_ft_4_valid = io_i_ft_valid;
  assign temp_ft_4_payload = io_i_ft_payload[159 : 128];
  assign temp_ft_5_valid = io_i_ft_valid;
  assign temp_ft_5_payload = io_i_ft_payload[191 : 160];
  assign temp_ft_6_valid = io_i_ft_valid;
  assign temp_ft_6_payload = io_i_ft_payload[223 : 192];
  assign temp_ft_7_valid = io_i_ft_valid;
  assign temp_ft_7_payload = io_i_ft_payload[255 : 224];
  assign temp_wt_0_0_payload = io_i_wt_0_payload[31 : 0];
  assign temp_wt_0_0_valid = io_i_wt_0_valid;
  assign temp_wt_0_1_payload = io_i_wt_0_payload[63 : 32];
  assign temp_wt_0_1_valid = io_i_wt_0_valid;
  assign temp_wt_0_2_payload = io_i_wt_0_payload[95 : 64];
  assign temp_wt_0_2_valid = io_i_wt_0_valid;
  assign temp_wt_0_3_payload = io_i_wt_0_payload[127 : 96];
  assign temp_wt_0_3_valid = io_i_wt_0_valid;
  assign temp_wt_0_4_payload = io_i_wt_0_payload[159 : 128];
  assign temp_wt_0_4_valid = io_i_wt_0_valid;
  assign temp_wt_0_5_payload = io_i_wt_0_payload[191 : 160];
  assign temp_wt_0_5_valid = io_i_wt_0_valid;
  assign temp_wt_0_6_payload = io_i_wt_0_payload[223 : 192];
  assign temp_wt_0_6_valid = io_i_wt_0_valid;
  assign temp_wt_0_7_payload = io_i_wt_0_payload[255 : 224];
  assign temp_wt_0_7_valid = io_i_wt_0_valid;
  assign io_i_wt_0_ready = (((((((temp_wt_0_0_ready && temp_wt_0_1_ready) && temp_wt_0_2_ready) && temp_wt_0_3_ready) && temp_wt_0_4_ready) && temp_wt_0_5_ready) && temp_wt_0_6_ready) && temp_wt_0_7_ready);
  assign temp_wt_1_0_payload = io_i_wt_1_payload[31 : 0];
  assign temp_wt_1_0_valid = io_i_wt_1_valid;
  assign temp_wt_1_1_payload = io_i_wt_1_payload[63 : 32];
  assign temp_wt_1_1_valid = io_i_wt_1_valid;
  assign temp_wt_1_2_payload = io_i_wt_1_payload[95 : 64];
  assign temp_wt_1_2_valid = io_i_wt_1_valid;
  assign temp_wt_1_3_payload = io_i_wt_1_payload[127 : 96];
  assign temp_wt_1_3_valid = io_i_wt_1_valid;
  assign temp_wt_1_4_payload = io_i_wt_1_payload[159 : 128];
  assign temp_wt_1_4_valid = io_i_wt_1_valid;
  assign temp_wt_1_5_payload = io_i_wt_1_payload[191 : 160];
  assign temp_wt_1_5_valid = io_i_wt_1_valid;
  assign temp_wt_1_6_payload = io_i_wt_1_payload[223 : 192];
  assign temp_wt_1_6_valid = io_i_wt_1_valid;
  assign temp_wt_1_7_payload = io_i_wt_1_payload[255 : 224];
  assign temp_wt_1_7_valid = io_i_wt_1_valid;
  assign io_i_wt_1_ready = (((((((temp_wt_1_0_ready && temp_wt_1_1_ready) && temp_wt_1_2_ready) && temp_wt_1_3_ready) && temp_wt_1_4_ready) && temp_wt_1_5_ready) && temp_wt_1_6_ready) && temp_wt_1_7_ready);
  assign temp_wt_2_0_payload = io_i_wt_2_payload[31 : 0];
  assign temp_wt_2_0_valid = io_i_wt_2_valid;
  assign temp_wt_2_1_payload = io_i_wt_2_payload[63 : 32];
  assign temp_wt_2_1_valid = io_i_wt_2_valid;
  assign temp_wt_2_2_payload = io_i_wt_2_payload[95 : 64];
  assign temp_wt_2_2_valid = io_i_wt_2_valid;
  assign temp_wt_2_3_payload = io_i_wt_2_payload[127 : 96];
  assign temp_wt_2_3_valid = io_i_wt_2_valid;
  assign temp_wt_2_4_payload = io_i_wt_2_payload[159 : 128];
  assign temp_wt_2_4_valid = io_i_wt_2_valid;
  assign temp_wt_2_5_payload = io_i_wt_2_payload[191 : 160];
  assign temp_wt_2_5_valid = io_i_wt_2_valid;
  assign temp_wt_2_6_payload = io_i_wt_2_payload[223 : 192];
  assign temp_wt_2_6_valid = io_i_wt_2_valid;
  assign temp_wt_2_7_payload = io_i_wt_2_payload[255 : 224];
  assign temp_wt_2_7_valid = io_i_wt_2_valid;
  assign io_i_wt_2_ready = (((((((temp_wt_2_0_ready && temp_wt_2_1_ready) && temp_wt_2_2_ready) && temp_wt_2_3_ready) && temp_wt_2_4_ready) && temp_wt_2_5_ready) && temp_wt_2_6_ready) && temp_wt_2_7_ready);
  assign temp_wt_3_0_payload = io_i_wt_3_payload[31 : 0];
  assign temp_wt_3_0_valid = io_i_wt_3_valid;
  assign temp_wt_3_1_payload = io_i_wt_3_payload[63 : 32];
  assign temp_wt_3_1_valid = io_i_wt_3_valid;
  assign temp_wt_3_2_payload = io_i_wt_3_payload[95 : 64];
  assign temp_wt_3_2_valid = io_i_wt_3_valid;
  assign temp_wt_3_3_payload = io_i_wt_3_payload[127 : 96];
  assign temp_wt_3_3_valid = io_i_wt_3_valid;
  assign temp_wt_3_4_payload = io_i_wt_3_payload[159 : 128];
  assign temp_wt_3_4_valid = io_i_wt_3_valid;
  assign temp_wt_3_5_payload = io_i_wt_3_payload[191 : 160];
  assign temp_wt_3_5_valid = io_i_wt_3_valid;
  assign temp_wt_3_6_payload = io_i_wt_3_payload[223 : 192];
  assign temp_wt_3_6_valid = io_i_wt_3_valid;
  assign temp_wt_3_7_payload = io_i_wt_3_payload[255 : 224];
  assign temp_wt_3_7_valid = io_i_wt_3_valid;
  assign io_i_wt_3_ready = (((((((temp_wt_3_0_ready && temp_wt_3_1_ready) && temp_wt_3_2_ready) && temp_wt_3_3_ready) && temp_wt_3_4_ready) && temp_wt_3_5_ready) && temp_wt_3_6_ready) && temp_wt_3_7_ready);
  assign temp_wt_4_0_payload = io_i_wt_4_payload[31 : 0];
  assign temp_wt_4_0_valid = io_i_wt_4_valid;
  assign temp_wt_4_1_payload = io_i_wt_4_payload[63 : 32];
  assign temp_wt_4_1_valid = io_i_wt_4_valid;
  assign temp_wt_4_2_payload = io_i_wt_4_payload[95 : 64];
  assign temp_wt_4_2_valid = io_i_wt_4_valid;
  assign temp_wt_4_3_payload = io_i_wt_4_payload[127 : 96];
  assign temp_wt_4_3_valid = io_i_wt_4_valid;
  assign temp_wt_4_4_payload = io_i_wt_4_payload[159 : 128];
  assign temp_wt_4_4_valid = io_i_wt_4_valid;
  assign temp_wt_4_5_payload = io_i_wt_4_payload[191 : 160];
  assign temp_wt_4_5_valid = io_i_wt_4_valid;
  assign temp_wt_4_6_payload = io_i_wt_4_payload[223 : 192];
  assign temp_wt_4_6_valid = io_i_wt_4_valid;
  assign temp_wt_4_7_payload = io_i_wt_4_payload[255 : 224];
  assign temp_wt_4_7_valid = io_i_wt_4_valid;
  assign io_i_wt_4_ready = (((((((temp_wt_4_0_ready && temp_wt_4_1_ready) && temp_wt_4_2_ready) && temp_wt_4_3_ready) && temp_wt_4_4_ready) && temp_wt_4_5_ready) && temp_wt_4_6_ready) && temp_wt_4_7_ready);
  assign temp_wt_5_0_payload = io_i_wt_5_payload[31 : 0];
  assign temp_wt_5_0_valid = io_i_wt_5_valid;
  assign temp_wt_5_1_payload = io_i_wt_5_payload[63 : 32];
  assign temp_wt_5_1_valid = io_i_wt_5_valid;
  assign temp_wt_5_2_payload = io_i_wt_5_payload[95 : 64];
  assign temp_wt_5_2_valid = io_i_wt_5_valid;
  assign temp_wt_5_3_payload = io_i_wt_5_payload[127 : 96];
  assign temp_wt_5_3_valid = io_i_wt_5_valid;
  assign temp_wt_5_4_payload = io_i_wt_5_payload[159 : 128];
  assign temp_wt_5_4_valid = io_i_wt_5_valid;
  assign temp_wt_5_5_payload = io_i_wt_5_payload[191 : 160];
  assign temp_wt_5_5_valid = io_i_wt_5_valid;
  assign temp_wt_5_6_payload = io_i_wt_5_payload[223 : 192];
  assign temp_wt_5_6_valid = io_i_wt_5_valid;
  assign temp_wt_5_7_payload = io_i_wt_5_payload[255 : 224];
  assign temp_wt_5_7_valid = io_i_wt_5_valid;
  assign io_i_wt_5_ready = (((((((temp_wt_5_0_ready && temp_wt_5_1_ready) && temp_wt_5_2_ready) && temp_wt_5_3_ready) && temp_wt_5_4_ready) && temp_wt_5_5_ready) && temp_wt_5_6_ready) && temp_wt_5_7_ready);
  assign temp_wt_6_0_payload = io_i_wt_6_payload[31 : 0];
  assign temp_wt_6_0_valid = io_i_wt_6_valid;
  assign temp_wt_6_1_payload = io_i_wt_6_payload[63 : 32];
  assign temp_wt_6_1_valid = io_i_wt_6_valid;
  assign temp_wt_6_2_payload = io_i_wt_6_payload[95 : 64];
  assign temp_wt_6_2_valid = io_i_wt_6_valid;
  assign temp_wt_6_3_payload = io_i_wt_6_payload[127 : 96];
  assign temp_wt_6_3_valid = io_i_wt_6_valid;
  assign temp_wt_6_4_payload = io_i_wt_6_payload[159 : 128];
  assign temp_wt_6_4_valid = io_i_wt_6_valid;
  assign temp_wt_6_5_payload = io_i_wt_6_payload[191 : 160];
  assign temp_wt_6_5_valid = io_i_wt_6_valid;
  assign temp_wt_6_6_payload = io_i_wt_6_payload[223 : 192];
  assign temp_wt_6_6_valid = io_i_wt_6_valid;
  assign temp_wt_6_7_payload = io_i_wt_6_payload[255 : 224];
  assign temp_wt_6_7_valid = io_i_wt_6_valid;
  assign io_i_wt_6_ready = (((((((temp_wt_6_0_ready && temp_wt_6_1_ready) && temp_wt_6_2_ready) && temp_wt_6_3_ready) && temp_wt_6_4_ready) && temp_wt_6_5_ready) && temp_wt_6_6_ready) && temp_wt_6_7_ready);
  assign temp_wt_7_0_payload = io_i_wt_7_payload[31 : 0];
  assign temp_wt_7_0_valid = io_i_wt_7_valid;
  assign temp_wt_7_1_payload = io_i_wt_7_payload[63 : 32];
  assign temp_wt_7_1_valid = io_i_wt_7_valid;
  assign temp_wt_7_2_payload = io_i_wt_7_payload[95 : 64];
  assign temp_wt_7_2_valid = io_i_wt_7_valid;
  assign temp_wt_7_3_payload = io_i_wt_7_payload[127 : 96];
  assign temp_wt_7_3_valid = io_i_wt_7_valid;
  assign temp_wt_7_4_payload = io_i_wt_7_payload[159 : 128];
  assign temp_wt_7_4_valid = io_i_wt_7_valid;
  assign temp_wt_7_5_payload = io_i_wt_7_payload[191 : 160];
  assign temp_wt_7_5_valid = io_i_wt_7_valid;
  assign temp_wt_7_6_payload = io_i_wt_7_payload[223 : 192];
  assign temp_wt_7_6_valid = io_i_wt_7_valid;
  assign temp_wt_7_7_payload = io_i_wt_7_payload[255 : 224];
  assign temp_wt_7_7_valid = io_i_wt_7_valid;
  assign io_i_wt_7_ready = (((((((temp_wt_7_0_ready && temp_wt_7_1_ready) && temp_wt_7_2_ready) && temp_wt_7_3_ready) && temp_wt_7_4_ready) && temp_wt_7_5_ready) && temp_wt_7_6_ready) && temp_wt_7_7_ready);

endmodule

module buff2conv (
  input               cfg_valid,
  output              cfg_ready,
  input      [31:0]   cfg_payload_rd_dtBaseAddr,
  input      [31:0]   cfg_payload_rd_wtBaseAddr,
  input      [31:0]   cfg_payload_wr_delta_wt_BaseAddr,
  input      [31:0]   cfg_payload_wr_sigma_BaseAddr,
  input      [15:0]   cfg_payload_dtWidth,
  input      [15:0]   cfg_payload_dtHeight,
  input      [15:0]   cfg_payload_wtWidth,
  input      [15:0]   cfg_payload_wtHeight,
  input      [15:0]   cfg_payload_oWidth,
  input      [15:0]   cfg_payload_oHeight,
  output     [31:0]   dt_ramrd_addr,
  input      [255:0]  dt_ramrd_data,
  output              dt_ramrd_en,
  output     [31:0]   wt_ramrd_0_addr,
  input      [255:0]  wt_ramrd_0_data,
  output              wt_ramrd_0_en,
  output     [31:0]   wt_ramrd_1_addr,
  input      [255:0]  wt_ramrd_1_data,
  output              wt_ramrd_1_en,
  output     [31:0]   wt_ramrd_2_addr,
  input      [255:0]  wt_ramrd_2_data,
  output              wt_ramrd_2_en,
  output     [31:0]   wt_ramrd_3_addr,
  input      [255:0]  wt_ramrd_3_data,
  output              wt_ramrd_3_en,
  output     [31:0]   wt_ramrd_4_addr,
  input      [255:0]  wt_ramrd_4_data,
  output              wt_ramrd_4_en,
  output     [31:0]   wt_ramrd_5_addr,
  input      [255:0]  wt_ramrd_5_data,
  output              wt_ramrd_5_en,
  output     [31:0]   wt_ramrd_6_addr,
  input      [255:0]  wt_ramrd_6_data,
  output              wt_ramrd_6_en,
  output     [31:0]   wt_ramrd_7_addr,
  input      [255:0]  wt_ramrd_7_data,
  output              wt_ramrd_7_en,
  output              o_ft_valid,
  input               o_ft_ready,
  output     [255:0]  o_ft_payload,
  output              o_wt_0_valid,
  input               o_wt_0_ready,
  output     [255:0]  o_wt_0_payload,
  output              o_wt_1_valid,
  input               o_wt_1_ready,
  output     [255:0]  o_wt_1_payload,
  output              o_wt_2_valid,
  input               o_wt_2_ready,
  output     [255:0]  o_wt_2_payload,
  output              o_wt_3_valid,
  input               o_wt_3_ready,
  output     [255:0]  o_wt_3_payload,
  output              o_wt_4_valid,
  input               o_wt_4_ready,
  output     [255:0]  o_wt_4_payload,
  output              o_wt_5_valid,
  input               o_wt_5_ready,
  output     [255:0]  o_wt_5_payload,
  output              o_wt_6_valid,
  input               o_wt_6_ready,
  output     [255:0]  o_wt_6_payload,
  output              o_wt_7_valid,
  input               o_wt_7_ready,
  output     [255:0]  o_wt_7_payload,
  input               read_enable,
  input               clk,
  input               reset
);
  wire       [15:0]   _zz_last_window_y;
  wire       [15:0]   _zz_last_window_x;
  wire       [47:0]   _zz_dt_rd_addr;
  wire       [47:0]   _zz_dt_rd_addr_1;
  wire       [47:0]   _zz_dt_rd_addr_2;
  wire       [47:0]   _zz_dt_rd_addr_3;
  wire       [47:0]   _zz_dt_rd_addr_4;
  wire       [47:0]   _zz_dt_rd_addr_5;
  wire       [47:0]   _zz_dt_rd_addr_6;
  wire       [47:0]   _zz_wt_rd_addr;
  wire       [47:0]   _zz_wt_rd_addr_1;
  wire       [47:0]   _zz_wt_rd_addr_2;
  wire       [31:0]   _zz_when_buff2conv_l131;
  wire       [15:0]   _zz_when_buff2conv_l131_1;
  wire       [31:0]   _zz_when_buff2conv_l131_2;
  wire       [15:0]   _zz_when_buff2conv_l131_3;
  wire       [31:0]   _zz_when_buff2conv_l136;
  wire       [15:0]   _zz_when_buff2conv_l136_1;
  reg        [31:0]   idx;
  reg        [31:0]   idy;
  reg        [31:0]   window_posx;
  reg        [31:0]   window_posy;
  reg        [31:0]   last_window_x;
  reg        [31:0]   last_window_y;
  reg        [31:0]   dt_rd_addr;
  reg        [31:0]   wt_rd_addr;
  reg        [255:0]  dt_rdata;
  reg        [255:0]  wt_rdata_0;
  reg        [255:0]  wt_rdata_1;
  reg        [255:0]  wt_rdata_2;
  reg        [255:0]  wt_rdata_3;
  reg        [255:0]  wt_rdata_4;
  reg        [255:0]  wt_rdata_5;
  reg        [255:0]  wt_rdata_6;
  reg        [255:0]  wt_rdata_7;
  wire                wire_wt_rden;
  wire                wire_wt_ovalid;
  wire                wire_wt_oready;
  reg        [31:0]   param_rd_dtBaseAddr;
  reg        [31:0]   param_rd_wtBaseAddr;
  reg        [31:0]   param_wr_delta_wt_BaseAddr;
  reg        [31:0]   param_wr_sigma_BaseAddr;
  reg        [15:0]   param_dtWidth;
  reg        [15:0]   param_dtHeight;
  reg        [15:0]   param_wtWidth;
  reg        [15:0]   param_wtHeight;
  reg        [15:0]   param_oWidth;
  reg        [15:0]   param_oHeight;
  reg                 read_en;
  reg                 outvalid;
  wire                read_req_fsm_wantExit;
  reg                 read_req_fsm_wantStart;
  wire                read_req_fsm_wantKill;
  reg        `read_req_fsm_enumDefinition_binary_sequential_type read_req_fsm_stateReg;
  reg        `read_req_fsm_enumDefinition_binary_sequential_type read_req_fsm_stateNext;
  wire                when_buff2conv_l124;
  wire                when_buff2conv_l131;
  wire                when_buff2conv_l136;
  wire                when_buff2conv_l148;
  wire                when_buff2conv_l151;
  `ifndef SYNTHESIS
  reg [247:0] read_req_fsm_stateReg_string;
  reg [247:0] read_req_fsm_stateNext_string;
  `endif


  assign _zz_last_window_y = (param_dtHeight - param_wtHeight);
  assign _zz_last_window_x = (param_dtWidth - param_wtWidth);
  assign _zz_dt_rd_addr = (_zz_dt_rd_addr_1 + _zz_dt_rd_addr_6);
  assign _zz_dt_rd_addr_1 = (_zz_dt_rd_addr_2 + _zz_dt_rd_addr_5);
  assign _zz_dt_rd_addr_2 = (_zz_dt_rd_addr_3 + _zz_dt_rd_addr_4);
  assign _zz_dt_rd_addr_3 = (window_posy * param_dtWidth);
  assign _zz_dt_rd_addr_4 = {16'd0, window_posx};
  assign _zz_dt_rd_addr_5 = (idy * param_dtWidth);
  assign _zz_dt_rd_addr_6 = {16'd0, idx};
  assign _zz_wt_rd_addr = (_zz_wt_rd_addr_1 + _zz_wt_rd_addr_2);
  assign _zz_wt_rd_addr_1 = (idy * param_dtWidth);
  assign _zz_wt_rd_addr_2 = {16'd0, idx};
  assign _zz_when_buff2conv_l131_1 = (param_wtHeight - 16'h0001);
  assign _zz_when_buff2conv_l131 = {16'd0, _zz_when_buff2conv_l131_1};
  assign _zz_when_buff2conv_l131_3 = (param_wtWidth - 16'h0001);
  assign _zz_when_buff2conv_l131_2 = {16'd0, _zz_when_buff2conv_l131_3};
  assign _zz_when_buff2conv_l136_1 = (param_wtWidth - 16'h0001);
  assign _zz_when_buff2conv_l136 = {16'd0, _zz_when_buff2conv_l136_1};
  `ifndef SYNTHESIS
  always @(*) begin
    case(read_req_fsm_stateReg)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_BOOT : read_req_fsm_stateReg_string = "read_req_fsm_BOOT              ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : read_req_fsm_stateReg_string = "read_req_fsm_IDLE              ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : read_req_fsm_stateReg_string = "read_req_fsm_INIT              ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : read_req_fsm_stateReg_string = "read_req_fsm_READ              ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : read_req_fsm_stateReg_string = "read_req_fsm_OUTPUT            ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : read_req_fsm_stateReg_string = "read_req_fsm_UPDATA_ADDR       ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : read_req_fsm_stateReg_string = "read_req_fsm_UPDATA_CONV_WINDOW";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : read_req_fsm_stateReg_string = "read_req_fsm_CACU_ADDR         ";
      default : read_req_fsm_stateReg_string = "???????????????????????????????";
    endcase
  end
  always @(*) begin
    case(read_req_fsm_stateNext)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_BOOT : read_req_fsm_stateNext_string = "read_req_fsm_BOOT              ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : read_req_fsm_stateNext_string = "read_req_fsm_IDLE              ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : read_req_fsm_stateNext_string = "read_req_fsm_INIT              ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : read_req_fsm_stateNext_string = "read_req_fsm_READ              ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : read_req_fsm_stateNext_string = "read_req_fsm_OUTPUT            ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : read_req_fsm_stateNext_string = "read_req_fsm_UPDATA_ADDR       ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : read_req_fsm_stateNext_string = "read_req_fsm_UPDATA_CONV_WINDOW";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : read_req_fsm_stateNext_string = "read_req_fsm_CACU_ADDR         ";
      default : read_req_fsm_stateNext_string = "???????????????????????????????";
    endcase
  end
  `endif

  assign cfg_ready = 1'b1;
  always @(*) begin
    read_en = 1'b0;
    case(read_req_fsm_stateReg)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : begin
        read_en = 1'b1;
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    outvalid = 1'b0;
    case(read_req_fsm_stateReg)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : begin
        if(when_buff2conv_l124) begin
          outvalid = 1'b1;
        end
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : begin
      end
      default : begin
      end
    endcase
  end

  assign dt_ramrd_en = read_en;
  assign dt_ramrd_addr = dt_rd_addr;
  assign wire_wt_rden = read_en;
  assign wt_ramrd_0_en = wire_wt_rden;
  assign wt_ramrd_0_addr = wt_rd_addr;
  assign wt_ramrd_1_en = wire_wt_rden;
  assign wt_ramrd_1_addr = wt_rd_addr;
  assign wt_ramrd_2_en = wire_wt_rden;
  assign wt_ramrd_2_addr = wt_rd_addr;
  assign wt_ramrd_3_en = wire_wt_rden;
  assign wt_ramrd_3_addr = wt_rd_addr;
  assign wt_ramrd_4_en = wire_wt_rden;
  assign wt_ramrd_4_addr = wt_rd_addr;
  assign wt_ramrd_5_en = wire_wt_rden;
  assign wt_ramrd_5_addr = wt_rd_addr;
  assign wt_ramrd_6_en = wire_wt_rden;
  assign wt_ramrd_6_addr = wt_rd_addr;
  assign wt_ramrd_7_en = wire_wt_rden;
  assign wt_ramrd_7_addr = wt_rd_addr;
  assign o_ft_valid = outvalid;
  assign o_ft_payload = dt_rdata;
  assign wire_wt_ovalid = outvalid;
  assign o_wt_0_valid = wire_wt_ovalid;
  assign o_wt_0_payload = wt_rdata_0;
  assign o_wt_1_valid = wire_wt_ovalid;
  assign o_wt_1_payload = wt_rdata_1;
  assign o_wt_2_valid = wire_wt_ovalid;
  assign o_wt_2_payload = wt_rdata_2;
  assign o_wt_3_valid = wire_wt_ovalid;
  assign o_wt_3_payload = wt_rdata_3;
  assign o_wt_4_valid = wire_wt_ovalid;
  assign o_wt_4_payload = wt_rdata_4;
  assign o_wt_5_valid = wire_wt_ovalid;
  assign o_wt_5_payload = wt_rdata_5;
  assign o_wt_6_valid = wire_wt_ovalid;
  assign o_wt_6_payload = wt_rdata_6;
  assign o_wt_7_valid = wire_wt_ovalid;
  assign o_wt_7_payload = wt_rdata_7;
  assign wire_wt_oready = (((((((o_wt_0_ready && o_wt_1_ready) && o_wt_2_ready) && o_wt_3_ready) && o_wt_4_ready) && o_wt_5_ready) && o_wt_6_ready) && o_wt_7_ready);
  assign read_req_fsm_wantExit = 1'b0;
  always @(*) begin
    read_req_fsm_wantStart = 1'b0;
    case(read_req_fsm_stateReg)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : begin
      end
      default : begin
        read_req_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign read_req_fsm_wantKill = 1'b0;
  always @(*) begin
    read_req_fsm_stateNext = read_req_fsm_stateReg;
    case(read_req_fsm_stateReg)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : begin
        if(read_enable) begin
          read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT;
        end
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : begin
        read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ;
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : begin
        read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT;
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : begin
        if(when_buff2conv_l124) begin
          read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR;
        end
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : begin
        if(when_buff2conv_l131) begin
          read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW;
        end else begin
          if(when_buff2conv_l136) begin
            read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR;
          end else begin
            read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR;
          end
        end
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : begin
        if(when_buff2conv_l148) begin
          read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE;
        end else begin
          if(when_buff2conv_l151) begin
            read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR;
          end else begin
            read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR;
          end
        end
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : begin
        read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ;
      end
      default : begin
      end
    endcase
    if(read_req_fsm_wantStart) begin
      read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE;
    end
    if(read_req_fsm_wantKill) begin
      read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_BOOT;
    end
  end

  assign when_buff2conv_l124 = (o_ft_ready && wire_wt_oready);
  assign when_buff2conv_l131 = ((idy == _zz_when_buff2conv_l131) && (idx == _zz_when_buff2conv_l131_2));
  assign when_buff2conv_l136 = (idx == _zz_when_buff2conv_l136);
  assign when_buff2conv_l148 = ((window_posy == last_window_y) && (window_posx == last_window_x));
  assign when_buff2conv_l151 = (window_posx == last_window_x);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      idx <= 32'h0;
      idy <= 32'h0;
      window_posx <= 32'h0;
      window_posy <= 32'h0;
      last_window_x <= 32'h0;
      last_window_y <= 32'h0;
      dt_rd_addr <= 32'h0;
      wt_rd_addr <= 32'h0;
      dt_rdata <= 256'h0;
      wt_rdata_0 <= 256'h0;
      wt_rdata_1 <= 256'h0;
      wt_rdata_2 <= 256'h0;
      wt_rdata_3 <= 256'h0;
      wt_rdata_4 <= 256'h0;
      wt_rdata_5 <= 256'h0;
      wt_rdata_6 <= 256'h0;
      wt_rdata_7 <= 256'h0;
      read_req_fsm_stateReg <= `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_BOOT;
    end else begin
      last_window_y <= {16'd0, _zz_last_window_y};
      last_window_x <= {16'd0, _zz_last_window_x};
      dt_rd_addr <= _zz_dt_rd_addr[31:0];
      wt_rd_addr <= _zz_wt_rd_addr[31:0];
      read_req_fsm_stateReg <= read_req_fsm_stateNext;
      case(read_req_fsm_stateReg)
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : begin
        end
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : begin
          idx <= 32'h0;
          idy <= 32'h0;
          window_posx <= 32'h0;
          window_posy <= 32'h0;
        end
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : begin
          dt_rdata <= dt_ramrd_data;
          wt_rdata_0 <= wt_ramrd_0_data;
          wt_rdata_1 <= wt_ramrd_1_data;
          wt_rdata_2 <= wt_ramrd_2_data;
          wt_rdata_3 <= wt_ramrd_3_data;
          wt_rdata_4 <= wt_ramrd_4_data;
          wt_rdata_5 <= wt_ramrd_5_data;
          wt_rdata_6 <= wt_ramrd_6_data;
          wt_rdata_7 <= wt_ramrd_7_data;
        end
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : begin
        end
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : begin
          if(when_buff2conv_l131) begin
            idx <= 32'h0;
            idy <= 32'h0;
          end else begin
            if(when_buff2conv_l136) begin
              idy <= (idy + 32'h00000001);
              idx <= 32'h0;
            end else begin
              idx <= (idx + 32'h00000001);
            end
          end
        end
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : begin
          if(!when_buff2conv_l148) begin
            if(when_buff2conv_l151) begin
              window_posx <= 32'h0;
              window_posy <= (window_posy + 32'h00000001);
            end else begin
              window_posx <= (window_posx + 32'h00000001);
            end
          end
        end
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : begin
        end
        default : begin
        end
      endcase
    end
  end

  always @(posedge clk) begin
    param_rd_dtBaseAddr <= cfg_payload_rd_dtBaseAddr;
    param_rd_wtBaseAddr <= cfg_payload_rd_wtBaseAddr;
    param_wr_delta_wt_BaseAddr <= cfg_payload_wr_delta_wt_BaseAddr;
    param_wr_sigma_BaseAddr <= cfg_payload_wr_sigma_BaseAddr;
    param_dtWidth <= cfg_payload_dtWidth;
    param_dtHeight <= cfg_payload_dtHeight;
    param_wtWidth <= cfg_payload_wtWidth;
    param_wtHeight <= cfg_payload_wtHeight;
    param_oWidth <= cfg_payload_oWidth;
    param_oHeight <= cfg_payload_oHeight;
  end


endmodule

module conv_buff (
  input      [31:0]   io_dt_wr_addr,
  input      [255:0]  io_dt_wr_data,
  input               io_dt_wr_en,
  input      [31:0]   io_wt_wr_0_addr,
  input      [255:0]  io_wt_wr_0_data,
  input               io_wt_wr_0_en,
  input      [31:0]   io_wt_wr_1_addr,
  input      [255:0]  io_wt_wr_1_data,
  input               io_wt_wr_1_en,
  input      [31:0]   io_wt_wr_2_addr,
  input      [255:0]  io_wt_wr_2_data,
  input               io_wt_wr_2_en,
  input      [31:0]   io_wt_wr_3_addr,
  input      [255:0]  io_wt_wr_3_data,
  input               io_wt_wr_3_en,
  input      [31:0]   io_wt_wr_4_addr,
  input      [255:0]  io_wt_wr_4_data,
  input               io_wt_wr_4_en,
  input      [31:0]   io_wt_wr_5_addr,
  input      [255:0]  io_wt_wr_5_data,
  input               io_wt_wr_5_en,
  input      [31:0]   io_wt_wr_6_addr,
  input      [255:0]  io_wt_wr_6_data,
  input               io_wt_wr_6_en,
  input      [31:0]   io_wt_wr_7_addr,
  input      [255:0]  io_wt_wr_7_data,
  input               io_wt_wr_7_en,
  input      [31:0]   io_dt_rd_addr,
  output     [255:0]  io_dt_rd_data,
  input               io_dt_rd_en,
  input      [31:0]   io_wt_rd_0_addr,
  output     [255:0]  io_wt_rd_0_data,
  input               io_wt_rd_0_en,
  input      [31:0]   io_wt_rd_1_addr,
  output     [255:0]  io_wt_rd_1_data,
  input               io_wt_rd_1_en,
  input      [31:0]   io_wt_rd_2_addr,
  output     [255:0]  io_wt_rd_2_data,
  input               io_wt_rd_2_en,
  input      [31:0]   io_wt_rd_3_addr,
  output     [255:0]  io_wt_rd_3_data,
  input               io_wt_rd_3_en,
  input      [31:0]   io_wt_rd_4_addr,
  output     [255:0]  io_wt_rd_4_data,
  input               io_wt_rd_4_en,
  input      [31:0]   io_wt_rd_5_addr,
  output     [255:0]  io_wt_rd_5_data,
  input               io_wt_rd_5_en,
  input      [31:0]   io_wt_rd_6_addr,
  output     [255:0]  io_wt_rd_6_data,
  input               io_wt_rd_6_en,
  input      [31:0]   io_wt_rd_7_addr,
  output     [255:0]  io_wt_rd_7_data,
  input               io_wt_rd_7_en,
  input               clk,
  input               reset
);
  wire       [255:0]  dt_ram_io_slv_rd_data;
  wire       [255:0]  wt_ram_0_io_slv_rd_data;
  wire       [255:0]  wt_ram_1_io_slv_rd_data;
  wire       [255:0]  wt_ram_2_io_slv_rd_data;
  wire       [255:0]  wt_ram_3_io_slv_rd_data;
  wire       [255:0]  wt_ram_4_io_slv_rd_data;
  wire       [255:0]  wt_ram_5_io_slv_rd_data;
  wire       [255:0]  wt_ram_6_io_slv_rd_data;
  wire       [255:0]  wt_ram_7_io_slv_rd_data;

  conv_mem dt_ram (
    .io_slv_rd_addr    (io_dt_rd_addr          ), //i
    .io_slv_rd_data    (dt_ram_io_slv_rd_data  ), //o
    .io_slv_rd_en      (io_dt_rd_en            ), //i
    .io_slv_wr_addr    (io_dt_wr_addr          ), //i
    .io_slv_wr_data    (io_dt_wr_data          ), //i
    .io_slv_wr_en      (io_dt_wr_en            ), //i
    .clk               (clk                    ), //i
    .reset             (reset                  )  //i
  );
  conv_mem wt_ram_0 (
    .io_slv_rd_addr    (io_wt_rd_0_addr          ), //i
    .io_slv_rd_data    (wt_ram_0_io_slv_rd_data  ), //o
    .io_slv_rd_en      (io_wt_rd_0_en            ), //i
    .io_slv_wr_addr    (io_wt_wr_0_addr          ), //i
    .io_slv_wr_data    (io_wt_wr_0_data          ), //i
    .io_slv_wr_en      (io_wt_wr_0_en            ), //i
    .clk               (clk                      ), //i
    .reset             (reset                    )  //i
  );
  conv_mem wt_ram_1 (
    .io_slv_rd_addr    (io_wt_rd_1_addr          ), //i
    .io_slv_rd_data    (wt_ram_1_io_slv_rd_data  ), //o
    .io_slv_rd_en      (io_wt_rd_1_en            ), //i
    .io_slv_wr_addr    (io_wt_wr_1_addr          ), //i
    .io_slv_wr_data    (io_wt_wr_1_data          ), //i
    .io_slv_wr_en      (io_wt_wr_1_en            ), //i
    .clk               (clk                      ), //i
    .reset             (reset                    )  //i
  );
  conv_mem wt_ram_2 (
    .io_slv_rd_addr    (io_wt_rd_2_addr          ), //i
    .io_slv_rd_data    (wt_ram_2_io_slv_rd_data  ), //o
    .io_slv_rd_en      (io_wt_rd_2_en            ), //i
    .io_slv_wr_addr    (io_wt_wr_2_addr          ), //i
    .io_slv_wr_data    (io_wt_wr_2_data          ), //i
    .io_slv_wr_en      (io_wt_wr_2_en            ), //i
    .clk               (clk                      ), //i
    .reset             (reset                    )  //i
  );
  conv_mem wt_ram_3 (
    .io_slv_rd_addr    (io_wt_rd_3_addr          ), //i
    .io_slv_rd_data    (wt_ram_3_io_slv_rd_data  ), //o
    .io_slv_rd_en      (io_wt_rd_3_en            ), //i
    .io_slv_wr_addr    (io_wt_wr_3_addr          ), //i
    .io_slv_wr_data    (io_wt_wr_3_data          ), //i
    .io_slv_wr_en      (io_wt_wr_3_en            ), //i
    .clk               (clk                      ), //i
    .reset             (reset                    )  //i
  );
  conv_mem wt_ram_4 (
    .io_slv_rd_addr    (io_wt_rd_4_addr          ), //i
    .io_slv_rd_data    (wt_ram_4_io_slv_rd_data  ), //o
    .io_slv_rd_en      (io_wt_rd_4_en            ), //i
    .io_slv_wr_addr    (io_wt_wr_4_addr          ), //i
    .io_slv_wr_data    (io_wt_wr_4_data          ), //i
    .io_slv_wr_en      (io_wt_wr_4_en            ), //i
    .clk               (clk                      ), //i
    .reset             (reset                    )  //i
  );
  conv_mem wt_ram_5 (
    .io_slv_rd_addr    (io_wt_rd_5_addr          ), //i
    .io_slv_rd_data    (wt_ram_5_io_slv_rd_data  ), //o
    .io_slv_rd_en      (io_wt_rd_5_en            ), //i
    .io_slv_wr_addr    (io_wt_wr_5_addr          ), //i
    .io_slv_wr_data    (io_wt_wr_5_data          ), //i
    .io_slv_wr_en      (io_wt_wr_5_en            ), //i
    .clk               (clk                      ), //i
    .reset             (reset                    )  //i
  );
  conv_mem wt_ram_6 (
    .io_slv_rd_addr    (io_wt_rd_6_addr          ), //i
    .io_slv_rd_data    (wt_ram_6_io_slv_rd_data  ), //o
    .io_slv_rd_en      (io_wt_rd_6_en            ), //i
    .io_slv_wr_addr    (io_wt_wr_6_addr          ), //i
    .io_slv_wr_data    (io_wt_wr_6_data          ), //i
    .io_slv_wr_en      (io_wt_wr_6_en            ), //i
    .clk               (clk                      ), //i
    .reset             (reset                    )  //i
  );
  conv_mem wt_ram_7 (
    .io_slv_rd_addr    (io_wt_rd_7_addr          ), //i
    .io_slv_rd_data    (wt_ram_7_io_slv_rd_data  ), //o
    .io_slv_rd_en      (io_wt_rd_7_en            ), //i
    .io_slv_wr_addr    (io_wt_wr_7_addr          ), //i
    .io_slv_wr_data    (io_wt_wr_7_data          ), //i
    .io_slv_wr_en      (io_wt_wr_7_en            ), //i
    .clk               (clk                      ), //i
    .reset             (reset                    )  //i
  );
  assign io_dt_rd_data = dt_ram_io_slv_rd_data;
  assign io_wt_rd_0_data = wt_ram_0_io_slv_rd_data;
  assign io_wt_rd_1_data = wt_ram_1_io_slv_rd_data;
  assign io_wt_rd_2_data = wt_ram_2_io_slv_rd_data;
  assign io_wt_rd_3_data = wt_ram_3_io_slv_rd_data;
  assign io_wt_rd_4_data = wt_ram_4_io_slv_rd_data;
  assign io_wt_rd_5_data = wt_ram_5_io_slv_rd_data;
  assign io_wt_rd_6_data = wt_ram_6_io_slv_rd_data;
  assign io_wt_rd_7_data = wt_ram_7_io_slv_rd_data;

endmodule

module dma2buff (
  input               io_input_valid,
  output              io_input_ready,
  input      [255:0]  io_input_payload,
  input               io_clear,
  input               io_is_dtwt_mux,
  output     [31:0]   io_dt_wr_addr,
  output     [255:0]  io_dt_wr_data,
  output reg          io_dt_wr_en,
  output     [31:0]   io_wt_wr_0_addr,
  output reg [255:0]  io_wt_wr_0_data,
  output reg          io_wt_wr_0_en,
  output     [31:0]   io_wt_wr_1_addr,
  output reg [255:0]  io_wt_wr_1_data,
  output reg          io_wt_wr_1_en,
  output     [31:0]   io_wt_wr_2_addr,
  output reg [255:0]  io_wt_wr_2_data,
  output reg          io_wt_wr_2_en,
  output     [31:0]   io_wt_wr_3_addr,
  output reg [255:0]  io_wt_wr_3_data,
  output reg          io_wt_wr_3_en,
  output     [31:0]   io_wt_wr_4_addr,
  output reg [255:0]  io_wt_wr_4_data,
  output reg          io_wt_wr_4_en,
  output     [31:0]   io_wt_wr_5_addr,
  output reg [255:0]  io_wt_wr_5_data,
  output reg          io_wt_wr_5_en,
  output     [31:0]   io_wt_wr_6_addr,
  output reg [255:0]  io_wt_wr_6_data,
  output reg          io_wt_wr_6_en,
  output     [31:0]   io_wt_wr_7_addr,
  output reg [255:0]  io_wt_wr_7_data,
  output reg          io_wt_wr_7_en,
  input               clk,
  input               reset
);
  reg        [15:0]   dtram_addr;
  reg        [15:0]   wtram_addr;
  reg        [2:0]    wt_idx;
  wire                when_dma2buff_l50;
  wire                when_dma2buff_l51;
  wire                when_dma2buff_l56;
  wire       [7:0]    _zz_1;
  wire                when_dma2buff_l62;

  assign io_input_ready = 1'b1;
  assign io_dt_wr_addr = {16'd0, dtram_addr};
  assign io_wt_wr_0_addr = {16'd0, wtram_addr};
  assign io_wt_wr_1_addr = {16'd0, wtram_addr};
  assign io_wt_wr_2_addr = {16'd0, wtram_addr};
  assign io_wt_wr_3_addr = {16'd0, wtram_addr};
  assign io_wt_wr_4_addr = {16'd0, wtram_addr};
  assign io_wt_wr_5_addr = {16'd0, wtram_addr};
  assign io_wt_wr_6_addr = {16'd0, wtram_addr};
  assign io_wt_wr_7_addr = {16'd0, wtram_addr};
  always @(*) begin
    io_dt_wr_en = 1'b0;
    if(when_dma2buff_l50) begin
      if(when_dma2buff_l51) begin
        io_dt_wr_en = 1'b1;
      end
    end
  end

  always @(*) begin
    io_wt_wr_0_en = 1'b0;
    if(!when_dma2buff_l50) begin
      if(when_dma2buff_l56) begin
        io_wt_wr_0_en = 1'b1;
      end
    end
  end

  always @(*) begin
    io_wt_wr_1_en = 1'b0;
    if(!when_dma2buff_l50) begin
      if(when_dma2buff_l56) begin
        io_wt_wr_1_en = 1'b1;
      end
    end
  end

  always @(*) begin
    io_wt_wr_2_en = 1'b0;
    if(!when_dma2buff_l50) begin
      if(when_dma2buff_l56) begin
        io_wt_wr_2_en = 1'b1;
      end
    end
  end

  always @(*) begin
    io_wt_wr_3_en = 1'b0;
    if(!when_dma2buff_l50) begin
      if(when_dma2buff_l56) begin
        io_wt_wr_3_en = 1'b1;
      end
    end
  end

  always @(*) begin
    io_wt_wr_4_en = 1'b0;
    if(!when_dma2buff_l50) begin
      if(when_dma2buff_l56) begin
        io_wt_wr_4_en = 1'b1;
      end
    end
  end

  always @(*) begin
    io_wt_wr_5_en = 1'b0;
    if(!when_dma2buff_l50) begin
      if(when_dma2buff_l56) begin
        io_wt_wr_5_en = 1'b1;
      end
    end
  end

  always @(*) begin
    io_wt_wr_6_en = 1'b0;
    if(!when_dma2buff_l50) begin
      if(when_dma2buff_l56) begin
        io_wt_wr_6_en = 1'b1;
      end
    end
  end

  always @(*) begin
    io_wt_wr_7_en = 1'b0;
    if(!when_dma2buff_l50) begin
      if(when_dma2buff_l56) begin
        io_wt_wr_7_en = 1'b1;
      end
    end
  end

  assign io_dt_wr_data = io_input_payload;
  always @(*) begin
    io_wt_wr_0_data = 256'h0;
    if(!when_dma2buff_l50) begin
      if(when_dma2buff_l56) begin
        if(_zz_1[0]) begin
          io_wt_wr_0_data = io_input_payload;
        end
      end
    end
  end

  always @(*) begin
    io_wt_wr_1_data = 256'h0;
    if(!when_dma2buff_l50) begin
      if(when_dma2buff_l56) begin
        if(_zz_1[1]) begin
          io_wt_wr_1_data = io_input_payload;
        end
      end
    end
  end

  always @(*) begin
    io_wt_wr_2_data = 256'h0;
    if(!when_dma2buff_l50) begin
      if(when_dma2buff_l56) begin
        if(_zz_1[2]) begin
          io_wt_wr_2_data = io_input_payload;
        end
      end
    end
  end

  always @(*) begin
    io_wt_wr_3_data = 256'h0;
    if(!when_dma2buff_l50) begin
      if(when_dma2buff_l56) begin
        if(_zz_1[3]) begin
          io_wt_wr_3_data = io_input_payload;
        end
      end
    end
  end

  always @(*) begin
    io_wt_wr_4_data = 256'h0;
    if(!when_dma2buff_l50) begin
      if(when_dma2buff_l56) begin
        if(_zz_1[4]) begin
          io_wt_wr_4_data = io_input_payload;
        end
      end
    end
  end

  always @(*) begin
    io_wt_wr_5_data = 256'h0;
    if(!when_dma2buff_l50) begin
      if(when_dma2buff_l56) begin
        if(_zz_1[5]) begin
          io_wt_wr_5_data = io_input_payload;
        end
      end
    end
  end

  always @(*) begin
    io_wt_wr_6_data = 256'h0;
    if(!when_dma2buff_l50) begin
      if(when_dma2buff_l56) begin
        if(_zz_1[6]) begin
          io_wt_wr_6_data = io_input_payload;
        end
      end
    end
  end

  always @(*) begin
    io_wt_wr_7_data = 256'h0;
    if(!when_dma2buff_l50) begin
      if(when_dma2buff_l56) begin
        if(_zz_1[7]) begin
          io_wt_wr_7_data = io_input_payload;
        end
      end
    end
  end

  assign when_dma2buff_l50 = (io_is_dtwt_mux == 1'b1);
  assign when_dma2buff_l51 = (io_input_valid && io_input_ready);
  assign when_dma2buff_l56 = (io_input_valid && io_input_ready);
  assign _zz_1 = ({7'd0,1'b1} <<< wt_idx);
  assign when_dma2buff_l62 = (wt_idx == 3'b110);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      dtram_addr <= 16'h0;
      wtram_addr <= 16'h0;
      wt_idx <= 3'b000;
    end else begin
      if(io_clear) begin
        dtram_addr <= 16'h0;
        wtram_addr <= 16'h0;
        wt_idx <= 3'b000;
      end
      if(when_dma2buff_l50) begin
        if(when_dma2buff_l51) begin
          dtram_addr <= (dtram_addr + 16'h0001);
        end
      end else begin
        if(when_dma2buff_l56) begin
          wt_idx <= (wt_idx + 3'b001);
          if(when_dma2buff_l62) begin
            wtram_addr <= (wtram_addr + 16'h0001);
          end
        end
      end
    end
  end


endmodule

//cvt_stream2uint replaced by cvt_stream2uint

//cvt_stream2uint replaced by cvt_stream2uint

//cvt_stream2uint replaced by cvt_stream2uint

//cvt_stream2uint replaced by cvt_stream2uint

//cvt_stream2uint replaced by cvt_stream2uint

//cvt_stream2uint replaced by cvt_stream2uint

//cvt_stream2uint replaced by cvt_stream2uint

//cvt_stream2uint replaced by cvt_stream2uint

module cvt_stream2uint (
  input               io_in_0_valid,
  output              io_in_0_ready,
  input      [31:0]   io_in_0_payload,
  input               io_in_1_valid,
  output              io_in_1_ready,
  input      [31:0]   io_in_1_payload,
  input               io_in_2_valid,
  output              io_in_2_ready,
  input      [31:0]   io_in_2_payload,
  input               io_in_3_valid,
  output              io_in_3_ready,
  input      [31:0]   io_in_3_payload,
  input               io_in_4_valid,
  output              io_in_4_ready,
  input      [31:0]   io_in_4_payload,
  input               io_in_5_valid,
  output              io_in_5_ready,
  input      [31:0]   io_in_5_payload,
  input               io_in_6_valid,
  output              io_in_6_ready,
  input      [31:0]   io_in_6_payload,
  input               io_in_7_valid,
  output              io_in_7_ready,
  input      [31:0]   io_in_7_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [255:0]  io_out_payload
);

  assign io_out_valid = (((((((io_in_0_valid && io_in_1_valid) && io_in_2_valid) && io_in_3_valid) && io_in_4_valid) && io_in_5_valid) && io_in_6_valid) && io_in_7_valid);
  assign io_in_0_ready = io_out_ready;
  assign io_in_1_ready = io_out_ready;
  assign io_in_2_ready = io_out_ready;
  assign io_in_3_ready = io_out_ready;
  assign io_in_4_ready = io_out_ready;
  assign io_in_5_ready = io_out_ready;
  assign io_in_6_ready = io_out_ready;
  assign io_in_7_ready = io_out_ready;
  assign io_out_payload = {{{{{{{io_in_0_payload,io_in_1_payload},io_in_2_payload},io_in_3_payload},io_in_4_payload},io_in_5_payload},io_in_6_payload},io_in_7_payload};

endmodule

module dma_read (
  output reg          axim_ar_valid,
  input               axim_ar_ready,
  output     [31:0]   axim_ar_payload_addr,
  output     [5:0]    axim_ar_payload_id,
  output     [7:0]    axim_ar_payload_len,
  output     [2:0]    axim_ar_payload_size,
  output     [1:0]    axim_ar_payload_burst,
  input               axim_r_valid,
  output reg          axim_r_ready,
  input      [255:0]  axim_r_payload_data,
  input      [5:0]    axim_r_payload_id,
  input      [1:0]    axim_r_payload_resp,
  input               axim_r_payload_last,
  input      [31:0]   rd_para_BaseAddr,
  input      [7:0]    rd_para_burstlen,
  output              output_valid,
  input               output_ready,
  output     [255:0]  output_payload,
  input               enable,
  output reg          isIdle,
  input               clk,
  input               reset
);
  wire                fifo_io_push_valid;
  wire       [255:0]  fifo_io_push_payload;
  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire       [255:0]  fifo_io_pop_payload;
  wire       [4:0]    fifo_io_occupancy;
  wire       [4:0]    fifo_io_availability;
  reg        [31:0]   param_BaseAddr;
  reg        [7:0]    param_burstlen;
  wire                dma_rd_fsm_wantExit;
  reg                 dma_rd_fsm_wantStart;
  wire                dma_rd_fsm_wantKill;
  reg        `dma_rd_fsm_enumDefinition_binary_sequential_type dma_rd_fsm_stateReg;
  reg        `dma_rd_fsm_enumDefinition_binary_sequential_type dma_rd_fsm_stateNext;
  wire                when_dma_read_l62;
  wire                when_dma_read_l69;
  wire                when_dma_read_l76;
  wire                when_dma_read_l77;
  `ifndef SYNTHESIS
  reg [119:0] dma_rd_fsm_stateReg_string;
  reg [119:0] dma_rd_fsm_stateNext_string;
  `endif


  StreamFifo fifo (
    .io_push_valid      (fifo_io_push_valid    ), //i
    .io_push_ready      (fifo_io_push_ready    ), //o
    .io_push_payload    (fifo_io_push_payload  ), //i
    .io_pop_valid       (fifo_io_pop_valid     ), //o
    .io_pop_ready       (output_ready          ), //i
    .io_pop_payload     (fifo_io_pop_payload   ), //o
    .io_flush           (1'b0                  ), //i
    .io_occupancy       (fifo_io_occupancy     ), //o
    .io_availability    (fifo_io_availability  ), //o
    .clk                (clk                   ), //i
    .reset              (reset                 )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(dma_rd_fsm_stateReg)
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_BOOT : dma_rd_fsm_stateReg_string = "dma_rd_fsm_BOOT";
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_IDLE : dma_rd_fsm_stateReg_string = "dma_rd_fsm_IDLE";
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_AR : dma_rd_fsm_stateReg_string = "dma_rd_fsm_AR  ";
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_R : dma_rd_fsm_stateReg_string = "dma_rd_fsm_R   ";
      default : dma_rd_fsm_stateReg_string = "???????????????";
    endcase
  end
  always @(*) begin
    case(dma_rd_fsm_stateNext)
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_BOOT : dma_rd_fsm_stateNext_string = "dma_rd_fsm_BOOT";
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_IDLE : dma_rd_fsm_stateNext_string = "dma_rd_fsm_IDLE";
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_AR : dma_rd_fsm_stateNext_string = "dma_rd_fsm_AR  ";
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_R : dma_rd_fsm_stateNext_string = "dma_rd_fsm_R   ";
      default : dma_rd_fsm_stateNext_string = "???????????????";
    endcase
  end
  `endif

  assign output_valid = fifo_io_pop_valid;
  assign output_payload = fifo_io_pop_payload;
  assign axim_ar_payload_addr = param_BaseAddr;
  assign axim_ar_payload_burst = 2'b01;
  assign axim_ar_payload_size = 3'b101;
  assign axim_ar_payload_len = param_burstlen;
  assign axim_ar_payload_id = 6'h0;
  always @(*) begin
    axim_ar_valid = 1'b0;
    case(dma_rd_fsm_stateReg)
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_IDLE : begin
      end
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_AR : begin
        axim_ar_valid = 1'b1;
      end
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_R : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    axim_r_ready = 1'b0;
    case(dma_rd_fsm_stateReg)
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_IDLE : begin
      end
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_AR : begin
      end
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_R : begin
        axim_r_ready = fifo_io_push_ready;
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    isIdle = 1'b0;
    case(dma_rd_fsm_stateReg)
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_IDLE : begin
        isIdle = 1'b1;
      end
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_AR : begin
      end
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_R : begin
      end
      default : begin
      end
    endcase
  end

  assign fifo_io_push_payload = axim_r_payload_data;
  assign fifo_io_push_valid = (axim_r_valid && axim_r_ready);
  assign dma_rd_fsm_wantExit = 1'b0;
  always @(*) begin
    dma_rd_fsm_wantStart = 1'b0;
    case(dma_rd_fsm_stateReg)
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_IDLE : begin
      end
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_AR : begin
      end
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_R : begin
      end
      default : begin
        dma_rd_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign dma_rd_fsm_wantKill = 1'b0;
  always @(*) begin
    dma_rd_fsm_stateNext = dma_rd_fsm_stateReg;
    case(dma_rd_fsm_stateReg)
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_IDLE : begin
        if(when_dma_read_l62) begin
          dma_rd_fsm_stateNext = `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_AR;
        end
      end
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_AR : begin
        if(when_dma_read_l69) begin
          dma_rd_fsm_stateNext = `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_R;
        end
      end
      `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_R : begin
        if(when_dma_read_l76) begin
          if(when_dma_read_l77) begin
            dma_rd_fsm_stateNext = `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_IDLE;
          end
        end
      end
      default : begin
      end
    endcase
    if(dma_rd_fsm_wantStart) begin
      dma_rd_fsm_stateNext = `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_IDLE;
    end
    if(dma_rd_fsm_wantKill) begin
      dma_rd_fsm_stateNext = `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_BOOT;
    end
  end

  assign when_dma_read_l62 = (enable == 1'b1);
  assign when_dma_read_l69 = ((axim_ar_valid == 1'b1) && (axim_ar_ready == 1'b1));
  assign when_dma_read_l76 = ((axim_r_ready == 1'b1) && (axim_r_valid == 1'b1));
  assign when_dma_read_l77 = (axim_r_payload_last == 1'b1);
  always @(posedge clk) begin
    param_BaseAddr <= rd_para_BaseAddr;
    param_burstlen <= rd_para_burstlen;
  end

  always @(posedge clk or posedge reset) begin
    if(reset) begin
      dma_rd_fsm_stateReg <= `dma_rd_fsm_enumDefinition_binary_sequential_dma_rd_fsm_BOOT;
    end else begin
      dma_rd_fsm_stateReg <= dma_rd_fsm_stateNext;
    end
  end


endmodule

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

module mac_acc_atom_7 (
  input               ina_0_valid,
  output              ina_0_ready,
  input      [31:0]   ina_0_payload,
  input               ina_1_valid,
  output              ina_1_ready,
  input      [31:0]   ina_1_payload,
  input               ina_2_valid,
  output              ina_2_ready,
  input      [31:0]   ina_2_payload,
  input               ina_3_valid,
  output              ina_3_ready,
  input      [31:0]   ina_3_payload,
  input               ina_4_valid,
  output              ina_4_ready,
  input      [31:0]   ina_4_payload,
  input               ina_5_valid,
  output              ina_5_ready,
  input      [31:0]   ina_5_payload,
  input               ina_6_valid,
  output              ina_6_ready,
  input      [31:0]   ina_6_payload,
  input               ina_7_valid,
  output              ina_7_ready,
  input      [31:0]   ina_7_payload,
  input               inb_0_valid,
  output              inb_0_ready,
  input      [31:0]   inb_0_payload,
  input               inb_1_valid,
  output              inb_1_ready,
  input      [31:0]   inb_1_payload,
  input               inb_2_valid,
  output              inb_2_ready,
  input      [31:0]   inb_2_payload,
  input               inb_3_valid,
  output              inb_3_ready,
  input      [31:0]   inb_3_payload,
  input               inb_4_valid,
  output              inb_4_ready,
  input      [31:0]   inb_4_payload,
  input               inb_5_valid,
  output              inb_5_ready,
  input      [31:0]   inb_5_payload,
  input               inb_6_valid,
  output              inb_6_ready,
  input      [31:0]   inb_6_payload,
  input               inb_7_valid,
  output              inb_7_ready,
  input      [31:0]   inb_7_payload,
  output              out_0_valid,
  input               out_0_ready,
  output     [31:0]   out_0_payload,
  output              out_1_valid,
  input               out_1_ready,
  output     [31:0]   out_1_payload,
  output              out_2_valid,
  input               out_2_ready,
  output     [31:0]   out_2_payload,
  output              out_3_valid,
  input               out_3_ready,
  output     [31:0]   out_3_payload,
  output              out_4_valid,
  input               out_4_ready,
  output     [31:0]   out_4_payload,
  output              out_5_valid,
  input               out_5_ready,
  output     [31:0]   out_5_payload,
  output              out_6_valid,
  input               out_6_ready,
  output     [31:0]   out_6_payload,
  output              out_7_valid,
  input               out_7_ready,
  output     [31:0]   out_7_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                mac_0_io_ina_ready;
  wire                mac_0_io_inb_ready;
  wire                mac_0_io_out_valid;
  wire       [31:0]   mac_0_io_out_payload;
  wire                mac_1_io_ina_ready;
  wire                mac_1_io_inb_ready;
  wire                mac_1_io_out_valid;
  wire       [31:0]   mac_1_io_out_payload;
  wire                mac_2_io_ina_ready;
  wire                mac_2_io_inb_ready;
  wire                mac_2_io_out_valid;
  wire       [31:0]   mac_2_io_out_payload;
  wire                mac_3_io_ina_ready;
  wire                mac_3_io_inb_ready;
  wire                mac_3_io_out_valid;
  wire       [31:0]   mac_3_io_out_payload;
  wire                mac_4_io_ina_ready;
  wire                mac_4_io_inb_ready;
  wire                mac_4_io_out_valid;
  wire       [31:0]   mac_4_io_out_payload;
  wire                mac_5_io_ina_ready;
  wire                mac_5_io_inb_ready;
  wire                mac_5_io_out_valid;
  wire       [31:0]   mac_5_io_out_payload;
  wire                mac_6_io_ina_ready;
  wire                mac_6_io_inb_ready;
  wire                mac_6_io_out_valid;
  wire       [31:0]   mac_6_io_out_payload;
  wire                mac_7_io_ina_ready;
  wire                mac_7_io_inb_ready;
  wire                mac_7_io_out_valid;
  wire       [31:0]   mac_7_io_out_payload;

  mac_acc_unit_56 mac_0 (
    .io_ina_valid      (ina_0_valid           ), //i
    .io_ina_ready      (mac_0_io_ina_ready    ), //o
    .io_ina_payload    (ina_0_payload         ), //i
    .io_inb_valid      (inb_0_valid           ), //i
    .io_inb_ready      (mac_0_io_inb_ready    ), //o
    .io_inb_payload    (inb_0_payload         ), //i
    .io_out_valid      (mac_0_io_out_valid    ), //o
    .io_out_ready      (out_0_ready           ), //i
    .io_out_payload    (mac_0_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_57 mac_1 (
    .io_ina_valid      (ina_1_valid           ), //i
    .io_ina_ready      (mac_1_io_ina_ready    ), //o
    .io_ina_payload    (ina_1_payload         ), //i
    .io_inb_valid      (inb_1_valid           ), //i
    .io_inb_ready      (mac_1_io_inb_ready    ), //o
    .io_inb_payload    (inb_1_payload         ), //i
    .io_out_valid      (mac_1_io_out_valid    ), //o
    .io_out_ready      (out_1_ready           ), //i
    .io_out_payload    (mac_1_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_58 mac_2 (
    .io_ina_valid      (ina_2_valid           ), //i
    .io_ina_ready      (mac_2_io_ina_ready    ), //o
    .io_ina_payload    (ina_2_payload         ), //i
    .io_inb_valid      (inb_2_valid           ), //i
    .io_inb_ready      (mac_2_io_inb_ready    ), //o
    .io_inb_payload    (inb_2_payload         ), //i
    .io_out_valid      (mac_2_io_out_valid    ), //o
    .io_out_ready      (out_2_ready           ), //i
    .io_out_payload    (mac_2_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_59 mac_3 (
    .io_ina_valid      (ina_3_valid           ), //i
    .io_ina_ready      (mac_3_io_ina_ready    ), //o
    .io_ina_payload    (ina_3_payload         ), //i
    .io_inb_valid      (inb_3_valid           ), //i
    .io_inb_ready      (mac_3_io_inb_ready    ), //o
    .io_inb_payload    (inb_3_payload         ), //i
    .io_out_valid      (mac_3_io_out_valid    ), //o
    .io_out_ready      (out_3_ready           ), //i
    .io_out_payload    (mac_3_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_60 mac_4 (
    .io_ina_valid      (ina_4_valid           ), //i
    .io_ina_ready      (mac_4_io_ina_ready    ), //o
    .io_ina_payload    (ina_4_payload         ), //i
    .io_inb_valid      (inb_4_valid           ), //i
    .io_inb_ready      (mac_4_io_inb_ready    ), //o
    .io_inb_payload    (inb_4_payload         ), //i
    .io_out_valid      (mac_4_io_out_valid    ), //o
    .io_out_ready      (out_4_ready           ), //i
    .io_out_payload    (mac_4_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_61 mac_5 (
    .io_ina_valid      (ina_5_valid           ), //i
    .io_ina_ready      (mac_5_io_ina_ready    ), //o
    .io_ina_payload    (ina_5_payload         ), //i
    .io_inb_valid      (inb_5_valid           ), //i
    .io_inb_ready      (mac_5_io_inb_ready    ), //o
    .io_inb_payload    (inb_5_payload         ), //i
    .io_out_valid      (mac_5_io_out_valid    ), //o
    .io_out_ready      (out_5_ready           ), //i
    .io_out_payload    (mac_5_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_62 mac_6 (
    .io_ina_valid      (ina_6_valid           ), //i
    .io_ina_ready      (mac_6_io_ina_ready    ), //o
    .io_ina_payload    (ina_6_payload         ), //i
    .io_inb_valid      (inb_6_valid           ), //i
    .io_inb_ready      (mac_6_io_inb_ready    ), //o
    .io_inb_payload    (inb_6_payload         ), //i
    .io_out_valid      (mac_6_io_out_valid    ), //o
    .io_out_ready      (out_6_ready           ), //i
    .io_out_payload    (mac_6_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_63 mac_7 (
    .io_ina_valid      (ina_7_valid           ), //i
    .io_ina_ready      (mac_7_io_ina_ready    ), //o
    .io_ina_payload    (ina_7_payload         ), //i
    .io_inb_valid      (inb_7_valid           ), //i
    .io_inb_ready      (mac_7_io_inb_ready    ), //o
    .io_inb_payload    (inb_7_payload         ), //i
    .io_out_valid      (mac_7_io_out_valid    ), //o
    .io_out_ready      (out_7_ready           ), //i
    .io_out_payload    (mac_7_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  assign ina_0_ready = mac_0_io_ina_ready;
  assign inb_0_ready = mac_0_io_inb_ready;
  assign out_0_valid = mac_0_io_out_valid;
  assign out_0_payload = mac_0_io_out_payload;
  assign ina_1_ready = mac_1_io_ina_ready;
  assign inb_1_ready = mac_1_io_inb_ready;
  assign out_1_valid = mac_1_io_out_valid;
  assign out_1_payload = mac_1_io_out_payload;
  assign ina_2_ready = mac_2_io_ina_ready;
  assign inb_2_ready = mac_2_io_inb_ready;
  assign out_2_valid = mac_2_io_out_valid;
  assign out_2_payload = mac_2_io_out_payload;
  assign ina_3_ready = mac_3_io_ina_ready;
  assign inb_3_ready = mac_3_io_inb_ready;
  assign out_3_valid = mac_3_io_out_valid;
  assign out_3_payload = mac_3_io_out_payload;
  assign ina_4_ready = mac_4_io_ina_ready;
  assign inb_4_ready = mac_4_io_inb_ready;
  assign out_4_valid = mac_4_io_out_valid;
  assign out_4_payload = mac_4_io_out_payload;
  assign ina_5_ready = mac_5_io_ina_ready;
  assign inb_5_ready = mac_5_io_inb_ready;
  assign out_5_valid = mac_5_io_out_valid;
  assign out_5_payload = mac_5_io_out_payload;
  assign ina_6_ready = mac_6_io_ina_ready;
  assign inb_6_ready = mac_6_io_inb_ready;
  assign out_6_valid = mac_6_io_out_valid;
  assign out_6_payload = mac_6_io_out_payload;
  assign ina_7_ready = mac_7_io_ina_ready;
  assign inb_7_ready = mac_7_io_inb_ready;
  assign out_7_valid = mac_7_io_out_valid;
  assign out_7_payload = mac_7_io_out_payload;

endmodule

module mac_acc_atom_6 (
  input               ina_0_valid,
  output              ina_0_ready,
  input      [31:0]   ina_0_payload,
  input               ina_1_valid,
  output              ina_1_ready,
  input      [31:0]   ina_1_payload,
  input               ina_2_valid,
  output              ina_2_ready,
  input      [31:0]   ina_2_payload,
  input               ina_3_valid,
  output              ina_3_ready,
  input      [31:0]   ina_3_payload,
  input               ina_4_valid,
  output              ina_4_ready,
  input      [31:0]   ina_4_payload,
  input               ina_5_valid,
  output              ina_5_ready,
  input      [31:0]   ina_5_payload,
  input               ina_6_valid,
  output              ina_6_ready,
  input      [31:0]   ina_6_payload,
  input               ina_7_valid,
  output              ina_7_ready,
  input      [31:0]   ina_7_payload,
  input               inb_0_valid,
  output              inb_0_ready,
  input      [31:0]   inb_0_payload,
  input               inb_1_valid,
  output              inb_1_ready,
  input      [31:0]   inb_1_payload,
  input               inb_2_valid,
  output              inb_2_ready,
  input      [31:0]   inb_2_payload,
  input               inb_3_valid,
  output              inb_3_ready,
  input      [31:0]   inb_3_payload,
  input               inb_4_valid,
  output              inb_4_ready,
  input      [31:0]   inb_4_payload,
  input               inb_5_valid,
  output              inb_5_ready,
  input      [31:0]   inb_5_payload,
  input               inb_6_valid,
  output              inb_6_ready,
  input      [31:0]   inb_6_payload,
  input               inb_7_valid,
  output              inb_7_ready,
  input      [31:0]   inb_7_payload,
  output              out_0_valid,
  input               out_0_ready,
  output     [31:0]   out_0_payload,
  output              out_1_valid,
  input               out_1_ready,
  output     [31:0]   out_1_payload,
  output              out_2_valid,
  input               out_2_ready,
  output     [31:0]   out_2_payload,
  output              out_3_valid,
  input               out_3_ready,
  output     [31:0]   out_3_payload,
  output              out_4_valid,
  input               out_4_ready,
  output     [31:0]   out_4_payload,
  output              out_5_valid,
  input               out_5_ready,
  output     [31:0]   out_5_payload,
  output              out_6_valid,
  input               out_6_ready,
  output     [31:0]   out_6_payload,
  output              out_7_valid,
  input               out_7_ready,
  output     [31:0]   out_7_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                mac_0_io_ina_ready;
  wire                mac_0_io_inb_ready;
  wire                mac_0_io_out_valid;
  wire       [31:0]   mac_0_io_out_payload;
  wire                mac_1_io_ina_ready;
  wire                mac_1_io_inb_ready;
  wire                mac_1_io_out_valid;
  wire       [31:0]   mac_1_io_out_payload;
  wire                mac_2_io_ina_ready;
  wire                mac_2_io_inb_ready;
  wire                mac_2_io_out_valid;
  wire       [31:0]   mac_2_io_out_payload;
  wire                mac_3_io_ina_ready;
  wire                mac_3_io_inb_ready;
  wire                mac_3_io_out_valid;
  wire       [31:0]   mac_3_io_out_payload;
  wire                mac_4_io_ina_ready;
  wire                mac_4_io_inb_ready;
  wire                mac_4_io_out_valid;
  wire       [31:0]   mac_4_io_out_payload;
  wire                mac_5_io_ina_ready;
  wire                mac_5_io_inb_ready;
  wire                mac_5_io_out_valid;
  wire       [31:0]   mac_5_io_out_payload;
  wire                mac_6_io_ina_ready;
  wire                mac_6_io_inb_ready;
  wire                mac_6_io_out_valid;
  wire       [31:0]   mac_6_io_out_payload;
  wire                mac_7_io_ina_ready;
  wire                mac_7_io_inb_ready;
  wire                mac_7_io_out_valid;
  wire       [31:0]   mac_7_io_out_payload;

  mac_acc_unit_48 mac_0 (
    .io_ina_valid      (ina_0_valid           ), //i
    .io_ina_ready      (mac_0_io_ina_ready    ), //o
    .io_ina_payload    (ina_0_payload         ), //i
    .io_inb_valid      (inb_0_valid           ), //i
    .io_inb_ready      (mac_0_io_inb_ready    ), //o
    .io_inb_payload    (inb_0_payload         ), //i
    .io_out_valid      (mac_0_io_out_valid    ), //o
    .io_out_ready      (out_0_ready           ), //i
    .io_out_payload    (mac_0_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_49 mac_1 (
    .io_ina_valid      (ina_1_valid           ), //i
    .io_ina_ready      (mac_1_io_ina_ready    ), //o
    .io_ina_payload    (ina_1_payload         ), //i
    .io_inb_valid      (inb_1_valid           ), //i
    .io_inb_ready      (mac_1_io_inb_ready    ), //o
    .io_inb_payload    (inb_1_payload         ), //i
    .io_out_valid      (mac_1_io_out_valid    ), //o
    .io_out_ready      (out_1_ready           ), //i
    .io_out_payload    (mac_1_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_50 mac_2 (
    .io_ina_valid      (ina_2_valid           ), //i
    .io_ina_ready      (mac_2_io_ina_ready    ), //o
    .io_ina_payload    (ina_2_payload         ), //i
    .io_inb_valid      (inb_2_valid           ), //i
    .io_inb_ready      (mac_2_io_inb_ready    ), //o
    .io_inb_payload    (inb_2_payload         ), //i
    .io_out_valid      (mac_2_io_out_valid    ), //o
    .io_out_ready      (out_2_ready           ), //i
    .io_out_payload    (mac_2_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_51 mac_3 (
    .io_ina_valid      (ina_3_valid           ), //i
    .io_ina_ready      (mac_3_io_ina_ready    ), //o
    .io_ina_payload    (ina_3_payload         ), //i
    .io_inb_valid      (inb_3_valid           ), //i
    .io_inb_ready      (mac_3_io_inb_ready    ), //o
    .io_inb_payload    (inb_3_payload         ), //i
    .io_out_valid      (mac_3_io_out_valid    ), //o
    .io_out_ready      (out_3_ready           ), //i
    .io_out_payload    (mac_3_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_52 mac_4 (
    .io_ina_valid      (ina_4_valid           ), //i
    .io_ina_ready      (mac_4_io_ina_ready    ), //o
    .io_ina_payload    (ina_4_payload         ), //i
    .io_inb_valid      (inb_4_valid           ), //i
    .io_inb_ready      (mac_4_io_inb_ready    ), //o
    .io_inb_payload    (inb_4_payload         ), //i
    .io_out_valid      (mac_4_io_out_valid    ), //o
    .io_out_ready      (out_4_ready           ), //i
    .io_out_payload    (mac_4_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_53 mac_5 (
    .io_ina_valid      (ina_5_valid           ), //i
    .io_ina_ready      (mac_5_io_ina_ready    ), //o
    .io_ina_payload    (ina_5_payload         ), //i
    .io_inb_valid      (inb_5_valid           ), //i
    .io_inb_ready      (mac_5_io_inb_ready    ), //o
    .io_inb_payload    (inb_5_payload         ), //i
    .io_out_valid      (mac_5_io_out_valid    ), //o
    .io_out_ready      (out_5_ready           ), //i
    .io_out_payload    (mac_5_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_54 mac_6 (
    .io_ina_valid      (ina_6_valid           ), //i
    .io_ina_ready      (mac_6_io_ina_ready    ), //o
    .io_ina_payload    (ina_6_payload         ), //i
    .io_inb_valid      (inb_6_valid           ), //i
    .io_inb_ready      (mac_6_io_inb_ready    ), //o
    .io_inb_payload    (inb_6_payload         ), //i
    .io_out_valid      (mac_6_io_out_valid    ), //o
    .io_out_ready      (out_6_ready           ), //i
    .io_out_payload    (mac_6_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_55 mac_7 (
    .io_ina_valid      (ina_7_valid           ), //i
    .io_ina_ready      (mac_7_io_ina_ready    ), //o
    .io_ina_payload    (ina_7_payload         ), //i
    .io_inb_valid      (inb_7_valid           ), //i
    .io_inb_ready      (mac_7_io_inb_ready    ), //o
    .io_inb_payload    (inb_7_payload         ), //i
    .io_out_valid      (mac_7_io_out_valid    ), //o
    .io_out_ready      (out_7_ready           ), //i
    .io_out_payload    (mac_7_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  assign ina_0_ready = mac_0_io_ina_ready;
  assign inb_0_ready = mac_0_io_inb_ready;
  assign out_0_valid = mac_0_io_out_valid;
  assign out_0_payload = mac_0_io_out_payload;
  assign ina_1_ready = mac_1_io_ina_ready;
  assign inb_1_ready = mac_1_io_inb_ready;
  assign out_1_valid = mac_1_io_out_valid;
  assign out_1_payload = mac_1_io_out_payload;
  assign ina_2_ready = mac_2_io_ina_ready;
  assign inb_2_ready = mac_2_io_inb_ready;
  assign out_2_valid = mac_2_io_out_valid;
  assign out_2_payload = mac_2_io_out_payload;
  assign ina_3_ready = mac_3_io_ina_ready;
  assign inb_3_ready = mac_3_io_inb_ready;
  assign out_3_valid = mac_3_io_out_valid;
  assign out_3_payload = mac_3_io_out_payload;
  assign ina_4_ready = mac_4_io_ina_ready;
  assign inb_4_ready = mac_4_io_inb_ready;
  assign out_4_valid = mac_4_io_out_valid;
  assign out_4_payload = mac_4_io_out_payload;
  assign ina_5_ready = mac_5_io_ina_ready;
  assign inb_5_ready = mac_5_io_inb_ready;
  assign out_5_valid = mac_5_io_out_valid;
  assign out_5_payload = mac_5_io_out_payload;
  assign ina_6_ready = mac_6_io_ina_ready;
  assign inb_6_ready = mac_6_io_inb_ready;
  assign out_6_valid = mac_6_io_out_valid;
  assign out_6_payload = mac_6_io_out_payload;
  assign ina_7_ready = mac_7_io_ina_ready;
  assign inb_7_ready = mac_7_io_inb_ready;
  assign out_7_valid = mac_7_io_out_valid;
  assign out_7_payload = mac_7_io_out_payload;

endmodule

module mac_acc_atom_5 (
  input               ina_0_valid,
  output              ina_0_ready,
  input      [31:0]   ina_0_payload,
  input               ina_1_valid,
  output              ina_1_ready,
  input      [31:0]   ina_1_payload,
  input               ina_2_valid,
  output              ina_2_ready,
  input      [31:0]   ina_2_payload,
  input               ina_3_valid,
  output              ina_3_ready,
  input      [31:0]   ina_3_payload,
  input               ina_4_valid,
  output              ina_4_ready,
  input      [31:0]   ina_4_payload,
  input               ina_5_valid,
  output              ina_5_ready,
  input      [31:0]   ina_5_payload,
  input               ina_6_valid,
  output              ina_6_ready,
  input      [31:0]   ina_6_payload,
  input               ina_7_valid,
  output              ina_7_ready,
  input      [31:0]   ina_7_payload,
  input               inb_0_valid,
  output              inb_0_ready,
  input      [31:0]   inb_0_payload,
  input               inb_1_valid,
  output              inb_1_ready,
  input      [31:0]   inb_1_payload,
  input               inb_2_valid,
  output              inb_2_ready,
  input      [31:0]   inb_2_payload,
  input               inb_3_valid,
  output              inb_3_ready,
  input      [31:0]   inb_3_payload,
  input               inb_4_valid,
  output              inb_4_ready,
  input      [31:0]   inb_4_payload,
  input               inb_5_valid,
  output              inb_5_ready,
  input      [31:0]   inb_5_payload,
  input               inb_6_valid,
  output              inb_6_ready,
  input      [31:0]   inb_6_payload,
  input               inb_7_valid,
  output              inb_7_ready,
  input      [31:0]   inb_7_payload,
  output              out_0_valid,
  input               out_0_ready,
  output     [31:0]   out_0_payload,
  output              out_1_valid,
  input               out_1_ready,
  output     [31:0]   out_1_payload,
  output              out_2_valid,
  input               out_2_ready,
  output     [31:0]   out_2_payload,
  output              out_3_valid,
  input               out_3_ready,
  output     [31:0]   out_3_payload,
  output              out_4_valid,
  input               out_4_ready,
  output     [31:0]   out_4_payload,
  output              out_5_valid,
  input               out_5_ready,
  output     [31:0]   out_5_payload,
  output              out_6_valid,
  input               out_6_ready,
  output     [31:0]   out_6_payload,
  output              out_7_valid,
  input               out_7_ready,
  output     [31:0]   out_7_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                mac_0_io_ina_ready;
  wire                mac_0_io_inb_ready;
  wire                mac_0_io_out_valid;
  wire       [31:0]   mac_0_io_out_payload;
  wire                mac_1_io_ina_ready;
  wire                mac_1_io_inb_ready;
  wire                mac_1_io_out_valid;
  wire       [31:0]   mac_1_io_out_payload;
  wire                mac_2_io_ina_ready;
  wire                mac_2_io_inb_ready;
  wire                mac_2_io_out_valid;
  wire       [31:0]   mac_2_io_out_payload;
  wire                mac_3_io_ina_ready;
  wire                mac_3_io_inb_ready;
  wire                mac_3_io_out_valid;
  wire       [31:0]   mac_3_io_out_payload;
  wire                mac_4_io_ina_ready;
  wire                mac_4_io_inb_ready;
  wire                mac_4_io_out_valid;
  wire       [31:0]   mac_4_io_out_payload;
  wire                mac_5_io_ina_ready;
  wire                mac_5_io_inb_ready;
  wire                mac_5_io_out_valid;
  wire       [31:0]   mac_5_io_out_payload;
  wire                mac_6_io_ina_ready;
  wire                mac_6_io_inb_ready;
  wire                mac_6_io_out_valid;
  wire       [31:0]   mac_6_io_out_payload;
  wire                mac_7_io_ina_ready;
  wire                mac_7_io_inb_ready;
  wire                mac_7_io_out_valid;
  wire       [31:0]   mac_7_io_out_payload;

  mac_acc_unit_40 mac_0 (
    .io_ina_valid      (ina_0_valid           ), //i
    .io_ina_ready      (mac_0_io_ina_ready    ), //o
    .io_ina_payload    (ina_0_payload         ), //i
    .io_inb_valid      (inb_0_valid           ), //i
    .io_inb_ready      (mac_0_io_inb_ready    ), //o
    .io_inb_payload    (inb_0_payload         ), //i
    .io_out_valid      (mac_0_io_out_valid    ), //o
    .io_out_ready      (out_0_ready           ), //i
    .io_out_payload    (mac_0_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_41 mac_1 (
    .io_ina_valid      (ina_1_valid           ), //i
    .io_ina_ready      (mac_1_io_ina_ready    ), //o
    .io_ina_payload    (ina_1_payload         ), //i
    .io_inb_valid      (inb_1_valid           ), //i
    .io_inb_ready      (mac_1_io_inb_ready    ), //o
    .io_inb_payload    (inb_1_payload         ), //i
    .io_out_valid      (mac_1_io_out_valid    ), //o
    .io_out_ready      (out_1_ready           ), //i
    .io_out_payload    (mac_1_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_42 mac_2 (
    .io_ina_valid      (ina_2_valid           ), //i
    .io_ina_ready      (mac_2_io_ina_ready    ), //o
    .io_ina_payload    (ina_2_payload         ), //i
    .io_inb_valid      (inb_2_valid           ), //i
    .io_inb_ready      (mac_2_io_inb_ready    ), //o
    .io_inb_payload    (inb_2_payload         ), //i
    .io_out_valid      (mac_2_io_out_valid    ), //o
    .io_out_ready      (out_2_ready           ), //i
    .io_out_payload    (mac_2_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_43 mac_3 (
    .io_ina_valid      (ina_3_valid           ), //i
    .io_ina_ready      (mac_3_io_ina_ready    ), //o
    .io_ina_payload    (ina_3_payload         ), //i
    .io_inb_valid      (inb_3_valid           ), //i
    .io_inb_ready      (mac_3_io_inb_ready    ), //o
    .io_inb_payload    (inb_3_payload         ), //i
    .io_out_valid      (mac_3_io_out_valid    ), //o
    .io_out_ready      (out_3_ready           ), //i
    .io_out_payload    (mac_3_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_44 mac_4 (
    .io_ina_valid      (ina_4_valid           ), //i
    .io_ina_ready      (mac_4_io_ina_ready    ), //o
    .io_ina_payload    (ina_4_payload         ), //i
    .io_inb_valid      (inb_4_valid           ), //i
    .io_inb_ready      (mac_4_io_inb_ready    ), //o
    .io_inb_payload    (inb_4_payload         ), //i
    .io_out_valid      (mac_4_io_out_valid    ), //o
    .io_out_ready      (out_4_ready           ), //i
    .io_out_payload    (mac_4_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_45 mac_5 (
    .io_ina_valid      (ina_5_valid           ), //i
    .io_ina_ready      (mac_5_io_ina_ready    ), //o
    .io_ina_payload    (ina_5_payload         ), //i
    .io_inb_valid      (inb_5_valid           ), //i
    .io_inb_ready      (mac_5_io_inb_ready    ), //o
    .io_inb_payload    (inb_5_payload         ), //i
    .io_out_valid      (mac_5_io_out_valid    ), //o
    .io_out_ready      (out_5_ready           ), //i
    .io_out_payload    (mac_5_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_46 mac_6 (
    .io_ina_valid      (ina_6_valid           ), //i
    .io_ina_ready      (mac_6_io_ina_ready    ), //o
    .io_ina_payload    (ina_6_payload         ), //i
    .io_inb_valid      (inb_6_valid           ), //i
    .io_inb_ready      (mac_6_io_inb_ready    ), //o
    .io_inb_payload    (inb_6_payload         ), //i
    .io_out_valid      (mac_6_io_out_valid    ), //o
    .io_out_ready      (out_6_ready           ), //i
    .io_out_payload    (mac_6_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_47 mac_7 (
    .io_ina_valid      (ina_7_valid           ), //i
    .io_ina_ready      (mac_7_io_ina_ready    ), //o
    .io_ina_payload    (ina_7_payload         ), //i
    .io_inb_valid      (inb_7_valid           ), //i
    .io_inb_ready      (mac_7_io_inb_ready    ), //o
    .io_inb_payload    (inb_7_payload         ), //i
    .io_out_valid      (mac_7_io_out_valid    ), //o
    .io_out_ready      (out_7_ready           ), //i
    .io_out_payload    (mac_7_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  assign ina_0_ready = mac_0_io_ina_ready;
  assign inb_0_ready = mac_0_io_inb_ready;
  assign out_0_valid = mac_0_io_out_valid;
  assign out_0_payload = mac_0_io_out_payload;
  assign ina_1_ready = mac_1_io_ina_ready;
  assign inb_1_ready = mac_1_io_inb_ready;
  assign out_1_valid = mac_1_io_out_valid;
  assign out_1_payload = mac_1_io_out_payload;
  assign ina_2_ready = mac_2_io_ina_ready;
  assign inb_2_ready = mac_2_io_inb_ready;
  assign out_2_valid = mac_2_io_out_valid;
  assign out_2_payload = mac_2_io_out_payload;
  assign ina_3_ready = mac_3_io_ina_ready;
  assign inb_3_ready = mac_3_io_inb_ready;
  assign out_3_valid = mac_3_io_out_valid;
  assign out_3_payload = mac_3_io_out_payload;
  assign ina_4_ready = mac_4_io_ina_ready;
  assign inb_4_ready = mac_4_io_inb_ready;
  assign out_4_valid = mac_4_io_out_valid;
  assign out_4_payload = mac_4_io_out_payload;
  assign ina_5_ready = mac_5_io_ina_ready;
  assign inb_5_ready = mac_5_io_inb_ready;
  assign out_5_valid = mac_5_io_out_valid;
  assign out_5_payload = mac_5_io_out_payload;
  assign ina_6_ready = mac_6_io_ina_ready;
  assign inb_6_ready = mac_6_io_inb_ready;
  assign out_6_valid = mac_6_io_out_valid;
  assign out_6_payload = mac_6_io_out_payload;
  assign ina_7_ready = mac_7_io_ina_ready;
  assign inb_7_ready = mac_7_io_inb_ready;
  assign out_7_valid = mac_7_io_out_valid;
  assign out_7_payload = mac_7_io_out_payload;

endmodule

module mac_acc_atom_4 (
  input               ina_0_valid,
  output              ina_0_ready,
  input      [31:0]   ina_0_payload,
  input               ina_1_valid,
  output              ina_1_ready,
  input      [31:0]   ina_1_payload,
  input               ina_2_valid,
  output              ina_2_ready,
  input      [31:0]   ina_2_payload,
  input               ina_3_valid,
  output              ina_3_ready,
  input      [31:0]   ina_3_payload,
  input               ina_4_valid,
  output              ina_4_ready,
  input      [31:0]   ina_4_payload,
  input               ina_5_valid,
  output              ina_5_ready,
  input      [31:0]   ina_5_payload,
  input               ina_6_valid,
  output              ina_6_ready,
  input      [31:0]   ina_6_payload,
  input               ina_7_valid,
  output              ina_7_ready,
  input      [31:0]   ina_7_payload,
  input               inb_0_valid,
  output              inb_0_ready,
  input      [31:0]   inb_0_payload,
  input               inb_1_valid,
  output              inb_1_ready,
  input      [31:0]   inb_1_payload,
  input               inb_2_valid,
  output              inb_2_ready,
  input      [31:0]   inb_2_payload,
  input               inb_3_valid,
  output              inb_3_ready,
  input      [31:0]   inb_3_payload,
  input               inb_4_valid,
  output              inb_4_ready,
  input      [31:0]   inb_4_payload,
  input               inb_5_valid,
  output              inb_5_ready,
  input      [31:0]   inb_5_payload,
  input               inb_6_valid,
  output              inb_6_ready,
  input      [31:0]   inb_6_payload,
  input               inb_7_valid,
  output              inb_7_ready,
  input      [31:0]   inb_7_payload,
  output              out_0_valid,
  input               out_0_ready,
  output     [31:0]   out_0_payload,
  output              out_1_valid,
  input               out_1_ready,
  output     [31:0]   out_1_payload,
  output              out_2_valid,
  input               out_2_ready,
  output     [31:0]   out_2_payload,
  output              out_3_valid,
  input               out_3_ready,
  output     [31:0]   out_3_payload,
  output              out_4_valid,
  input               out_4_ready,
  output     [31:0]   out_4_payload,
  output              out_5_valid,
  input               out_5_ready,
  output     [31:0]   out_5_payload,
  output              out_6_valid,
  input               out_6_ready,
  output     [31:0]   out_6_payload,
  output              out_7_valid,
  input               out_7_ready,
  output     [31:0]   out_7_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                mac_0_io_ina_ready;
  wire                mac_0_io_inb_ready;
  wire                mac_0_io_out_valid;
  wire       [31:0]   mac_0_io_out_payload;
  wire                mac_1_io_ina_ready;
  wire                mac_1_io_inb_ready;
  wire                mac_1_io_out_valid;
  wire       [31:0]   mac_1_io_out_payload;
  wire                mac_2_io_ina_ready;
  wire                mac_2_io_inb_ready;
  wire                mac_2_io_out_valid;
  wire       [31:0]   mac_2_io_out_payload;
  wire                mac_3_io_ina_ready;
  wire                mac_3_io_inb_ready;
  wire                mac_3_io_out_valid;
  wire       [31:0]   mac_3_io_out_payload;
  wire                mac_4_io_ina_ready;
  wire                mac_4_io_inb_ready;
  wire                mac_4_io_out_valid;
  wire       [31:0]   mac_4_io_out_payload;
  wire                mac_5_io_ina_ready;
  wire                mac_5_io_inb_ready;
  wire                mac_5_io_out_valid;
  wire       [31:0]   mac_5_io_out_payload;
  wire                mac_6_io_ina_ready;
  wire                mac_6_io_inb_ready;
  wire                mac_6_io_out_valid;
  wire       [31:0]   mac_6_io_out_payload;
  wire                mac_7_io_ina_ready;
  wire                mac_7_io_inb_ready;
  wire                mac_7_io_out_valid;
  wire       [31:0]   mac_7_io_out_payload;

  mac_acc_unit_32 mac_0 (
    .io_ina_valid      (ina_0_valid           ), //i
    .io_ina_ready      (mac_0_io_ina_ready    ), //o
    .io_ina_payload    (ina_0_payload         ), //i
    .io_inb_valid      (inb_0_valid           ), //i
    .io_inb_ready      (mac_0_io_inb_ready    ), //o
    .io_inb_payload    (inb_0_payload         ), //i
    .io_out_valid      (mac_0_io_out_valid    ), //o
    .io_out_ready      (out_0_ready           ), //i
    .io_out_payload    (mac_0_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_33 mac_1 (
    .io_ina_valid      (ina_1_valid           ), //i
    .io_ina_ready      (mac_1_io_ina_ready    ), //o
    .io_ina_payload    (ina_1_payload         ), //i
    .io_inb_valid      (inb_1_valid           ), //i
    .io_inb_ready      (mac_1_io_inb_ready    ), //o
    .io_inb_payload    (inb_1_payload         ), //i
    .io_out_valid      (mac_1_io_out_valid    ), //o
    .io_out_ready      (out_1_ready           ), //i
    .io_out_payload    (mac_1_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_34 mac_2 (
    .io_ina_valid      (ina_2_valid           ), //i
    .io_ina_ready      (mac_2_io_ina_ready    ), //o
    .io_ina_payload    (ina_2_payload         ), //i
    .io_inb_valid      (inb_2_valid           ), //i
    .io_inb_ready      (mac_2_io_inb_ready    ), //o
    .io_inb_payload    (inb_2_payload         ), //i
    .io_out_valid      (mac_2_io_out_valid    ), //o
    .io_out_ready      (out_2_ready           ), //i
    .io_out_payload    (mac_2_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_35 mac_3 (
    .io_ina_valid      (ina_3_valid           ), //i
    .io_ina_ready      (mac_3_io_ina_ready    ), //o
    .io_ina_payload    (ina_3_payload         ), //i
    .io_inb_valid      (inb_3_valid           ), //i
    .io_inb_ready      (mac_3_io_inb_ready    ), //o
    .io_inb_payload    (inb_3_payload         ), //i
    .io_out_valid      (mac_3_io_out_valid    ), //o
    .io_out_ready      (out_3_ready           ), //i
    .io_out_payload    (mac_3_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_36 mac_4 (
    .io_ina_valid      (ina_4_valid           ), //i
    .io_ina_ready      (mac_4_io_ina_ready    ), //o
    .io_ina_payload    (ina_4_payload         ), //i
    .io_inb_valid      (inb_4_valid           ), //i
    .io_inb_ready      (mac_4_io_inb_ready    ), //o
    .io_inb_payload    (inb_4_payload         ), //i
    .io_out_valid      (mac_4_io_out_valid    ), //o
    .io_out_ready      (out_4_ready           ), //i
    .io_out_payload    (mac_4_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_37 mac_5 (
    .io_ina_valid      (ina_5_valid           ), //i
    .io_ina_ready      (mac_5_io_ina_ready    ), //o
    .io_ina_payload    (ina_5_payload         ), //i
    .io_inb_valid      (inb_5_valid           ), //i
    .io_inb_ready      (mac_5_io_inb_ready    ), //o
    .io_inb_payload    (inb_5_payload         ), //i
    .io_out_valid      (mac_5_io_out_valid    ), //o
    .io_out_ready      (out_5_ready           ), //i
    .io_out_payload    (mac_5_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_38 mac_6 (
    .io_ina_valid      (ina_6_valid           ), //i
    .io_ina_ready      (mac_6_io_ina_ready    ), //o
    .io_ina_payload    (ina_6_payload         ), //i
    .io_inb_valid      (inb_6_valid           ), //i
    .io_inb_ready      (mac_6_io_inb_ready    ), //o
    .io_inb_payload    (inb_6_payload         ), //i
    .io_out_valid      (mac_6_io_out_valid    ), //o
    .io_out_ready      (out_6_ready           ), //i
    .io_out_payload    (mac_6_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_39 mac_7 (
    .io_ina_valid      (ina_7_valid           ), //i
    .io_ina_ready      (mac_7_io_ina_ready    ), //o
    .io_ina_payload    (ina_7_payload         ), //i
    .io_inb_valid      (inb_7_valid           ), //i
    .io_inb_ready      (mac_7_io_inb_ready    ), //o
    .io_inb_payload    (inb_7_payload         ), //i
    .io_out_valid      (mac_7_io_out_valid    ), //o
    .io_out_ready      (out_7_ready           ), //i
    .io_out_payload    (mac_7_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  assign ina_0_ready = mac_0_io_ina_ready;
  assign inb_0_ready = mac_0_io_inb_ready;
  assign out_0_valid = mac_0_io_out_valid;
  assign out_0_payload = mac_0_io_out_payload;
  assign ina_1_ready = mac_1_io_ina_ready;
  assign inb_1_ready = mac_1_io_inb_ready;
  assign out_1_valid = mac_1_io_out_valid;
  assign out_1_payload = mac_1_io_out_payload;
  assign ina_2_ready = mac_2_io_ina_ready;
  assign inb_2_ready = mac_2_io_inb_ready;
  assign out_2_valid = mac_2_io_out_valid;
  assign out_2_payload = mac_2_io_out_payload;
  assign ina_3_ready = mac_3_io_ina_ready;
  assign inb_3_ready = mac_3_io_inb_ready;
  assign out_3_valid = mac_3_io_out_valid;
  assign out_3_payload = mac_3_io_out_payload;
  assign ina_4_ready = mac_4_io_ina_ready;
  assign inb_4_ready = mac_4_io_inb_ready;
  assign out_4_valid = mac_4_io_out_valid;
  assign out_4_payload = mac_4_io_out_payload;
  assign ina_5_ready = mac_5_io_ina_ready;
  assign inb_5_ready = mac_5_io_inb_ready;
  assign out_5_valid = mac_5_io_out_valid;
  assign out_5_payload = mac_5_io_out_payload;
  assign ina_6_ready = mac_6_io_ina_ready;
  assign inb_6_ready = mac_6_io_inb_ready;
  assign out_6_valid = mac_6_io_out_valid;
  assign out_6_payload = mac_6_io_out_payload;
  assign ina_7_ready = mac_7_io_ina_ready;
  assign inb_7_ready = mac_7_io_inb_ready;
  assign out_7_valid = mac_7_io_out_valid;
  assign out_7_payload = mac_7_io_out_payload;

endmodule

module mac_acc_atom_3 (
  input               ina_0_valid,
  output              ina_0_ready,
  input      [31:0]   ina_0_payload,
  input               ina_1_valid,
  output              ina_1_ready,
  input      [31:0]   ina_1_payload,
  input               ina_2_valid,
  output              ina_2_ready,
  input      [31:0]   ina_2_payload,
  input               ina_3_valid,
  output              ina_3_ready,
  input      [31:0]   ina_3_payload,
  input               ina_4_valid,
  output              ina_4_ready,
  input      [31:0]   ina_4_payload,
  input               ina_5_valid,
  output              ina_5_ready,
  input      [31:0]   ina_5_payload,
  input               ina_6_valid,
  output              ina_6_ready,
  input      [31:0]   ina_6_payload,
  input               ina_7_valid,
  output              ina_7_ready,
  input      [31:0]   ina_7_payload,
  input               inb_0_valid,
  output              inb_0_ready,
  input      [31:0]   inb_0_payload,
  input               inb_1_valid,
  output              inb_1_ready,
  input      [31:0]   inb_1_payload,
  input               inb_2_valid,
  output              inb_2_ready,
  input      [31:0]   inb_2_payload,
  input               inb_3_valid,
  output              inb_3_ready,
  input      [31:0]   inb_3_payload,
  input               inb_4_valid,
  output              inb_4_ready,
  input      [31:0]   inb_4_payload,
  input               inb_5_valid,
  output              inb_5_ready,
  input      [31:0]   inb_5_payload,
  input               inb_6_valid,
  output              inb_6_ready,
  input      [31:0]   inb_6_payload,
  input               inb_7_valid,
  output              inb_7_ready,
  input      [31:0]   inb_7_payload,
  output              out_0_valid,
  input               out_0_ready,
  output     [31:0]   out_0_payload,
  output              out_1_valid,
  input               out_1_ready,
  output     [31:0]   out_1_payload,
  output              out_2_valid,
  input               out_2_ready,
  output     [31:0]   out_2_payload,
  output              out_3_valid,
  input               out_3_ready,
  output     [31:0]   out_3_payload,
  output              out_4_valid,
  input               out_4_ready,
  output     [31:0]   out_4_payload,
  output              out_5_valid,
  input               out_5_ready,
  output     [31:0]   out_5_payload,
  output              out_6_valid,
  input               out_6_ready,
  output     [31:0]   out_6_payload,
  output              out_7_valid,
  input               out_7_ready,
  output     [31:0]   out_7_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                mac_0_io_ina_ready;
  wire                mac_0_io_inb_ready;
  wire                mac_0_io_out_valid;
  wire       [31:0]   mac_0_io_out_payload;
  wire                mac_1_io_ina_ready;
  wire                mac_1_io_inb_ready;
  wire                mac_1_io_out_valid;
  wire       [31:0]   mac_1_io_out_payload;
  wire                mac_2_io_ina_ready;
  wire                mac_2_io_inb_ready;
  wire                mac_2_io_out_valid;
  wire       [31:0]   mac_2_io_out_payload;
  wire                mac_3_io_ina_ready;
  wire                mac_3_io_inb_ready;
  wire                mac_3_io_out_valid;
  wire       [31:0]   mac_3_io_out_payload;
  wire                mac_4_io_ina_ready;
  wire                mac_4_io_inb_ready;
  wire                mac_4_io_out_valid;
  wire       [31:0]   mac_4_io_out_payload;
  wire                mac_5_io_ina_ready;
  wire                mac_5_io_inb_ready;
  wire                mac_5_io_out_valid;
  wire       [31:0]   mac_5_io_out_payload;
  wire                mac_6_io_ina_ready;
  wire                mac_6_io_inb_ready;
  wire                mac_6_io_out_valid;
  wire       [31:0]   mac_6_io_out_payload;
  wire                mac_7_io_ina_ready;
  wire                mac_7_io_inb_ready;
  wire                mac_7_io_out_valid;
  wire       [31:0]   mac_7_io_out_payload;

  mac_acc_unit_24 mac_0 (
    .io_ina_valid      (ina_0_valid           ), //i
    .io_ina_ready      (mac_0_io_ina_ready    ), //o
    .io_ina_payload    (ina_0_payload         ), //i
    .io_inb_valid      (inb_0_valid           ), //i
    .io_inb_ready      (mac_0_io_inb_ready    ), //o
    .io_inb_payload    (inb_0_payload         ), //i
    .io_out_valid      (mac_0_io_out_valid    ), //o
    .io_out_ready      (out_0_ready           ), //i
    .io_out_payload    (mac_0_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_25 mac_1 (
    .io_ina_valid      (ina_1_valid           ), //i
    .io_ina_ready      (mac_1_io_ina_ready    ), //o
    .io_ina_payload    (ina_1_payload         ), //i
    .io_inb_valid      (inb_1_valid           ), //i
    .io_inb_ready      (mac_1_io_inb_ready    ), //o
    .io_inb_payload    (inb_1_payload         ), //i
    .io_out_valid      (mac_1_io_out_valid    ), //o
    .io_out_ready      (out_1_ready           ), //i
    .io_out_payload    (mac_1_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_26 mac_2 (
    .io_ina_valid      (ina_2_valid           ), //i
    .io_ina_ready      (mac_2_io_ina_ready    ), //o
    .io_ina_payload    (ina_2_payload         ), //i
    .io_inb_valid      (inb_2_valid           ), //i
    .io_inb_ready      (mac_2_io_inb_ready    ), //o
    .io_inb_payload    (inb_2_payload         ), //i
    .io_out_valid      (mac_2_io_out_valid    ), //o
    .io_out_ready      (out_2_ready           ), //i
    .io_out_payload    (mac_2_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_27 mac_3 (
    .io_ina_valid      (ina_3_valid           ), //i
    .io_ina_ready      (mac_3_io_ina_ready    ), //o
    .io_ina_payload    (ina_3_payload         ), //i
    .io_inb_valid      (inb_3_valid           ), //i
    .io_inb_ready      (mac_3_io_inb_ready    ), //o
    .io_inb_payload    (inb_3_payload         ), //i
    .io_out_valid      (mac_3_io_out_valid    ), //o
    .io_out_ready      (out_3_ready           ), //i
    .io_out_payload    (mac_3_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_28 mac_4 (
    .io_ina_valid      (ina_4_valid           ), //i
    .io_ina_ready      (mac_4_io_ina_ready    ), //o
    .io_ina_payload    (ina_4_payload         ), //i
    .io_inb_valid      (inb_4_valid           ), //i
    .io_inb_ready      (mac_4_io_inb_ready    ), //o
    .io_inb_payload    (inb_4_payload         ), //i
    .io_out_valid      (mac_4_io_out_valid    ), //o
    .io_out_ready      (out_4_ready           ), //i
    .io_out_payload    (mac_4_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_29 mac_5 (
    .io_ina_valid      (ina_5_valid           ), //i
    .io_ina_ready      (mac_5_io_ina_ready    ), //o
    .io_ina_payload    (ina_5_payload         ), //i
    .io_inb_valid      (inb_5_valid           ), //i
    .io_inb_ready      (mac_5_io_inb_ready    ), //o
    .io_inb_payload    (inb_5_payload         ), //i
    .io_out_valid      (mac_5_io_out_valid    ), //o
    .io_out_ready      (out_5_ready           ), //i
    .io_out_payload    (mac_5_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_30 mac_6 (
    .io_ina_valid      (ina_6_valid           ), //i
    .io_ina_ready      (mac_6_io_ina_ready    ), //o
    .io_ina_payload    (ina_6_payload         ), //i
    .io_inb_valid      (inb_6_valid           ), //i
    .io_inb_ready      (mac_6_io_inb_ready    ), //o
    .io_inb_payload    (inb_6_payload         ), //i
    .io_out_valid      (mac_6_io_out_valid    ), //o
    .io_out_ready      (out_6_ready           ), //i
    .io_out_payload    (mac_6_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_31 mac_7 (
    .io_ina_valid      (ina_7_valid           ), //i
    .io_ina_ready      (mac_7_io_ina_ready    ), //o
    .io_ina_payload    (ina_7_payload         ), //i
    .io_inb_valid      (inb_7_valid           ), //i
    .io_inb_ready      (mac_7_io_inb_ready    ), //o
    .io_inb_payload    (inb_7_payload         ), //i
    .io_out_valid      (mac_7_io_out_valid    ), //o
    .io_out_ready      (out_7_ready           ), //i
    .io_out_payload    (mac_7_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  assign ina_0_ready = mac_0_io_ina_ready;
  assign inb_0_ready = mac_0_io_inb_ready;
  assign out_0_valid = mac_0_io_out_valid;
  assign out_0_payload = mac_0_io_out_payload;
  assign ina_1_ready = mac_1_io_ina_ready;
  assign inb_1_ready = mac_1_io_inb_ready;
  assign out_1_valid = mac_1_io_out_valid;
  assign out_1_payload = mac_1_io_out_payload;
  assign ina_2_ready = mac_2_io_ina_ready;
  assign inb_2_ready = mac_2_io_inb_ready;
  assign out_2_valid = mac_2_io_out_valid;
  assign out_2_payload = mac_2_io_out_payload;
  assign ina_3_ready = mac_3_io_ina_ready;
  assign inb_3_ready = mac_3_io_inb_ready;
  assign out_3_valid = mac_3_io_out_valid;
  assign out_3_payload = mac_3_io_out_payload;
  assign ina_4_ready = mac_4_io_ina_ready;
  assign inb_4_ready = mac_4_io_inb_ready;
  assign out_4_valid = mac_4_io_out_valid;
  assign out_4_payload = mac_4_io_out_payload;
  assign ina_5_ready = mac_5_io_ina_ready;
  assign inb_5_ready = mac_5_io_inb_ready;
  assign out_5_valid = mac_5_io_out_valid;
  assign out_5_payload = mac_5_io_out_payload;
  assign ina_6_ready = mac_6_io_ina_ready;
  assign inb_6_ready = mac_6_io_inb_ready;
  assign out_6_valid = mac_6_io_out_valid;
  assign out_6_payload = mac_6_io_out_payload;
  assign ina_7_ready = mac_7_io_ina_ready;
  assign inb_7_ready = mac_7_io_inb_ready;
  assign out_7_valid = mac_7_io_out_valid;
  assign out_7_payload = mac_7_io_out_payload;

endmodule

module mac_acc_atom_2 (
  input               ina_0_valid,
  output              ina_0_ready,
  input      [31:0]   ina_0_payload,
  input               ina_1_valid,
  output              ina_1_ready,
  input      [31:0]   ina_1_payload,
  input               ina_2_valid,
  output              ina_2_ready,
  input      [31:0]   ina_2_payload,
  input               ina_3_valid,
  output              ina_3_ready,
  input      [31:0]   ina_3_payload,
  input               ina_4_valid,
  output              ina_4_ready,
  input      [31:0]   ina_4_payload,
  input               ina_5_valid,
  output              ina_5_ready,
  input      [31:0]   ina_5_payload,
  input               ina_6_valid,
  output              ina_6_ready,
  input      [31:0]   ina_6_payload,
  input               ina_7_valid,
  output              ina_7_ready,
  input      [31:0]   ina_7_payload,
  input               inb_0_valid,
  output              inb_0_ready,
  input      [31:0]   inb_0_payload,
  input               inb_1_valid,
  output              inb_1_ready,
  input      [31:0]   inb_1_payload,
  input               inb_2_valid,
  output              inb_2_ready,
  input      [31:0]   inb_2_payload,
  input               inb_3_valid,
  output              inb_3_ready,
  input      [31:0]   inb_3_payload,
  input               inb_4_valid,
  output              inb_4_ready,
  input      [31:0]   inb_4_payload,
  input               inb_5_valid,
  output              inb_5_ready,
  input      [31:0]   inb_5_payload,
  input               inb_6_valid,
  output              inb_6_ready,
  input      [31:0]   inb_6_payload,
  input               inb_7_valid,
  output              inb_7_ready,
  input      [31:0]   inb_7_payload,
  output              out_0_valid,
  input               out_0_ready,
  output     [31:0]   out_0_payload,
  output              out_1_valid,
  input               out_1_ready,
  output     [31:0]   out_1_payload,
  output              out_2_valid,
  input               out_2_ready,
  output     [31:0]   out_2_payload,
  output              out_3_valid,
  input               out_3_ready,
  output     [31:0]   out_3_payload,
  output              out_4_valid,
  input               out_4_ready,
  output     [31:0]   out_4_payload,
  output              out_5_valid,
  input               out_5_ready,
  output     [31:0]   out_5_payload,
  output              out_6_valid,
  input               out_6_ready,
  output     [31:0]   out_6_payload,
  output              out_7_valid,
  input               out_7_ready,
  output     [31:0]   out_7_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                mac_0_io_ina_ready;
  wire                mac_0_io_inb_ready;
  wire                mac_0_io_out_valid;
  wire       [31:0]   mac_0_io_out_payload;
  wire                mac_1_io_ina_ready;
  wire                mac_1_io_inb_ready;
  wire                mac_1_io_out_valid;
  wire       [31:0]   mac_1_io_out_payload;
  wire                mac_2_io_ina_ready;
  wire                mac_2_io_inb_ready;
  wire                mac_2_io_out_valid;
  wire       [31:0]   mac_2_io_out_payload;
  wire                mac_3_io_ina_ready;
  wire                mac_3_io_inb_ready;
  wire                mac_3_io_out_valid;
  wire       [31:0]   mac_3_io_out_payload;
  wire                mac_4_io_ina_ready;
  wire                mac_4_io_inb_ready;
  wire                mac_4_io_out_valid;
  wire       [31:0]   mac_4_io_out_payload;
  wire                mac_5_io_ina_ready;
  wire                mac_5_io_inb_ready;
  wire                mac_5_io_out_valid;
  wire       [31:0]   mac_5_io_out_payload;
  wire                mac_6_io_ina_ready;
  wire                mac_6_io_inb_ready;
  wire                mac_6_io_out_valid;
  wire       [31:0]   mac_6_io_out_payload;
  wire                mac_7_io_ina_ready;
  wire                mac_7_io_inb_ready;
  wire                mac_7_io_out_valid;
  wire       [31:0]   mac_7_io_out_payload;

  mac_acc_unit_16 mac_0 (
    .io_ina_valid      (ina_0_valid           ), //i
    .io_ina_ready      (mac_0_io_ina_ready    ), //o
    .io_ina_payload    (ina_0_payload         ), //i
    .io_inb_valid      (inb_0_valid           ), //i
    .io_inb_ready      (mac_0_io_inb_ready    ), //o
    .io_inb_payload    (inb_0_payload         ), //i
    .io_out_valid      (mac_0_io_out_valid    ), //o
    .io_out_ready      (out_0_ready           ), //i
    .io_out_payload    (mac_0_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_17 mac_1 (
    .io_ina_valid      (ina_1_valid           ), //i
    .io_ina_ready      (mac_1_io_ina_ready    ), //o
    .io_ina_payload    (ina_1_payload         ), //i
    .io_inb_valid      (inb_1_valid           ), //i
    .io_inb_ready      (mac_1_io_inb_ready    ), //o
    .io_inb_payload    (inb_1_payload         ), //i
    .io_out_valid      (mac_1_io_out_valid    ), //o
    .io_out_ready      (out_1_ready           ), //i
    .io_out_payload    (mac_1_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_18 mac_2 (
    .io_ina_valid      (ina_2_valid           ), //i
    .io_ina_ready      (mac_2_io_ina_ready    ), //o
    .io_ina_payload    (ina_2_payload         ), //i
    .io_inb_valid      (inb_2_valid           ), //i
    .io_inb_ready      (mac_2_io_inb_ready    ), //o
    .io_inb_payload    (inb_2_payload         ), //i
    .io_out_valid      (mac_2_io_out_valid    ), //o
    .io_out_ready      (out_2_ready           ), //i
    .io_out_payload    (mac_2_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_19 mac_3 (
    .io_ina_valid      (ina_3_valid           ), //i
    .io_ina_ready      (mac_3_io_ina_ready    ), //o
    .io_ina_payload    (ina_3_payload         ), //i
    .io_inb_valid      (inb_3_valid           ), //i
    .io_inb_ready      (mac_3_io_inb_ready    ), //o
    .io_inb_payload    (inb_3_payload         ), //i
    .io_out_valid      (mac_3_io_out_valid    ), //o
    .io_out_ready      (out_3_ready           ), //i
    .io_out_payload    (mac_3_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_20 mac_4 (
    .io_ina_valid      (ina_4_valid           ), //i
    .io_ina_ready      (mac_4_io_ina_ready    ), //o
    .io_ina_payload    (ina_4_payload         ), //i
    .io_inb_valid      (inb_4_valid           ), //i
    .io_inb_ready      (mac_4_io_inb_ready    ), //o
    .io_inb_payload    (inb_4_payload         ), //i
    .io_out_valid      (mac_4_io_out_valid    ), //o
    .io_out_ready      (out_4_ready           ), //i
    .io_out_payload    (mac_4_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_21 mac_5 (
    .io_ina_valid      (ina_5_valid           ), //i
    .io_ina_ready      (mac_5_io_ina_ready    ), //o
    .io_ina_payload    (ina_5_payload         ), //i
    .io_inb_valid      (inb_5_valid           ), //i
    .io_inb_ready      (mac_5_io_inb_ready    ), //o
    .io_inb_payload    (inb_5_payload         ), //i
    .io_out_valid      (mac_5_io_out_valid    ), //o
    .io_out_ready      (out_5_ready           ), //i
    .io_out_payload    (mac_5_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_22 mac_6 (
    .io_ina_valid      (ina_6_valid           ), //i
    .io_ina_ready      (mac_6_io_ina_ready    ), //o
    .io_ina_payload    (ina_6_payload         ), //i
    .io_inb_valid      (inb_6_valid           ), //i
    .io_inb_ready      (mac_6_io_inb_ready    ), //o
    .io_inb_payload    (inb_6_payload         ), //i
    .io_out_valid      (mac_6_io_out_valid    ), //o
    .io_out_ready      (out_6_ready           ), //i
    .io_out_payload    (mac_6_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_23 mac_7 (
    .io_ina_valid      (ina_7_valid           ), //i
    .io_ina_ready      (mac_7_io_ina_ready    ), //o
    .io_ina_payload    (ina_7_payload         ), //i
    .io_inb_valid      (inb_7_valid           ), //i
    .io_inb_ready      (mac_7_io_inb_ready    ), //o
    .io_inb_payload    (inb_7_payload         ), //i
    .io_out_valid      (mac_7_io_out_valid    ), //o
    .io_out_ready      (out_7_ready           ), //i
    .io_out_payload    (mac_7_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  assign ina_0_ready = mac_0_io_ina_ready;
  assign inb_0_ready = mac_0_io_inb_ready;
  assign out_0_valid = mac_0_io_out_valid;
  assign out_0_payload = mac_0_io_out_payload;
  assign ina_1_ready = mac_1_io_ina_ready;
  assign inb_1_ready = mac_1_io_inb_ready;
  assign out_1_valid = mac_1_io_out_valid;
  assign out_1_payload = mac_1_io_out_payload;
  assign ina_2_ready = mac_2_io_ina_ready;
  assign inb_2_ready = mac_2_io_inb_ready;
  assign out_2_valid = mac_2_io_out_valid;
  assign out_2_payload = mac_2_io_out_payload;
  assign ina_3_ready = mac_3_io_ina_ready;
  assign inb_3_ready = mac_3_io_inb_ready;
  assign out_3_valid = mac_3_io_out_valid;
  assign out_3_payload = mac_3_io_out_payload;
  assign ina_4_ready = mac_4_io_ina_ready;
  assign inb_4_ready = mac_4_io_inb_ready;
  assign out_4_valid = mac_4_io_out_valid;
  assign out_4_payload = mac_4_io_out_payload;
  assign ina_5_ready = mac_5_io_ina_ready;
  assign inb_5_ready = mac_5_io_inb_ready;
  assign out_5_valid = mac_5_io_out_valid;
  assign out_5_payload = mac_5_io_out_payload;
  assign ina_6_ready = mac_6_io_ina_ready;
  assign inb_6_ready = mac_6_io_inb_ready;
  assign out_6_valid = mac_6_io_out_valid;
  assign out_6_payload = mac_6_io_out_payload;
  assign ina_7_ready = mac_7_io_ina_ready;
  assign inb_7_ready = mac_7_io_inb_ready;
  assign out_7_valid = mac_7_io_out_valid;
  assign out_7_payload = mac_7_io_out_payload;

endmodule

module mac_acc_atom_1 (
  input               ina_0_valid,
  output              ina_0_ready,
  input      [31:0]   ina_0_payload,
  input               ina_1_valid,
  output              ina_1_ready,
  input      [31:0]   ina_1_payload,
  input               ina_2_valid,
  output              ina_2_ready,
  input      [31:0]   ina_2_payload,
  input               ina_3_valid,
  output              ina_3_ready,
  input      [31:0]   ina_3_payload,
  input               ina_4_valid,
  output              ina_4_ready,
  input      [31:0]   ina_4_payload,
  input               ina_5_valid,
  output              ina_5_ready,
  input      [31:0]   ina_5_payload,
  input               ina_6_valid,
  output              ina_6_ready,
  input      [31:0]   ina_6_payload,
  input               ina_7_valid,
  output              ina_7_ready,
  input      [31:0]   ina_7_payload,
  input               inb_0_valid,
  output              inb_0_ready,
  input      [31:0]   inb_0_payload,
  input               inb_1_valid,
  output              inb_1_ready,
  input      [31:0]   inb_1_payload,
  input               inb_2_valid,
  output              inb_2_ready,
  input      [31:0]   inb_2_payload,
  input               inb_3_valid,
  output              inb_3_ready,
  input      [31:0]   inb_3_payload,
  input               inb_4_valid,
  output              inb_4_ready,
  input      [31:0]   inb_4_payload,
  input               inb_5_valid,
  output              inb_5_ready,
  input      [31:0]   inb_5_payload,
  input               inb_6_valid,
  output              inb_6_ready,
  input      [31:0]   inb_6_payload,
  input               inb_7_valid,
  output              inb_7_ready,
  input      [31:0]   inb_7_payload,
  output              out_0_valid,
  input               out_0_ready,
  output     [31:0]   out_0_payload,
  output              out_1_valid,
  input               out_1_ready,
  output     [31:0]   out_1_payload,
  output              out_2_valid,
  input               out_2_ready,
  output     [31:0]   out_2_payload,
  output              out_3_valid,
  input               out_3_ready,
  output     [31:0]   out_3_payload,
  output              out_4_valid,
  input               out_4_ready,
  output     [31:0]   out_4_payload,
  output              out_5_valid,
  input               out_5_ready,
  output     [31:0]   out_5_payload,
  output              out_6_valid,
  input               out_6_ready,
  output     [31:0]   out_6_payload,
  output              out_7_valid,
  input               out_7_ready,
  output     [31:0]   out_7_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                mac_0_io_ina_ready;
  wire                mac_0_io_inb_ready;
  wire                mac_0_io_out_valid;
  wire       [31:0]   mac_0_io_out_payload;
  wire                mac_1_io_ina_ready;
  wire                mac_1_io_inb_ready;
  wire                mac_1_io_out_valid;
  wire       [31:0]   mac_1_io_out_payload;
  wire                mac_2_io_ina_ready;
  wire                mac_2_io_inb_ready;
  wire                mac_2_io_out_valid;
  wire       [31:0]   mac_2_io_out_payload;
  wire                mac_3_io_ina_ready;
  wire                mac_3_io_inb_ready;
  wire                mac_3_io_out_valid;
  wire       [31:0]   mac_3_io_out_payload;
  wire                mac_4_io_ina_ready;
  wire                mac_4_io_inb_ready;
  wire                mac_4_io_out_valid;
  wire       [31:0]   mac_4_io_out_payload;
  wire                mac_5_io_ina_ready;
  wire                mac_5_io_inb_ready;
  wire                mac_5_io_out_valid;
  wire       [31:0]   mac_5_io_out_payload;
  wire                mac_6_io_ina_ready;
  wire                mac_6_io_inb_ready;
  wire                mac_6_io_out_valid;
  wire       [31:0]   mac_6_io_out_payload;
  wire                mac_7_io_ina_ready;
  wire                mac_7_io_inb_ready;
  wire                mac_7_io_out_valid;
  wire       [31:0]   mac_7_io_out_payload;

  mac_acc_unit_8 mac_0 (
    .io_ina_valid      (ina_0_valid           ), //i
    .io_ina_ready      (mac_0_io_ina_ready    ), //o
    .io_ina_payload    (ina_0_payload         ), //i
    .io_inb_valid      (inb_0_valid           ), //i
    .io_inb_ready      (mac_0_io_inb_ready    ), //o
    .io_inb_payload    (inb_0_payload         ), //i
    .io_out_valid      (mac_0_io_out_valid    ), //o
    .io_out_ready      (out_0_ready           ), //i
    .io_out_payload    (mac_0_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_9 mac_1 (
    .io_ina_valid      (ina_1_valid           ), //i
    .io_ina_ready      (mac_1_io_ina_ready    ), //o
    .io_ina_payload    (ina_1_payload         ), //i
    .io_inb_valid      (inb_1_valid           ), //i
    .io_inb_ready      (mac_1_io_inb_ready    ), //o
    .io_inb_payload    (inb_1_payload         ), //i
    .io_out_valid      (mac_1_io_out_valid    ), //o
    .io_out_ready      (out_1_ready           ), //i
    .io_out_payload    (mac_1_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_10 mac_2 (
    .io_ina_valid      (ina_2_valid           ), //i
    .io_ina_ready      (mac_2_io_ina_ready    ), //o
    .io_ina_payload    (ina_2_payload         ), //i
    .io_inb_valid      (inb_2_valid           ), //i
    .io_inb_ready      (mac_2_io_inb_ready    ), //o
    .io_inb_payload    (inb_2_payload         ), //i
    .io_out_valid      (mac_2_io_out_valid    ), //o
    .io_out_ready      (out_2_ready           ), //i
    .io_out_payload    (mac_2_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_11 mac_3 (
    .io_ina_valid      (ina_3_valid           ), //i
    .io_ina_ready      (mac_3_io_ina_ready    ), //o
    .io_ina_payload    (ina_3_payload         ), //i
    .io_inb_valid      (inb_3_valid           ), //i
    .io_inb_ready      (mac_3_io_inb_ready    ), //o
    .io_inb_payload    (inb_3_payload         ), //i
    .io_out_valid      (mac_3_io_out_valid    ), //o
    .io_out_ready      (out_3_ready           ), //i
    .io_out_payload    (mac_3_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_12 mac_4 (
    .io_ina_valid      (ina_4_valid           ), //i
    .io_ina_ready      (mac_4_io_ina_ready    ), //o
    .io_ina_payload    (ina_4_payload         ), //i
    .io_inb_valid      (inb_4_valid           ), //i
    .io_inb_ready      (mac_4_io_inb_ready    ), //o
    .io_inb_payload    (inb_4_payload         ), //i
    .io_out_valid      (mac_4_io_out_valid    ), //o
    .io_out_ready      (out_4_ready           ), //i
    .io_out_payload    (mac_4_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_13 mac_5 (
    .io_ina_valid      (ina_5_valid           ), //i
    .io_ina_ready      (mac_5_io_ina_ready    ), //o
    .io_ina_payload    (ina_5_payload         ), //i
    .io_inb_valid      (inb_5_valid           ), //i
    .io_inb_ready      (mac_5_io_inb_ready    ), //o
    .io_inb_payload    (inb_5_payload         ), //i
    .io_out_valid      (mac_5_io_out_valid    ), //o
    .io_out_ready      (out_5_ready           ), //i
    .io_out_payload    (mac_5_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_14 mac_6 (
    .io_ina_valid      (ina_6_valid           ), //i
    .io_ina_ready      (mac_6_io_ina_ready    ), //o
    .io_ina_payload    (ina_6_payload         ), //i
    .io_inb_valid      (inb_6_valid           ), //i
    .io_inb_ready      (mac_6_io_inb_ready    ), //o
    .io_inb_payload    (inb_6_payload         ), //i
    .io_out_valid      (mac_6_io_out_valid    ), //o
    .io_out_ready      (out_6_ready           ), //i
    .io_out_payload    (mac_6_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_15 mac_7 (
    .io_ina_valid      (ina_7_valid           ), //i
    .io_ina_ready      (mac_7_io_ina_ready    ), //o
    .io_ina_payload    (ina_7_payload         ), //i
    .io_inb_valid      (inb_7_valid           ), //i
    .io_inb_ready      (mac_7_io_inb_ready    ), //o
    .io_inb_payload    (inb_7_payload         ), //i
    .io_out_valid      (mac_7_io_out_valid    ), //o
    .io_out_ready      (out_7_ready           ), //i
    .io_out_payload    (mac_7_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  assign ina_0_ready = mac_0_io_ina_ready;
  assign inb_0_ready = mac_0_io_inb_ready;
  assign out_0_valid = mac_0_io_out_valid;
  assign out_0_payload = mac_0_io_out_payload;
  assign ina_1_ready = mac_1_io_ina_ready;
  assign inb_1_ready = mac_1_io_inb_ready;
  assign out_1_valid = mac_1_io_out_valid;
  assign out_1_payload = mac_1_io_out_payload;
  assign ina_2_ready = mac_2_io_ina_ready;
  assign inb_2_ready = mac_2_io_inb_ready;
  assign out_2_valid = mac_2_io_out_valid;
  assign out_2_payload = mac_2_io_out_payload;
  assign ina_3_ready = mac_3_io_ina_ready;
  assign inb_3_ready = mac_3_io_inb_ready;
  assign out_3_valid = mac_3_io_out_valid;
  assign out_3_payload = mac_3_io_out_payload;
  assign ina_4_ready = mac_4_io_ina_ready;
  assign inb_4_ready = mac_4_io_inb_ready;
  assign out_4_valid = mac_4_io_out_valid;
  assign out_4_payload = mac_4_io_out_payload;
  assign ina_5_ready = mac_5_io_ina_ready;
  assign inb_5_ready = mac_5_io_inb_ready;
  assign out_5_valid = mac_5_io_out_valid;
  assign out_5_payload = mac_5_io_out_payload;
  assign ina_6_ready = mac_6_io_ina_ready;
  assign inb_6_ready = mac_6_io_inb_ready;
  assign out_6_valid = mac_6_io_out_valid;
  assign out_6_payload = mac_6_io_out_payload;
  assign ina_7_ready = mac_7_io_ina_ready;
  assign inb_7_ready = mac_7_io_inb_ready;
  assign out_7_valid = mac_7_io_out_valid;
  assign out_7_payload = mac_7_io_out_payload;

endmodule

module mac_acc_atom (
  input               ina_0_valid,
  output              ina_0_ready,
  input      [31:0]   ina_0_payload,
  input               ina_1_valid,
  output              ina_1_ready,
  input      [31:0]   ina_1_payload,
  input               ina_2_valid,
  output              ina_2_ready,
  input      [31:0]   ina_2_payload,
  input               ina_3_valid,
  output              ina_3_ready,
  input      [31:0]   ina_3_payload,
  input               ina_4_valid,
  output              ina_4_ready,
  input      [31:0]   ina_4_payload,
  input               ina_5_valid,
  output              ina_5_ready,
  input      [31:0]   ina_5_payload,
  input               ina_6_valid,
  output              ina_6_ready,
  input      [31:0]   ina_6_payload,
  input               ina_7_valid,
  output              ina_7_ready,
  input      [31:0]   ina_7_payload,
  input               inb_0_valid,
  output              inb_0_ready,
  input      [31:0]   inb_0_payload,
  input               inb_1_valid,
  output              inb_1_ready,
  input      [31:0]   inb_1_payload,
  input               inb_2_valid,
  output              inb_2_ready,
  input      [31:0]   inb_2_payload,
  input               inb_3_valid,
  output              inb_3_ready,
  input      [31:0]   inb_3_payload,
  input               inb_4_valid,
  output              inb_4_ready,
  input      [31:0]   inb_4_payload,
  input               inb_5_valid,
  output              inb_5_ready,
  input      [31:0]   inb_5_payload,
  input               inb_6_valid,
  output              inb_6_ready,
  input      [31:0]   inb_6_payload,
  input               inb_7_valid,
  output              inb_7_ready,
  input      [31:0]   inb_7_payload,
  output              out_0_valid,
  input               out_0_ready,
  output     [31:0]   out_0_payload,
  output              out_1_valid,
  input               out_1_ready,
  output     [31:0]   out_1_payload,
  output              out_2_valid,
  input               out_2_ready,
  output     [31:0]   out_2_payload,
  output              out_3_valid,
  input               out_3_ready,
  output     [31:0]   out_3_payload,
  output              out_4_valid,
  input               out_4_ready,
  output     [31:0]   out_4_payload,
  output              out_5_valid,
  input               out_5_ready,
  output     [31:0]   out_5_payload,
  output              out_6_valid,
  input               out_6_ready,
  output     [31:0]   out_6_payload,
  output              out_7_valid,
  input               out_7_ready,
  output     [31:0]   out_7_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                mac_0_io_ina_ready;
  wire                mac_0_io_inb_ready;
  wire                mac_0_io_out_valid;
  wire       [31:0]   mac_0_io_out_payload;
  wire                mac_1_io_ina_ready;
  wire                mac_1_io_inb_ready;
  wire                mac_1_io_out_valid;
  wire       [31:0]   mac_1_io_out_payload;
  wire                mac_2_io_ina_ready;
  wire                mac_2_io_inb_ready;
  wire                mac_2_io_out_valid;
  wire       [31:0]   mac_2_io_out_payload;
  wire                mac_3_io_ina_ready;
  wire                mac_3_io_inb_ready;
  wire                mac_3_io_out_valid;
  wire       [31:0]   mac_3_io_out_payload;
  wire                mac_4_io_ina_ready;
  wire                mac_4_io_inb_ready;
  wire                mac_4_io_out_valid;
  wire       [31:0]   mac_4_io_out_payload;
  wire                mac_5_io_ina_ready;
  wire                mac_5_io_inb_ready;
  wire                mac_5_io_out_valid;
  wire       [31:0]   mac_5_io_out_payload;
  wire                mac_6_io_ina_ready;
  wire                mac_6_io_inb_ready;
  wire                mac_6_io_out_valid;
  wire       [31:0]   mac_6_io_out_payload;
  wire                mac_7_io_ina_ready;
  wire                mac_7_io_inb_ready;
  wire                mac_7_io_out_valid;
  wire       [31:0]   mac_7_io_out_payload;

  mac_acc_unit mac_0 (
    .io_ina_valid      (ina_0_valid           ), //i
    .io_ina_ready      (mac_0_io_ina_ready    ), //o
    .io_ina_payload    (ina_0_payload         ), //i
    .io_inb_valid      (inb_0_valid           ), //i
    .io_inb_ready      (mac_0_io_inb_ready    ), //o
    .io_inb_payload    (inb_0_payload         ), //i
    .io_out_valid      (mac_0_io_out_valid    ), //o
    .io_out_ready      (out_0_ready           ), //i
    .io_out_payload    (mac_0_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_1 mac_1 (
    .io_ina_valid      (ina_1_valid           ), //i
    .io_ina_ready      (mac_1_io_ina_ready    ), //o
    .io_ina_payload    (ina_1_payload         ), //i
    .io_inb_valid      (inb_1_valid           ), //i
    .io_inb_ready      (mac_1_io_inb_ready    ), //o
    .io_inb_payload    (inb_1_payload         ), //i
    .io_out_valid      (mac_1_io_out_valid    ), //o
    .io_out_ready      (out_1_ready           ), //i
    .io_out_payload    (mac_1_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_2 mac_2 (
    .io_ina_valid      (ina_2_valid           ), //i
    .io_ina_ready      (mac_2_io_ina_ready    ), //o
    .io_ina_payload    (ina_2_payload         ), //i
    .io_inb_valid      (inb_2_valid           ), //i
    .io_inb_ready      (mac_2_io_inb_ready    ), //o
    .io_inb_payload    (inb_2_payload         ), //i
    .io_out_valid      (mac_2_io_out_valid    ), //o
    .io_out_ready      (out_2_ready           ), //i
    .io_out_payload    (mac_2_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_3 mac_3 (
    .io_ina_valid      (ina_3_valid           ), //i
    .io_ina_ready      (mac_3_io_ina_ready    ), //o
    .io_ina_payload    (ina_3_payload         ), //i
    .io_inb_valid      (inb_3_valid           ), //i
    .io_inb_ready      (mac_3_io_inb_ready    ), //o
    .io_inb_payload    (inb_3_payload         ), //i
    .io_out_valid      (mac_3_io_out_valid    ), //o
    .io_out_ready      (out_3_ready           ), //i
    .io_out_payload    (mac_3_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_4 mac_4 (
    .io_ina_valid      (ina_4_valid           ), //i
    .io_ina_ready      (mac_4_io_ina_ready    ), //o
    .io_ina_payload    (ina_4_payload         ), //i
    .io_inb_valid      (inb_4_valid           ), //i
    .io_inb_ready      (mac_4_io_inb_ready    ), //o
    .io_inb_payload    (inb_4_payload         ), //i
    .io_out_valid      (mac_4_io_out_valid    ), //o
    .io_out_ready      (out_4_ready           ), //i
    .io_out_payload    (mac_4_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_5 mac_5 (
    .io_ina_valid      (ina_5_valid           ), //i
    .io_ina_ready      (mac_5_io_ina_ready    ), //o
    .io_ina_payload    (ina_5_payload         ), //i
    .io_inb_valid      (inb_5_valid           ), //i
    .io_inb_ready      (mac_5_io_inb_ready    ), //o
    .io_inb_payload    (inb_5_payload         ), //i
    .io_out_valid      (mac_5_io_out_valid    ), //o
    .io_out_ready      (out_5_ready           ), //i
    .io_out_payload    (mac_5_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_6 mac_6 (
    .io_ina_valid      (ina_6_valid           ), //i
    .io_ina_ready      (mac_6_io_ina_ready    ), //o
    .io_ina_payload    (ina_6_payload         ), //i
    .io_inb_valid      (inb_6_valid           ), //i
    .io_inb_ready      (mac_6_io_inb_ready    ), //o
    .io_inb_payload    (inb_6_payload         ), //i
    .io_out_valid      (mac_6_io_out_valid    ), //o
    .io_out_ready      (out_6_ready           ), //i
    .io_out_payload    (mac_6_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_7 mac_7 (
    .io_ina_valid      (ina_7_valid           ), //i
    .io_ina_ready      (mac_7_io_ina_ready    ), //o
    .io_ina_payload    (ina_7_payload         ), //i
    .io_inb_valid      (inb_7_valid           ), //i
    .io_inb_ready      (mac_7_io_inb_ready    ), //o
    .io_inb_payload    (inb_7_payload         ), //i
    .io_out_valid      (mac_7_io_out_valid    ), //o
    .io_out_ready      (out_7_ready           ), //i
    .io_out_payload    (mac_7_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  assign ina_0_ready = mac_0_io_ina_ready;
  assign inb_0_ready = mac_0_io_inb_ready;
  assign out_0_valid = mac_0_io_out_valid;
  assign out_0_payload = mac_0_io_out_payload;
  assign ina_1_ready = mac_1_io_ina_ready;
  assign inb_1_ready = mac_1_io_inb_ready;
  assign out_1_valid = mac_1_io_out_valid;
  assign out_1_payload = mac_1_io_out_payload;
  assign ina_2_ready = mac_2_io_ina_ready;
  assign inb_2_ready = mac_2_io_inb_ready;
  assign out_2_valid = mac_2_io_out_valid;
  assign out_2_payload = mac_2_io_out_payload;
  assign ina_3_ready = mac_3_io_ina_ready;
  assign inb_3_ready = mac_3_io_inb_ready;
  assign out_3_valid = mac_3_io_out_valid;
  assign out_3_payload = mac_3_io_out_payload;
  assign ina_4_ready = mac_4_io_ina_ready;
  assign inb_4_ready = mac_4_io_inb_ready;
  assign out_4_valid = mac_4_io_out_valid;
  assign out_4_payload = mac_4_io_out_payload;
  assign ina_5_ready = mac_5_io_ina_ready;
  assign inb_5_ready = mac_5_io_inb_ready;
  assign out_5_valid = mac_5_io_out_valid;
  assign out_5_payload = mac_5_io_out_payload;
  assign ina_6_ready = mac_6_io_ina_ready;
  assign inb_6_ready = mac_6_io_inb_ready;
  assign out_6_valid = mac_6_io_out_valid;
  assign out_6_payload = mac_6_io_out_payload;
  assign ina_7_ready = mac_7_io_ina_ready;
  assign inb_7_ready = mac_7_io_inb_ready;
  assign out_7_valid = mac_7_io_out_valid;
  assign out_7_payload = mac_7_io_out_payload;

endmodule

//conv_mem replaced by conv_mem

//conv_mem replaced by conv_mem

//conv_mem replaced by conv_mem

//conv_mem replaced by conv_mem

//conv_mem replaced by conv_mem

//conv_mem replaced by conv_mem

//conv_mem replaced by conv_mem

//conv_mem replaced by conv_mem

module conv_mem (
  input      [31:0]   io_slv_rd_addr,
  output     [255:0]  io_slv_rd_data,
  input               io_slv_rd_en,
  input      [31:0]   io_slv_wr_addr,
  input      [255:0]  io_slv_wr_data,
  input               io_slv_wr_en,
  input               clk,
  input               reset
);
  reg        [255:0]  _zz_mem_port1;
  wire       [8:0]    _zz_mem_port;
  wire       [255:0]  _zz_mem_port_1;
  wire       [8:0]    _zz_mem_port_2;
  wire       [8:0]    _zz_io_slv_rd_data_1;
  wire       [255:0]  slv_wr_data;
  wire       [31:0]   _zz_io_slv_rd_data;
  reg [255:0] mem [0:511];

  assign _zz_mem_port = io_slv_wr_addr[8:0];
  assign _zz_io_slv_rd_data_1 = _zz_io_slv_rd_data[8:0];
  assign _zz_mem_port_1 = io_slv_wr_data;
  always @(posedge clk) begin
    if(io_slv_wr_en) begin
      mem[_zz_mem_port] <= _zz_mem_port_1;
    end
  end

  always @(posedge clk) begin
    if(io_slv_rd_en) begin
      _zz_mem_port1 <= mem[_zz_io_slv_rd_data_1];
    end
  end

  assign _zz_io_slv_rd_data = io_slv_rd_addr;
  assign io_slv_rd_data = _zz_mem_port1;

endmodule

module StreamFifo (
  input               io_push_valid,
  output              io_push_ready,
  input      [255:0]  io_push_payload,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [255:0]  io_pop_payload,
  input               io_flush,
  output     [4:0]    io_occupancy,
  output     [4:0]    io_availability,
  input               clk,
  input               reset
);
  reg        [255:0]  _zz_logic_ram_port0;
  wire       [3:0]    _zz_logic_pushPtr_valueNext;
  wire       [0:0]    _zz_logic_pushPtr_valueNext_1;
  wire       [3:0]    _zz_logic_popPtr_valueNext;
  wire       [0:0]    _zz_logic_popPtr_valueNext_1;
  wire                _zz_logic_ram_port;
  wire                _zz_io_pop_payload;
  wire       [255:0]  _zz_logic_ram_port_1;
  wire       [3:0]    _zz_io_availability;
  reg                 _zz_1;
  reg                 logic_pushPtr_willIncrement;
  reg                 logic_pushPtr_willClear;
  reg        [3:0]    logic_pushPtr_valueNext;
  reg        [3:0]    logic_pushPtr_value;
  wire                logic_pushPtr_willOverflowIfInc;
  wire                logic_pushPtr_willOverflow;
  reg                 logic_popPtr_willIncrement;
  reg                 logic_popPtr_willClear;
  reg        [3:0]    logic_popPtr_valueNext;
  reg        [3:0]    logic_popPtr_value;
  wire                logic_popPtr_willOverflowIfInc;
  wire                logic_popPtr_willOverflow;
  wire                logic_ptrMatch;
  reg                 logic_risingOccupancy;
  wire                logic_pushing;
  wire                logic_popping;
  wire                logic_empty;
  wire                logic_full;
  reg                 _zz_io_pop_valid;
  wire                when_Stream_l955;
  wire       [3:0]    logic_ptrDif;
  reg [255:0] logic_ram [0:15];

  assign _zz_logic_pushPtr_valueNext_1 = logic_pushPtr_willIncrement;
  assign _zz_logic_pushPtr_valueNext = {3'd0, _zz_logic_pushPtr_valueNext_1};
  assign _zz_logic_popPtr_valueNext_1 = logic_popPtr_willIncrement;
  assign _zz_logic_popPtr_valueNext = {3'd0, _zz_logic_popPtr_valueNext_1};
  assign _zz_io_availability = (logic_popPtr_value - logic_pushPtr_value);
  assign _zz_io_pop_payload = 1'b1;
  assign _zz_logic_ram_port_1 = io_push_payload;
  always @(posedge clk) begin
    if(_zz_io_pop_payload) begin
      _zz_logic_ram_port0 <= logic_ram[logic_popPtr_valueNext];
    end
  end

  always @(posedge clk) begin
    if(_zz_1) begin
      logic_ram[logic_pushPtr_value] <= _zz_logic_ram_port_1;
    end
  end

  always @(*) begin
    _zz_1 = 1'b0;
    if(logic_pushing) begin
      _zz_1 = 1'b1;
    end
  end

  always @(*) begin
    logic_pushPtr_willIncrement = 1'b0;
    if(logic_pushing) begin
      logic_pushPtr_willIncrement = 1'b1;
    end
  end

  always @(*) begin
    logic_pushPtr_willClear = 1'b0;
    if(io_flush) begin
      logic_pushPtr_willClear = 1'b1;
    end
  end

  assign logic_pushPtr_willOverflowIfInc = (logic_pushPtr_value == 4'b1111);
  assign logic_pushPtr_willOverflow = (logic_pushPtr_willOverflowIfInc && logic_pushPtr_willIncrement);
  always @(*) begin
    logic_pushPtr_valueNext = (logic_pushPtr_value + _zz_logic_pushPtr_valueNext);
    if(logic_pushPtr_willClear) begin
      logic_pushPtr_valueNext = 4'b0000;
    end
  end

  always @(*) begin
    logic_popPtr_willIncrement = 1'b0;
    if(logic_popping) begin
      logic_popPtr_willIncrement = 1'b1;
    end
  end

  always @(*) begin
    logic_popPtr_willClear = 1'b0;
    if(io_flush) begin
      logic_popPtr_willClear = 1'b1;
    end
  end

  assign logic_popPtr_willOverflowIfInc = (logic_popPtr_value == 4'b1111);
  assign logic_popPtr_willOverflow = (logic_popPtr_willOverflowIfInc && logic_popPtr_willIncrement);
  always @(*) begin
    logic_popPtr_valueNext = (logic_popPtr_value + _zz_logic_popPtr_valueNext);
    if(logic_popPtr_willClear) begin
      logic_popPtr_valueNext = 4'b0000;
    end
  end

  assign logic_ptrMatch = (logic_pushPtr_value == logic_popPtr_value);
  assign logic_pushing = (io_push_valid && io_push_ready);
  assign logic_popping = (io_pop_valid && io_pop_ready);
  assign logic_empty = (logic_ptrMatch && (! logic_risingOccupancy));
  assign logic_full = (logic_ptrMatch && logic_risingOccupancy);
  assign io_push_ready = (! logic_full);
  assign io_pop_valid = ((! logic_empty) && (! (_zz_io_pop_valid && (! logic_full))));
  assign io_pop_payload = _zz_logic_ram_port0;
  assign when_Stream_l955 = (logic_pushing != logic_popping);
  assign logic_ptrDif = (logic_pushPtr_value - logic_popPtr_value);
  assign io_occupancy = {(logic_risingOccupancy && logic_ptrMatch),logic_ptrDif};
  assign io_availability = {((! logic_risingOccupancy) && logic_ptrMatch),_zz_io_availability};
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      logic_pushPtr_value <= 4'b0000;
      logic_popPtr_value <= 4'b0000;
      logic_risingOccupancy <= 1'b0;
      _zz_io_pop_valid <= 1'b0;
    end else begin
      logic_pushPtr_value <= logic_pushPtr_valueNext;
      logic_popPtr_value <= logic_popPtr_valueNext;
      _zz_io_pop_valid <= (logic_popPtr_valueNext == logic_pushPtr_value);
      if(when_Stream_l955) begin
        logic_risingOccupancy <= logic_pushing;
      end
      if(io_flush) begin
        logic_risingOccupancy <= 1'b0;
      end
    end
  end


endmodule

module mac_acc_unit_63 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_63 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_62 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_62 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_61 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_61 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_60 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_60 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_59 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_59 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_58 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_58 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_57 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_57 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_56 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_56 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_55 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_55 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_54 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_54 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_53 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_53 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_52 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_52 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_51 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_51 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_50 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_50 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_49 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_49 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_48 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_48 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_47 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_47 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_46 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_46 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_45 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_45 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_44 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_44 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_43 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_43 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_42 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_42 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_41 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_41 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_40 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_40 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_39 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_39 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_38 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_38 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_37 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_37 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_36 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_36 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_35 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_35 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_34 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_34 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_33 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_33 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_32 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_32 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_31 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_31 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_30 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_30 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_29 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_29 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_28 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_28 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_27 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_27 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_26 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_26 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_25 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_25 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_24 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_24 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_23 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_23 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_22 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_22 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_21 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_21 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_20 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_20 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_19 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_19 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_18 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_18 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_17 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_17 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_16 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_16 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_15 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_15 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_14 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_14 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_13 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_13 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_12 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_12 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_11 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_11 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_10 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_10 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_9 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_9 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_8 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_8 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_7 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_7 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_6 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_6 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_5 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_5 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_4 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_4 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_3 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_3 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_2 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_2 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_1 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_1 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module fp_acc_63 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_63_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_63_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_62 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_62_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_62_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_61 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_61_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_61_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_60 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_60_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_60_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_59 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_59_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_59_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_58 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_58_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_58_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_57 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_57_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_57_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_56 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_56_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_56_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_55 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_55_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_55_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_54 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_54_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_54_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_53 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_53_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_53_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_52 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_52_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_52_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_51 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_51_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_51_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_50 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_50_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_50_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_49 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_49_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_49_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_48 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_48_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_48_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_47 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_47_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_47_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_46 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_46_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_46_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_45 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_45_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_45_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_44 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_44_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_44_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_43 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_43_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_43_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_42 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_42_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_42_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_41 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_41_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_41_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_40 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_40_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_40_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_39 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_39_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_39_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_38 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_38_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_38_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_37 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_37_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_37_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_36 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_36_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_36_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_35 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_35_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_35_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_34 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_34_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_34_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_33 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_33_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_33_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_32 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_32_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_32_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_31 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_31_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_31_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_30 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_30_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_30_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_29 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_29_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_29_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_28 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_28_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_28_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_27 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_27_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_27_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_26 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_26_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_26_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_25 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_25_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_25_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_24 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_24_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_24_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_23 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_23_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_23_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_22 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_22_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_22_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_21 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_21_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_21_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_20 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_20_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_20_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_19 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_19_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_19_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_18 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_18_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_18_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_17 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_17_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_17_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_16 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_16_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_16_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_15 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_15_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_15_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_14 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_14_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_14_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_13 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_13_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_13_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_12 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_12_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_12_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_11 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_11_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_11_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_10 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_10_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_10_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_9 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_9_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_9_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_8 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_8_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_8_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_7 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_7_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_7_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_6 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_6_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_6_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_5 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_5_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_5_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_4 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_4_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_4_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_3 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_3_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_3_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_2 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_2_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_2_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_1 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_1_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_1_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_120_ina_valid;
  wire                fp_adder_120_inb_valid;
  reg                 fp_adder_120_out_ready;
  wire                fp_adder_120_ina_ready;
  wire                fp_adder_120_inb_ready;
  wire                fp_adder_120_out_valid;
  wire       [31:0]   fp_adder_120_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_120 (
    .ina_valid      (fp_adder_120_ina_valid    ), //i
    .ina_ready      (fp_adder_120_ina_ready    ), //o
    .ina_payload    (ina_payload               ), //i
    .inb_valid      (fp_adder_120_inb_valid    ), //i
    .inb_ready      (fp_adder_120_inb_ready    ), //o
    .inb_payload    (result                    ), //i
    .out_valid      (fp_adder_120_out_valid    ), //o
    .out_ready      (fp_adder_120_out_ready    ), //i
    .out_payload    (fp_adder_120_out_payload  ), //o
    .clk            (clk                       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_120_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_120_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_120_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU : begin
        fp_adder_120_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_120_out_valid && fp_adder_120_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_120_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

module fp_multiply (
  input               ina_valid,
  output              ina_ready,
  input      [31:0]   ina_payload,
  input               inb_valid,
  output              inb_ready,
  input      [31:0]   inb_payload,
  output              out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input               clk
);
  wire                fp_multi_s_axis_a_tready;
  wire                fp_multi_s_axis_b_tready;
  wire                fp_multi_m_axis_result_tvalid;
  wire       [31:0]   fp_multi_m_axis_result_tdata;

  fp_multi_bb fp_multi (
    .aclk                    (clk                            ), //i
    .s_axis_a_tvalid         (ina_valid                      ), //i
    .s_axis_a_tready         (fp_multi_s_axis_a_tready       ), //o
    .s_axis_a_tdata          (ina_payload                    ), //i
    .s_axis_b_tvalid         (inb_valid                      ), //i
    .s_axis_b_tready         (fp_multi_s_axis_b_tready       ), //o
    .s_axis_b_tdata          (inb_payload                    ), //i
    .m_axis_result_tvalid    (fp_multi_m_axis_result_tvalid  ), //o
    .m_axis_result_tready    (out_ready                      ), //i
    .m_axis_result_tdata     (fp_multi_m_axis_result_tdata   )  //o
  );
  assign ina_ready = fp_multi_s_axis_a_tready;
  assign inb_ready = fp_multi_s_axis_b_tready;
  assign out_valid = fp_multi_m_axis_result_tvalid;
  assign out_payload = fp_multi_m_axis_result_tdata;

endmodule

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

module fp_adder (
  input               ina_valid,
  output              ina_ready,
  input      [31:0]   ina_payload,
  input               inb_valid,
  output              inb_ready,
  input      [31:0]   inb_payload,
  output              out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input               clk
);
  wire                fp_adder_120_s_axis_a_tready;
  wire                fp_adder_120_s_axis_b_tready;
  wire                fp_adder_120_m_axis_result_tvalid;
  wire       [31:0]   fp_adder_120_m_axis_result_tdata;

  fp_adder_bb fp_adder_120 (
    .aclk                    (clk                                ), //i
    .s_axis_a_tvalid         (ina_valid                          ), //i
    .s_axis_a_tready         (fp_adder_120_s_axis_a_tready       ), //o
    .s_axis_a_tdata          (ina_payload                        ), //i
    .s_axis_b_tvalid         (inb_valid                          ), //i
    .s_axis_b_tready         (fp_adder_120_s_axis_b_tready       ), //o
    .s_axis_b_tdata          (inb_payload                        ), //i
    .m_axis_result_tvalid    (fp_adder_120_m_axis_result_tvalid  ), //o
    .m_axis_result_tready    (out_ready                          ), //i
    .m_axis_result_tdata     (fp_adder_120_m_axis_result_tdata   )  //o
  );
  assign ina_ready = fp_adder_120_s_axis_a_tready;
  assign inb_ready = fp_adder_120_s_axis_b_tready;
  assign out_valid = fp_adder_120_m_axis_result_tvalid;
  assign out_payload = fp_adder_120_m_axis_result_tdata;

endmodule
