// Generator : SpinalHDL v1.5.0    git head : 83a031922866b078c411ec5529e00f1b6e79f8e7
// Component : conv_top
// Git hash  : 4b713bfe97cfc123fdb083a63b49b96328c070fd


`define read_req_fsm_enumDefinition_binary_sequential_type [3:0]
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_BOOT 4'b0000
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE 4'b0001
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT 4'b0010
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW 4'b0011
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX 4'b0100
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR 4'b0101
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ 4'b0110
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GET_DATA 4'b0111
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT 4'b1000
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR 4'b1001
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CHECK 4'b1010
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_JUDGE 4'b1011
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GEN_ADDR 4'b1100
`define read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_END 4'b1101

`define acc_fsm_enumDefinition_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_1_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_2_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_3_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_4_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_5_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_6_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_7_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_8_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_9_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_10_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_11_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_12_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_13_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_14_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_15_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_16_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_17_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_18_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_19_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_20_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_21_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_22_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_23_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_24_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_25_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_26_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_27_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_28_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_29_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_30_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_31_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_32_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_33_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_34_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_35_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_36_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_37_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_38_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_39_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_40_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_41_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_42_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_43_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_44_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_45_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_46_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_47_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_48_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_49_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_50_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_51_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_52_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_53_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_54_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_55_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_56_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_57_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_58_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_59_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_60_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_61_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_62_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT 3'b110

`define acc_fsm_enumDefinition_63_binary_sequential_type [2:0]
`define acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_BOOT 3'b000
`define acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE 3'b001
`define acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT 3'b010
`define acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT 3'b011
`define acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU 3'b100
`define acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK 3'b101
`define acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT 3'b110

`define mux_fsm_enumDefinition_binary_sequential_type [1:0]
`define mux_fsm_enumDefinition_binary_sequential_mux_fsm_BOOT 2'b00
`define mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV 2'b01
`define mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA 2'b10
`define mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA 2'b11


module conv_top (
  input      [15:0]   cfg_fea_width,
  input      [15:0]   cfg_fea_height,
  input      [15:0]   cfg_fea_channel,
  input      [15:0]   cfg_wt_width,
  input      [15:0]   cfg_wt_height,
  input      [15:0]   cfg_wt_channel,
  input      [15:0]   cfg_kerNum,
  input      [15:0]   cfg_o_width,
  input      [15:0]   cfg_o_height,
  input      [15:0]   cfg_o_channel,
  input      [15:0]   cfg_top_pad,
  input      [15:0]   cfg_bot_pad,
  input      [15:0]   cfg_left_pad,
  input      [15:0]   cfg_right_pad,
  input      [15:0]   cfg_dt_stridex,
  input      [15:0]   cfg_dt_stridey,
  input      [15:0]   cfg_wt_stridex,
  input      [15:0]   cfg_wt_stridey,
  input      [15:0]   cfg_par_acc_cnt,
  input               ctrl_read_enable,
  input               ctrl_acc_enable,
  input               ctrl_is_delta_wt,
  output     [31:0]   dt_ramrd_addr,
  input      [255:0]  dt_ramrd_data,
  output              dt_ramrd_en,
  output     [31:0]   wt_ramrd_0_addr,
  input      [255:0]  wt_ramrd_0_data,
  output              wt_ramrd_0_en,
  output     [31:0]   wt_ramrd_1_addr,
  input      [255:0]  wt_ramrd_1_data,
  output              wt_ramrd_1_en,
  output     [31:0]   wt_ramrd_2_addr,
  input      [255:0]  wt_ramrd_2_data,
  output              wt_ramrd_2_en,
  output     [31:0]   wt_ramrd_3_addr,
  input      [255:0]  wt_ramrd_3_data,
  output              wt_ramrd_3_en,
  output     [31:0]   wt_ramrd_4_addr,
  input      [255:0]  wt_ramrd_4_data,
  output              wt_ramrd_4_en,
  output     [31:0]   wt_ramrd_5_addr,
  input      [255:0]  wt_ramrd_5_data,
  output              wt_ramrd_5_en,
  output     [31:0]   wt_ramrd_6_addr,
  input      [255:0]  wt_ramrd_6_data,
  output              wt_ramrd_6_en,
  output     [31:0]   wt_ramrd_7_addr,
  input      [255:0]  wt_ramrd_7_data,
  output              wt_ramrd_7_en,
  output              o_delta_wt_0_0_valid,
  input               o_delta_wt_0_0_ready,
  output     [31:0]   o_delta_wt_0_0_payload,
  output              o_delta_wt_0_1_valid,
  input               o_delta_wt_0_1_ready,
  output     [31:0]   o_delta_wt_0_1_payload,
  output              o_delta_wt_0_2_valid,
  input               o_delta_wt_0_2_ready,
  output     [31:0]   o_delta_wt_0_2_payload,
  output              o_delta_wt_0_3_valid,
  input               o_delta_wt_0_3_ready,
  output     [31:0]   o_delta_wt_0_3_payload,
  output              o_delta_wt_0_4_valid,
  input               o_delta_wt_0_4_ready,
  output     [31:0]   o_delta_wt_0_4_payload,
  output              o_delta_wt_0_5_valid,
  input               o_delta_wt_0_5_ready,
  output     [31:0]   o_delta_wt_0_5_payload,
  output              o_delta_wt_0_6_valid,
  input               o_delta_wt_0_6_ready,
  output     [31:0]   o_delta_wt_0_6_payload,
  output              o_delta_wt_0_7_valid,
  input               o_delta_wt_0_7_ready,
  output     [31:0]   o_delta_wt_0_7_payload,
  output              o_delta_wt_1_0_valid,
  input               o_delta_wt_1_0_ready,
  output     [31:0]   o_delta_wt_1_0_payload,
  output              o_delta_wt_1_1_valid,
  input               o_delta_wt_1_1_ready,
  output     [31:0]   o_delta_wt_1_1_payload,
  output              o_delta_wt_1_2_valid,
  input               o_delta_wt_1_2_ready,
  output     [31:0]   o_delta_wt_1_2_payload,
  output              o_delta_wt_1_3_valid,
  input               o_delta_wt_1_3_ready,
  output     [31:0]   o_delta_wt_1_3_payload,
  output              o_delta_wt_1_4_valid,
  input               o_delta_wt_1_4_ready,
  output     [31:0]   o_delta_wt_1_4_payload,
  output              o_delta_wt_1_5_valid,
  input               o_delta_wt_1_5_ready,
  output     [31:0]   o_delta_wt_1_5_payload,
  output              o_delta_wt_1_6_valid,
  input               o_delta_wt_1_6_ready,
  output     [31:0]   o_delta_wt_1_6_payload,
  output              o_delta_wt_1_7_valid,
  input               o_delta_wt_1_7_ready,
  output     [31:0]   o_delta_wt_1_7_payload,
  output              o_delta_wt_2_0_valid,
  input               o_delta_wt_2_0_ready,
  output     [31:0]   o_delta_wt_2_0_payload,
  output              o_delta_wt_2_1_valid,
  input               o_delta_wt_2_1_ready,
  output     [31:0]   o_delta_wt_2_1_payload,
  output              o_delta_wt_2_2_valid,
  input               o_delta_wt_2_2_ready,
  output     [31:0]   o_delta_wt_2_2_payload,
  output              o_delta_wt_2_3_valid,
  input               o_delta_wt_2_3_ready,
  output     [31:0]   o_delta_wt_2_3_payload,
  output              o_delta_wt_2_4_valid,
  input               o_delta_wt_2_4_ready,
  output     [31:0]   o_delta_wt_2_4_payload,
  output              o_delta_wt_2_5_valid,
  input               o_delta_wt_2_5_ready,
  output     [31:0]   o_delta_wt_2_5_payload,
  output              o_delta_wt_2_6_valid,
  input               o_delta_wt_2_6_ready,
  output     [31:0]   o_delta_wt_2_6_payload,
  output              o_delta_wt_2_7_valid,
  input               o_delta_wt_2_7_ready,
  output     [31:0]   o_delta_wt_2_7_payload,
  output              o_delta_wt_3_0_valid,
  input               o_delta_wt_3_0_ready,
  output     [31:0]   o_delta_wt_3_0_payload,
  output              o_delta_wt_3_1_valid,
  input               o_delta_wt_3_1_ready,
  output     [31:0]   o_delta_wt_3_1_payload,
  output              o_delta_wt_3_2_valid,
  input               o_delta_wt_3_2_ready,
  output     [31:0]   o_delta_wt_3_2_payload,
  output              o_delta_wt_3_3_valid,
  input               o_delta_wt_3_3_ready,
  output     [31:0]   o_delta_wt_3_3_payload,
  output              o_delta_wt_3_4_valid,
  input               o_delta_wt_3_4_ready,
  output     [31:0]   o_delta_wt_3_4_payload,
  output              o_delta_wt_3_5_valid,
  input               o_delta_wt_3_5_ready,
  output     [31:0]   o_delta_wt_3_5_payload,
  output              o_delta_wt_3_6_valid,
  input               o_delta_wt_3_6_ready,
  output     [31:0]   o_delta_wt_3_6_payload,
  output              o_delta_wt_3_7_valid,
  input               o_delta_wt_3_7_ready,
  output     [31:0]   o_delta_wt_3_7_payload,
  output              o_delta_wt_4_0_valid,
  input               o_delta_wt_4_0_ready,
  output     [31:0]   o_delta_wt_4_0_payload,
  output              o_delta_wt_4_1_valid,
  input               o_delta_wt_4_1_ready,
  output     [31:0]   o_delta_wt_4_1_payload,
  output              o_delta_wt_4_2_valid,
  input               o_delta_wt_4_2_ready,
  output     [31:0]   o_delta_wt_4_2_payload,
  output              o_delta_wt_4_3_valid,
  input               o_delta_wt_4_3_ready,
  output     [31:0]   o_delta_wt_4_3_payload,
  output              o_delta_wt_4_4_valid,
  input               o_delta_wt_4_4_ready,
  output     [31:0]   o_delta_wt_4_4_payload,
  output              o_delta_wt_4_5_valid,
  input               o_delta_wt_4_5_ready,
  output     [31:0]   o_delta_wt_4_5_payload,
  output              o_delta_wt_4_6_valid,
  input               o_delta_wt_4_6_ready,
  output     [31:0]   o_delta_wt_4_6_payload,
  output              o_delta_wt_4_7_valid,
  input               o_delta_wt_4_7_ready,
  output     [31:0]   o_delta_wt_4_7_payload,
  output              o_delta_wt_5_0_valid,
  input               o_delta_wt_5_0_ready,
  output     [31:0]   o_delta_wt_5_0_payload,
  output              o_delta_wt_5_1_valid,
  input               o_delta_wt_5_1_ready,
  output     [31:0]   o_delta_wt_5_1_payload,
  output              o_delta_wt_5_2_valid,
  input               o_delta_wt_5_2_ready,
  output     [31:0]   o_delta_wt_5_2_payload,
  output              o_delta_wt_5_3_valid,
  input               o_delta_wt_5_3_ready,
  output     [31:0]   o_delta_wt_5_3_payload,
  output              o_delta_wt_5_4_valid,
  input               o_delta_wt_5_4_ready,
  output     [31:0]   o_delta_wt_5_4_payload,
  output              o_delta_wt_5_5_valid,
  input               o_delta_wt_5_5_ready,
  output     [31:0]   o_delta_wt_5_5_payload,
  output              o_delta_wt_5_6_valid,
  input               o_delta_wt_5_6_ready,
  output     [31:0]   o_delta_wt_5_6_payload,
  output              o_delta_wt_5_7_valid,
  input               o_delta_wt_5_7_ready,
  output     [31:0]   o_delta_wt_5_7_payload,
  output              o_delta_wt_6_0_valid,
  input               o_delta_wt_6_0_ready,
  output     [31:0]   o_delta_wt_6_0_payload,
  output              o_delta_wt_6_1_valid,
  input               o_delta_wt_6_1_ready,
  output     [31:0]   o_delta_wt_6_1_payload,
  output              o_delta_wt_6_2_valid,
  input               o_delta_wt_6_2_ready,
  output     [31:0]   o_delta_wt_6_2_payload,
  output              o_delta_wt_6_3_valid,
  input               o_delta_wt_6_3_ready,
  output     [31:0]   o_delta_wt_6_3_payload,
  output              o_delta_wt_6_4_valid,
  input               o_delta_wt_6_4_ready,
  output     [31:0]   o_delta_wt_6_4_payload,
  output              o_delta_wt_6_5_valid,
  input               o_delta_wt_6_5_ready,
  output     [31:0]   o_delta_wt_6_5_payload,
  output              o_delta_wt_6_6_valid,
  input               o_delta_wt_6_6_ready,
  output     [31:0]   o_delta_wt_6_6_payload,
  output              o_delta_wt_6_7_valid,
  input               o_delta_wt_6_7_ready,
  output     [31:0]   o_delta_wt_6_7_payload,
  output              o_delta_wt_7_0_valid,
  input               o_delta_wt_7_0_ready,
  output     [31:0]   o_delta_wt_7_0_payload,
  output              o_delta_wt_7_1_valid,
  input               o_delta_wt_7_1_ready,
  output     [31:0]   o_delta_wt_7_1_payload,
  output              o_delta_wt_7_2_valid,
  input               o_delta_wt_7_2_ready,
  output     [31:0]   o_delta_wt_7_2_payload,
  output              o_delta_wt_7_3_valid,
  input               o_delta_wt_7_3_ready,
  output     [31:0]   o_delta_wt_7_3_payload,
  output              o_delta_wt_7_4_valid,
  input               o_delta_wt_7_4_ready,
  output     [31:0]   o_delta_wt_7_4_payload,
  output              o_delta_wt_7_5_valid,
  input               o_delta_wt_7_5_ready,
  output     [31:0]   o_delta_wt_7_5_payload,
  output              o_delta_wt_7_6_valid,
  input               o_delta_wt_7_6_ready,
  output     [31:0]   o_delta_wt_7_6_payload,
  output              o_delta_wt_7_7_valid,
  input               o_delta_wt_7_7_ready,
  output     [31:0]   o_delta_wt_7_7_payload,
  output              o_sigma_0_0_valid,
  input               o_sigma_0_0_ready,
  output     [31:0]   o_sigma_0_0_payload,
  output              o_sigma_0_1_valid,
  input               o_sigma_0_1_ready,
  output     [31:0]   o_sigma_0_1_payload,
  output              o_sigma_0_2_valid,
  input               o_sigma_0_2_ready,
  output     [31:0]   o_sigma_0_2_payload,
  output              o_sigma_0_3_valid,
  input               o_sigma_0_3_ready,
  output     [31:0]   o_sigma_0_3_payload,
  output              o_sigma_0_4_valid,
  input               o_sigma_0_4_ready,
  output     [31:0]   o_sigma_0_4_payload,
  output              o_sigma_0_5_valid,
  input               o_sigma_0_5_ready,
  output     [31:0]   o_sigma_0_5_payload,
  output              o_sigma_0_6_valid,
  input               o_sigma_0_6_ready,
  output     [31:0]   o_sigma_0_6_payload,
  output              o_sigma_0_7_valid,
  input               o_sigma_0_7_ready,
  output     [31:0]   o_sigma_0_7_payload,
  output              o_sigma_1_0_valid,
  input               o_sigma_1_0_ready,
  output     [31:0]   o_sigma_1_0_payload,
  output              o_sigma_1_1_valid,
  input               o_sigma_1_1_ready,
  output     [31:0]   o_sigma_1_1_payload,
  output              o_sigma_1_2_valid,
  input               o_sigma_1_2_ready,
  output     [31:0]   o_sigma_1_2_payload,
  output              o_sigma_1_3_valid,
  input               o_sigma_1_3_ready,
  output     [31:0]   o_sigma_1_3_payload,
  output              o_sigma_1_4_valid,
  input               o_sigma_1_4_ready,
  output     [31:0]   o_sigma_1_4_payload,
  output              o_sigma_1_5_valid,
  input               o_sigma_1_5_ready,
  output     [31:0]   o_sigma_1_5_payload,
  output              o_sigma_1_6_valid,
  input               o_sigma_1_6_ready,
  output     [31:0]   o_sigma_1_6_payload,
  output              o_sigma_1_7_valid,
  input               o_sigma_1_7_ready,
  output     [31:0]   o_sigma_1_7_payload,
  output              o_sigma_2_0_valid,
  input               o_sigma_2_0_ready,
  output     [31:0]   o_sigma_2_0_payload,
  output              o_sigma_2_1_valid,
  input               o_sigma_2_1_ready,
  output     [31:0]   o_sigma_2_1_payload,
  output              o_sigma_2_2_valid,
  input               o_sigma_2_2_ready,
  output     [31:0]   o_sigma_2_2_payload,
  output              o_sigma_2_3_valid,
  input               o_sigma_2_3_ready,
  output     [31:0]   o_sigma_2_3_payload,
  output              o_sigma_2_4_valid,
  input               o_sigma_2_4_ready,
  output     [31:0]   o_sigma_2_4_payload,
  output              o_sigma_2_5_valid,
  input               o_sigma_2_5_ready,
  output     [31:0]   o_sigma_2_5_payload,
  output              o_sigma_2_6_valid,
  input               o_sigma_2_6_ready,
  output     [31:0]   o_sigma_2_6_payload,
  output              o_sigma_2_7_valid,
  input               o_sigma_2_7_ready,
  output     [31:0]   o_sigma_2_7_payload,
  output              o_sigma_3_0_valid,
  input               o_sigma_3_0_ready,
  output     [31:0]   o_sigma_3_0_payload,
  output              o_sigma_3_1_valid,
  input               o_sigma_3_1_ready,
  output     [31:0]   o_sigma_3_1_payload,
  output              o_sigma_3_2_valid,
  input               o_sigma_3_2_ready,
  output     [31:0]   o_sigma_3_2_payload,
  output              o_sigma_3_3_valid,
  input               o_sigma_3_3_ready,
  output     [31:0]   o_sigma_3_3_payload,
  output              o_sigma_3_4_valid,
  input               o_sigma_3_4_ready,
  output     [31:0]   o_sigma_3_4_payload,
  output              o_sigma_3_5_valid,
  input               o_sigma_3_5_ready,
  output     [31:0]   o_sigma_3_5_payload,
  output              o_sigma_3_6_valid,
  input               o_sigma_3_6_ready,
  output     [31:0]   o_sigma_3_6_payload,
  output              o_sigma_3_7_valid,
  input               o_sigma_3_7_ready,
  output     [31:0]   o_sigma_3_7_payload,
  output              o_sigma_4_0_valid,
  input               o_sigma_4_0_ready,
  output     [31:0]   o_sigma_4_0_payload,
  output              o_sigma_4_1_valid,
  input               o_sigma_4_1_ready,
  output     [31:0]   o_sigma_4_1_payload,
  output              o_sigma_4_2_valid,
  input               o_sigma_4_2_ready,
  output     [31:0]   o_sigma_4_2_payload,
  output              o_sigma_4_3_valid,
  input               o_sigma_4_3_ready,
  output     [31:0]   o_sigma_4_3_payload,
  output              o_sigma_4_4_valid,
  input               o_sigma_4_4_ready,
  output     [31:0]   o_sigma_4_4_payload,
  output              o_sigma_4_5_valid,
  input               o_sigma_4_5_ready,
  output     [31:0]   o_sigma_4_5_payload,
  output              o_sigma_4_6_valid,
  input               o_sigma_4_6_ready,
  output     [31:0]   o_sigma_4_6_payload,
  output              o_sigma_4_7_valid,
  input               o_sigma_4_7_ready,
  output     [31:0]   o_sigma_4_7_payload,
  output              o_sigma_5_0_valid,
  input               o_sigma_5_0_ready,
  output     [31:0]   o_sigma_5_0_payload,
  output              o_sigma_5_1_valid,
  input               o_sigma_5_1_ready,
  output     [31:0]   o_sigma_5_1_payload,
  output              o_sigma_5_2_valid,
  input               o_sigma_5_2_ready,
  output     [31:0]   o_sigma_5_2_payload,
  output              o_sigma_5_3_valid,
  input               o_sigma_5_3_ready,
  output     [31:0]   o_sigma_5_3_payload,
  output              o_sigma_5_4_valid,
  input               o_sigma_5_4_ready,
  output     [31:0]   o_sigma_5_4_payload,
  output              o_sigma_5_5_valid,
  input               o_sigma_5_5_ready,
  output     [31:0]   o_sigma_5_5_payload,
  output              o_sigma_5_6_valid,
  input               o_sigma_5_6_ready,
  output     [31:0]   o_sigma_5_6_payload,
  output              o_sigma_5_7_valid,
  input               o_sigma_5_7_ready,
  output     [31:0]   o_sigma_5_7_payload,
  output              o_sigma_6_0_valid,
  input               o_sigma_6_0_ready,
  output     [31:0]   o_sigma_6_0_payload,
  output              o_sigma_6_1_valid,
  input               o_sigma_6_1_ready,
  output     [31:0]   o_sigma_6_1_payload,
  output              o_sigma_6_2_valid,
  input               o_sigma_6_2_ready,
  output     [31:0]   o_sigma_6_2_payload,
  output              o_sigma_6_3_valid,
  input               o_sigma_6_3_ready,
  output     [31:0]   o_sigma_6_3_payload,
  output              o_sigma_6_4_valid,
  input               o_sigma_6_4_ready,
  output     [31:0]   o_sigma_6_4_payload,
  output              o_sigma_6_5_valid,
  input               o_sigma_6_5_ready,
  output     [31:0]   o_sigma_6_5_payload,
  output              o_sigma_6_6_valid,
  input               o_sigma_6_6_ready,
  output     [31:0]   o_sigma_6_6_payload,
  output              o_sigma_6_7_valid,
  input               o_sigma_6_7_ready,
  output     [31:0]   o_sigma_6_7_payload,
  output              o_sigma_7_0_valid,
  input               o_sigma_7_0_ready,
  output     [31:0]   o_sigma_7_0_payload,
  output              o_sigma_7_1_valid,
  input               o_sigma_7_1_ready,
  output     [31:0]   o_sigma_7_1_payload,
  output              o_sigma_7_2_valid,
  input               o_sigma_7_2_ready,
  output     [31:0]   o_sigma_7_2_payload,
  output              o_sigma_7_3_valid,
  input               o_sigma_7_3_ready,
  output     [31:0]   o_sigma_7_3_payload,
  output              o_sigma_7_4_valid,
  input               o_sigma_7_4_ready,
  output     [31:0]   o_sigma_7_4_payload,
  output              o_sigma_7_5_valid,
  input               o_sigma_7_5_ready,
  output     [31:0]   o_sigma_7_5_payload,
  output              o_sigma_7_6_valid,
  input               o_sigma_7_6_ready,
  output     [31:0]   o_sigma_7_6_payload,
  output              o_sigma_7_7_valid,
  input               o_sigma_7_7_ready,
  output     [31:0]   o_sigma_7_7_payload,
  input               clk,
  input               reset
);
  wire       [31:0]   read_req_dt_ramrd_addr;
  wire                read_req_dt_ramrd_en;
  wire       [31:0]   read_req_wt_ramrd_0_addr;
  wire                read_req_wt_ramrd_0_en;
  wire       [31:0]   read_req_wt_ramrd_1_addr;
  wire                read_req_wt_ramrd_1_en;
  wire       [31:0]   read_req_wt_ramrd_2_addr;
  wire                read_req_wt_ramrd_2_en;
  wire       [31:0]   read_req_wt_ramrd_3_addr;
  wire                read_req_wt_ramrd_3_en;
  wire       [31:0]   read_req_wt_ramrd_4_addr;
  wire                read_req_wt_ramrd_4_en;
  wire       [31:0]   read_req_wt_ramrd_5_addr;
  wire                read_req_wt_ramrd_5_en;
  wire       [31:0]   read_req_wt_ramrd_6_addr;
  wire                read_req_wt_ramrd_6_en;
  wire       [31:0]   read_req_wt_ramrd_7_addr;
  wire                read_req_wt_ramrd_7_en;
  wire                read_req_o_ft_valid;
  wire       [255:0]  read_req_o_ft_payload;
  wire                read_req_o_wt_0_valid;
  wire       [255:0]  read_req_o_wt_0_payload;
  wire                read_req_o_wt_1_valid;
  wire       [255:0]  read_req_o_wt_1_payload;
  wire                read_req_o_wt_2_valid;
  wire       [255:0]  read_req_o_wt_2_payload;
  wire                read_req_o_wt_3_valid;
  wire       [255:0]  read_req_o_wt_3_payload;
  wire                read_req_o_wt_4_valid;
  wire       [255:0]  read_req_o_wt_4_payload;
  wire                read_req_o_wt_5_valid;
  wire       [255:0]  read_req_o_wt_5_payload;
  wire                read_req_o_wt_6_valid;
  wire       [255:0]  read_req_o_wt_6_payload;
  wire                read_req_o_wt_7_valid;
  wire       [255:0]  read_req_o_wt_7_payload;
  wire                data_cvt_io_i_ft_ready;
  wire                data_cvt_io_i_wt_0_ready;
  wire                data_cvt_io_i_wt_1_ready;
  wire                data_cvt_io_i_wt_2_ready;
  wire                data_cvt_io_i_wt_3_ready;
  wire                data_cvt_io_i_wt_4_ready;
  wire                data_cvt_io_i_wt_5_ready;
  wire                data_cvt_io_i_wt_6_ready;
  wire                data_cvt_io_i_wt_7_ready;
  wire                data_cvt_io_o_ft_0_valid;
  wire       [31:0]   data_cvt_io_o_ft_0_payload;
  wire                data_cvt_io_o_ft_1_valid;
  wire       [31:0]   data_cvt_io_o_ft_1_payload;
  wire                data_cvt_io_o_ft_2_valid;
  wire       [31:0]   data_cvt_io_o_ft_2_payload;
  wire                data_cvt_io_o_ft_3_valid;
  wire       [31:0]   data_cvt_io_o_ft_3_payload;
  wire                data_cvt_io_o_ft_4_valid;
  wire       [31:0]   data_cvt_io_o_ft_4_payload;
  wire                data_cvt_io_o_ft_5_valid;
  wire       [31:0]   data_cvt_io_o_ft_5_payload;
  wire                data_cvt_io_o_ft_6_valid;
  wire       [31:0]   data_cvt_io_o_ft_6_payload;
  wire                data_cvt_io_o_ft_7_valid;
  wire       [31:0]   data_cvt_io_o_ft_7_payload;
  wire                data_cvt_io_o_wt_0_0_valid;
  wire       [31:0]   data_cvt_io_o_wt_0_0_payload;
  wire                data_cvt_io_o_wt_0_1_valid;
  wire       [31:0]   data_cvt_io_o_wt_0_1_payload;
  wire                data_cvt_io_o_wt_0_2_valid;
  wire       [31:0]   data_cvt_io_o_wt_0_2_payload;
  wire                data_cvt_io_o_wt_0_3_valid;
  wire       [31:0]   data_cvt_io_o_wt_0_3_payload;
  wire                data_cvt_io_o_wt_0_4_valid;
  wire       [31:0]   data_cvt_io_o_wt_0_4_payload;
  wire                data_cvt_io_o_wt_0_5_valid;
  wire       [31:0]   data_cvt_io_o_wt_0_5_payload;
  wire                data_cvt_io_o_wt_0_6_valid;
  wire       [31:0]   data_cvt_io_o_wt_0_6_payload;
  wire                data_cvt_io_o_wt_0_7_valid;
  wire       [31:0]   data_cvt_io_o_wt_0_7_payload;
  wire                data_cvt_io_o_wt_1_0_valid;
  wire       [31:0]   data_cvt_io_o_wt_1_0_payload;
  wire                data_cvt_io_o_wt_1_1_valid;
  wire       [31:0]   data_cvt_io_o_wt_1_1_payload;
  wire                data_cvt_io_o_wt_1_2_valid;
  wire       [31:0]   data_cvt_io_o_wt_1_2_payload;
  wire                data_cvt_io_o_wt_1_3_valid;
  wire       [31:0]   data_cvt_io_o_wt_1_3_payload;
  wire                data_cvt_io_o_wt_1_4_valid;
  wire       [31:0]   data_cvt_io_o_wt_1_4_payload;
  wire                data_cvt_io_o_wt_1_5_valid;
  wire       [31:0]   data_cvt_io_o_wt_1_5_payload;
  wire                data_cvt_io_o_wt_1_6_valid;
  wire       [31:0]   data_cvt_io_o_wt_1_6_payload;
  wire                data_cvt_io_o_wt_1_7_valid;
  wire       [31:0]   data_cvt_io_o_wt_1_7_payload;
  wire                data_cvt_io_o_wt_2_0_valid;
  wire       [31:0]   data_cvt_io_o_wt_2_0_payload;
  wire                data_cvt_io_o_wt_2_1_valid;
  wire       [31:0]   data_cvt_io_o_wt_2_1_payload;
  wire                data_cvt_io_o_wt_2_2_valid;
  wire       [31:0]   data_cvt_io_o_wt_2_2_payload;
  wire                data_cvt_io_o_wt_2_3_valid;
  wire       [31:0]   data_cvt_io_o_wt_2_3_payload;
  wire                data_cvt_io_o_wt_2_4_valid;
  wire       [31:0]   data_cvt_io_o_wt_2_4_payload;
  wire                data_cvt_io_o_wt_2_5_valid;
  wire       [31:0]   data_cvt_io_o_wt_2_5_payload;
  wire                data_cvt_io_o_wt_2_6_valid;
  wire       [31:0]   data_cvt_io_o_wt_2_6_payload;
  wire                data_cvt_io_o_wt_2_7_valid;
  wire       [31:0]   data_cvt_io_o_wt_2_7_payload;
  wire                data_cvt_io_o_wt_3_0_valid;
  wire       [31:0]   data_cvt_io_o_wt_3_0_payload;
  wire                data_cvt_io_o_wt_3_1_valid;
  wire       [31:0]   data_cvt_io_o_wt_3_1_payload;
  wire                data_cvt_io_o_wt_3_2_valid;
  wire       [31:0]   data_cvt_io_o_wt_3_2_payload;
  wire                data_cvt_io_o_wt_3_3_valid;
  wire       [31:0]   data_cvt_io_o_wt_3_3_payload;
  wire                data_cvt_io_o_wt_3_4_valid;
  wire       [31:0]   data_cvt_io_o_wt_3_4_payload;
  wire                data_cvt_io_o_wt_3_5_valid;
  wire       [31:0]   data_cvt_io_o_wt_3_5_payload;
  wire                data_cvt_io_o_wt_3_6_valid;
  wire       [31:0]   data_cvt_io_o_wt_3_6_payload;
  wire                data_cvt_io_o_wt_3_7_valid;
  wire       [31:0]   data_cvt_io_o_wt_3_7_payload;
  wire                data_cvt_io_o_wt_4_0_valid;
  wire       [31:0]   data_cvt_io_o_wt_4_0_payload;
  wire                data_cvt_io_o_wt_4_1_valid;
  wire       [31:0]   data_cvt_io_o_wt_4_1_payload;
  wire                data_cvt_io_o_wt_4_2_valid;
  wire       [31:0]   data_cvt_io_o_wt_4_2_payload;
  wire                data_cvt_io_o_wt_4_3_valid;
  wire       [31:0]   data_cvt_io_o_wt_4_3_payload;
  wire                data_cvt_io_o_wt_4_4_valid;
  wire       [31:0]   data_cvt_io_o_wt_4_4_payload;
  wire                data_cvt_io_o_wt_4_5_valid;
  wire       [31:0]   data_cvt_io_o_wt_4_5_payload;
  wire                data_cvt_io_o_wt_4_6_valid;
  wire       [31:0]   data_cvt_io_o_wt_4_6_payload;
  wire                data_cvt_io_o_wt_4_7_valid;
  wire       [31:0]   data_cvt_io_o_wt_4_7_payload;
  wire                data_cvt_io_o_wt_5_0_valid;
  wire       [31:0]   data_cvt_io_o_wt_5_0_payload;
  wire                data_cvt_io_o_wt_5_1_valid;
  wire       [31:0]   data_cvt_io_o_wt_5_1_payload;
  wire                data_cvt_io_o_wt_5_2_valid;
  wire       [31:0]   data_cvt_io_o_wt_5_2_payload;
  wire                data_cvt_io_o_wt_5_3_valid;
  wire       [31:0]   data_cvt_io_o_wt_5_3_payload;
  wire                data_cvt_io_o_wt_5_4_valid;
  wire       [31:0]   data_cvt_io_o_wt_5_4_payload;
  wire                data_cvt_io_o_wt_5_5_valid;
  wire       [31:0]   data_cvt_io_o_wt_5_5_payload;
  wire                data_cvt_io_o_wt_5_6_valid;
  wire       [31:0]   data_cvt_io_o_wt_5_6_payload;
  wire                data_cvt_io_o_wt_5_7_valid;
  wire       [31:0]   data_cvt_io_o_wt_5_7_payload;
  wire                data_cvt_io_o_wt_6_0_valid;
  wire       [31:0]   data_cvt_io_o_wt_6_0_payload;
  wire                data_cvt_io_o_wt_6_1_valid;
  wire       [31:0]   data_cvt_io_o_wt_6_1_payload;
  wire                data_cvt_io_o_wt_6_2_valid;
  wire       [31:0]   data_cvt_io_o_wt_6_2_payload;
  wire                data_cvt_io_o_wt_6_3_valid;
  wire       [31:0]   data_cvt_io_o_wt_6_3_payload;
  wire                data_cvt_io_o_wt_6_4_valid;
  wire       [31:0]   data_cvt_io_o_wt_6_4_payload;
  wire                data_cvt_io_o_wt_6_5_valid;
  wire       [31:0]   data_cvt_io_o_wt_6_5_payload;
  wire                data_cvt_io_o_wt_6_6_valid;
  wire       [31:0]   data_cvt_io_o_wt_6_6_payload;
  wire                data_cvt_io_o_wt_6_7_valid;
  wire       [31:0]   data_cvt_io_o_wt_6_7_payload;
  wire                data_cvt_io_o_wt_7_0_valid;
  wire       [31:0]   data_cvt_io_o_wt_7_0_payload;
  wire                data_cvt_io_o_wt_7_1_valid;
  wire       [31:0]   data_cvt_io_o_wt_7_1_payload;
  wire                data_cvt_io_o_wt_7_2_valid;
  wire       [31:0]   data_cvt_io_o_wt_7_2_payload;
  wire                data_cvt_io_o_wt_7_3_valid;
  wire       [31:0]   data_cvt_io_o_wt_7_3_payload;
  wire                data_cvt_io_o_wt_7_4_valid;
  wire       [31:0]   data_cvt_io_o_wt_7_4_payload;
  wire                data_cvt_io_o_wt_7_5_valid;
  wire       [31:0]   data_cvt_io_o_wt_7_5_payload;
  wire                data_cvt_io_o_wt_7_6_valid;
  wire       [31:0]   data_cvt_io_o_wt_7_6_payload;
  wire                data_cvt_io_o_wt_7_7_valid;
  wire       [31:0]   data_cvt_io_o_wt_7_7_payload;
  wire                conv_core_s_ft_0_ready;
  wire                conv_core_s_ft_1_ready;
  wire                conv_core_s_ft_2_ready;
  wire                conv_core_s_ft_3_ready;
  wire                conv_core_s_ft_4_ready;
  wire                conv_core_s_ft_5_ready;
  wire                conv_core_s_ft_6_ready;
  wire                conv_core_s_ft_7_ready;
  wire                conv_core_s_wt_0_0_ready;
  wire                conv_core_s_wt_0_1_ready;
  wire                conv_core_s_wt_0_2_ready;
  wire                conv_core_s_wt_0_3_ready;
  wire                conv_core_s_wt_0_4_ready;
  wire                conv_core_s_wt_0_5_ready;
  wire                conv_core_s_wt_0_6_ready;
  wire                conv_core_s_wt_0_7_ready;
  wire                conv_core_s_wt_1_0_ready;
  wire                conv_core_s_wt_1_1_ready;
  wire                conv_core_s_wt_1_2_ready;
  wire                conv_core_s_wt_1_3_ready;
  wire                conv_core_s_wt_1_4_ready;
  wire                conv_core_s_wt_1_5_ready;
  wire                conv_core_s_wt_1_6_ready;
  wire                conv_core_s_wt_1_7_ready;
  wire                conv_core_s_wt_2_0_ready;
  wire                conv_core_s_wt_2_1_ready;
  wire                conv_core_s_wt_2_2_ready;
  wire                conv_core_s_wt_2_3_ready;
  wire                conv_core_s_wt_2_4_ready;
  wire                conv_core_s_wt_2_5_ready;
  wire                conv_core_s_wt_2_6_ready;
  wire                conv_core_s_wt_2_7_ready;
  wire                conv_core_s_wt_3_0_ready;
  wire                conv_core_s_wt_3_1_ready;
  wire                conv_core_s_wt_3_2_ready;
  wire                conv_core_s_wt_3_3_ready;
  wire                conv_core_s_wt_3_4_ready;
  wire                conv_core_s_wt_3_5_ready;
  wire                conv_core_s_wt_3_6_ready;
  wire                conv_core_s_wt_3_7_ready;
  wire                conv_core_s_wt_4_0_ready;
  wire                conv_core_s_wt_4_1_ready;
  wire                conv_core_s_wt_4_2_ready;
  wire                conv_core_s_wt_4_3_ready;
  wire                conv_core_s_wt_4_4_ready;
  wire                conv_core_s_wt_4_5_ready;
  wire                conv_core_s_wt_4_6_ready;
  wire                conv_core_s_wt_4_7_ready;
  wire                conv_core_s_wt_5_0_ready;
  wire                conv_core_s_wt_5_1_ready;
  wire                conv_core_s_wt_5_2_ready;
  wire                conv_core_s_wt_5_3_ready;
  wire                conv_core_s_wt_5_4_ready;
  wire                conv_core_s_wt_5_5_ready;
  wire                conv_core_s_wt_5_6_ready;
  wire                conv_core_s_wt_5_7_ready;
  wire                conv_core_s_wt_6_0_ready;
  wire                conv_core_s_wt_6_1_ready;
  wire                conv_core_s_wt_6_2_ready;
  wire                conv_core_s_wt_6_3_ready;
  wire                conv_core_s_wt_6_4_ready;
  wire                conv_core_s_wt_6_5_ready;
  wire                conv_core_s_wt_6_6_ready;
  wire                conv_core_s_wt_6_7_ready;
  wire                conv_core_s_wt_7_0_ready;
  wire                conv_core_s_wt_7_1_ready;
  wire                conv_core_s_wt_7_2_ready;
  wire                conv_core_s_wt_7_3_ready;
  wire                conv_core_s_wt_7_4_ready;
  wire                conv_core_s_wt_7_5_ready;
  wire                conv_core_s_wt_7_6_ready;
  wire                conv_core_s_wt_7_7_ready;
  wire                conv_core_s_out_0_0_valid;
  wire       [31:0]   conv_core_s_out_0_0_payload;
  wire                conv_core_s_out_0_1_valid;
  wire       [31:0]   conv_core_s_out_0_1_payload;
  wire                conv_core_s_out_0_2_valid;
  wire       [31:0]   conv_core_s_out_0_2_payload;
  wire                conv_core_s_out_0_3_valid;
  wire       [31:0]   conv_core_s_out_0_3_payload;
  wire                conv_core_s_out_0_4_valid;
  wire       [31:0]   conv_core_s_out_0_4_payload;
  wire                conv_core_s_out_0_5_valid;
  wire       [31:0]   conv_core_s_out_0_5_payload;
  wire                conv_core_s_out_0_6_valid;
  wire       [31:0]   conv_core_s_out_0_6_payload;
  wire                conv_core_s_out_0_7_valid;
  wire       [31:0]   conv_core_s_out_0_7_payload;
  wire                conv_core_s_out_1_0_valid;
  wire       [31:0]   conv_core_s_out_1_0_payload;
  wire                conv_core_s_out_1_1_valid;
  wire       [31:0]   conv_core_s_out_1_1_payload;
  wire                conv_core_s_out_1_2_valid;
  wire       [31:0]   conv_core_s_out_1_2_payload;
  wire                conv_core_s_out_1_3_valid;
  wire       [31:0]   conv_core_s_out_1_3_payload;
  wire                conv_core_s_out_1_4_valid;
  wire       [31:0]   conv_core_s_out_1_4_payload;
  wire                conv_core_s_out_1_5_valid;
  wire       [31:0]   conv_core_s_out_1_5_payload;
  wire                conv_core_s_out_1_6_valid;
  wire       [31:0]   conv_core_s_out_1_6_payload;
  wire                conv_core_s_out_1_7_valid;
  wire       [31:0]   conv_core_s_out_1_7_payload;
  wire                conv_core_s_out_2_0_valid;
  wire       [31:0]   conv_core_s_out_2_0_payload;
  wire                conv_core_s_out_2_1_valid;
  wire       [31:0]   conv_core_s_out_2_1_payload;
  wire                conv_core_s_out_2_2_valid;
  wire       [31:0]   conv_core_s_out_2_2_payload;
  wire                conv_core_s_out_2_3_valid;
  wire       [31:0]   conv_core_s_out_2_3_payload;
  wire                conv_core_s_out_2_4_valid;
  wire       [31:0]   conv_core_s_out_2_4_payload;
  wire                conv_core_s_out_2_5_valid;
  wire       [31:0]   conv_core_s_out_2_5_payload;
  wire                conv_core_s_out_2_6_valid;
  wire       [31:0]   conv_core_s_out_2_6_payload;
  wire                conv_core_s_out_2_7_valid;
  wire       [31:0]   conv_core_s_out_2_7_payload;
  wire                conv_core_s_out_3_0_valid;
  wire       [31:0]   conv_core_s_out_3_0_payload;
  wire                conv_core_s_out_3_1_valid;
  wire       [31:0]   conv_core_s_out_3_1_payload;
  wire                conv_core_s_out_3_2_valid;
  wire       [31:0]   conv_core_s_out_3_2_payload;
  wire                conv_core_s_out_3_3_valid;
  wire       [31:0]   conv_core_s_out_3_3_payload;
  wire                conv_core_s_out_3_4_valid;
  wire       [31:0]   conv_core_s_out_3_4_payload;
  wire                conv_core_s_out_3_5_valid;
  wire       [31:0]   conv_core_s_out_3_5_payload;
  wire                conv_core_s_out_3_6_valid;
  wire       [31:0]   conv_core_s_out_3_6_payload;
  wire                conv_core_s_out_3_7_valid;
  wire       [31:0]   conv_core_s_out_3_7_payload;
  wire                conv_core_s_out_4_0_valid;
  wire       [31:0]   conv_core_s_out_4_0_payload;
  wire                conv_core_s_out_4_1_valid;
  wire       [31:0]   conv_core_s_out_4_1_payload;
  wire                conv_core_s_out_4_2_valid;
  wire       [31:0]   conv_core_s_out_4_2_payload;
  wire                conv_core_s_out_4_3_valid;
  wire       [31:0]   conv_core_s_out_4_3_payload;
  wire                conv_core_s_out_4_4_valid;
  wire       [31:0]   conv_core_s_out_4_4_payload;
  wire                conv_core_s_out_4_5_valid;
  wire       [31:0]   conv_core_s_out_4_5_payload;
  wire                conv_core_s_out_4_6_valid;
  wire       [31:0]   conv_core_s_out_4_6_payload;
  wire                conv_core_s_out_4_7_valid;
  wire       [31:0]   conv_core_s_out_4_7_payload;
  wire                conv_core_s_out_5_0_valid;
  wire       [31:0]   conv_core_s_out_5_0_payload;
  wire                conv_core_s_out_5_1_valid;
  wire       [31:0]   conv_core_s_out_5_1_payload;
  wire                conv_core_s_out_5_2_valid;
  wire       [31:0]   conv_core_s_out_5_2_payload;
  wire                conv_core_s_out_5_3_valid;
  wire       [31:0]   conv_core_s_out_5_3_payload;
  wire                conv_core_s_out_5_4_valid;
  wire       [31:0]   conv_core_s_out_5_4_payload;
  wire                conv_core_s_out_5_5_valid;
  wire       [31:0]   conv_core_s_out_5_5_payload;
  wire                conv_core_s_out_5_6_valid;
  wire       [31:0]   conv_core_s_out_5_6_payload;
  wire                conv_core_s_out_5_7_valid;
  wire       [31:0]   conv_core_s_out_5_7_payload;
  wire                conv_core_s_out_6_0_valid;
  wire       [31:0]   conv_core_s_out_6_0_payload;
  wire                conv_core_s_out_6_1_valid;
  wire       [31:0]   conv_core_s_out_6_1_payload;
  wire                conv_core_s_out_6_2_valid;
  wire       [31:0]   conv_core_s_out_6_2_payload;
  wire                conv_core_s_out_6_3_valid;
  wire       [31:0]   conv_core_s_out_6_3_payload;
  wire                conv_core_s_out_6_4_valid;
  wire       [31:0]   conv_core_s_out_6_4_payload;
  wire                conv_core_s_out_6_5_valid;
  wire       [31:0]   conv_core_s_out_6_5_payload;
  wire                conv_core_s_out_6_6_valid;
  wire       [31:0]   conv_core_s_out_6_6_payload;
  wire                conv_core_s_out_6_7_valid;
  wire       [31:0]   conv_core_s_out_6_7_payload;
  wire                conv_core_s_out_7_0_valid;
  wire       [31:0]   conv_core_s_out_7_0_payload;
  wire                conv_core_s_out_7_1_valid;
  wire       [31:0]   conv_core_s_out_7_1_payload;
  wire                conv_core_s_out_7_2_valid;
  wire       [31:0]   conv_core_s_out_7_2_payload;
  wire                conv_core_s_out_7_3_valid;
  wire       [31:0]   conv_core_s_out_7_3_payload;
  wire                conv_core_s_out_7_4_valid;
  wire       [31:0]   conv_core_s_out_7_4_payload;
  wire                conv_core_s_out_7_5_valid;
  wire       [31:0]   conv_core_s_out_7_5_payload;
  wire                conv_core_s_out_7_6_valid;
  wire       [31:0]   conv_core_s_out_7_6_payload;
  wire                conv_core_s_out_7_7_valid;
  wire       [31:0]   conv_core_s_out_7_7_payload;
  wire                mux_io_indata_0_0_ready;
  wire                mux_io_indata_0_1_ready;
  wire                mux_io_indata_0_2_ready;
  wire                mux_io_indata_0_3_ready;
  wire                mux_io_indata_0_4_ready;
  wire                mux_io_indata_0_5_ready;
  wire                mux_io_indata_0_6_ready;
  wire                mux_io_indata_0_7_ready;
  wire                mux_io_indata_1_0_ready;
  wire                mux_io_indata_1_1_ready;
  wire                mux_io_indata_1_2_ready;
  wire                mux_io_indata_1_3_ready;
  wire                mux_io_indata_1_4_ready;
  wire                mux_io_indata_1_5_ready;
  wire                mux_io_indata_1_6_ready;
  wire                mux_io_indata_1_7_ready;
  wire                mux_io_indata_2_0_ready;
  wire                mux_io_indata_2_1_ready;
  wire                mux_io_indata_2_2_ready;
  wire                mux_io_indata_2_3_ready;
  wire                mux_io_indata_2_4_ready;
  wire                mux_io_indata_2_5_ready;
  wire                mux_io_indata_2_6_ready;
  wire                mux_io_indata_2_7_ready;
  wire                mux_io_indata_3_0_ready;
  wire                mux_io_indata_3_1_ready;
  wire                mux_io_indata_3_2_ready;
  wire                mux_io_indata_3_3_ready;
  wire                mux_io_indata_3_4_ready;
  wire                mux_io_indata_3_5_ready;
  wire                mux_io_indata_3_6_ready;
  wire                mux_io_indata_3_7_ready;
  wire                mux_io_indata_4_0_ready;
  wire                mux_io_indata_4_1_ready;
  wire                mux_io_indata_4_2_ready;
  wire                mux_io_indata_4_3_ready;
  wire                mux_io_indata_4_4_ready;
  wire                mux_io_indata_4_5_ready;
  wire                mux_io_indata_4_6_ready;
  wire                mux_io_indata_4_7_ready;
  wire                mux_io_indata_5_0_ready;
  wire                mux_io_indata_5_1_ready;
  wire                mux_io_indata_5_2_ready;
  wire                mux_io_indata_5_3_ready;
  wire                mux_io_indata_5_4_ready;
  wire                mux_io_indata_5_5_ready;
  wire                mux_io_indata_5_6_ready;
  wire                mux_io_indata_5_7_ready;
  wire                mux_io_indata_6_0_ready;
  wire                mux_io_indata_6_1_ready;
  wire                mux_io_indata_6_2_ready;
  wire                mux_io_indata_6_3_ready;
  wire                mux_io_indata_6_4_ready;
  wire                mux_io_indata_6_5_ready;
  wire                mux_io_indata_6_6_ready;
  wire                mux_io_indata_6_7_ready;
  wire                mux_io_indata_7_0_ready;
  wire                mux_io_indata_7_1_ready;
  wire                mux_io_indata_7_2_ready;
  wire                mux_io_indata_7_3_ready;
  wire                mux_io_indata_7_4_ready;
  wire                mux_io_indata_7_5_ready;
  wire                mux_io_indata_7_6_ready;
  wire                mux_io_indata_7_7_ready;
  wire                mux_io_o_delta_wt_0_0_valid;
  wire       [31:0]   mux_io_o_delta_wt_0_0_payload;
  wire                mux_io_o_delta_wt_0_1_valid;
  wire       [31:0]   mux_io_o_delta_wt_0_1_payload;
  wire                mux_io_o_delta_wt_0_2_valid;
  wire       [31:0]   mux_io_o_delta_wt_0_2_payload;
  wire                mux_io_o_delta_wt_0_3_valid;
  wire       [31:0]   mux_io_o_delta_wt_0_3_payload;
  wire                mux_io_o_delta_wt_0_4_valid;
  wire       [31:0]   mux_io_o_delta_wt_0_4_payload;
  wire                mux_io_o_delta_wt_0_5_valid;
  wire       [31:0]   mux_io_o_delta_wt_0_5_payload;
  wire                mux_io_o_delta_wt_0_6_valid;
  wire       [31:0]   mux_io_o_delta_wt_0_6_payload;
  wire                mux_io_o_delta_wt_0_7_valid;
  wire       [31:0]   mux_io_o_delta_wt_0_7_payload;
  wire                mux_io_o_delta_wt_1_0_valid;
  wire       [31:0]   mux_io_o_delta_wt_1_0_payload;
  wire                mux_io_o_delta_wt_1_1_valid;
  wire       [31:0]   mux_io_o_delta_wt_1_1_payload;
  wire                mux_io_o_delta_wt_1_2_valid;
  wire       [31:0]   mux_io_o_delta_wt_1_2_payload;
  wire                mux_io_o_delta_wt_1_3_valid;
  wire       [31:0]   mux_io_o_delta_wt_1_3_payload;
  wire                mux_io_o_delta_wt_1_4_valid;
  wire       [31:0]   mux_io_o_delta_wt_1_4_payload;
  wire                mux_io_o_delta_wt_1_5_valid;
  wire       [31:0]   mux_io_o_delta_wt_1_5_payload;
  wire                mux_io_o_delta_wt_1_6_valid;
  wire       [31:0]   mux_io_o_delta_wt_1_6_payload;
  wire                mux_io_o_delta_wt_1_7_valid;
  wire       [31:0]   mux_io_o_delta_wt_1_7_payload;
  wire                mux_io_o_delta_wt_2_0_valid;
  wire       [31:0]   mux_io_o_delta_wt_2_0_payload;
  wire                mux_io_o_delta_wt_2_1_valid;
  wire       [31:0]   mux_io_o_delta_wt_2_1_payload;
  wire                mux_io_o_delta_wt_2_2_valid;
  wire       [31:0]   mux_io_o_delta_wt_2_2_payload;
  wire                mux_io_o_delta_wt_2_3_valid;
  wire       [31:0]   mux_io_o_delta_wt_2_3_payload;
  wire                mux_io_o_delta_wt_2_4_valid;
  wire       [31:0]   mux_io_o_delta_wt_2_4_payload;
  wire                mux_io_o_delta_wt_2_5_valid;
  wire       [31:0]   mux_io_o_delta_wt_2_5_payload;
  wire                mux_io_o_delta_wt_2_6_valid;
  wire       [31:0]   mux_io_o_delta_wt_2_6_payload;
  wire                mux_io_o_delta_wt_2_7_valid;
  wire       [31:0]   mux_io_o_delta_wt_2_7_payload;
  wire                mux_io_o_delta_wt_3_0_valid;
  wire       [31:0]   mux_io_o_delta_wt_3_0_payload;
  wire                mux_io_o_delta_wt_3_1_valid;
  wire       [31:0]   mux_io_o_delta_wt_3_1_payload;
  wire                mux_io_o_delta_wt_3_2_valid;
  wire       [31:0]   mux_io_o_delta_wt_3_2_payload;
  wire                mux_io_o_delta_wt_3_3_valid;
  wire       [31:0]   mux_io_o_delta_wt_3_3_payload;
  wire                mux_io_o_delta_wt_3_4_valid;
  wire       [31:0]   mux_io_o_delta_wt_3_4_payload;
  wire                mux_io_o_delta_wt_3_5_valid;
  wire       [31:0]   mux_io_o_delta_wt_3_5_payload;
  wire                mux_io_o_delta_wt_3_6_valid;
  wire       [31:0]   mux_io_o_delta_wt_3_6_payload;
  wire                mux_io_o_delta_wt_3_7_valid;
  wire       [31:0]   mux_io_o_delta_wt_3_7_payload;
  wire                mux_io_o_delta_wt_4_0_valid;
  wire       [31:0]   mux_io_o_delta_wt_4_0_payload;
  wire                mux_io_o_delta_wt_4_1_valid;
  wire       [31:0]   mux_io_o_delta_wt_4_1_payload;
  wire                mux_io_o_delta_wt_4_2_valid;
  wire       [31:0]   mux_io_o_delta_wt_4_2_payload;
  wire                mux_io_o_delta_wt_4_3_valid;
  wire       [31:0]   mux_io_o_delta_wt_4_3_payload;
  wire                mux_io_o_delta_wt_4_4_valid;
  wire       [31:0]   mux_io_o_delta_wt_4_4_payload;
  wire                mux_io_o_delta_wt_4_5_valid;
  wire       [31:0]   mux_io_o_delta_wt_4_5_payload;
  wire                mux_io_o_delta_wt_4_6_valid;
  wire       [31:0]   mux_io_o_delta_wt_4_6_payload;
  wire                mux_io_o_delta_wt_4_7_valid;
  wire       [31:0]   mux_io_o_delta_wt_4_7_payload;
  wire                mux_io_o_delta_wt_5_0_valid;
  wire       [31:0]   mux_io_o_delta_wt_5_0_payload;
  wire                mux_io_o_delta_wt_5_1_valid;
  wire       [31:0]   mux_io_o_delta_wt_5_1_payload;
  wire                mux_io_o_delta_wt_5_2_valid;
  wire       [31:0]   mux_io_o_delta_wt_5_2_payload;
  wire                mux_io_o_delta_wt_5_3_valid;
  wire       [31:0]   mux_io_o_delta_wt_5_3_payload;
  wire                mux_io_o_delta_wt_5_4_valid;
  wire       [31:0]   mux_io_o_delta_wt_5_4_payload;
  wire                mux_io_o_delta_wt_5_5_valid;
  wire       [31:0]   mux_io_o_delta_wt_5_5_payload;
  wire                mux_io_o_delta_wt_5_6_valid;
  wire       [31:0]   mux_io_o_delta_wt_5_6_payload;
  wire                mux_io_o_delta_wt_5_7_valid;
  wire       [31:0]   mux_io_o_delta_wt_5_7_payload;
  wire                mux_io_o_delta_wt_6_0_valid;
  wire       [31:0]   mux_io_o_delta_wt_6_0_payload;
  wire                mux_io_o_delta_wt_6_1_valid;
  wire       [31:0]   mux_io_o_delta_wt_6_1_payload;
  wire                mux_io_o_delta_wt_6_2_valid;
  wire       [31:0]   mux_io_o_delta_wt_6_2_payload;
  wire                mux_io_o_delta_wt_6_3_valid;
  wire       [31:0]   mux_io_o_delta_wt_6_3_payload;
  wire                mux_io_o_delta_wt_6_4_valid;
  wire       [31:0]   mux_io_o_delta_wt_6_4_payload;
  wire                mux_io_o_delta_wt_6_5_valid;
  wire       [31:0]   mux_io_o_delta_wt_6_5_payload;
  wire                mux_io_o_delta_wt_6_6_valid;
  wire       [31:0]   mux_io_o_delta_wt_6_6_payload;
  wire                mux_io_o_delta_wt_6_7_valid;
  wire       [31:0]   mux_io_o_delta_wt_6_7_payload;
  wire                mux_io_o_delta_wt_7_0_valid;
  wire       [31:0]   mux_io_o_delta_wt_7_0_payload;
  wire                mux_io_o_delta_wt_7_1_valid;
  wire       [31:0]   mux_io_o_delta_wt_7_1_payload;
  wire                mux_io_o_delta_wt_7_2_valid;
  wire       [31:0]   mux_io_o_delta_wt_7_2_payload;
  wire                mux_io_o_delta_wt_7_3_valid;
  wire       [31:0]   mux_io_o_delta_wt_7_3_payload;
  wire                mux_io_o_delta_wt_7_4_valid;
  wire       [31:0]   mux_io_o_delta_wt_7_4_payload;
  wire                mux_io_o_delta_wt_7_5_valid;
  wire       [31:0]   mux_io_o_delta_wt_7_5_payload;
  wire                mux_io_o_delta_wt_7_6_valid;
  wire       [31:0]   mux_io_o_delta_wt_7_6_payload;
  wire                mux_io_o_delta_wt_7_7_valid;
  wire       [31:0]   mux_io_o_delta_wt_7_7_payload;
  wire                mux_io_o_sigma_0_0_valid;
  wire       [31:0]   mux_io_o_sigma_0_0_payload;
  wire                mux_io_o_sigma_0_1_valid;
  wire       [31:0]   mux_io_o_sigma_0_1_payload;
  wire                mux_io_o_sigma_0_2_valid;
  wire       [31:0]   mux_io_o_sigma_0_2_payload;
  wire                mux_io_o_sigma_0_3_valid;
  wire       [31:0]   mux_io_o_sigma_0_3_payload;
  wire                mux_io_o_sigma_0_4_valid;
  wire       [31:0]   mux_io_o_sigma_0_4_payload;
  wire                mux_io_o_sigma_0_5_valid;
  wire       [31:0]   mux_io_o_sigma_0_5_payload;
  wire                mux_io_o_sigma_0_6_valid;
  wire       [31:0]   mux_io_o_sigma_0_6_payload;
  wire                mux_io_o_sigma_0_7_valid;
  wire       [31:0]   mux_io_o_sigma_0_7_payload;
  wire                mux_io_o_sigma_1_0_valid;
  wire       [31:0]   mux_io_o_sigma_1_0_payload;
  wire                mux_io_o_sigma_1_1_valid;
  wire       [31:0]   mux_io_o_sigma_1_1_payload;
  wire                mux_io_o_sigma_1_2_valid;
  wire       [31:0]   mux_io_o_sigma_1_2_payload;
  wire                mux_io_o_sigma_1_3_valid;
  wire       [31:0]   mux_io_o_sigma_1_3_payload;
  wire                mux_io_o_sigma_1_4_valid;
  wire       [31:0]   mux_io_o_sigma_1_4_payload;
  wire                mux_io_o_sigma_1_5_valid;
  wire       [31:0]   mux_io_o_sigma_1_5_payload;
  wire                mux_io_o_sigma_1_6_valid;
  wire       [31:0]   mux_io_o_sigma_1_6_payload;
  wire                mux_io_o_sigma_1_7_valid;
  wire       [31:0]   mux_io_o_sigma_1_7_payload;
  wire                mux_io_o_sigma_2_0_valid;
  wire       [31:0]   mux_io_o_sigma_2_0_payload;
  wire                mux_io_o_sigma_2_1_valid;
  wire       [31:0]   mux_io_o_sigma_2_1_payload;
  wire                mux_io_o_sigma_2_2_valid;
  wire       [31:0]   mux_io_o_sigma_2_2_payload;
  wire                mux_io_o_sigma_2_3_valid;
  wire       [31:0]   mux_io_o_sigma_2_3_payload;
  wire                mux_io_o_sigma_2_4_valid;
  wire       [31:0]   mux_io_o_sigma_2_4_payload;
  wire                mux_io_o_sigma_2_5_valid;
  wire       [31:0]   mux_io_o_sigma_2_5_payload;
  wire                mux_io_o_sigma_2_6_valid;
  wire       [31:0]   mux_io_o_sigma_2_6_payload;
  wire                mux_io_o_sigma_2_7_valid;
  wire       [31:0]   mux_io_o_sigma_2_7_payload;
  wire                mux_io_o_sigma_3_0_valid;
  wire       [31:0]   mux_io_o_sigma_3_0_payload;
  wire                mux_io_o_sigma_3_1_valid;
  wire       [31:0]   mux_io_o_sigma_3_1_payload;
  wire                mux_io_o_sigma_3_2_valid;
  wire       [31:0]   mux_io_o_sigma_3_2_payload;
  wire                mux_io_o_sigma_3_3_valid;
  wire       [31:0]   mux_io_o_sigma_3_3_payload;
  wire                mux_io_o_sigma_3_4_valid;
  wire       [31:0]   mux_io_o_sigma_3_4_payload;
  wire                mux_io_o_sigma_3_5_valid;
  wire       [31:0]   mux_io_o_sigma_3_5_payload;
  wire                mux_io_o_sigma_3_6_valid;
  wire       [31:0]   mux_io_o_sigma_3_6_payload;
  wire                mux_io_o_sigma_3_7_valid;
  wire       [31:0]   mux_io_o_sigma_3_7_payload;
  wire                mux_io_o_sigma_4_0_valid;
  wire       [31:0]   mux_io_o_sigma_4_0_payload;
  wire                mux_io_o_sigma_4_1_valid;
  wire       [31:0]   mux_io_o_sigma_4_1_payload;
  wire                mux_io_o_sigma_4_2_valid;
  wire       [31:0]   mux_io_o_sigma_4_2_payload;
  wire                mux_io_o_sigma_4_3_valid;
  wire       [31:0]   mux_io_o_sigma_4_3_payload;
  wire                mux_io_o_sigma_4_4_valid;
  wire       [31:0]   mux_io_o_sigma_4_4_payload;
  wire                mux_io_o_sigma_4_5_valid;
  wire       [31:0]   mux_io_o_sigma_4_5_payload;
  wire                mux_io_o_sigma_4_6_valid;
  wire       [31:0]   mux_io_o_sigma_4_6_payload;
  wire                mux_io_o_sigma_4_7_valid;
  wire       [31:0]   mux_io_o_sigma_4_7_payload;
  wire                mux_io_o_sigma_5_0_valid;
  wire       [31:0]   mux_io_o_sigma_5_0_payload;
  wire                mux_io_o_sigma_5_1_valid;
  wire       [31:0]   mux_io_o_sigma_5_1_payload;
  wire                mux_io_o_sigma_5_2_valid;
  wire       [31:0]   mux_io_o_sigma_5_2_payload;
  wire                mux_io_o_sigma_5_3_valid;
  wire       [31:0]   mux_io_o_sigma_5_3_payload;
  wire                mux_io_o_sigma_5_4_valid;
  wire       [31:0]   mux_io_o_sigma_5_4_payload;
  wire                mux_io_o_sigma_5_5_valid;
  wire       [31:0]   mux_io_o_sigma_5_5_payload;
  wire                mux_io_o_sigma_5_6_valid;
  wire       [31:0]   mux_io_o_sigma_5_6_payload;
  wire                mux_io_o_sigma_5_7_valid;
  wire       [31:0]   mux_io_o_sigma_5_7_payload;
  wire                mux_io_o_sigma_6_0_valid;
  wire       [31:0]   mux_io_o_sigma_6_0_payload;
  wire                mux_io_o_sigma_6_1_valid;
  wire       [31:0]   mux_io_o_sigma_6_1_payload;
  wire                mux_io_o_sigma_6_2_valid;
  wire       [31:0]   mux_io_o_sigma_6_2_payload;
  wire                mux_io_o_sigma_6_3_valid;
  wire       [31:0]   mux_io_o_sigma_6_3_payload;
  wire                mux_io_o_sigma_6_4_valid;
  wire       [31:0]   mux_io_o_sigma_6_4_payload;
  wire                mux_io_o_sigma_6_5_valid;
  wire       [31:0]   mux_io_o_sigma_6_5_payload;
  wire                mux_io_o_sigma_6_6_valid;
  wire       [31:0]   mux_io_o_sigma_6_6_payload;
  wire                mux_io_o_sigma_6_7_valid;
  wire       [31:0]   mux_io_o_sigma_6_7_payload;
  wire                mux_io_o_sigma_7_0_valid;
  wire       [31:0]   mux_io_o_sigma_7_0_payload;
  wire                mux_io_o_sigma_7_1_valid;
  wire       [31:0]   mux_io_o_sigma_7_1_payload;
  wire                mux_io_o_sigma_7_2_valid;
  wire       [31:0]   mux_io_o_sigma_7_2_payload;
  wire                mux_io_o_sigma_7_3_valid;
  wire       [31:0]   mux_io_o_sigma_7_3_payload;
  wire                mux_io_o_sigma_7_4_valid;
  wire       [31:0]   mux_io_o_sigma_7_4_payload;
  wire                mux_io_o_sigma_7_5_valid;
  wire       [31:0]   mux_io_o_sigma_7_5_payload;
  wire                mux_io_o_sigma_7_6_valid;
  wire       [31:0]   mux_io_o_sigma_7_6_payload;
  wire                mux_io_o_sigma_7_7_valid;
  wire       [31:0]   mux_io_o_sigma_7_7_payload;

  read_req4conv read_req (
    .cfg_fea_width      (cfg_fea_width             ), //i
    .cfg_fea_height     (cfg_fea_height            ), //i
    .cfg_fea_channel    (cfg_fea_channel           ), //i
    .cfg_wt_width       (cfg_wt_width              ), //i
    .cfg_wt_height      (cfg_wt_height             ), //i
    .cfg_wt_channel     (cfg_wt_channel            ), //i
    .cfg_kerNum         (cfg_kerNum                ), //i
    .cfg_o_width        (cfg_o_width               ), //i
    .cfg_o_height       (cfg_o_height              ), //i
    .cfg_o_channel      (cfg_o_channel             ), //i
    .cfg_top_pad        (cfg_top_pad               ), //i
    .cfg_bot_pad        (cfg_bot_pad               ), //i
    .cfg_left_pad       (cfg_left_pad              ), //i
    .cfg_right_pad      (cfg_right_pad             ), //i
    .cfg_dt_stridex     (cfg_dt_stridex            ), //i
    .cfg_dt_stridey     (cfg_dt_stridey            ), //i
    .cfg_wt_stridex     (cfg_wt_stridex            ), //i
    .cfg_wt_stridey     (cfg_wt_stridey            ), //i
    .cfg_par_acc_cnt    (cfg_par_acc_cnt           ), //i
    .dt_ramrd_addr      (read_req_dt_ramrd_addr    ), //o
    .dt_ramrd_data      (dt_ramrd_data             ), //i
    .dt_ramrd_en        (read_req_dt_ramrd_en      ), //o
    .wt_ramrd_0_addr    (read_req_wt_ramrd_0_addr  ), //o
    .wt_ramrd_0_data    (wt_ramrd_0_data           ), //i
    .wt_ramrd_0_en      (read_req_wt_ramrd_0_en    ), //o
    .wt_ramrd_1_addr    (read_req_wt_ramrd_1_addr  ), //o
    .wt_ramrd_1_data    (wt_ramrd_1_data           ), //i
    .wt_ramrd_1_en      (read_req_wt_ramrd_1_en    ), //o
    .wt_ramrd_2_addr    (read_req_wt_ramrd_2_addr  ), //o
    .wt_ramrd_2_data    (wt_ramrd_2_data           ), //i
    .wt_ramrd_2_en      (read_req_wt_ramrd_2_en    ), //o
    .wt_ramrd_3_addr    (read_req_wt_ramrd_3_addr  ), //o
    .wt_ramrd_3_data    (wt_ramrd_3_data           ), //i
    .wt_ramrd_3_en      (read_req_wt_ramrd_3_en    ), //o
    .wt_ramrd_4_addr    (read_req_wt_ramrd_4_addr  ), //o
    .wt_ramrd_4_data    (wt_ramrd_4_data           ), //i
    .wt_ramrd_4_en      (read_req_wt_ramrd_4_en    ), //o
    .wt_ramrd_5_addr    (read_req_wt_ramrd_5_addr  ), //o
    .wt_ramrd_5_data    (wt_ramrd_5_data           ), //i
    .wt_ramrd_5_en      (read_req_wt_ramrd_5_en    ), //o
    .wt_ramrd_6_addr    (read_req_wt_ramrd_6_addr  ), //o
    .wt_ramrd_6_data    (wt_ramrd_6_data           ), //i
    .wt_ramrd_6_en      (read_req_wt_ramrd_6_en    ), //o
    .wt_ramrd_7_addr    (read_req_wt_ramrd_7_addr  ), //o
    .wt_ramrd_7_data    (wt_ramrd_7_data           ), //i
    .wt_ramrd_7_en      (read_req_wt_ramrd_7_en    ), //o
    .o_ft_valid         (read_req_o_ft_valid       ), //o
    .o_ft_ready         (data_cvt_io_i_ft_ready    ), //i
    .o_ft_payload       (read_req_o_ft_payload     ), //o
    .o_wt_0_valid       (read_req_o_wt_0_valid     ), //o
    .o_wt_0_ready       (data_cvt_io_i_wt_0_ready  ), //i
    .o_wt_0_payload     (read_req_o_wt_0_payload   ), //o
    .o_wt_1_valid       (read_req_o_wt_1_valid     ), //o
    .o_wt_1_ready       (data_cvt_io_i_wt_1_ready  ), //i
    .o_wt_1_payload     (read_req_o_wt_1_payload   ), //o
    .o_wt_2_valid       (read_req_o_wt_2_valid     ), //o
    .o_wt_2_ready       (data_cvt_io_i_wt_2_ready  ), //i
    .o_wt_2_payload     (read_req_o_wt_2_payload   ), //o
    .o_wt_3_valid       (read_req_o_wt_3_valid     ), //o
    .o_wt_3_ready       (data_cvt_io_i_wt_3_ready  ), //i
    .o_wt_3_payload     (read_req_o_wt_3_payload   ), //o
    .o_wt_4_valid       (read_req_o_wt_4_valid     ), //o
    .o_wt_4_ready       (data_cvt_io_i_wt_4_ready  ), //i
    .o_wt_4_payload     (read_req_o_wt_4_payload   ), //o
    .o_wt_5_valid       (read_req_o_wt_5_valid     ), //o
    .o_wt_5_ready       (data_cvt_io_i_wt_5_ready  ), //i
    .o_wt_5_payload     (read_req_o_wt_5_payload   ), //o
    .o_wt_6_valid       (read_req_o_wt_6_valid     ), //o
    .o_wt_6_ready       (data_cvt_io_i_wt_6_ready  ), //i
    .o_wt_6_payload     (read_req_o_wt_6_payload   ), //o
    .o_wt_7_valid       (read_req_o_wt_7_valid     ), //o
    .o_wt_7_ready       (data_cvt_io_i_wt_7_ready  ), //i
    .o_wt_7_payload     (read_req_o_wt_7_payload   ), //o
    .read_enable        (ctrl_read_enable          ), //i
    .clk                (clk                       ), //i
    .reset              (reset                     )  //i
  );
  dataType_cvt_in data_cvt (
    .io_i_ft_valid          (read_req_o_ft_valid           ), //i
    .io_i_ft_ready          (data_cvt_io_i_ft_ready        ), //o
    .io_i_ft_payload        (read_req_o_ft_payload         ), //i
    .io_i_wt_0_valid        (read_req_o_wt_0_valid         ), //i
    .io_i_wt_0_ready        (data_cvt_io_i_wt_0_ready      ), //o
    .io_i_wt_0_payload      (read_req_o_wt_0_payload       ), //i
    .io_i_wt_1_valid        (read_req_o_wt_1_valid         ), //i
    .io_i_wt_1_ready        (data_cvt_io_i_wt_1_ready      ), //o
    .io_i_wt_1_payload      (read_req_o_wt_1_payload       ), //i
    .io_i_wt_2_valid        (read_req_o_wt_2_valid         ), //i
    .io_i_wt_2_ready        (data_cvt_io_i_wt_2_ready      ), //o
    .io_i_wt_2_payload      (read_req_o_wt_2_payload       ), //i
    .io_i_wt_3_valid        (read_req_o_wt_3_valid         ), //i
    .io_i_wt_3_ready        (data_cvt_io_i_wt_3_ready      ), //o
    .io_i_wt_3_payload      (read_req_o_wt_3_payload       ), //i
    .io_i_wt_4_valid        (read_req_o_wt_4_valid         ), //i
    .io_i_wt_4_ready        (data_cvt_io_i_wt_4_ready      ), //o
    .io_i_wt_4_payload      (read_req_o_wt_4_payload       ), //i
    .io_i_wt_5_valid        (read_req_o_wt_5_valid         ), //i
    .io_i_wt_5_ready        (data_cvt_io_i_wt_5_ready      ), //o
    .io_i_wt_5_payload      (read_req_o_wt_5_payload       ), //i
    .io_i_wt_6_valid        (read_req_o_wt_6_valid         ), //i
    .io_i_wt_6_ready        (data_cvt_io_i_wt_6_ready      ), //o
    .io_i_wt_6_payload      (read_req_o_wt_6_payload       ), //i
    .io_i_wt_7_valid        (read_req_o_wt_7_valid         ), //i
    .io_i_wt_7_ready        (data_cvt_io_i_wt_7_ready      ), //o
    .io_i_wt_7_payload      (read_req_o_wt_7_payload       ), //i
    .io_o_ft_0_valid        (data_cvt_io_o_ft_0_valid      ), //o
    .io_o_ft_0_ready        (conv_core_s_ft_0_ready        ), //i
    .io_o_ft_0_payload      (data_cvt_io_o_ft_0_payload    ), //o
    .io_o_ft_1_valid        (data_cvt_io_o_ft_1_valid      ), //o
    .io_o_ft_1_ready        (conv_core_s_ft_1_ready        ), //i
    .io_o_ft_1_payload      (data_cvt_io_o_ft_1_payload    ), //o
    .io_o_ft_2_valid        (data_cvt_io_o_ft_2_valid      ), //o
    .io_o_ft_2_ready        (conv_core_s_ft_2_ready        ), //i
    .io_o_ft_2_payload      (data_cvt_io_o_ft_2_payload    ), //o
    .io_o_ft_3_valid        (data_cvt_io_o_ft_3_valid      ), //o
    .io_o_ft_3_ready        (conv_core_s_ft_3_ready        ), //i
    .io_o_ft_3_payload      (data_cvt_io_o_ft_3_payload    ), //o
    .io_o_ft_4_valid        (data_cvt_io_o_ft_4_valid      ), //o
    .io_o_ft_4_ready        (conv_core_s_ft_4_ready        ), //i
    .io_o_ft_4_payload      (data_cvt_io_o_ft_4_payload    ), //o
    .io_o_ft_5_valid        (data_cvt_io_o_ft_5_valid      ), //o
    .io_o_ft_5_ready        (conv_core_s_ft_5_ready        ), //i
    .io_o_ft_5_payload      (data_cvt_io_o_ft_5_payload    ), //o
    .io_o_ft_6_valid        (data_cvt_io_o_ft_6_valid      ), //o
    .io_o_ft_6_ready        (conv_core_s_ft_6_ready        ), //i
    .io_o_ft_6_payload      (data_cvt_io_o_ft_6_payload    ), //o
    .io_o_ft_7_valid        (data_cvt_io_o_ft_7_valid      ), //o
    .io_o_ft_7_ready        (conv_core_s_ft_7_ready        ), //i
    .io_o_ft_7_payload      (data_cvt_io_o_ft_7_payload    ), //o
    .io_o_wt_0_0_valid      (data_cvt_io_o_wt_0_0_valid    ), //o
    .io_o_wt_0_0_ready      (conv_core_s_wt_0_0_ready      ), //i
    .io_o_wt_0_0_payload    (data_cvt_io_o_wt_0_0_payload  ), //o
    .io_o_wt_0_1_valid      (data_cvt_io_o_wt_0_1_valid    ), //o
    .io_o_wt_0_1_ready      (conv_core_s_wt_0_1_ready      ), //i
    .io_o_wt_0_1_payload    (data_cvt_io_o_wt_0_1_payload  ), //o
    .io_o_wt_0_2_valid      (data_cvt_io_o_wt_0_2_valid    ), //o
    .io_o_wt_0_2_ready      (conv_core_s_wt_0_2_ready      ), //i
    .io_o_wt_0_2_payload    (data_cvt_io_o_wt_0_2_payload  ), //o
    .io_o_wt_0_3_valid      (data_cvt_io_o_wt_0_3_valid    ), //o
    .io_o_wt_0_3_ready      (conv_core_s_wt_0_3_ready      ), //i
    .io_o_wt_0_3_payload    (data_cvt_io_o_wt_0_3_payload  ), //o
    .io_o_wt_0_4_valid      (data_cvt_io_o_wt_0_4_valid    ), //o
    .io_o_wt_0_4_ready      (conv_core_s_wt_0_4_ready      ), //i
    .io_o_wt_0_4_payload    (data_cvt_io_o_wt_0_4_payload  ), //o
    .io_o_wt_0_5_valid      (data_cvt_io_o_wt_0_5_valid    ), //o
    .io_o_wt_0_5_ready      (conv_core_s_wt_0_5_ready      ), //i
    .io_o_wt_0_5_payload    (data_cvt_io_o_wt_0_5_payload  ), //o
    .io_o_wt_0_6_valid      (data_cvt_io_o_wt_0_6_valid    ), //o
    .io_o_wt_0_6_ready      (conv_core_s_wt_0_6_ready      ), //i
    .io_o_wt_0_6_payload    (data_cvt_io_o_wt_0_6_payload  ), //o
    .io_o_wt_0_7_valid      (data_cvt_io_o_wt_0_7_valid    ), //o
    .io_o_wt_0_7_ready      (conv_core_s_wt_0_7_ready      ), //i
    .io_o_wt_0_7_payload    (data_cvt_io_o_wt_0_7_payload  ), //o
    .io_o_wt_1_0_valid      (data_cvt_io_o_wt_1_0_valid    ), //o
    .io_o_wt_1_0_ready      (conv_core_s_wt_1_0_ready      ), //i
    .io_o_wt_1_0_payload    (data_cvt_io_o_wt_1_0_payload  ), //o
    .io_o_wt_1_1_valid      (data_cvt_io_o_wt_1_1_valid    ), //o
    .io_o_wt_1_1_ready      (conv_core_s_wt_1_1_ready      ), //i
    .io_o_wt_1_1_payload    (data_cvt_io_o_wt_1_1_payload  ), //o
    .io_o_wt_1_2_valid      (data_cvt_io_o_wt_1_2_valid    ), //o
    .io_o_wt_1_2_ready      (conv_core_s_wt_1_2_ready      ), //i
    .io_o_wt_1_2_payload    (data_cvt_io_o_wt_1_2_payload  ), //o
    .io_o_wt_1_3_valid      (data_cvt_io_o_wt_1_3_valid    ), //o
    .io_o_wt_1_3_ready      (conv_core_s_wt_1_3_ready      ), //i
    .io_o_wt_1_3_payload    (data_cvt_io_o_wt_1_3_payload  ), //o
    .io_o_wt_1_4_valid      (data_cvt_io_o_wt_1_4_valid    ), //o
    .io_o_wt_1_4_ready      (conv_core_s_wt_1_4_ready      ), //i
    .io_o_wt_1_4_payload    (data_cvt_io_o_wt_1_4_payload  ), //o
    .io_o_wt_1_5_valid      (data_cvt_io_o_wt_1_5_valid    ), //o
    .io_o_wt_1_5_ready      (conv_core_s_wt_1_5_ready      ), //i
    .io_o_wt_1_5_payload    (data_cvt_io_o_wt_1_5_payload  ), //o
    .io_o_wt_1_6_valid      (data_cvt_io_o_wt_1_6_valid    ), //o
    .io_o_wt_1_6_ready      (conv_core_s_wt_1_6_ready      ), //i
    .io_o_wt_1_6_payload    (data_cvt_io_o_wt_1_6_payload  ), //o
    .io_o_wt_1_7_valid      (data_cvt_io_o_wt_1_7_valid    ), //o
    .io_o_wt_1_7_ready      (conv_core_s_wt_1_7_ready      ), //i
    .io_o_wt_1_7_payload    (data_cvt_io_o_wt_1_7_payload  ), //o
    .io_o_wt_2_0_valid      (data_cvt_io_o_wt_2_0_valid    ), //o
    .io_o_wt_2_0_ready      (conv_core_s_wt_2_0_ready      ), //i
    .io_o_wt_2_0_payload    (data_cvt_io_o_wt_2_0_payload  ), //o
    .io_o_wt_2_1_valid      (data_cvt_io_o_wt_2_1_valid    ), //o
    .io_o_wt_2_1_ready      (conv_core_s_wt_2_1_ready      ), //i
    .io_o_wt_2_1_payload    (data_cvt_io_o_wt_2_1_payload  ), //o
    .io_o_wt_2_2_valid      (data_cvt_io_o_wt_2_2_valid    ), //o
    .io_o_wt_2_2_ready      (conv_core_s_wt_2_2_ready      ), //i
    .io_o_wt_2_2_payload    (data_cvt_io_o_wt_2_2_payload  ), //o
    .io_o_wt_2_3_valid      (data_cvt_io_o_wt_2_3_valid    ), //o
    .io_o_wt_2_3_ready      (conv_core_s_wt_2_3_ready      ), //i
    .io_o_wt_2_3_payload    (data_cvt_io_o_wt_2_3_payload  ), //o
    .io_o_wt_2_4_valid      (data_cvt_io_o_wt_2_4_valid    ), //o
    .io_o_wt_2_4_ready      (conv_core_s_wt_2_4_ready      ), //i
    .io_o_wt_2_4_payload    (data_cvt_io_o_wt_2_4_payload  ), //o
    .io_o_wt_2_5_valid      (data_cvt_io_o_wt_2_5_valid    ), //o
    .io_o_wt_2_5_ready      (conv_core_s_wt_2_5_ready      ), //i
    .io_o_wt_2_5_payload    (data_cvt_io_o_wt_2_5_payload  ), //o
    .io_o_wt_2_6_valid      (data_cvt_io_o_wt_2_6_valid    ), //o
    .io_o_wt_2_6_ready      (conv_core_s_wt_2_6_ready      ), //i
    .io_o_wt_2_6_payload    (data_cvt_io_o_wt_2_6_payload  ), //o
    .io_o_wt_2_7_valid      (data_cvt_io_o_wt_2_7_valid    ), //o
    .io_o_wt_2_7_ready      (conv_core_s_wt_2_7_ready      ), //i
    .io_o_wt_2_7_payload    (data_cvt_io_o_wt_2_7_payload  ), //o
    .io_o_wt_3_0_valid      (data_cvt_io_o_wt_3_0_valid    ), //o
    .io_o_wt_3_0_ready      (conv_core_s_wt_3_0_ready      ), //i
    .io_o_wt_3_0_payload    (data_cvt_io_o_wt_3_0_payload  ), //o
    .io_o_wt_3_1_valid      (data_cvt_io_o_wt_3_1_valid    ), //o
    .io_o_wt_3_1_ready      (conv_core_s_wt_3_1_ready      ), //i
    .io_o_wt_3_1_payload    (data_cvt_io_o_wt_3_1_payload  ), //o
    .io_o_wt_3_2_valid      (data_cvt_io_o_wt_3_2_valid    ), //o
    .io_o_wt_3_2_ready      (conv_core_s_wt_3_2_ready      ), //i
    .io_o_wt_3_2_payload    (data_cvt_io_o_wt_3_2_payload  ), //o
    .io_o_wt_3_3_valid      (data_cvt_io_o_wt_3_3_valid    ), //o
    .io_o_wt_3_3_ready      (conv_core_s_wt_3_3_ready      ), //i
    .io_o_wt_3_3_payload    (data_cvt_io_o_wt_3_3_payload  ), //o
    .io_o_wt_3_4_valid      (data_cvt_io_o_wt_3_4_valid    ), //o
    .io_o_wt_3_4_ready      (conv_core_s_wt_3_4_ready      ), //i
    .io_o_wt_3_4_payload    (data_cvt_io_o_wt_3_4_payload  ), //o
    .io_o_wt_3_5_valid      (data_cvt_io_o_wt_3_5_valid    ), //o
    .io_o_wt_3_5_ready      (conv_core_s_wt_3_5_ready      ), //i
    .io_o_wt_3_5_payload    (data_cvt_io_o_wt_3_5_payload  ), //o
    .io_o_wt_3_6_valid      (data_cvt_io_o_wt_3_6_valid    ), //o
    .io_o_wt_3_6_ready      (conv_core_s_wt_3_6_ready      ), //i
    .io_o_wt_3_6_payload    (data_cvt_io_o_wt_3_6_payload  ), //o
    .io_o_wt_3_7_valid      (data_cvt_io_o_wt_3_7_valid    ), //o
    .io_o_wt_3_7_ready      (conv_core_s_wt_3_7_ready      ), //i
    .io_o_wt_3_7_payload    (data_cvt_io_o_wt_3_7_payload  ), //o
    .io_o_wt_4_0_valid      (data_cvt_io_o_wt_4_0_valid    ), //o
    .io_o_wt_4_0_ready      (conv_core_s_wt_4_0_ready      ), //i
    .io_o_wt_4_0_payload    (data_cvt_io_o_wt_4_0_payload  ), //o
    .io_o_wt_4_1_valid      (data_cvt_io_o_wt_4_1_valid    ), //o
    .io_o_wt_4_1_ready      (conv_core_s_wt_4_1_ready      ), //i
    .io_o_wt_4_1_payload    (data_cvt_io_o_wt_4_1_payload  ), //o
    .io_o_wt_4_2_valid      (data_cvt_io_o_wt_4_2_valid    ), //o
    .io_o_wt_4_2_ready      (conv_core_s_wt_4_2_ready      ), //i
    .io_o_wt_4_2_payload    (data_cvt_io_o_wt_4_2_payload  ), //o
    .io_o_wt_4_3_valid      (data_cvt_io_o_wt_4_3_valid    ), //o
    .io_o_wt_4_3_ready      (conv_core_s_wt_4_3_ready      ), //i
    .io_o_wt_4_3_payload    (data_cvt_io_o_wt_4_3_payload  ), //o
    .io_o_wt_4_4_valid      (data_cvt_io_o_wt_4_4_valid    ), //o
    .io_o_wt_4_4_ready      (conv_core_s_wt_4_4_ready      ), //i
    .io_o_wt_4_4_payload    (data_cvt_io_o_wt_4_4_payload  ), //o
    .io_o_wt_4_5_valid      (data_cvt_io_o_wt_4_5_valid    ), //o
    .io_o_wt_4_5_ready      (conv_core_s_wt_4_5_ready      ), //i
    .io_o_wt_4_5_payload    (data_cvt_io_o_wt_4_5_payload  ), //o
    .io_o_wt_4_6_valid      (data_cvt_io_o_wt_4_6_valid    ), //o
    .io_o_wt_4_6_ready      (conv_core_s_wt_4_6_ready      ), //i
    .io_o_wt_4_6_payload    (data_cvt_io_o_wt_4_6_payload  ), //o
    .io_o_wt_4_7_valid      (data_cvt_io_o_wt_4_7_valid    ), //o
    .io_o_wt_4_7_ready      (conv_core_s_wt_4_7_ready      ), //i
    .io_o_wt_4_7_payload    (data_cvt_io_o_wt_4_7_payload  ), //o
    .io_o_wt_5_0_valid      (data_cvt_io_o_wt_5_0_valid    ), //o
    .io_o_wt_5_0_ready      (conv_core_s_wt_5_0_ready      ), //i
    .io_o_wt_5_0_payload    (data_cvt_io_o_wt_5_0_payload  ), //o
    .io_o_wt_5_1_valid      (data_cvt_io_o_wt_5_1_valid    ), //o
    .io_o_wt_5_1_ready      (conv_core_s_wt_5_1_ready      ), //i
    .io_o_wt_5_1_payload    (data_cvt_io_o_wt_5_1_payload  ), //o
    .io_o_wt_5_2_valid      (data_cvt_io_o_wt_5_2_valid    ), //o
    .io_o_wt_5_2_ready      (conv_core_s_wt_5_2_ready      ), //i
    .io_o_wt_5_2_payload    (data_cvt_io_o_wt_5_2_payload  ), //o
    .io_o_wt_5_3_valid      (data_cvt_io_o_wt_5_3_valid    ), //o
    .io_o_wt_5_3_ready      (conv_core_s_wt_5_3_ready      ), //i
    .io_o_wt_5_3_payload    (data_cvt_io_o_wt_5_3_payload  ), //o
    .io_o_wt_5_4_valid      (data_cvt_io_o_wt_5_4_valid    ), //o
    .io_o_wt_5_4_ready      (conv_core_s_wt_5_4_ready      ), //i
    .io_o_wt_5_4_payload    (data_cvt_io_o_wt_5_4_payload  ), //o
    .io_o_wt_5_5_valid      (data_cvt_io_o_wt_5_5_valid    ), //o
    .io_o_wt_5_5_ready      (conv_core_s_wt_5_5_ready      ), //i
    .io_o_wt_5_5_payload    (data_cvt_io_o_wt_5_5_payload  ), //o
    .io_o_wt_5_6_valid      (data_cvt_io_o_wt_5_6_valid    ), //o
    .io_o_wt_5_6_ready      (conv_core_s_wt_5_6_ready      ), //i
    .io_o_wt_5_6_payload    (data_cvt_io_o_wt_5_6_payload  ), //o
    .io_o_wt_5_7_valid      (data_cvt_io_o_wt_5_7_valid    ), //o
    .io_o_wt_5_7_ready      (conv_core_s_wt_5_7_ready      ), //i
    .io_o_wt_5_7_payload    (data_cvt_io_o_wt_5_7_payload  ), //o
    .io_o_wt_6_0_valid      (data_cvt_io_o_wt_6_0_valid    ), //o
    .io_o_wt_6_0_ready      (conv_core_s_wt_6_0_ready      ), //i
    .io_o_wt_6_0_payload    (data_cvt_io_o_wt_6_0_payload  ), //o
    .io_o_wt_6_1_valid      (data_cvt_io_o_wt_6_1_valid    ), //o
    .io_o_wt_6_1_ready      (conv_core_s_wt_6_1_ready      ), //i
    .io_o_wt_6_1_payload    (data_cvt_io_o_wt_6_1_payload  ), //o
    .io_o_wt_6_2_valid      (data_cvt_io_o_wt_6_2_valid    ), //o
    .io_o_wt_6_2_ready      (conv_core_s_wt_6_2_ready      ), //i
    .io_o_wt_6_2_payload    (data_cvt_io_o_wt_6_2_payload  ), //o
    .io_o_wt_6_3_valid      (data_cvt_io_o_wt_6_3_valid    ), //o
    .io_o_wt_6_3_ready      (conv_core_s_wt_6_3_ready      ), //i
    .io_o_wt_6_3_payload    (data_cvt_io_o_wt_6_3_payload  ), //o
    .io_o_wt_6_4_valid      (data_cvt_io_o_wt_6_4_valid    ), //o
    .io_o_wt_6_4_ready      (conv_core_s_wt_6_4_ready      ), //i
    .io_o_wt_6_4_payload    (data_cvt_io_o_wt_6_4_payload  ), //o
    .io_o_wt_6_5_valid      (data_cvt_io_o_wt_6_5_valid    ), //o
    .io_o_wt_6_5_ready      (conv_core_s_wt_6_5_ready      ), //i
    .io_o_wt_6_5_payload    (data_cvt_io_o_wt_6_5_payload  ), //o
    .io_o_wt_6_6_valid      (data_cvt_io_o_wt_6_6_valid    ), //o
    .io_o_wt_6_6_ready      (conv_core_s_wt_6_6_ready      ), //i
    .io_o_wt_6_6_payload    (data_cvt_io_o_wt_6_6_payload  ), //o
    .io_o_wt_6_7_valid      (data_cvt_io_o_wt_6_7_valid    ), //o
    .io_o_wt_6_7_ready      (conv_core_s_wt_6_7_ready      ), //i
    .io_o_wt_6_7_payload    (data_cvt_io_o_wt_6_7_payload  ), //o
    .io_o_wt_7_0_valid      (data_cvt_io_o_wt_7_0_valid    ), //o
    .io_o_wt_7_0_ready      (conv_core_s_wt_7_0_ready      ), //i
    .io_o_wt_7_0_payload    (data_cvt_io_o_wt_7_0_payload  ), //o
    .io_o_wt_7_1_valid      (data_cvt_io_o_wt_7_1_valid    ), //o
    .io_o_wt_7_1_ready      (conv_core_s_wt_7_1_ready      ), //i
    .io_o_wt_7_1_payload    (data_cvt_io_o_wt_7_1_payload  ), //o
    .io_o_wt_7_2_valid      (data_cvt_io_o_wt_7_2_valid    ), //o
    .io_o_wt_7_2_ready      (conv_core_s_wt_7_2_ready      ), //i
    .io_o_wt_7_2_payload    (data_cvt_io_o_wt_7_2_payload  ), //o
    .io_o_wt_7_3_valid      (data_cvt_io_o_wt_7_3_valid    ), //o
    .io_o_wt_7_3_ready      (conv_core_s_wt_7_3_ready      ), //i
    .io_o_wt_7_3_payload    (data_cvt_io_o_wt_7_3_payload  ), //o
    .io_o_wt_7_4_valid      (data_cvt_io_o_wt_7_4_valid    ), //o
    .io_o_wt_7_4_ready      (conv_core_s_wt_7_4_ready      ), //i
    .io_o_wt_7_4_payload    (data_cvt_io_o_wt_7_4_payload  ), //o
    .io_o_wt_7_5_valid      (data_cvt_io_o_wt_7_5_valid    ), //o
    .io_o_wt_7_5_ready      (conv_core_s_wt_7_5_ready      ), //i
    .io_o_wt_7_5_payload    (data_cvt_io_o_wt_7_5_payload  ), //o
    .io_o_wt_7_6_valid      (data_cvt_io_o_wt_7_6_valid    ), //o
    .io_o_wt_7_6_ready      (conv_core_s_wt_7_6_ready      ), //i
    .io_o_wt_7_6_payload    (data_cvt_io_o_wt_7_6_payload  ), //o
    .io_o_wt_7_7_valid      (data_cvt_io_o_wt_7_7_valid    ), //o
    .io_o_wt_7_7_ready      (conv_core_s_wt_7_7_ready      ), //i
    .io_o_wt_7_7_payload    (data_cvt_io_o_wt_7_7_payload  )  //o
  );
  mac_acc_array conv_core (
    .s_ft_0_valid         (data_cvt_io_o_ft_0_valid      ), //i
    .s_ft_0_ready         (conv_core_s_ft_0_ready        ), //o
    .s_ft_0_payload       (data_cvt_io_o_ft_0_payload    ), //i
    .s_ft_1_valid         (data_cvt_io_o_ft_1_valid      ), //i
    .s_ft_1_ready         (conv_core_s_ft_1_ready        ), //o
    .s_ft_1_payload       (data_cvt_io_o_ft_1_payload    ), //i
    .s_ft_2_valid         (data_cvt_io_o_ft_2_valid      ), //i
    .s_ft_2_ready         (conv_core_s_ft_2_ready        ), //o
    .s_ft_2_payload       (data_cvt_io_o_ft_2_payload    ), //i
    .s_ft_3_valid         (data_cvt_io_o_ft_3_valid      ), //i
    .s_ft_3_ready         (conv_core_s_ft_3_ready        ), //o
    .s_ft_3_payload       (data_cvt_io_o_ft_3_payload    ), //i
    .s_ft_4_valid         (data_cvt_io_o_ft_4_valid      ), //i
    .s_ft_4_ready         (conv_core_s_ft_4_ready        ), //o
    .s_ft_4_payload       (data_cvt_io_o_ft_4_payload    ), //i
    .s_ft_5_valid         (data_cvt_io_o_ft_5_valid      ), //i
    .s_ft_5_ready         (conv_core_s_ft_5_ready        ), //o
    .s_ft_5_payload       (data_cvt_io_o_ft_5_payload    ), //i
    .s_ft_6_valid         (data_cvt_io_o_ft_6_valid      ), //i
    .s_ft_6_ready         (conv_core_s_ft_6_ready        ), //o
    .s_ft_6_payload       (data_cvt_io_o_ft_6_payload    ), //i
    .s_ft_7_valid         (data_cvt_io_o_ft_7_valid      ), //i
    .s_ft_7_ready         (conv_core_s_ft_7_ready        ), //o
    .s_ft_7_payload       (data_cvt_io_o_ft_7_payload    ), //i
    .s_wt_0_0_valid       (data_cvt_io_o_wt_0_0_valid    ), //i
    .s_wt_0_0_ready       (conv_core_s_wt_0_0_ready      ), //o
    .s_wt_0_0_payload     (data_cvt_io_o_wt_0_0_payload  ), //i
    .s_wt_0_1_valid       (data_cvt_io_o_wt_0_1_valid    ), //i
    .s_wt_0_1_ready       (conv_core_s_wt_0_1_ready      ), //o
    .s_wt_0_1_payload     (data_cvt_io_o_wt_0_1_payload  ), //i
    .s_wt_0_2_valid       (data_cvt_io_o_wt_0_2_valid    ), //i
    .s_wt_0_2_ready       (conv_core_s_wt_0_2_ready      ), //o
    .s_wt_0_2_payload     (data_cvt_io_o_wt_0_2_payload  ), //i
    .s_wt_0_3_valid       (data_cvt_io_o_wt_0_3_valid    ), //i
    .s_wt_0_3_ready       (conv_core_s_wt_0_3_ready      ), //o
    .s_wt_0_3_payload     (data_cvt_io_o_wt_0_3_payload  ), //i
    .s_wt_0_4_valid       (data_cvt_io_o_wt_0_4_valid    ), //i
    .s_wt_0_4_ready       (conv_core_s_wt_0_4_ready      ), //o
    .s_wt_0_4_payload     (data_cvt_io_o_wt_0_4_payload  ), //i
    .s_wt_0_5_valid       (data_cvt_io_o_wt_0_5_valid    ), //i
    .s_wt_0_5_ready       (conv_core_s_wt_0_5_ready      ), //o
    .s_wt_0_5_payload     (data_cvt_io_o_wt_0_5_payload  ), //i
    .s_wt_0_6_valid       (data_cvt_io_o_wt_0_6_valid    ), //i
    .s_wt_0_6_ready       (conv_core_s_wt_0_6_ready      ), //o
    .s_wt_0_6_payload     (data_cvt_io_o_wt_0_6_payload  ), //i
    .s_wt_0_7_valid       (data_cvt_io_o_wt_0_7_valid    ), //i
    .s_wt_0_7_ready       (conv_core_s_wt_0_7_ready      ), //o
    .s_wt_0_7_payload     (data_cvt_io_o_wt_0_7_payload  ), //i
    .s_wt_1_0_valid       (data_cvt_io_o_wt_1_0_valid    ), //i
    .s_wt_1_0_ready       (conv_core_s_wt_1_0_ready      ), //o
    .s_wt_1_0_payload     (data_cvt_io_o_wt_1_0_payload  ), //i
    .s_wt_1_1_valid       (data_cvt_io_o_wt_1_1_valid    ), //i
    .s_wt_1_1_ready       (conv_core_s_wt_1_1_ready      ), //o
    .s_wt_1_1_payload     (data_cvt_io_o_wt_1_1_payload  ), //i
    .s_wt_1_2_valid       (data_cvt_io_o_wt_1_2_valid    ), //i
    .s_wt_1_2_ready       (conv_core_s_wt_1_2_ready      ), //o
    .s_wt_1_2_payload     (data_cvt_io_o_wt_1_2_payload  ), //i
    .s_wt_1_3_valid       (data_cvt_io_o_wt_1_3_valid    ), //i
    .s_wt_1_3_ready       (conv_core_s_wt_1_3_ready      ), //o
    .s_wt_1_3_payload     (data_cvt_io_o_wt_1_3_payload  ), //i
    .s_wt_1_4_valid       (data_cvt_io_o_wt_1_4_valid    ), //i
    .s_wt_1_4_ready       (conv_core_s_wt_1_4_ready      ), //o
    .s_wt_1_4_payload     (data_cvt_io_o_wt_1_4_payload  ), //i
    .s_wt_1_5_valid       (data_cvt_io_o_wt_1_5_valid    ), //i
    .s_wt_1_5_ready       (conv_core_s_wt_1_5_ready      ), //o
    .s_wt_1_5_payload     (data_cvt_io_o_wt_1_5_payload  ), //i
    .s_wt_1_6_valid       (data_cvt_io_o_wt_1_6_valid    ), //i
    .s_wt_1_6_ready       (conv_core_s_wt_1_6_ready      ), //o
    .s_wt_1_6_payload     (data_cvt_io_o_wt_1_6_payload  ), //i
    .s_wt_1_7_valid       (data_cvt_io_o_wt_1_7_valid    ), //i
    .s_wt_1_7_ready       (conv_core_s_wt_1_7_ready      ), //o
    .s_wt_1_7_payload     (data_cvt_io_o_wt_1_7_payload  ), //i
    .s_wt_2_0_valid       (data_cvt_io_o_wt_2_0_valid    ), //i
    .s_wt_2_0_ready       (conv_core_s_wt_2_0_ready      ), //o
    .s_wt_2_0_payload     (data_cvt_io_o_wt_2_0_payload  ), //i
    .s_wt_2_1_valid       (data_cvt_io_o_wt_2_1_valid    ), //i
    .s_wt_2_1_ready       (conv_core_s_wt_2_1_ready      ), //o
    .s_wt_2_1_payload     (data_cvt_io_o_wt_2_1_payload  ), //i
    .s_wt_2_2_valid       (data_cvt_io_o_wt_2_2_valid    ), //i
    .s_wt_2_2_ready       (conv_core_s_wt_2_2_ready      ), //o
    .s_wt_2_2_payload     (data_cvt_io_o_wt_2_2_payload  ), //i
    .s_wt_2_3_valid       (data_cvt_io_o_wt_2_3_valid    ), //i
    .s_wt_2_3_ready       (conv_core_s_wt_2_3_ready      ), //o
    .s_wt_2_3_payload     (data_cvt_io_o_wt_2_3_payload  ), //i
    .s_wt_2_4_valid       (data_cvt_io_o_wt_2_4_valid    ), //i
    .s_wt_2_4_ready       (conv_core_s_wt_2_4_ready      ), //o
    .s_wt_2_4_payload     (data_cvt_io_o_wt_2_4_payload  ), //i
    .s_wt_2_5_valid       (data_cvt_io_o_wt_2_5_valid    ), //i
    .s_wt_2_5_ready       (conv_core_s_wt_2_5_ready      ), //o
    .s_wt_2_5_payload     (data_cvt_io_o_wt_2_5_payload  ), //i
    .s_wt_2_6_valid       (data_cvt_io_o_wt_2_6_valid    ), //i
    .s_wt_2_6_ready       (conv_core_s_wt_2_6_ready      ), //o
    .s_wt_2_6_payload     (data_cvt_io_o_wt_2_6_payload  ), //i
    .s_wt_2_7_valid       (data_cvt_io_o_wt_2_7_valid    ), //i
    .s_wt_2_7_ready       (conv_core_s_wt_2_7_ready      ), //o
    .s_wt_2_7_payload     (data_cvt_io_o_wt_2_7_payload  ), //i
    .s_wt_3_0_valid       (data_cvt_io_o_wt_3_0_valid    ), //i
    .s_wt_3_0_ready       (conv_core_s_wt_3_0_ready      ), //o
    .s_wt_3_0_payload     (data_cvt_io_o_wt_3_0_payload  ), //i
    .s_wt_3_1_valid       (data_cvt_io_o_wt_3_1_valid    ), //i
    .s_wt_3_1_ready       (conv_core_s_wt_3_1_ready      ), //o
    .s_wt_3_1_payload     (data_cvt_io_o_wt_3_1_payload  ), //i
    .s_wt_3_2_valid       (data_cvt_io_o_wt_3_2_valid    ), //i
    .s_wt_3_2_ready       (conv_core_s_wt_3_2_ready      ), //o
    .s_wt_3_2_payload     (data_cvt_io_o_wt_3_2_payload  ), //i
    .s_wt_3_3_valid       (data_cvt_io_o_wt_3_3_valid    ), //i
    .s_wt_3_3_ready       (conv_core_s_wt_3_3_ready      ), //o
    .s_wt_3_3_payload     (data_cvt_io_o_wt_3_3_payload  ), //i
    .s_wt_3_4_valid       (data_cvt_io_o_wt_3_4_valid    ), //i
    .s_wt_3_4_ready       (conv_core_s_wt_3_4_ready      ), //o
    .s_wt_3_4_payload     (data_cvt_io_o_wt_3_4_payload  ), //i
    .s_wt_3_5_valid       (data_cvt_io_o_wt_3_5_valid    ), //i
    .s_wt_3_5_ready       (conv_core_s_wt_3_5_ready      ), //o
    .s_wt_3_5_payload     (data_cvt_io_o_wt_3_5_payload  ), //i
    .s_wt_3_6_valid       (data_cvt_io_o_wt_3_6_valid    ), //i
    .s_wt_3_6_ready       (conv_core_s_wt_3_6_ready      ), //o
    .s_wt_3_6_payload     (data_cvt_io_o_wt_3_6_payload  ), //i
    .s_wt_3_7_valid       (data_cvt_io_o_wt_3_7_valid    ), //i
    .s_wt_3_7_ready       (conv_core_s_wt_3_7_ready      ), //o
    .s_wt_3_7_payload     (data_cvt_io_o_wt_3_7_payload  ), //i
    .s_wt_4_0_valid       (data_cvt_io_o_wt_4_0_valid    ), //i
    .s_wt_4_0_ready       (conv_core_s_wt_4_0_ready      ), //o
    .s_wt_4_0_payload     (data_cvt_io_o_wt_4_0_payload  ), //i
    .s_wt_4_1_valid       (data_cvt_io_o_wt_4_1_valid    ), //i
    .s_wt_4_1_ready       (conv_core_s_wt_4_1_ready      ), //o
    .s_wt_4_1_payload     (data_cvt_io_o_wt_4_1_payload  ), //i
    .s_wt_4_2_valid       (data_cvt_io_o_wt_4_2_valid    ), //i
    .s_wt_4_2_ready       (conv_core_s_wt_4_2_ready      ), //o
    .s_wt_4_2_payload     (data_cvt_io_o_wt_4_2_payload  ), //i
    .s_wt_4_3_valid       (data_cvt_io_o_wt_4_3_valid    ), //i
    .s_wt_4_3_ready       (conv_core_s_wt_4_3_ready      ), //o
    .s_wt_4_3_payload     (data_cvt_io_o_wt_4_3_payload  ), //i
    .s_wt_4_4_valid       (data_cvt_io_o_wt_4_4_valid    ), //i
    .s_wt_4_4_ready       (conv_core_s_wt_4_4_ready      ), //o
    .s_wt_4_4_payload     (data_cvt_io_o_wt_4_4_payload  ), //i
    .s_wt_4_5_valid       (data_cvt_io_o_wt_4_5_valid    ), //i
    .s_wt_4_5_ready       (conv_core_s_wt_4_5_ready      ), //o
    .s_wt_4_5_payload     (data_cvt_io_o_wt_4_5_payload  ), //i
    .s_wt_4_6_valid       (data_cvt_io_o_wt_4_6_valid    ), //i
    .s_wt_4_6_ready       (conv_core_s_wt_4_6_ready      ), //o
    .s_wt_4_6_payload     (data_cvt_io_o_wt_4_6_payload  ), //i
    .s_wt_4_7_valid       (data_cvt_io_o_wt_4_7_valid    ), //i
    .s_wt_4_7_ready       (conv_core_s_wt_4_7_ready      ), //o
    .s_wt_4_7_payload     (data_cvt_io_o_wt_4_7_payload  ), //i
    .s_wt_5_0_valid       (data_cvt_io_o_wt_5_0_valid    ), //i
    .s_wt_5_0_ready       (conv_core_s_wt_5_0_ready      ), //o
    .s_wt_5_0_payload     (data_cvt_io_o_wt_5_0_payload  ), //i
    .s_wt_5_1_valid       (data_cvt_io_o_wt_5_1_valid    ), //i
    .s_wt_5_1_ready       (conv_core_s_wt_5_1_ready      ), //o
    .s_wt_5_1_payload     (data_cvt_io_o_wt_5_1_payload  ), //i
    .s_wt_5_2_valid       (data_cvt_io_o_wt_5_2_valid    ), //i
    .s_wt_5_2_ready       (conv_core_s_wt_5_2_ready      ), //o
    .s_wt_5_2_payload     (data_cvt_io_o_wt_5_2_payload  ), //i
    .s_wt_5_3_valid       (data_cvt_io_o_wt_5_3_valid    ), //i
    .s_wt_5_3_ready       (conv_core_s_wt_5_3_ready      ), //o
    .s_wt_5_3_payload     (data_cvt_io_o_wt_5_3_payload  ), //i
    .s_wt_5_4_valid       (data_cvt_io_o_wt_5_4_valid    ), //i
    .s_wt_5_4_ready       (conv_core_s_wt_5_4_ready      ), //o
    .s_wt_5_4_payload     (data_cvt_io_o_wt_5_4_payload  ), //i
    .s_wt_5_5_valid       (data_cvt_io_o_wt_5_5_valid    ), //i
    .s_wt_5_5_ready       (conv_core_s_wt_5_5_ready      ), //o
    .s_wt_5_5_payload     (data_cvt_io_o_wt_5_5_payload  ), //i
    .s_wt_5_6_valid       (data_cvt_io_o_wt_5_6_valid    ), //i
    .s_wt_5_6_ready       (conv_core_s_wt_5_6_ready      ), //o
    .s_wt_5_6_payload     (data_cvt_io_o_wt_5_6_payload  ), //i
    .s_wt_5_7_valid       (data_cvt_io_o_wt_5_7_valid    ), //i
    .s_wt_5_7_ready       (conv_core_s_wt_5_7_ready      ), //o
    .s_wt_5_7_payload     (data_cvt_io_o_wt_5_7_payload  ), //i
    .s_wt_6_0_valid       (data_cvt_io_o_wt_6_0_valid    ), //i
    .s_wt_6_0_ready       (conv_core_s_wt_6_0_ready      ), //o
    .s_wt_6_0_payload     (data_cvt_io_o_wt_6_0_payload  ), //i
    .s_wt_6_1_valid       (data_cvt_io_o_wt_6_1_valid    ), //i
    .s_wt_6_1_ready       (conv_core_s_wt_6_1_ready      ), //o
    .s_wt_6_1_payload     (data_cvt_io_o_wt_6_1_payload  ), //i
    .s_wt_6_2_valid       (data_cvt_io_o_wt_6_2_valid    ), //i
    .s_wt_6_2_ready       (conv_core_s_wt_6_2_ready      ), //o
    .s_wt_6_2_payload     (data_cvt_io_o_wt_6_2_payload  ), //i
    .s_wt_6_3_valid       (data_cvt_io_o_wt_6_3_valid    ), //i
    .s_wt_6_3_ready       (conv_core_s_wt_6_3_ready      ), //o
    .s_wt_6_3_payload     (data_cvt_io_o_wt_6_3_payload  ), //i
    .s_wt_6_4_valid       (data_cvt_io_o_wt_6_4_valid    ), //i
    .s_wt_6_4_ready       (conv_core_s_wt_6_4_ready      ), //o
    .s_wt_6_4_payload     (data_cvt_io_o_wt_6_4_payload  ), //i
    .s_wt_6_5_valid       (data_cvt_io_o_wt_6_5_valid    ), //i
    .s_wt_6_5_ready       (conv_core_s_wt_6_5_ready      ), //o
    .s_wt_6_5_payload     (data_cvt_io_o_wt_6_5_payload  ), //i
    .s_wt_6_6_valid       (data_cvt_io_o_wt_6_6_valid    ), //i
    .s_wt_6_6_ready       (conv_core_s_wt_6_6_ready      ), //o
    .s_wt_6_6_payload     (data_cvt_io_o_wt_6_6_payload  ), //i
    .s_wt_6_7_valid       (data_cvt_io_o_wt_6_7_valid    ), //i
    .s_wt_6_7_ready       (conv_core_s_wt_6_7_ready      ), //o
    .s_wt_6_7_payload     (data_cvt_io_o_wt_6_7_payload  ), //i
    .s_wt_7_0_valid       (data_cvt_io_o_wt_7_0_valid    ), //i
    .s_wt_7_0_ready       (conv_core_s_wt_7_0_ready      ), //o
    .s_wt_7_0_payload     (data_cvt_io_o_wt_7_0_payload  ), //i
    .s_wt_7_1_valid       (data_cvt_io_o_wt_7_1_valid    ), //i
    .s_wt_7_1_ready       (conv_core_s_wt_7_1_ready      ), //o
    .s_wt_7_1_payload     (data_cvt_io_o_wt_7_1_payload  ), //i
    .s_wt_7_2_valid       (data_cvt_io_o_wt_7_2_valid    ), //i
    .s_wt_7_2_ready       (conv_core_s_wt_7_2_ready      ), //o
    .s_wt_7_2_payload     (data_cvt_io_o_wt_7_2_payload  ), //i
    .s_wt_7_3_valid       (data_cvt_io_o_wt_7_3_valid    ), //i
    .s_wt_7_3_ready       (conv_core_s_wt_7_3_ready      ), //o
    .s_wt_7_3_payload     (data_cvt_io_o_wt_7_3_payload  ), //i
    .s_wt_7_4_valid       (data_cvt_io_o_wt_7_4_valid    ), //i
    .s_wt_7_4_ready       (conv_core_s_wt_7_4_ready      ), //o
    .s_wt_7_4_payload     (data_cvt_io_o_wt_7_4_payload  ), //i
    .s_wt_7_5_valid       (data_cvt_io_o_wt_7_5_valid    ), //i
    .s_wt_7_5_ready       (conv_core_s_wt_7_5_ready      ), //o
    .s_wt_7_5_payload     (data_cvt_io_o_wt_7_5_payload  ), //i
    .s_wt_7_6_valid       (data_cvt_io_o_wt_7_6_valid    ), //i
    .s_wt_7_6_ready       (conv_core_s_wt_7_6_ready      ), //o
    .s_wt_7_6_payload     (data_cvt_io_o_wt_7_6_payload  ), //i
    .s_wt_7_7_valid       (data_cvt_io_o_wt_7_7_valid    ), //i
    .s_wt_7_7_ready       (conv_core_s_wt_7_7_ready      ), //o
    .s_wt_7_7_payload     (data_cvt_io_o_wt_7_7_payload  ), //i
    .s_out_0_0_valid      (conv_core_s_out_0_0_valid     ), //o
    .s_out_0_0_ready      (mux_io_indata_0_0_ready       ), //i
    .s_out_0_0_payload    (conv_core_s_out_0_0_payload   ), //o
    .s_out_0_1_valid      (conv_core_s_out_0_1_valid     ), //o
    .s_out_0_1_ready      (mux_io_indata_0_1_ready       ), //i
    .s_out_0_1_payload    (conv_core_s_out_0_1_payload   ), //o
    .s_out_0_2_valid      (conv_core_s_out_0_2_valid     ), //o
    .s_out_0_2_ready      (mux_io_indata_0_2_ready       ), //i
    .s_out_0_2_payload    (conv_core_s_out_0_2_payload   ), //o
    .s_out_0_3_valid      (conv_core_s_out_0_3_valid     ), //o
    .s_out_0_3_ready      (mux_io_indata_0_3_ready       ), //i
    .s_out_0_3_payload    (conv_core_s_out_0_3_payload   ), //o
    .s_out_0_4_valid      (conv_core_s_out_0_4_valid     ), //o
    .s_out_0_4_ready      (mux_io_indata_0_4_ready       ), //i
    .s_out_0_4_payload    (conv_core_s_out_0_4_payload   ), //o
    .s_out_0_5_valid      (conv_core_s_out_0_5_valid     ), //o
    .s_out_0_5_ready      (mux_io_indata_0_5_ready       ), //i
    .s_out_0_5_payload    (conv_core_s_out_0_5_payload   ), //o
    .s_out_0_6_valid      (conv_core_s_out_0_6_valid     ), //o
    .s_out_0_6_ready      (mux_io_indata_0_6_ready       ), //i
    .s_out_0_6_payload    (conv_core_s_out_0_6_payload   ), //o
    .s_out_0_7_valid      (conv_core_s_out_0_7_valid     ), //o
    .s_out_0_7_ready      (mux_io_indata_0_7_ready       ), //i
    .s_out_0_7_payload    (conv_core_s_out_0_7_payload   ), //o
    .s_out_1_0_valid      (conv_core_s_out_1_0_valid     ), //o
    .s_out_1_0_ready      (mux_io_indata_1_0_ready       ), //i
    .s_out_1_0_payload    (conv_core_s_out_1_0_payload   ), //o
    .s_out_1_1_valid      (conv_core_s_out_1_1_valid     ), //o
    .s_out_1_1_ready      (mux_io_indata_1_1_ready       ), //i
    .s_out_1_1_payload    (conv_core_s_out_1_1_payload   ), //o
    .s_out_1_2_valid      (conv_core_s_out_1_2_valid     ), //o
    .s_out_1_2_ready      (mux_io_indata_1_2_ready       ), //i
    .s_out_1_2_payload    (conv_core_s_out_1_2_payload   ), //o
    .s_out_1_3_valid      (conv_core_s_out_1_3_valid     ), //o
    .s_out_1_3_ready      (mux_io_indata_1_3_ready       ), //i
    .s_out_1_3_payload    (conv_core_s_out_1_3_payload   ), //o
    .s_out_1_4_valid      (conv_core_s_out_1_4_valid     ), //o
    .s_out_1_4_ready      (mux_io_indata_1_4_ready       ), //i
    .s_out_1_4_payload    (conv_core_s_out_1_4_payload   ), //o
    .s_out_1_5_valid      (conv_core_s_out_1_5_valid     ), //o
    .s_out_1_5_ready      (mux_io_indata_1_5_ready       ), //i
    .s_out_1_5_payload    (conv_core_s_out_1_5_payload   ), //o
    .s_out_1_6_valid      (conv_core_s_out_1_6_valid     ), //o
    .s_out_1_6_ready      (mux_io_indata_1_6_ready       ), //i
    .s_out_1_6_payload    (conv_core_s_out_1_6_payload   ), //o
    .s_out_1_7_valid      (conv_core_s_out_1_7_valid     ), //o
    .s_out_1_7_ready      (mux_io_indata_1_7_ready       ), //i
    .s_out_1_7_payload    (conv_core_s_out_1_7_payload   ), //o
    .s_out_2_0_valid      (conv_core_s_out_2_0_valid     ), //o
    .s_out_2_0_ready      (mux_io_indata_2_0_ready       ), //i
    .s_out_2_0_payload    (conv_core_s_out_2_0_payload   ), //o
    .s_out_2_1_valid      (conv_core_s_out_2_1_valid     ), //o
    .s_out_2_1_ready      (mux_io_indata_2_1_ready       ), //i
    .s_out_2_1_payload    (conv_core_s_out_2_1_payload   ), //o
    .s_out_2_2_valid      (conv_core_s_out_2_2_valid     ), //o
    .s_out_2_2_ready      (mux_io_indata_2_2_ready       ), //i
    .s_out_2_2_payload    (conv_core_s_out_2_2_payload   ), //o
    .s_out_2_3_valid      (conv_core_s_out_2_3_valid     ), //o
    .s_out_2_3_ready      (mux_io_indata_2_3_ready       ), //i
    .s_out_2_3_payload    (conv_core_s_out_2_3_payload   ), //o
    .s_out_2_4_valid      (conv_core_s_out_2_4_valid     ), //o
    .s_out_2_4_ready      (mux_io_indata_2_4_ready       ), //i
    .s_out_2_4_payload    (conv_core_s_out_2_4_payload   ), //o
    .s_out_2_5_valid      (conv_core_s_out_2_5_valid     ), //o
    .s_out_2_5_ready      (mux_io_indata_2_5_ready       ), //i
    .s_out_2_5_payload    (conv_core_s_out_2_5_payload   ), //o
    .s_out_2_6_valid      (conv_core_s_out_2_6_valid     ), //o
    .s_out_2_6_ready      (mux_io_indata_2_6_ready       ), //i
    .s_out_2_6_payload    (conv_core_s_out_2_6_payload   ), //o
    .s_out_2_7_valid      (conv_core_s_out_2_7_valid     ), //o
    .s_out_2_7_ready      (mux_io_indata_2_7_ready       ), //i
    .s_out_2_7_payload    (conv_core_s_out_2_7_payload   ), //o
    .s_out_3_0_valid      (conv_core_s_out_3_0_valid     ), //o
    .s_out_3_0_ready      (mux_io_indata_3_0_ready       ), //i
    .s_out_3_0_payload    (conv_core_s_out_3_0_payload   ), //o
    .s_out_3_1_valid      (conv_core_s_out_3_1_valid     ), //o
    .s_out_3_1_ready      (mux_io_indata_3_1_ready       ), //i
    .s_out_3_1_payload    (conv_core_s_out_3_1_payload   ), //o
    .s_out_3_2_valid      (conv_core_s_out_3_2_valid     ), //o
    .s_out_3_2_ready      (mux_io_indata_3_2_ready       ), //i
    .s_out_3_2_payload    (conv_core_s_out_3_2_payload   ), //o
    .s_out_3_3_valid      (conv_core_s_out_3_3_valid     ), //o
    .s_out_3_3_ready      (mux_io_indata_3_3_ready       ), //i
    .s_out_3_3_payload    (conv_core_s_out_3_3_payload   ), //o
    .s_out_3_4_valid      (conv_core_s_out_3_4_valid     ), //o
    .s_out_3_4_ready      (mux_io_indata_3_4_ready       ), //i
    .s_out_3_4_payload    (conv_core_s_out_3_4_payload   ), //o
    .s_out_3_5_valid      (conv_core_s_out_3_5_valid     ), //o
    .s_out_3_5_ready      (mux_io_indata_3_5_ready       ), //i
    .s_out_3_5_payload    (conv_core_s_out_3_5_payload   ), //o
    .s_out_3_6_valid      (conv_core_s_out_3_6_valid     ), //o
    .s_out_3_6_ready      (mux_io_indata_3_6_ready       ), //i
    .s_out_3_6_payload    (conv_core_s_out_3_6_payload   ), //o
    .s_out_3_7_valid      (conv_core_s_out_3_7_valid     ), //o
    .s_out_3_7_ready      (mux_io_indata_3_7_ready       ), //i
    .s_out_3_7_payload    (conv_core_s_out_3_7_payload   ), //o
    .s_out_4_0_valid      (conv_core_s_out_4_0_valid     ), //o
    .s_out_4_0_ready      (mux_io_indata_4_0_ready       ), //i
    .s_out_4_0_payload    (conv_core_s_out_4_0_payload   ), //o
    .s_out_4_1_valid      (conv_core_s_out_4_1_valid     ), //o
    .s_out_4_1_ready      (mux_io_indata_4_1_ready       ), //i
    .s_out_4_1_payload    (conv_core_s_out_4_1_payload   ), //o
    .s_out_4_2_valid      (conv_core_s_out_4_2_valid     ), //o
    .s_out_4_2_ready      (mux_io_indata_4_2_ready       ), //i
    .s_out_4_2_payload    (conv_core_s_out_4_2_payload   ), //o
    .s_out_4_3_valid      (conv_core_s_out_4_3_valid     ), //o
    .s_out_4_3_ready      (mux_io_indata_4_3_ready       ), //i
    .s_out_4_3_payload    (conv_core_s_out_4_3_payload   ), //o
    .s_out_4_4_valid      (conv_core_s_out_4_4_valid     ), //o
    .s_out_4_4_ready      (mux_io_indata_4_4_ready       ), //i
    .s_out_4_4_payload    (conv_core_s_out_4_4_payload   ), //o
    .s_out_4_5_valid      (conv_core_s_out_4_5_valid     ), //o
    .s_out_4_5_ready      (mux_io_indata_4_5_ready       ), //i
    .s_out_4_5_payload    (conv_core_s_out_4_5_payload   ), //o
    .s_out_4_6_valid      (conv_core_s_out_4_6_valid     ), //o
    .s_out_4_6_ready      (mux_io_indata_4_6_ready       ), //i
    .s_out_4_6_payload    (conv_core_s_out_4_6_payload   ), //o
    .s_out_4_7_valid      (conv_core_s_out_4_7_valid     ), //o
    .s_out_4_7_ready      (mux_io_indata_4_7_ready       ), //i
    .s_out_4_7_payload    (conv_core_s_out_4_7_payload   ), //o
    .s_out_5_0_valid      (conv_core_s_out_5_0_valid     ), //o
    .s_out_5_0_ready      (mux_io_indata_5_0_ready       ), //i
    .s_out_5_0_payload    (conv_core_s_out_5_0_payload   ), //o
    .s_out_5_1_valid      (conv_core_s_out_5_1_valid     ), //o
    .s_out_5_1_ready      (mux_io_indata_5_1_ready       ), //i
    .s_out_5_1_payload    (conv_core_s_out_5_1_payload   ), //o
    .s_out_5_2_valid      (conv_core_s_out_5_2_valid     ), //o
    .s_out_5_2_ready      (mux_io_indata_5_2_ready       ), //i
    .s_out_5_2_payload    (conv_core_s_out_5_2_payload   ), //o
    .s_out_5_3_valid      (conv_core_s_out_5_3_valid     ), //o
    .s_out_5_3_ready      (mux_io_indata_5_3_ready       ), //i
    .s_out_5_3_payload    (conv_core_s_out_5_3_payload   ), //o
    .s_out_5_4_valid      (conv_core_s_out_5_4_valid     ), //o
    .s_out_5_4_ready      (mux_io_indata_5_4_ready       ), //i
    .s_out_5_4_payload    (conv_core_s_out_5_4_payload   ), //o
    .s_out_5_5_valid      (conv_core_s_out_5_5_valid     ), //o
    .s_out_5_5_ready      (mux_io_indata_5_5_ready       ), //i
    .s_out_5_5_payload    (conv_core_s_out_5_5_payload   ), //o
    .s_out_5_6_valid      (conv_core_s_out_5_6_valid     ), //o
    .s_out_5_6_ready      (mux_io_indata_5_6_ready       ), //i
    .s_out_5_6_payload    (conv_core_s_out_5_6_payload   ), //o
    .s_out_5_7_valid      (conv_core_s_out_5_7_valid     ), //o
    .s_out_5_7_ready      (mux_io_indata_5_7_ready       ), //i
    .s_out_5_7_payload    (conv_core_s_out_5_7_payload   ), //o
    .s_out_6_0_valid      (conv_core_s_out_6_0_valid     ), //o
    .s_out_6_0_ready      (mux_io_indata_6_0_ready       ), //i
    .s_out_6_0_payload    (conv_core_s_out_6_0_payload   ), //o
    .s_out_6_1_valid      (conv_core_s_out_6_1_valid     ), //o
    .s_out_6_1_ready      (mux_io_indata_6_1_ready       ), //i
    .s_out_6_1_payload    (conv_core_s_out_6_1_payload   ), //o
    .s_out_6_2_valid      (conv_core_s_out_6_2_valid     ), //o
    .s_out_6_2_ready      (mux_io_indata_6_2_ready       ), //i
    .s_out_6_2_payload    (conv_core_s_out_6_2_payload   ), //o
    .s_out_6_3_valid      (conv_core_s_out_6_3_valid     ), //o
    .s_out_6_3_ready      (mux_io_indata_6_3_ready       ), //i
    .s_out_6_3_payload    (conv_core_s_out_6_3_payload   ), //o
    .s_out_6_4_valid      (conv_core_s_out_6_4_valid     ), //o
    .s_out_6_4_ready      (mux_io_indata_6_4_ready       ), //i
    .s_out_6_4_payload    (conv_core_s_out_6_4_payload   ), //o
    .s_out_6_5_valid      (conv_core_s_out_6_5_valid     ), //o
    .s_out_6_5_ready      (mux_io_indata_6_5_ready       ), //i
    .s_out_6_5_payload    (conv_core_s_out_6_5_payload   ), //o
    .s_out_6_6_valid      (conv_core_s_out_6_6_valid     ), //o
    .s_out_6_6_ready      (mux_io_indata_6_6_ready       ), //i
    .s_out_6_6_payload    (conv_core_s_out_6_6_payload   ), //o
    .s_out_6_7_valid      (conv_core_s_out_6_7_valid     ), //o
    .s_out_6_7_ready      (mux_io_indata_6_7_ready       ), //i
    .s_out_6_7_payload    (conv_core_s_out_6_7_payload   ), //o
    .s_out_7_0_valid      (conv_core_s_out_7_0_valid     ), //o
    .s_out_7_0_ready      (mux_io_indata_7_0_ready       ), //i
    .s_out_7_0_payload    (conv_core_s_out_7_0_payload   ), //o
    .s_out_7_1_valid      (conv_core_s_out_7_1_valid     ), //o
    .s_out_7_1_ready      (mux_io_indata_7_1_ready       ), //i
    .s_out_7_1_payload    (conv_core_s_out_7_1_payload   ), //o
    .s_out_7_2_valid      (conv_core_s_out_7_2_valid     ), //o
    .s_out_7_2_ready      (mux_io_indata_7_2_ready       ), //i
    .s_out_7_2_payload    (conv_core_s_out_7_2_payload   ), //o
    .s_out_7_3_valid      (conv_core_s_out_7_3_valid     ), //o
    .s_out_7_3_ready      (mux_io_indata_7_3_ready       ), //i
    .s_out_7_3_payload    (conv_core_s_out_7_3_payload   ), //o
    .s_out_7_4_valid      (conv_core_s_out_7_4_valid     ), //o
    .s_out_7_4_ready      (mux_io_indata_7_4_ready       ), //i
    .s_out_7_4_payload    (conv_core_s_out_7_4_payload   ), //o
    .s_out_7_5_valid      (conv_core_s_out_7_5_valid     ), //o
    .s_out_7_5_ready      (mux_io_indata_7_5_ready       ), //i
    .s_out_7_5_payload    (conv_core_s_out_7_5_payload   ), //o
    .s_out_7_6_valid      (conv_core_s_out_7_6_valid     ), //o
    .s_out_7_6_ready      (mux_io_indata_7_6_ready       ), //i
    .s_out_7_6_payload    (conv_core_s_out_7_6_payload   ), //o
    .s_out_7_7_valid      (conv_core_s_out_7_7_valid     ), //o
    .s_out_7_7_ready      (mux_io_indata_7_7_ready       ), //i
    .s_out_7_7_payload    (conv_core_s_out_7_7_payload   ), //o
    .par_acc_cnt          (cfg_par_acc_cnt               ), //i
    .acc_enable           (ctrl_acc_enable               ), //i
    .clk                  (clk                           ), //i
    .reset                (reset                         )  //i
  );
  conv_mux mux (
    .io_is_delta_wt               (ctrl_is_delta_wt               ), //i
    .io_indata_0_0_valid          (conv_core_s_out_0_0_valid      ), //i
    .io_indata_0_0_ready          (mux_io_indata_0_0_ready        ), //o
    .io_indata_0_0_payload        (conv_core_s_out_0_0_payload    ), //i
    .io_indata_0_1_valid          (conv_core_s_out_0_1_valid      ), //i
    .io_indata_0_1_ready          (mux_io_indata_0_1_ready        ), //o
    .io_indata_0_1_payload        (conv_core_s_out_0_1_payload    ), //i
    .io_indata_0_2_valid          (conv_core_s_out_0_2_valid      ), //i
    .io_indata_0_2_ready          (mux_io_indata_0_2_ready        ), //o
    .io_indata_0_2_payload        (conv_core_s_out_0_2_payload    ), //i
    .io_indata_0_3_valid          (conv_core_s_out_0_3_valid      ), //i
    .io_indata_0_3_ready          (mux_io_indata_0_3_ready        ), //o
    .io_indata_0_3_payload        (conv_core_s_out_0_3_payload    ), //i
    .io_indata_0_4_valid          (conv_core_s_out_0_4_valid      ), //i
    .io_indata_0_4_ready          (mux_io_indata_0_4_ready        ), //o
    .io_indata_0_4_payload        (conv_core_s_out_0_4_payload    ), //i
    .io_indata_0_5_valid          (conv_core_s_out_0_5_valid      ), //i
    .io_indata_0_5_ready          (mux_io_indata_0_5_ready        ), //o
    .io_indata_0_5_payload        (conv_core_s_out_0_5_payload    ), //i
    .io_indata_0_6_valid          (conv_core_s_out_0_6_valid      ), //i
    .io_indata_0_6_ready          (mux_io_indata_0_6_ready        ), //o
    .io_indata_0_6_payload        (conv_core_s_out_0_6_payload    ), //i
    .io_indata_0_7_valid          (conv_core_s_out_0_7_valid      ), //i
    .io_indata_0_7_ready          (mux_io_indata_0_7_ready        ), //o
    .io_indata_0_7_payload        (conv_core_s_out_0_7_payload    ), //i
    .io_indata_1_0_valid          (conv_core_s_out_1_0_valid      ), //i
    .io_indata_1_0_ready          (mux_io_indata_1_0_ready        ), //o
    .io_indata_1_0_payload        (conv_core_s_out_1_0_payload    ), //i
    .io_indata_1_1_valid          (conv_core_s_out_1_1_valid      ), //i
    .io_indata_1_1_ready          (mux_io_indata_1_1_ready        ), //o
    .io_indata_1_1_payload        (conv_core_s_out_1_1_payload    ), //i
    .io_indata_1_2_valid          (conv_core_s_out_1_2_valid      ), //i
    .io_indata_1_2_ready          (mux_io_indata_1_2_ready        ), //o
    .io_indata_1_2_payload        (conv_core_s_out_1_2_payload    ), //i
    .io_indata_1_3_valid          (conv_core_s_out_1_3_valid      ), //i
    .io_indata_1_3_ready          (mux_io_indata_1_3_ready        ), //o
    .io_indata_1_3_payload        (conv_core_s_out_1_3_payload    ), //i
    .io_indata_1_4_valid          (conv_core_s_out_1_4_valid      ), //i
    .io_indata_1_4_ready          (mux_io_indata_1_4_ready        ), //o
    .io_indata_1_4_payload        (conv_core_s_out_1_4_payload    ), //i
    .io_indata_1_5_valid          (conv_core_s_out_1_5_valid      ), //i
    .io_indata_1_5_ready          (mux_io_indata_1_5_ready        ), //o
    .io_indata_1_5_payload        (conv_core_s_out_1_5_payload    ), //i
    .io_indata_1_6_valid          (conv_core_s_out_1_6_valid      ), //i
    .io_indata_1_6_ready          (mux_io_indata_1_6_ready        ), //o
    .io_indata_1_6_payload        (conv_core_s_out_1_6_payload    ), //i
    .io_indata_1_7_valid          (conv_core_s_out_1_7_valid      ), //i
    .io_indata_1_7_ready          (mux_io_indata_1_7_ready        ), //o
    .io_indata_1_7_payload        (conv_core_s_out_1_7_payload    ), //i
    .io_indata_2_0_valid          (conv_core_s_out_2_0_valid      ), //i
    .io_indata_2_0_ready          (mux_io_indata_2_0_ready        ), //o
    .io_indata_2_0_payload        (conv_core_s_out_2_0_payload    ), //i
    .io_indata_2_1_valid          (conv_core_s_out_2_1_valid      ), //i
    .io_indata_2_1_ready          (mux_io_indata_2_1_ready        ), //o
    .io_indata_2_1_payload        (conv_core_s_out_2_1_payload    ), //i
    .io_indata_2_2_valid          (conv_core_s_out_2_2_valid      ), //i
    .io_indata_2_2_ready          (mux_io_indata_2_2_ready        ), //o
    .io_indata_2_2_payload        (conv_core_s_out_2_2_payload    ), //i
    .io_indata_2_3_valid          (conv_core_s_out_2_3_valid      ), //i
    .io_indata_2_3_ready          (mux_io_indata_2_3_ready        ), //o
    .io_indata_2_3_payload        (conv_core_s_out_2_3_payload    ), //i
    .io_indata_2_4_valid          (conv_core_s_out_2_4_valid      ), //i
    .io_indata_2_4_ready          (mux_io_indata_2_4_ready        ), //o
    .io_indata_2_4_payload        (conv_core_s_out_2_4_payload    ), //i
    .io_indata_2_5_valid          (conv_core_s_out_2_5_valid      ), //i
    .io_indata_2_5_ready          (mux_io_indata_2_5_ready        ), //o
    .io_indata_2_5_payload        (conv_core_s_out_2_5_payload    ), //i
    .io_indata_2_6_valid          (conv_core_s_out_2_6_valid      ), //i
    .io_indata_2_6_ready          (mux_io_indata_2_6_ready        ), //o
    .io_indata_2_6_payload        (conv_core_s_out_2_6_payload    ), //i
    .io_indata_2_7_valid          (conv_core_s_out_2_7_valid      ), //i
    .io_indata_2_7_ready          (mux_io_indata_2_7_ready        ), //o
    .io_indata_2_7_payload        (conv_core_s_out_2_7_payload    ), //i
    .io_indata_3_0_valid          (conv_core_s_out_3_0_valid      ), //i
    .io_indata_3_0_ready          (mux_io_indata_3_0_ready        ), //o
    .io_indata_3_0_payload        (conv_core_s_out_3_0_payload    ), //i
    .io_indata_3_1_valid          (conv_core_s_out_3_1_valid      ), //i
    .io_indata_3_1_ready          (mux_io_indata_3_1_ready        ), //o
    .io_indata_3_1_payload        (conv_core_s_out_3_1_payload    ), //i
    .io_indata_3_2_valid          (conv_core_s_out_3_2_valid      ), //i
    .io_indata_3_2_ready          (mux_io_indata_3_2_ready        ), //o
    .io_indata_3_2_payload        (conv_core_s_out_3_2_payload    ), //i
    .io_indata_3_3_valid          (conv_core_s_out_3_3_valid      ), //i
    .io_indata_3_3_ready          (mux_io_indata_3_3_ready        ), //o
    .io_indata_3_3_payload        (conv_core_s_out_3_3_payload    ), //i
    .io_indata_3_4_valid          (conv_core_s_out_3_4_valid      ), //i
    .io_indata_3_4_ready          (mux_io_indata_3_4_ready        ), //o
    .io_indata_3_4_payload        (conv_core_s_out_3_4_payload    ), //i
    .io_indata_3_5_valid          (conv_core_s_out_3_5_valid      ), //i
    .io_indata_3_5_ready          (mux_io_indata_3_5_ready        ), //o
    .io_indata_3_5_payload        (conv_core_s_out_3_5_payload    ), //i
    .io_indata_3_6_valid          (conv_core_s_out_3_6_valid      ), //i
    .io_indata_3_6_ready          (mux_io_indata_3_6_ready        ), //o
    .io_indata_3_6_payload        (conv_core_s_out_3_6_payload    ), //i
    .io_indata_3_7_valid          (conv_core_s_out_3_7_valid      ), //i
    .io_indata_3_7_ready          (mux_io_indata_3_7_ready        ), //o
    .io_indata_3_7_payload        (conv_core_s_out_3_7_payload    ), //i
    .io_indata_4_0_valid          (conv_core_s_out_4_0_valid      ), //i
    .io_indata_4_0_ready          (mux_io_indata_4_0_ready        ), //o
    .io_indata_4_0_payload        (conv_core_s_out_4_0_payload    ), //i
    .io_indata_4_1_valid          (conv_core_s_out_4_1_valid      ), //i
    .io_indata_4_1_ready          (mux_io_indata_4_1_ready        ), //o
    .io_indata_4_1_payload        (conv_core_s_out_4_1_payload    ), //i
    .io_indata_4_2_valid          (conv_core_s_out_4_2_valid      ), //i
    .io_indata_4_2_ready          (mux_io_indata_4_2_ready        ), //o
    .io_indata_4_2_payload        (conv_core_s_out_4_2_payload    ), //i
    .io_indata_4_3_valid          (conv_core_s_out_4_3_valid      ), //i
    .io_indata_4_3_ready          (mux_io_indata_4_3_ready        ), //o
    .io_indata_4_3_payload        (conv_core_s_out_4_3_payload    ), //i
    .io_indata_4_4_valid          (conv_core_s_out_4_4_valid      ), //i
    .io_indata_4_4_ready          (mux_io_indata_4_4_ready        ), //o
    .io_indata_4_4_payload        (conv_core_s_out_4_4_payload    ), //i
    .io_indata_4_5_valid          (conv_core_s_out_4_5_valid      ), //i
    .io_indata_4_5_ready          (mux_io_indata_4_5_ready        ), //o
    .io_indata_4_5_payload        (conv_core_s_out_4_5_payload    ), //i
    .io_indata_4_6_valid          (conv_core_s_out_4_6_valid      ), //i
    .io_indata_4_6_ready          (mux_io_indata_4_6_ready        ), //o
    .io_indata_4_6_payload        (conv_core_s_out_4_6_payload    ), //i
    .io_indata_4_7_valid          (conv_core_s_out_4_7_valid      ), //i
    .io_indata_4_7_ready          (mux_io_indata_4_7_ready        ), //o
    .io_indata_4_7_payload        (conv_core_s_out_4_7_payload    ), //i
    .io_indata_5_0_valid          (conv_core_s_out_5_0_valid      ), //i
    .io_indata_5_0_ready          (mux_io_indata_5_0_ready        ), //o
    .io_indata_5_0_payload        (conv_core_s_out_5_0_payload    ), //i
    .io_indata_5_1_valid          (conv_core_s_out_5_1_valid      ), //i
    .io_indata_5_1_ready          (mux_io_indata_5_1_ready        ), //o
    .io_indata_5_1_payload        (conv_core_s_out_5_1_payload    ), //i
    .io_indata_5_2_valid          (conv_core_s_out_5_2_valid      ), //i
    .io_indata_5_2_ready          (mux_io_indata_5_2_ready        ), //o
    .io_indata_5_2_payload        (conv_core_s_out_5_2_payload    ), //i
    .io_indata_5_3_valid          (conv_core_s_out_5_3_valid      ), //i
    .io_indata_5_3_ready          (mux_io_indata_5_3_ready        ), //o
    .io_indata_5_3_payload        (conv_core_s_out_5_3_payload    ), //i
    .io_indata_5_4_valid          (conv_core_s_out_5_4_valid      ), //i
    .io_indata_5_4_ready          (mux_io_indata_5_4_ready        ), //o
    .io_indata_5_4_payload        (conv_core_s_out_5_4_payload    ), //i
    .io_indata_5_5_valid          (conv_core_s_out_5_5_valid      ), //i
    .io_indata_5_5_ready          (mux_io_indata_5_5_ready        ), //o
    .io_indata_5_5_payload        (conv_core_s_out_5_5_payload    ), //i
    .io_indata_5_6_valid          (conv_core_s_out_5_6_valid      ), //i
    .io_indata_5_6_ready          (mux_io_indata_5_6_ready        ), //o
    .io_indata_5_6_payload        (conv_core_s_out_5_6_payload    ), //i
    .io_indata_5_7_valid          (conv_core_s_out_5_7_valid      ), //i
    .io_indata_5_7_ready          (mux_io_indata_5_7_ready        ), //o
    .io_indata_5_7_payload        (conv_core_s_out_5_7_payload    ), //i
    .io_indata_6_0_valid          (conv_core_s_out_6_0_valid      ), //i
    .io_indata_6_0_ready          (mux_io_indata_6_0_ready        ), //o
    .io_indata_6_0_payload        (conv_core_s_out_6_0_payload    ), //i
    .io_indata_6_1_valid          (conv_core_s_out_6_1_valid      ), //i
    .io_indata_6_1_ready          (mux_io_indata_6_1_ready        ), //o
    .io_indata_6_1_payload        (conv_core_s_out_6_1_payload    ), //i
    .io_indata_6_2_valid          (conv_core_s_out_6_2_valid      ), //i
    .io_indata_6_2_ready          (mux_io_indata_6_2_ready        ), //o
    .io_indata_6_2_payload        (conv_core_s_out_6_2_payload    ), //i
    .io_indata_6_3_valid          (conv_core_s_out_6_3_valid      ), //i
    .io_indata_6_3_ready          (mux_io_indata_6_3_ready        ), //o
    .io_indata_6_3_payload        (conv_core_s_out_6_3_payload    ), //i
    .io_indata_6_4_valid          (conv_core_s_out_6_4_valid      ), //i
    .io_indata_6_4_ready          (mux_io_indata_6_4_ready        ), //o
    .io_indata_6_4_payload        (conv_core_s_out_6_4_payload    ), //i
    .io_indata_6_5_valid          (conv_core_s_out_6_5_valid      ), //i
    .io_indata_6_5_ready          (mux_io_indata_6_5_ready        ), //o
    .io_indata_6_5_payload        (conv_core_s_out_6_5_payload    ), //i
    .io_indata_6_6_valid          (conv_core_s_out_6_6_valid      ), //i
    .io_indata_6_6_ready          (mux_io_indata_6_6_ready        ), //o
    .io_indata_6_6_payload        (conv_core_s_out_6_6_payload    ), //i
    .io_indata_6_7_valid          (conv_core_s_out_6_7_valid      ), //i
    .io_indata_6_7_ready          (mux_io_indata_6_7_ready        ), //o
    .io_indata_6_7_payload        (conv_core_s_out_6_7_payload    ), //i
    .io_indata_7_0_valid          (conv_core_s_out_7_0_valid      ), //i
    .io_indata_7_0_ready          (mux_io_indata_7_0_ready        ), //o
    .io_indata_7_0_payload        (conv_core_s_out_7_0_payload    ), //i
    .io_indata_7_1_valid          (conv_core_s_out_7_1_valid      ), //i
    .io_indata_7_1_ready          (mux_io_indata_7_1_ready        ), //o
    .io_indata_7_1_payload        (conv_core_s_out_7_1_payload    ), //i
    .io_indata_7_2_valid          (conv_core_s_out_7_2_valid      ), //i
    .io_indata_7_2_ready          (mux_io_indata_7_2_ready        ), //o
    .io_indata_7_2_payload        (conv_core_s_out_7_2_payload    ), //i
    .io_indata_7_3_valid          (conv_core_s_out_7_3_valid      ), //i
    .io_indata_7_3_ready          (mux_io_indata_7_3_ready        ), //o
    .io_indata_7_3_payload        (conv_core_s_out_7_3_payload    ), //i
    .io_indata_7_4_valid          (conv_core_s_out_7_4_valid      ), //i
    .io_indata_7_4_ready          (mux_io_indata_7_4_ready        ), //o
    .io_indata_7_4_payload        (conv_core_s_out_7_4_payload    ), //i
    .io_indata_7_5_valid          (conv_core_s_out_7_5_valid      ), //i
    .io_indata_7_5_ready          (mux_io_indata_7_5_ready        ), //o
    .io_indata_7_5_payload        (conv_core_s_out_7_5_payload    ), //i
    .io_indata_7_6_valid          (conv_core_s_out_7_6_valid      ), //i
    .io_indata_7_6_ready          (mux_io_indata_7_6_ready        ), //o
    .io_indata_7_6_payload        (conv_core_s_out_7_6_payload    ), //i
    .io_indata_7_7_valid          (conv_core_s_out_7_7_valid      ), //i
    .io_indata_7_7_ready          (mux_io_indata_7_7_ready        ), //o
    .io_indata_7_7_payload        (conv_core_s_out_7_7_payload    ), //i
    .io_o_delta_wt_0_0_valid      (mux_io_o_delta_wt_0_0_valid    ), //o
    .io_o_delta_wt_0_0_ready      (o_delta_wt_0_0_ready           ), //i
    .io_o_delta_wt_0_0_payload    (mux_io_o_delta_wt_0_0_payload  ), //o
    .io_o_delta_wt_0_1_valid      (mux_io_o_delta_wt_0_1_valid    ), //o
    .io_o_delta_wt_0_1_ready      (o_delta_wt_0_1_ready           ), //i
    .io_o_delta_wt_0_1_payload    (mux_io_o_delta_wt_0_1_payload  ), //o
    .io_o_delta_wt_0_2_valid      (mux_io_o_delta_wt_0_2_valid    ), //o
    .io_o_delta_wt_0_2_ready      (o_delta_wt_0_2_ready           ), //i
    .io_o_delta_wt_0_2_payload    (mux_io_o_delta_wt_0_2_payload  ), //o
    .io_o_delta_wt_0_3_valid      (mux_io_o_delta_wt_0_3_valid    ), //o
    .io_o_delta_wt_0_3_ready      (o_delta_wt_0_3_ready           ), //i
    .io_o_delta_wt_0_3_payload    (mux_io_o_delta_wt_0_3_payload  ), //o
    .io_o_delta_wt_0_4_valid      (mux_io_o_delta_wt_0_4_valid    ), //o
    .io_o_delta_wt_0_4_ready      (o_delta_wt_0_4_ready           ), //i
    .io_o_delta_wt_0_4_payload    (mux_io_o_delta_wt_0_4_payload  ), //o
    .io_o_delta_wt_0_5_valid      (mux_io_o_delta_wt_0_5_valid    ), //o
    .io_o_delta_wt_0_5_ready      (o_delta_wt_0_5_ready           ), //i
    .io_o_delta_wt_0_5_payload    (mux_io_o_delta_wt_0_5_payload  ), //o
    .io_o_delta_wt_0_6_valid      (mux_io_o_delta_wt_0_6_valid    ), //o
    .io_o_delta_wt_0_6_ready      (o_delta_wt_0_6_ready           ), //i
    .io_o_delta_wt_0_6_payload    (mux_io_o_delta_wt_0_6_payload  ), //o
    .io_o_delta_wt_0_7_valid      (mux_io_o_delta_wt_0_7_valid    ), //o
    .io_o_delta_wt_0_7_ready      (o_delta_wt_0_7_ready           ), //i
    .io_o_delta_wt_0_7_payload    (mux_io_o_delta_wt_0_7_payload  ), //o
    .io_o_delta_wt_1_0_valid      (mux_io_o_delta_wt_1_0_valid    ), //o
    .io_o_delta_wt_1_0_ready      (o_delta_wt_1_0_ready           ), //i
    .io_o_delta_wt_1_0_payload    (mux_io_o_delta_wt_1_0_payload  ), //o
    .io_o_delta_wt_1_1_valid      (mux_io_o_delta_wt_1_1_valid    ), //o
    .io_o_delta_wt_1_1_ready      (o_delta_wt_1_1_ready           ), //i
    .io_o_delta_wt_1_1_payload    (mux_io_o_delta_wt_1_1_payload  ), //o
    .io_o_delta_wt_1_2_valid      (mux_io_o_delta_wt_1_2_valid    ), //o
    .io_o_delta_wt_1_2_ready      (o_delta_wt_1_2_ready           ), //i
    .io_o_delta_wt_1_2_payload    (mux_io_o_delta_wt_1_2_payload  ), //o
    .io_o_delta_wt_1_3_valid      (mux_io_o_delta_wt_1_3_valid    ), //o
    .io_o_delta_wt_1_3_ready      (o_delta_wt_1_3_ready           ), //i
    .io_o_delta_wt_1_3_payload    (mux_io_o_delta_wt_1_3_payload  ), //o
    .io_o_delta_wt_1_4_valid      (mux_io_o_delta_wt_1_4_valid    ), //o
    .io_o_delta_wt_1_4_ready      (o_delta_wt_1_4_ready           ), //i
    .io_o_delta_wt_1_4_payload    (mux_io_o_delta_wt_1_4_payload  ), //o
    .io_o_delta_wt_1_5_valid      (mux_io_o_delta_wt_1_5_valid    ), //o
    .io_o_delta_wt_1_5_ready      (o_delta_wt_1_5_ready           ), //i
    .io_o_delta_wt_1_5_payload    (mux_io_o_delta_wt_1_5_payload  ), //o
    .io_o_delta_wt_1_6_valid      (mux_io_o_delta_wt_1_6_valid    ), //o
    .io_o_delta_wt_1_6_ready      (o_delta_wt_1_6_ready           ), //i
    .io_o_delta_wt_1_6_payload    (mux_io_o_delta_wt_1_6_payload  ), //o
    .io_o_delta_wt_1_7_valid      (mux_io_o_delta_wt_1_7_valid    ), //o
    .io_o_delta_wt_1_7_ready      (o_delta_wt_1_7_ready           ), //i
    .io_o_delta_wt_1_7_payload    (mux_io_o_delta_wt_1_7_payload  ), //o
    .io_o_delta_wt_2_0_valid      (mux_io_o_delta_wt_2_0_valid    ), //o
    .io_o_delta_wt_2_0_ready      (o_delta_wt_2_0_ready           ), //i
    .io_o_delta_wt_2_0_payload    (mux_io_o_delta_wt_2_0_payload  ), //o
    .io_o_delta_wt_2_1_valid      (mux_io_o_delta_wt_2_1_valid    ), //o
    .io_o_delta_wt_2_1_ready      (o_delta_wt_2_1_ready           ), //i
    .io_o_delta_wt_2_1_payload    (mux_io_o_delta_wt_2_1_payload  ), //o
    .io_o_delta_wt_2_2_valid      (mux_io_o_delta_wt_2_2_valid    ), //o
    .io_o_delta_wt_2_2_ready      (o_delta_wt_2_2_ready           ), //i
    .io_o_delta_wt_2_2_payload    (mux_io_o_delta_wt_2_2_payload  ), //o
    .io_o_delta_wt_2_3_valid      (mux_io_o_delta_wt_2_3_valid    ), //o
    .io_o_delta_wt_2_3_ready      (o_delta_wt_2_3_ready           ), //i
    .io_o_delta_wt_2_3_payload    (mux_io_o_delta_wt_2_3_payload  ), //o
    .io_o_delta_wt_2_4_valid      (mux_io_o_delta_wt_2_4_valid    ), //o
    .io_o_delta_wt_2_4_ready      (o_delta_wt_2_4_ready           ), //i
    .io_o_delta_wt_2_4_payload    (mux_io_o_delta_wt_2_4_payload  ), //o
    .io_o_delta_wt_2_5_valid      (mux_io_o_delta_wt_2_5_valid    ), //o
    .io_o_delta_wt_2_5_ready      (o_delta_wt_2_5_ready           ), //i
    .io_o_delta_wt_2_5_payload    (mux_io_o_delta_wt_2_5_payload  ), //o
    .io_o_delta_wt_2_6_valid      (mux_io_o_delta_wt_2_6_valid    ), //o
    .io_o_delta_wt_2_6_ready      (o_delta_wt_2_6_ready           ), //i
    .io_o_delta_wt_2_6_payload    (mux_io_o_delta_wt_2_6_payload  ), //o
    .io_o_delta_wt_2_7_valid      (mux_io_o_delta_wt_2_7_valid    ), //o
    .io_o_delta_wt_2_7_ready      (o_delta_wt_2_7_ready           ), //i
    .io_o_delta_wt_2_7_payload    (mux_io_o_delta_wt_2_7_payload  ), //o
    .io_o_delta_wt_3_0_valid      (mux_io_o_delta_wt_3_0_valid    ), //o
    .io_o_delta_wt_3_0_ready      (o_delta_wt_3_0_ready           ), //i
    .io_o_delta_wt_3_0_payload    (mux_io_o_delta_wt_3_0_payload  ), //o
    .io_o_delta_wt_3_1_valid      (mux_io_o_delta_wt_3_1_valid    ), //o
    .io_o_delta_wt_3_1_ready      (o_delta_wt_3_1_ready           ), //i
    .io_o_delta_wt_3_1_payload    (mux_io_o_delta_wt_3_1_payload  ), //o
    .io_o_delta_wt_3_2_valid      (mux_io_o_delta_wt_3_2_valid    ), //o
    .io_o_delta_wt_3_2_ready      (o_delta_wt_3_2_ready           ), //i
    .io_o_delta_wt_3_2_payload    (mux_io_o_delta_wt_3_2_payload  ), //o
    .io_o_delta_wt_3_3_valid      (mux_io_o_delta_wt_3_3_valid    ), //o
    .io_o_delta_wt_3_3_ready      (o_delta_wt_3_3_ready           ), //i
    .io_o_delta_wt_3_3_payload    (mux_io_o_delta_wt_3_3_payload  ), //o
    .io_o_delta_wt_3_4_valid      (mux_io_o_delta_wt_3_4_valid    ), //o
    .io_o_delta_wt_3_4_ready      (o_delta_wt_3_4_ready           ), //i
    .io_o_delta_wt_3_4_payload    (mux_io_o_delta_wt_3_4_payload  ), //o
    .io_o_delta_wt_3_5_valid      (mux_io_o_delta_wt_3_5_valid    ), //o
    .io_o_delta_wt_3_5_ready      (o_delta_wt_3_5_ready           ), //i
    .io_o_delta_wt_3_5_payload    (mux_io_o_delta_wt_3_5_payload  ), //o
    .io_o_delta_wt_3_6_valid      (mux_io_o_delta_wt_3_6_valid    ), //o
    .io_o_delta_wt_3_6_ready      (o_delta_wt_3_6_ready           ), //i
    .io_o_delta_wt_3_6_payload    (mux_io_o_delta_wt_3_6_payload  ), //o
    .io_o_delta_wt_3_7_valid      (mux_io_o_delta_wt_3_7_valid    ), //o
    .io_o_delta_wt_3_7_ready      (o_delta_wt_3_7_ready           ), //i
    .io_o_delta_wt_3_7_payload    (mux_io_o_delta_wt_3_7_payload  ), //o
    .io_o_delta_wt_4_0_valid      (mux_io_o_delta_wt_4_0_valid    ), //o
    .io_o_delta_wt_4_0_ready      (o_delta_wt_4_0_ready           ), //i
    .io_o_delta_wt_4_0_payload    (mux_io_o_delta_wt_4_0_payload  ), //o
    .io_o_delta_wt_4_1_valid      (mux_io_o_delta_wt_4_1_valid    ), //o
    .io_o_delta_wt_4_1_ready      (o_delta_wt_4_1_ready           ), //i
    .io_o_delta_wt_4_1_payload    (mux_io_o_delta_wt_4_1_payload  ), //o
    .io_o_delta_wt_4_2_valid      (mux_io_o_delta_wt_4_2_valid    ), //o
    .io_o_delta_wt_4_2_ready      (o_delta_wt_4_2_ready           ), //i
    .io_o_delta_wt_4_2_payload    (mux_io_o_delta_wt_4_2_payload  ), //o
    .io_o_delta_wt_4_3_valid      (mux_io_o_delta_wt_4_3_valid    ), //o
    .io_o_delta_wt_4_3_ready      (o_delta_wt_4_3_ready           ), //i
    .io_o_delta_wt_4_3_payload    (mux_io_o_delta_wt_4_3_payload  ), //o
    .io_o_delta_wt_4_4_valid      (mux_io_o_delta_wt_4_4_valid    ), //o
    .io_o_delta_wt_4_4_ready      (o_delta_wt_4_4_ready           ), //i
    .io_o_delta_wt_4_4_payload    (mux_io_o_delta_wt_4_4_payload  ), //o
    .io_o_delta_wt_4_5_valid      (mux_io_o_delta_wt_4_5_valid    ), //o
    .io_o_delta_wt_4_5_ready      (o_delta_wt_4_5_ready           ), //i
    .io_o_delta_wt_4_5_payload    (mux_io_o_delta_wt_4_5_payload  ), //o
    .io_o_delta_wt_4_6_valid      (mux_io_o_delta_wt_4_6_valid    ), //o
    .io_o_delta_wt_4_6_ready      (o_delta_wt_4_6_ready           ), //i
    .io_o_delta_wt_4_6_payload    (mux_io_o_delta_wt_4_6_payload  ), //o
    .io_o_delta_wt_4_7_valid      (mux_io_o_delta_wt_4_7_valid    ), //o
    .io_o_delta_wt_4_7_ready      (o_delta_wt_4_7_ready           ), //i
    .io_o_delta_wt_4_7_payload    (mux_io_o_delta_wt_4_7_payload  ), //o
    .io_o_delta_wt_5_0_valid      (mux_io_o_delta_wt_5_0_valid    ), //o
    .io_o_delta_wt_5_0_ready      (o_delta_wt_5_0_ready           ), //i
    .io_o_delta_wt_5_0_payload    (mux_io_o_delta_wt_5_0_payload  ), //o
    .io_o_delta_wt_5_1_valid      (mux_io_o_delta_wt_5_1_valid    ), //o
    .io_o_delta_wt_5_1_ready      (o_delta_wt_5_1_ready           ), //i
    .io_o_delta_wt_5_1_payload    (mux_io_o_delta_wt_5_1_payload  ), //o
    .io_o_delta_wt_5_2_valid      (mux_io_o_delta_wt_5_2_valid    ), //o
    .io_o_delta_wt_5_2_ready      (o_delta_wt_5_2_ready           ), //i
    .io_o_delta_wt_5_2_payload    (mux_io_o_delta_wt_5_2_payload  ), //o
    .io_o_delta_wt_5_3_valid      (mux_io_o_delta_wt_5_3_valid    ), //o
    .io_o_delta_wt_5_3_ready      (o_delta_wt_5_3_ready           ), //i
    .io_o_delta_wt_5_3_payload    (mux_io_o_delta_wt_5_3_payload  ), //o
    .io_o_delta_wt_5_4_valid      (mux_io_o_delta_wt_5_4_valid    ), //o
    .io_o_delta_wt_5_4_ready      (o_delta_wt_5_4_ready           ), //i
    .io_o_delta_wt_5_4_payload    (mux_io_o_delta_wt_5_4_payload  ), //o
    .io_o_delta_wt_5_5_valid      (mux_io_o_delta_wt_5_5_valid    ), //o
    .io_o_delta_wt_5_5_ready      (o_delta_wt_5_5_ready           ), //i
    .io_o_delta_wt_5_5_payload    (mux_io_o_delta_wt_5_5_payload  ), //o
    .io_o_delta_wt_5_6_valid      (mux_io_o_delta_wt_5_6_valid    ), //o
    .io_o_delta_wt_5_6_ready      (o_delta_wt_5_6_ready           ), //i
    .io_o_delta_wt_5_6_payload    (mux_io_o_delta_wt_5_6_payload  ), //o
    .io_o_delta_wt_5_7_valid      (mux_io_o_delta_wt_5_7_valid    ), //o
    .io_o_delta_wt_5_7_ready      (o_delta_wt_5_7_ready           ), //i
    .io_o_delta_wt_5_7_payload    (mux_io_o_delta_wt_5_7_payload  ), //o
    .io_o_delta_wt_6_0_valid      (mux_io_o_delta_wt_6_0_valid    ), //o
    .io_o_delta_wt_6_0_ready      (o_delta_wt_6_0_ready           ), //i
    .io_o_delta_wt_6_0_payload    (mux_io_o_delta_wt_6_0_payload  ), //o
    .io_o_delta_wt_6_1_valid      (mux_io_o_delta_wt_6_1_valid    ), //o
    .io_o_delta_wt_6_1_ready      (o_delta_wt_6_1_ready           ), //i
    .io_o_delta_wt_6_1_payload    (mux_io_o_delta_wt_6_1_payload  ), //o
    .io_o_delta_wt_6_2_valid      (mux_io_o_delta_wt_6_2_valid    ), //o
    .io_o_delta_wt_6_2_ready      (o_delta_wt_6_2_ready           ), //i
    .io_o_delta_wt_6_2_payload    (mux_io_o_delta_wt_6_2_payload  ), //o
    .io_o_delta_wt_6_3_valid      (mux_io_o_delta_wt_6_3_valid    ), //o
    .io_o_delta_wt_6_3_ready      (o_delta_wt_6_3_ready           ), //i
    .io_o_delta_wt_6_3_payload    (mux_io_o_delta_wt_6_3_payload  ), //o
    .io_o_delta_wt_6_4_valid      (mux_io_o_delta_wt_6_4_valid    ), //o
    .io_o_delta_wt_6_4_ready      (o_delta_wt_6_4_ready           ), //i
    .io_o_delta_wt_6_4_payload    (mux_io_o_delta_wt_6_4_payload  ), //o
    .io_o_delta_wt_6_5_valid      (mux_io_o_delta_wt_6_5_valid    ), //o
    .io_o_delta_wt_6_5_ready      (o_delta_wt_6_5_ready           ), //i
    .io_o_delta_wt_6_5_payload    (mux_io_o_delta_wt_6_5_payload  ), //o
    .io_o_delta_wt_6_6_valid      (mux_io_o_delta_wt_6_6_valid    ), //o
    .io_o_delta_wt_6_6_ready      (o_delta_wt_6_6_ready           ), //i
    .io_o_delta_wt_6_6_payload    (mux_io_o_delta_wt_6_6_payload  ), //o
    .io_o_delta_wt_6_7_valid      (mux_io_o_delta_wt_6_7_valid    ), //o
    .io_o_delta_wt_6_7_ready      (o_delta_wt_6_7_ready           ), //i
    .io_o_delta_wt_6_7_payload    (mux_io_o_delta_wt_6_7_payload  ), //o
    .io_o_delta_wt_7_0_valid      (mux_io_o_delta_wt_7_0_valid    ), //o
    .io_o_delta_wt_7_0_ready      (o_delta_wt_7_0_ready           ), //i
    .io_o_delta_wt_7_0_payload    (mux_io_o_delta_wt_7_0_payload  ), //o
    .io_o_delta_wt_7_1_valid      (mux_io_o_delta_wt_7_1_valid    ), //o
    .io_o_delta_wt_7_1_ready      (o_delta_wt_7_1_ready           ), //i
    .io_o_delta_wt_7_1_payload    (mux_io_o_delta_wt_7_1_payload  ), //o
    .io_o_delta_wt_7_2_valid      (mux_io_o_delta_wt_7_2_valid    ), //o
    .io_o_delta_wt_7_2_ready      (o_delta_wt_7_2_ready           ), //i
    .io_o_delta_wt_7_2_payload    (mux_io_o_delta_wt_7_2_payload  ), //o
    .io_o_delta_wt_7_3_valid      (mux_io_o_delta_wt_7_3_valid    ), //o
    .io_o_delta_wt_7_3_ready      (o_delta_wt_7_3_ready           ), //i
    .io_o_delta_wt_7_3_payload    (mux_io_o_delta_wt_7_3_payload  ), //o
    .io_o_delta_wt_7_4_valid      (mux_io_o_delta_wt_7_4_valid    ), //o
    .io_o_delta_wt_7_4_ready      (o_delta_wt_7_4_ready           ), //i
    .io_o_delta_wt_7_4_payload    (mux_io_o_delta_wt_7_4_payload  ), //o
    .io_o_delta_wt_7_5_valid      (mux_io_o_delta_wt_7_5_valid    ), //o
    .io_o_delta_wt_7_5_ready      (o_delta_wt_7_5_ready           ), //i
    .io_o_delta_wt_7_5_payload    (mux_io_o_delta_wt_7_5_payload  ), //o
    .io_o_delta_wt_7_6_valid      (mux_io_o_delta_wt_7_6_valid    ), //o
    .io_o_delta_wt_7_6_ready      (o_delta_wt_7_6_ready           ), //i
    .io_o_delta_wt_7_6_payload    (mux_io_o_delta_wt_7_6_payload  ), //o
    .io_o_delta_wt_7_7_valid      (mux_io_o_delta_wt_7_7_valid    ), //o
    .io_o_delta_wt_7_7_ready      (o_delta_wt_7_7_ready           ), //i
    .io_o_delta_wt_7_7_payload    (mux_io_o_delta_wt_7_7_payload  ), //o
    .io_o_sigma_0_0_valid         (mux_io_o_sigma_0_0_valid       ), //o
    .io_o_sigma_0_0_ready         (o_sigma_0_0_ready              ), //i
    .io_o_sigma_0_0_payload       (mux_io_o_sigma_0_0_payload     ), //o
    .io_o_sigma_0_1_valid         (mux_io_o_sigma_0_1_valid       ), //o
    .io_o_sigma_0_1_ready         (o_sigma_0_1_ready              ), //i
    .io_o_sigma_0_1_payload       (mux_io_o_sigma_0_1_payload     ), //o
    .io_o_sigma_0_2_valid         (mux_io_o_sigma_0_2_valid       ), //o
    .io_o_sigma_0_2_ready         (o_sigma_0_2_ready              ), //i
    .io_o_sigma_0_2_payload       (mux_io_o_sigma_0_2_payload     ), //o
    .io_o_sigma_0_3_valid         (mux_io_o_sigma_0_3_valid       ), //o
    .io_o_sigma_0_3_ready         (o_sigma_0_3_ready              ), //i
    .io_o_sigma_0_3_payload       (mux_io_o_sigma_0_3_payload     ), //o
    .io_o_sigma_0_4_valid         (mux_io_o_sigma_0_4_valid       ), //o
    .io_o_sigma_0_4_ready         (o_sigma_0_4_ready              ), //i
    .io_o_sigma_0_4_payload       (mux_io_o_sigma_0_4_payload     ), //o
    .io_o_sigma_0_5_valid         (mux_io_o_sigma_0_5_valid       ), //o
    .io_o_sigma_0_5_ready         (o_sigma_0_5_ready              ), //i
    .io_o_sigma_0_5_payload       (mux_io_o_sigma_0_5_payload     ), //o
    .io_o_sigma_0_6_valid         (mux_io_o_sigma_0_6_valid       ), //o
    .io_o_sigma_0_6_ready         (o_sigma_0_6_ready              ), //i
    .io_o_sigma_0_6_payload       (mux_io_o_sigma_0_6_payload     ), //o
    .io_o_sigma_0_7_valid         (mux_io_o_sigma_0_7_valid       ), //o
    .io_o_sigma_0_7_ready         (o_sigma_0_7_ready              ), //i
    .io_o_sigma_0_7_payload       (mux_io_o_sigma_0_7_payload     ), //o
    .io_o_sigma_1_0_valid         (mux_io_o_sigma_1_0_valid       ), //o
    .io_o_sigma_1_0_ready         (o_sigma_1_0_ready              ), //i
    .io_o_sigma_1_0_payload       (mux_io_o_sigma_1_0_payload     ), //o
    .io_o_sigma_1_1_valid         (mux_io_o_sigma_1_1_valid       ), //o
    .io_o_sigma_1_1_ready         (o_sigma_1_1_ready              ), //i
    .io_o_sigma_1_1_payload       (mux_io_o_sigma_1_1_payload     ), //o
    .io_o_sigma_1_2_valid         (mux_io_o_sigma_1_2_valid       ), //o
    .io_o_sigma_1_2_ready         (o_sigma_1_2_ready              ), //i
    .io_o_sigma_1_2_payload       (mux_io_o_sigma_1_2_payload     ), //o
    .io_o_sigma_1_3_valid         (mux_io_o_sigma_1_3_valid       ), //o
    .io_o_sigma_1_3_ready         (o_sigma_1_3_ready              ), //i
    .io_o_sigma_1_3_payload       (mux_io_o_sigma_1_3_payload     ), //o
    .io_o_sigma_1_4_valid         (mux_io_o_sigma_1_4_valid       ), //o
    .io_o_sigma_1_4_ready         (o_sigma_1_4_ready              ), //i
    .io_o_sigma_1_4_payload       (mux_io_o_sigma_1_4_payload     ), //o
    .io_o_sigma_1_5_valid         (mux_io_o_sigma_1_5_valid       ), //o
    .io_o_sigma_1_5_ready         (o_sigma_1_5_ready              ), //i
    .io_o_sigma_1_5_payload       (mux_io_o_sigma_1_5_payload     ), //o
    .io_o_sigma_1_6_valid         (mux_io_o_sigma_1_6_valid       ), //o
    .io_o_sigma_1_6_ready         (o_sigma_1_6_ready              ), //i
    .io_o_sigma_1_6_payload       (mux_io_o_sigma_1_6_payload     ), //o
    .io_o_sigma_1_7_valid         (mux_io_o_sigma_1_7_valid       ), //o
    .io_o_sigma_1_7_ready         (o_sigma_1_7_ready              ), //i
    .io_o_sigma_1_7_payload       (mux_io_o_sigma_1_7_payload     ), //o
    .io_o_sigma_2_0_valid         (mux_io_o_sigma_2_0_valid       ), //o
    .io_o_sigma_2_0_ready         (o_sigma_2_0_ready              ), //i
    .io_o_sigma_2_0_payload       (mux_io_o_sigma_2_0_payload     ), //o
    .io_o_sigma_2_1_valid         (mux_io_o_sigma_2_1_valid       ), //o
    .io_o_sigma_2_1_ready         (o_sigma_2_1_ready              ), //i
    .io_o_sigma_2_1_payload       (mux_io_o_sigma_2_1_payload     ), //o
    .io_o_sigma_2_2_valid         (mux_io_o_sigma_2_2_valid       ), //o
    .io_o_sigma_2_2_ready         (o_sigma_2_2_ready              ), //i
    .io_o_sigma_2_2_payload       (mux_io_o_sigma_2_2_payload     ), //o
    .io_o_sigma_2_3_valid         (mux_io_o_sigma_2_3_valid       ), //o
    .io_o_sigma_2_3_ready         (o_sigma_2_3_ready              ), //i
    .io_o_sigma_2_3_payload       (mux_io_o_sigma_2_3_payload     ), //o
    .io_o_sigma_2_4_valid         (mux_io_o_sigma_2_4_valid       ), //o
    .io_o_sigma_2_4_ready         (o_sigma_2_4_ready              ), //i
    .io_o_sigma_2_4_payload       (mux_io_o_sigma_2_4_payload     ), //o
    .io_o_sigma_2_5_valid         (mux_io_o_sigma_2_5_valid       ), //o
    .io_o_sigma_2_5_ready         (o_sigma_2_5_ready              ), //i
    .io_o_sigma_2_5_payload       (mux_io_o_sigma_2_5_payload     ), //o
    .io_o_sigma_2_6_valid         (mux_io_o_sigma_2_6_valid       ), //o
    .io_o_sigma_2_6_ready         (o_sigma_2_6_ready              ), //i
    .io_o_sigma_2_6_payload       (mux_io_o_sigma_2_6_payload     ), //o
    .io_o_sigma_2_7_valid         (mux_io_o_sigma_2_7_valid       ), //o
    .io_o_sigma_2_7_ready         (o_sigma_2_7_ready              ), //i
    .io_o_sigma_2_7_payload       (mux_io_o_sigma_2_7_payload     ), //o
    .io_o_sigma_3_0_valid         (mux_io_o_sigma_3_0_valid       ), //o
    .io_o_sigma_3_0_ready         (o_sigma_3_0_ready              ), //i
    .io_o_sigma_3_0_payload       (mux_io_o_sigma_3_0_payload     ), //o
    .io_o_sigma_3_1_valid         (mux_io_o_sigma_3_1_valid       ), //o
    .io_o_sigma_3_1_ready         (o_sigma_3_1_ready              ), //i
    .io_o_sigma_3_1_payload       (mux_io_o_sigma_3_1_payload     ), //o
    .io_o_sigma_3_2_valid         (mux_io_o_sigma_3_2_valid       ), //o
    .io_o_sigma_3_2_ready         (o_sigma_3_2_ready              ), //i
    .io_o_sigma_3_2_payload       (mux_io_o_sigma_3_2_payload     ), //o
    .io_o_sigma_3_3_valid         (mux_io_o_sigma_3_3_valid       ), //o
    .io_o_sigma_3_3_ready         (o_sigma_3_3_ready              ), //i
    .io_o_sigma_3_3_payload       (mux_io_o_sigma_3_3_payload     ), //o
    .io_o_sigma_3_4_valid         (mux_io_o_sigma_3_4_valid       ), //o
    .io_o_sigma_3_4_ready         (o_sigma_3_4_ready              ), //i
    .io_o_sigma_3_4_payload       (mux_io_o_sigma_3_4_payload     ), //o
    .io_o_sigma_3_5_valid         (mux_io_o_sigma_3_5_valid       ), //o
    .io_o_sigma_3_5_ready         (o_sigma_3_5_ready              ), //i
    .io_o_sigma_3_5_payload       (mux_io_o_sigma_3_5_payload     ), //o
    .io_o_sigma_3_6_valid         (mux_io_o_sigma_3_6_valid       ), //o
    .io_o_sigma_3_6_ready         (o_sigma_3_6_ready              ), //i
    .io_o_sigma_3_6_payload       (mux_io_o_sigma_3_6_payload     ), //o
    .io_o_sigma_3_7_valid         (mux_io_o_sigma_3_7_valid       ), //o
    .io_o_sigma_3_7_ready         (o_sigma_3_7_ready              ), //i
    .io_o_sigma_3_7_payload       (mux_io_o_sigma_3_7_payload     ), //o
    .io_o_sigma_4_0_valid         (mux_io_o_sigma_4_0_valid       ), //o
    .io_o_sigma_4_0_ready         (o_sigma_4_0_ready              ), //i
    .io_o_sigma_4_0_payload       (mux_io_o_sigma_4_0_payload     ), //o
    .io_o_sigma_4_1_valid         (mux_io_o_sigma_4_1_valid       ), //o
    .io_o_sigma_4_1_ready         (o_sigma_4_1_ready              ), //i
    .io_o_sigma_4_1_payload       (mux_io_o_sigma_4_1_payload     ), //o
    .io_o_sigma_4_2_valid         (mux_io_o_sigma_4_2_valid       ), //o
    .io_o_sigma_4_2_ready         (o_sigma_4_2_ready              ), //i
    .io_o_sigma_4_2_payload       (mux_io_o_sigma_4_2_payload     ), //o
    .io_o_sigma_4_3_valid         (mux_io_o_sigma_4_3_valid       ), //o
    .io_o_sigma_4_3_ready         (o_sigma_4_3_ready              ), //i
    .io_o_sigma_4_3_payload       (mux_io_o_sigma_4_3_payload     ), //o
    .io_o_sigma_4_4_valid         (mux_io_o_sigma_4_4_valid       ), //o
    .io_o_sigma_4_4_ready         (o_sigma_4_4_ready              ), //i
    .io_o_sigma_4_4_payload       (mux_io_o_sigma_4_4_payload     ), //o
    .io_o_sigma_4_5_valid         (mux_io_o_sigma_4_5_valid       ), //o
    .io_o_sigma_4_5_ready         (o_sigma_4_5_ready              ), //i
    .io_o_sigma_4_5_payload       (mux_io_o_sigma_4_5_payload     ), //o
    .io_o_sigma_4_6_valid         (mux_io_o_sigma_4_6_valid       ), //o
    .io_o_sigma_4_6_ready         (o_sigma_4_6_ready              ), //i
    .io_o_sigma_4_6_payload       (mux_io_o_sigma_4_6_payload     ), //o
    .io_o_sigma_4_7_valid         (mux_io_o_sigma_4_7_valid       ), //o
    .io_o_sigma_4_7_ready         (o_sigma_4_7_ready              ), //i
    .io_o_sigma_4_7_payload       (mux_io_o_sigma_4_7_payload     ), //o
    .io_o_sigma_5_0_valid         (mux_io_o_sigma_5_0_valid       ), //o
    .io_o_sigma_5_0_ready         (o_sigma_5_0_ready              ), //i
    .io_o_sigma_5_0_payload       (mux_io_o_sigma_5_0_payload     ), //o
    .io_o_sigma_5_1_valid         (mux_io_o_sigma_5_1_valid       ), //o
    .io_o_sigma_5_1_ready         (o_sigma_5_1_ready              ), //i
    .io_o_sigma_5_1_payload       (mux_io_o_sigma_5_1_payload     ), //o
    .io_o_sigma_5_2_valid         (mux_io_o_sigma_5_2_valid       ), //o
    .io_o_sigma_5_2_ready         (o_sigma_5_2_ready              ), //i
    .io_o_sigma_5_2_payload       (mux_io_o_sigma_5_2_payload     ), //o
    .io_o_sigma_5_3_valid         (mux_io_o_sigma_5_3_valid       ), //o
    .io_o_sigma_5_3_ready         (o_sigma_5_3_ready              ), //i
    .io_o_sigma_5_3_payload       (mux_io_o_sigma_5_3_payload     ), //o
    .io_o_sigma_5_4_valid         (mux_io_o_sigma_5_4_valid       ), //o
    .io_o_sigma_5_4_ready         (o_sigma_5_4_ready              ), //i
    .io_o_sigma_5_4_payload       (mux_io_o_sigma_5_4_payload     ), //o
    .io_o_sigma_5_5_valid         (mux_io_o_sigma_5_5_valid       ), //o
    .io_o_sigma_5_5_ready         (o_sigma_5_5_ready              ), //i
    .io_o_sigma_5_5_payload       (mux_io_o_sigma_5_5_payload     ), //o
    .io_o_sigma_5_6_valid         (mux_io_o_sigma_5_6_valid       ), //o
    .io_o_sigma_5_6_ready         (o_sigma_5_6_ready              ), //i
    .io_o_sigma_5_6_payload       (mux_io_o_sigma_5_6_payload     ), //o
    .io_o_sigma_5_7_valid         (mux_io_o_sigma_5_7_valid       ), //o
    .io_o_sigma_5_7_ready         (o_sigma_5_7_ready              ), //i
    .io_o_sigma_5_7_payload       (mux_io_o_sigma_5_7_payload     ), //o
    .io_o_sigma_6_0_valid         (mux_io_o_sigma_6_0_valid       ), //o
    .io_o_sigma_6_0_ready         (o_sigma_6_0_ready              ), //i
    .io_o_sigma_6_0_payload       (mux_io_o_sigma_6_0_payload     ), //o
    .io_o_sigma_6_1_valid         (mux_io_o_sigma_6_1_valid       ), //o
    .io_o_sigma_6_1_ready         (o_sigma_6_1_ready              ), //i
    .io_o_sigma_6_1_payload       (mux_io_o_sigma_6_1_payload     ), //o
    .io_o_sigma_6_2_valid         (mux_io_o_sigma_6_2_valid       ), //o
    .io_o_sigma_6_2_ready         (o_sigma_6_2_ready              ), //i
    .io_o_sigma_6_2_payload       (mux_io_o_sigma_6_2_payload     ), //o
    .io_o_sigma_6_3_valid         (mux_io_o_sigma_6_3_valid       ), //o
    .io_o_sigma_6_3_ready         (o_sigma_6_3_ready              ), //i
    .io_o_sigma_6_3_payload       (mux_io_o_sigma_6_3_payload     ), //o
    .io_o_sigma_6_4_valid         (mux_io_o_sigma_6_4_valid       ), //o
    .io_o_sigma_6_4_ready         (o_sigma_6_4_ready              ), //i
    .io_o_sigma_6_4_payload       (mux_io_o_sigma_6_4_payload     ), //o
    .io_o_sigma_6_5_valid         (mux_io_o_sigma_6_5_valid       ), //o
    .io_o_sigma_6_5_ready         (o_sigma_6_5_ready              ), //i
    .io_o_sigma_6_5_payload       (mux_io_o_sigma_6_5_payload     ), //o
    .io_o_sigma_6_6_valid         (mux_io_o_sigma_6_6_valid       ), //o
    .io_o_sigma_6_6_ready         (o_sigma_6_6_ready              ), //i
    .io_o_sigma_6_6_payload       (mux_io_o_sigma_6_6_payload     ), //o
    .io_o_sigma_6_7_valid         (mux_io_o_sigma_6_7_valid       ), //o
    .io_o_sigma_6_7_ready         (o_sigma_6_7_ready              ), //i
    .io_o_sigma_6_7_payload       (mux_io_o_sigma_6_7_payload     ), //o
    .io_o_sigma_7_0_valid         (mux_io_o_sigma_7_0_valid       ), //o
    .io_o_sigma_7_0_ready         (o_sigma_7_0_ready              ), //i
    .io_o_sigma_7_0_payload       (mux_io_o_sigma_7_0_payload     ), //o
    .io_o_sigma_7_1_valid         (mux_io_o_sigma_7_1_valid       ), //o
    .io_o_sigma_7_1_ready         (o_sigma_7_1_ready              ), //i
    .io_o_sigma_7_1_payload       (mux_io_o_sigma_7_1_payload     ), //o
    .io_o_sigma_7_2_valid         (mux_io_o_sigma_7_2_valid       ), //o
    .io_o_sigma_7_2_ready         (o_sigma_7_2_ready              ), //i
    .io_o_sigma_7_2_payload       (mux_io_o_sigma_7_2_payload     ), //o
    .io_o_sigma_7_3_valid         (mux_io_o_sigma_7_3_valid       ), //o
    .io_o_sigma_7_3_ready         (o_sigma_7_3_ready              ), //i
    .io_o_sigma_7_3_payload       (mux_io_o_sigma_7_3_payload     ), //o
    .io_o_sigma_7_4_valid         (mux_io_o_sigma_7_4_valid       ), //o
    .io_o_sigma_7_4_ready         (o_sigma_7_4_ready              ), //i
    .io_o_sigma_7_4_payload       (mux_io_o_sigma_7_4_payload     ), //o
    .io_o_sigma_7_5_valid         (mux_io_o_sigma_7_5_valid       ), //o
    .io_o_sigma_7_5_ready         (o_sigma_7_5_ready              ), //i
    .io_o_sigma_7_5_payload       (mux_io_o_sigma_7_5_payload     ), //o
    .io_o_sigma_7_6_valid         (mux_io_o_sigma_7_6_valid       ), //o
    .io_o_sigma_7_6_ready         (o_sigma_7_6_ready              ), //i
    .io_o_sigma_7_6_payload       (mux_io_o_sigma_7_6_payload     ), //o
    .io_o_sigma_7_7_valid         (mux_io_o_sigma_7_7_valid       ), //o
    .io_o_sigma_7_7_ready         (o_sigma_7_7_ready              ), //i
    .io_o_sigma_7_7_payload       (mux_io_o_sigma_7_7_payload     ), //o
    .clk                          (clk                            ), //i
    .reset                        (reset                          )  //i
  );
  assign dt_ramrd_addr = read_req_dt_ramrd_addr;
  assign dt_ramrd_en = read_req_dt_ramrd_en;
  assign wt_ramrd_0_addr = read_req_wt_ramrd_0_addr;
  assign wt_ramrd_0_en = read_req_wt_ramrd_0_en;
  assign wt_ramrd_1_addr = read_req_wt_ramrd_1_addr;
  assign wt_ramrd_1_en = read_req_wt_ramrd_1_en;
  assign wt_ramrd_2_addr = read_req_wt_ramrd_2_addr;
  assign wt_ramrd_2_en = read_req_wt_ramrd_2_en;
  assign wt_ramrd_3_addr = read_req_wt_ramrd_3_addr;
  assign wt_ramrd_3_en = read_req_wt_ramrd_3_en;
  assign wt_ramrd_4_addr = read_req_wt_ramrd_4_addr;
  assign wt_ramrd_4_en = read_req_wt_ramrd_4_en;
  assign wt_ramrd_5_addr = read_req_wt_ramrd_5_addr;
  assign wt_ramrd_5_en = read_req_wt_ramrd_5_en;
  assign wt_ramrd_6_addr = read_req_wt_ramrd_6_addr;
  assign wt_ramrd_6_en = read_req_wt_ramrd_6_en;
  assign wt_ramrd_7_addr = read_req_wt_ramrd_7_addr;
  assign wt_ramrd_7_en = read_req_wt_ramrd_7_en;
  assign o_delta_wt_0_0_valid = mux_io_o_delta_wt_0_0_valid;
  assign o_delta_wt_0_0_payload = mux_io_o_delta_wt_0_0_payload;
  assign o_delta_wt_0_1_valid = mux_io_o_delta_wt_0_1_valid;
  assign o_delta_wt_0_1_payload = mux_io_o_delta_wt_0_1_payload;
  assign o_delta_wt_0_2_valid = mux_io_o_delta_wt_0_2_valid;
  assign o_delta_wt_0_2_payload = mux_io_o_delta_wt_0_2_payload;
  assign o_delta_wt_0_3_valid = mux_io_o_delta_wt_0_3_valid;
  assign o_delta_wt_0_3_payload = mux_io_o_delta_wt_0_3_payload;
  assign o_delta_wt_0_4_valid = mux_io_o_delta_wt_0_4_valid;
  assign o_delta_wt_0_4_payload = mux_io_o_delta_wt_0_4_payload;
  assign o_delta_wt_0_5_valid = mux_io_o_delta_wt_0_5_valid;
  assign o_delta_wt_0_5_payload = mux_io_o_delta_wt_0_5_payload;
  assign o_delta_wt_0_6_valid = mux_io_o_delta_wt_0_6_valid;
  assign o_delta_wt_0_6_payload = mux_io_o_delta_wt_0_6_payload;
  assign o_delta_wt_0_7_valid = mux_io_o_delta_wt_0_7_valid;
  assign o_delta_wt_0_7_payload = mux_io_o_delta_wt_0_7_payload;
  assign o_delta_wt_1_0_valid = mux_io_o_delta_wt_1_0_valid;
  assign o_delta_wt_1_0_payload = mux_io_o_delta_wt_1_0_payload;
  assign o_delta_wt_1_1_valid = mux_io_o_delta_wt_1_1_valid;
  assign o_delta_wt_1_1_payload = mux_io_o_delta_wt_1_1_payload;
  assign o_delta_wt_1_2_valid = mux_io_o_delta_wt_1_2_valid;
  assign o_delta_wt_1_2_payload = mux_io_o_delta_wt_1_2_payload;
  assign o_delta_wt_1_3_valid = mux_io_o_delta_wt_1_3_valid;
  assign o_delta_wt_1_3_payload = mux_io_o_delta_wt_1_3_payload;
  assign o_delta_wt_1_4_valid = mux_io_o_delta_wt_1_4_valid;
  assign o_delta_wt_1_4_payload = mux_io_o_delta_wt_1_4_payload;
  assign o_delta_wt_1_5_valid = mux_io_o_delta_wt_1_5_valid;
  assign o_delta_wt_1_5_payload = mux_io_o_delta_wt_1_5_payload;
  assign o_delta_wt_1_6_valid = mux_io_o_delta_wt_1_6_valid;
  assign o_delta_wt_1_6_payload = mux_io_o_delta_wt_1_6_payload;
  assign o_delta_wt_1_7_valid = mux_io_o_delta_wt_1_7_valid;
  assign o_delta_wt_1_7_payload = mux_io_o_delta_wt_1_7_payload;
  assign o_delta_wt_2_0_valid = mux_io_o_delta_wt_2_0_valid;
  assign o_delta_wt_2_0_payload = mux_io_o_delta_wt_2_0_payload;
  assign o_delta_wt_2_1_valid = mux_io_o_delta_wt_2_1_valid;
  assign o_delta_wt_2_1_payload = mux_io_o_delta_wt_2_1_payload;
  assign o_delta_wt_2_2_valid = mux_io_o_delta_wt_2_2_valid;
  assign o_delta_wt_2_2_payload = mux_io_o_delta_wt_2_2_payload;
  assign o_delta_wt_2_3_valid = mux_io_o_delta_wt_2_3_valid;
  assign o_delta_wt_2_3_payload = mux_io_o_delta_wt_2_3_payload;
  assign o_delta_wt_2_4_valid = mux_io_o_delta_wt_2_4_valid;
  assign o_delta_wt_2_4_payload = mux_io_o_delta_wt_2_4_payload;
  assign o_delta_wt_2_5_valid = mux_io_o_delta_wt_2_5_valid;
  assign o_delta_wt_2_5_payload = mux_io_o_delta_wt_2_5_payload;
  assign o_delta_wt_2_6_valid = mux_io_o_delta_wt_2_6_valid;
  assign o_delta_wt_2_6_payload = mux_io_o_delta_wt_2_6_payload;
  assign o_delta_wt_2_7_valid = mux_io_o_delta_wt_2_7_valid;
  assign o_delta_wt_2_7_payload = mux_io_o_delta_wt_2_7_payload;
  assign o_delta_wt_3_0_valid = mux_io_o_delta_wt_3_0_valid;
  assign o_delta_wt_3_0_payload = mux_io_o_delta_wt_3_0_payload;
  assign o_delta_wt_3_1_valid = mux_io_o_delta_wt_3_1_valid;
  assign o_delta_wt_3_1_payload = mux_io_o_delta_wt_3_1_payload;
  assign o_delta_wt_3_2_valid = mux_io_o_delta_wt_3_2_valid;
  assign o_delta_wt_3_2_payload = mux_io_o_delta_wt_3_2_payload;
  assign o_delta_wt_3_3_valid = mux_io_o_delta_wt_3_3_valid;
  assign o_delta_wt_3_3_payload = mux_io_o_delta_wt_3_3_payload;
  assign o_delta_wt_3_4_valid = mux_io_o_delta_wt_3_4_valid;
  assign o_delta_wt_3_4_payload = mux_io_o_delta_wt_3_4_payload;
  assign o_delta_wt_3_5_valid = mux_io_o_delta_wt_3_5_valid;
  assign o_delta_wt_3_5_payload = mux_io_o_delta_wt_3_5_payload;
  assign o_delta_wt_3_6_valid = mux_io_o_delta_wt_3_6_valid;
  assign o_delta_wt_3_6_payload = mux_io_o_delta_wt_3_6_payload;
  assign o_delta_wt_3_7_valid = mux_io_o_delta_wt_3_7_valid;
  assign o_delta_wt_3_7_payload = mux_io_o_delta_wt_3_7_payload;
  assign o_delta_wt_4_0_valid = mux_io_o_delta_wt_4_0_valid;
  assign o_delta_wt_4_0_payload = mux_io_o_delta_wt_4_0_payload;
  assign o_delta_wt_4_1_valid = mux_io_o_delta_wt_4_1_valid;
  assign o_delta_wt_4_1_payload = mux_io_o_delta_wt_4_1_payload;
  assign o_delta_wt_4_2_valid = mux_io_o_delta_wt_4_2_valid;
  assign o_delta_wt_4_2_payload = mux_io_o_delta_wt_4_2_payload;
  assign o_delta_wt_4_3_valid = mux_io_o_delta_wt_4_3_valid;
  assign o_delta_wt_4_3_payload = mux_io_o_delta_wt_4_3_payload;
  assign o_delta_wt_4_4_valid = mux_io_o_delta_wt_4_4_valid;
  assign o_delta_wt_4_4_payload = mux_io_o_delta_wt_4_4_payload;
  assign o_delta_wt_4_5_valid = mux_io_o_delta_wt_4_5_valid;
  assign o_delta_wt_4_5_payload = mux_io_o_delta_wt_4_5_payload;
  assign o_delta_wt_4_6_valid = mux_io_o_delta_wt_4_6_valid;
  assign o_delta_wt_4_6_payload = mux_io_o_delta_wt_4_6_payload;
  assign o_delta_wt_4_7_valid = mux_io_o_delta_wt_4_7_valid;
  assign o_delta_wt_4_7_payload = mux_io_o_delta_wt_4_7_payload;
  assign o_delta_wt_5_0_valid = mux_io_o_delta_wt_5_0_valid;
  assign o_delta_wt_5_0_payload = mux_io_o_delta_wt_5_0_payload;
  assign o_delta_wt_5_1_valid = mux_io_o_delta_wt_5_1_valid;
  assign o_delta_wt_5_1_payload = mux_io_o_delta_wt_5_1_payload;
  assign o_delta_wt_5_2_valid = mux_io_o_delta_wt_5_2_valid;
  assign o_delta_wt_5_2_payload = mux_io_o_delta_wt_5_2_payload;
  assign o_delta_wt_5_3_valid = mux_io_o_delta_wt_5_3_valid;
  assign o_delta_wt_5_3_payload = mux_io_o_delta_wt_5_3_payload;
  assign o_delta_wt_5_4_valid = mux_io_o_delta_wt_5_4_valid;
  assign o_delta_wt_5_4_payload = mux_io_o_delta_wt_5_4_payload;
  assign o_delta_wt_5_5_valid = mux_io_o_delta_wt_5_5_valid;
  assign o_delta_wt_5_5_payload = mux_io_o_delta_wt_5_5_payload;
  assign o_delta_wt_5_6_valid = mux_io_o_delta_wt_5_6_valid;
  assign o_delta_wt_5_6_payload = mux_io_o_delta_wt_5_6_payload;
  assign o_delta_wt_5_7_valid = mux_io_o_delta_wt_5_7_valid;
  assign o_delta_wt_5_7_payload = mux_io_o_delta_wt_5_7_payload;
  assign o_delta_wt_6_0_valid = mux_io_o_delta_wt_6_0_valid;
  assign o_delta_wt_6_0_payload = mux_io_o_delta_wt_6_0_payload;
  assign o_delta_wt_6_1_valid = mux_io_o_delta_wt_6_1_valid;
  assign o_delta_wt_6_1_payload = mux_io_o_delta_wt_6_1_payload;
  assign o_delta_wt_6_2_valid = mux_io_o_delta_wt_6_2_valid;
  assign o_delta_wt_6_2_payload = mux_io_o_delta_wt_6_2_payload;
  assign o_delta_wt_6_3_valid = mux_io_o_delta_wt_6_3_valid;
  assign o_delta_wt_6_3_payload = mux_io_o_delta_wt_6_3_payload;
  assign o_delta_wt_6_4_valid = mux_io_o_delta_wt_6_4_valid;
  assign o_delta_wt_6_4_payload = mux_io_o_delta_wt_6_4_payload;
  assign o_delta_wt_6_5_valid = mux_io_o_delta_wt_6_5_valid;
  assign o_delta_wt_6_5_payload = mux_io_o_delta_wt_6_5_payload;
  assign o_delta_wt_6_6_valid = mux_io_o_delta_wt_6_6_valid;
  assign o_delta_wt_6_6_payload = mux_io_o_delta_wt_6_6_payload;
  assign o_delta_wt_6_7_valid = mux_io_o_delta_wt_6_7_valid;
  assign o_delta_wt_6_7_payload = mux_io_o_delta_wt_6_7_payload;
  assign o_delta_wt_7_0_valid = mux_io_o_delta_wt_7_0_valid;
  assign o_delta_wt_7_0_payload = mux_io_o_delta_wt_7_0_payload;
  assign o_delta_wt_7_1_valid = mux_io_o_delta_wt_7_1_valid;
  assign o_delta_wt_7_1_payload = mux_io_o_delta_wt_7_1_payload;
  assign o_delta_wt_7_2_valid = mux_io_o_delta_wt_7_2_valid;
  assign o_delta_wt_7_2_payload = mux_io_o_delta_wt_7_2_payload;
  assign o_delta_wt_7_3_valid = mux_io_o_delta_wt_7_3_valid;
  assign o_delta_wt_7_3_payload = mux_io_o_delta_wt_7_3_payload;
  assign o_delta_wt_7_4_valid = mux_io_o_delta_wt_7_4_valid;
  assign o_delta_wt_7_4_payload = mux_io_o_delta_wt_7_4_payload;
  assign o_delta_wt_7_5_valid = mux_io_o_delta_wt_7_5_valid;
  assign o_delta_wt_7_5_payload = mux_io_o_delta_wt_7_5_payload;
  assign o_delta_wt_7_6_valid = mux_io_o_delta_wt_7_6_valid;
  assign o_delta_wt_7_6_payload = mux_io_o_delta_wt_7_6_payload;
  assign o_delta_wt_7_7_valid = mux_io_o_delta_wt_7_7_valid;
  assign o_delta_wt_7_7_payload = mux_io_o_delta_wt_7_7_payload;
  assign o_sigma_0_0_valid = mux_io_o_sigma_0_0_valid;
  assign o_sigma_0_0_payload = mux_io_o_sigma_0_0_payload;
  assign o_sigma_0_1_valid = mux_io_o_sigma_0_1_valid;
  assign o_sigma_0_1_payload = mux_io_o_sigma_0_1_payload;
  assign o_sigma_0_2_valid = mux_io_o_sigma_0_2_valid;
  assign o_sigma_0_2_payload = mux_io_o_sigma_0_2_payload;
  assign o_sigma_0_3_valid = mux_io_o_sigma_0_3_valid;
  assign o_sigma_0_3_payload = mux_io_o_sigma_0_3_payload;
  assign o_sigma_0_4_valid = mux_io_o_sigma_0_4_valid;
  assign o_sigma_0_4_payload = mux_io_o_sigma_0_4_payload;
  assign o_sigma_0_5_valid = mux_io_o_sigma_0_5_valid;
  assign o_sigma_0_5_payload = mux_io_o_sigma_0_5_payload;
  assign o_sigma_0_6_valid = mux_io_o_sigma_0_6_valid;
  assign o_sigma_0_6_payload = mux_io_o_sigma_0_6_payload;
  assign o_sigma_0_7_valid = mux_io_o_sigma_0_7_valid;
  assign o_sigma_0_7_payload = mux_io_o_sigma_0_7_payload;
  assign o_sigma_1_0_valid = mux_io_o_sigma_1_0_valid;
  assign o_sigma_1_0_payload = mux_io_o_sigma_1_0_payload;
  assign o_sigma_1_1_valid = mux_io_o_sigma_1_1_valid;
  assign o_sigma_1_1_payload = mux_io_o_sigma_1_1_payload;
  assign o_sigma_1_2_valid = mux_io_o_sigma_1_2_valid;
  assign o_sigma_1_2_payload = mux_io_o_sigma_1_2_payload;
  assign o_sigma_1_3_valid = mux_io_o_sigma_1_3_valid;
  assign o_sigma_1_3_payload = mux_io_o_sigma_1_3_payload;
  assign o_sigma_1_4_valid = mux_io_o_sigma_1_4_valid;
  assign o_sigma_1_4_payload = mux_io_o_sigma_1_4_payload;
  assign o_sigma_1_5_valid = mux_io_o_sigma_1_5_valid;
  assign o_sigma_1_5_payload = mux_io_o_sigma_1_5_payload;
  assign o_sigma_1_6_valid = mux_io_o_sigma_1_6_valid;
  assign o_sigma_1_6_payload = mux_io_o_sigma_1_6_payload;
  assign o_sigma_1_7_valid = mux_io_o_sigma_1_7_valid;
  assign o_sigma_1_7_payload = mux_io_o_sigma_1_7_payload;
  assign o_sigma_2_0_valid = mux_io_o_sigma_2_0_valid;
  assign o_sigma_2_0_payload = mux_io_o_sigma_2_0_payload;
  assign o_sigma_2_1_valid = mux_io_o_sigma_2_1_valid;
  assign o_sigma_2_1_payload = mux_io_o_sigma_2_1_payload;
  assign o_sigma_2_2_valid = mux_io_o_sigma_2_2_valid;
  assign o_sigma_2_2_payload = mux_io_o_sigma_2_2_payload;
  assign o_sigma_2_3_valid = mux_io_o_sigma_2_3_valid;
  assign o_sigma_2_3_payload = mux_io_o_sigma_2_3_payload;
  assign o_sigma_2_4_valid = mux_io_o_sigma_2_4_valid;
  assign o_sigma_2_4_payload = mux_io_o_sigma_2_4_payload;
  assign o_sigma_2_5_valid = mux_io_o_sigma_2_5_valid;
  assign o_sigma_2_5_payload = mux_io_o_sigma_2_5_payload;
  assign o_sigma_2_6_valid = mux_io_o_sigma_2_6_valid;
  assign o_sigma_2_6_payload = mux_io_o_sigma_2_6_payload;
  assign o_sigma_2_7_valid = mux_io_o_sigma_2_7_valid;
  assign o_sigma_2_7_payload = mux_io_o_sigma_2_7_payload;
  assign o_sigma_3_0_valid = mux_io_o_sigma_3_0_valid;
  assign o_sigma_3_0_payload = mux_io_o_sigma_3_0_payload;
  assign o_sigma_3_1_valid = mux_io_o_sigma_3_1_valid;
  assign o_sigma_3_1_payload = mux_io_o_sigma_3_1_payload;
  assign o_sigma_3_2_valid = mux_io_o_sigma_3_2_valid;
  assign o_sigma_3_2_payload = mux_io_o_sigma_3_2_payload;
  assign o_sigma_3_3_valid = mux_io_o_sigma_3_3_valid;
  assign o_sigma_3_3_payload = mux_io_o_sigma_3_3_payload;
  assign o_sigma_3_4_valid = mux_io_o_sigma_3_4_valid;
  assign o_sigma_3_4_payload = mux_io_o_sigma_3_4_payload;
  assign o_sigma_3_5_valid = mux_io_o_sigma_3_5_valid;
  assign o_sigma_3_5_payload = mux_io_o_sigma_3_5_payload;
  assign o_sigma_3_6_valid = mux_io_o_sigma_3_6_valid;
  assign o_sigma_3_6_payload = mux_io_o_sigma_3_6_payload;
  assign o_sigma_3_7_valid = mux_io_o_sigma_3_7_valid;
  assign o_sigma_3_7_payload = mux_io_o_sigma_3_7_payload;
  assign o_sigma_4_0_valid = mux_io_o_sigma_4_0_valid;
  assign o_sigma_4_0_payload = mux_io_o_sigma_4_0_payload;
  assign o_sigma_4_1_valid = mux_io_o_sigma_4_1_valid;
  assign o_sigma_4_1_payload = mux_io_o_sigma_4_1_payload;
  assign o_sigma_4_2_valid = mux_io_o_sigma_4_2_valid;
  assign o_sigma_4_2_payload = mux_io_o_sigma_4_2_payload;
  assign o_sigma_4_3_valid = mux_io_o_sigma_4_3_valid;
  assign o_sigma_4_3_payload = mux_io_o_sigma_4_3_payload;
  assign o_sigma_4_4_valid = mux_io_o_sigma_4_4_valid;
  assign o_sigma_4_4_payload = mux_io_o_sigma_4_4_payload;
  assign o_sigma_4_5_valid = mux_io_o_sigma_4_5_valid;
  assign o_sigma_4_5_payload = mux_io_o_sigma_4_5_payload;
  assign o_sigma_4_6_valid = mux_io_o_sigma_4_6_valid;
  assign o_sigma_4_6_payload = mux_io_o_sigma_4_6_payload;
  assign o_sigma_4_7_valid = mux_io_o_sigma_4_7_valid;
  assign o_sigma_4_7_payload = mux_io_o_sigma_4_7_payload;
  assign o_sigma_5_0_valid = mux_io_o_sigma_5_0_valid;
  assign o_sigma_5_0_payload = mux_io_o_sigma_5_0_payload;
  assign o_sigma_5_1_valid = mux_io_o_sigma_5_1_valid;
  assign o_sigma_5_1_payload = mux_io_o_sigma_5_1_payload;
  assign o_sigma_5_2_valid = mux_io_o_sigma_5_2_valid;
  assign o_sigma_5_2_payload = mux_io_o_sigma_5_2_payload;
  assign o_sigma_5_3_valid = mux_io_o_sigma_5_3_valid;
  assign o_sigma_5_3_payload = mux_io_o_sigma_5_3_payload;
  assign o_sigma_5_4_valid = mux_io_o_sigma_5_4_valid;
  assign o_sigma_5_4_payload = mux_io_o_sigma_5_4_payload;
  assign o_sigma_5_5_valid = mux_io_o_sigma_5_5_valid;
  assign o_sigma_5_5_payload = mux_io_o_sigma_5_5_payload;
  assign o_sigma_5_6_valid = mux_io_o_sigma_5_6_valid;
  assign o_sigma_5_6_payload = mux_io_o_sigma_5_6_payload;
  assign o_sigma_5_7_valid = mux_io_o_sigma_5_7_valid;
  assign o_sigma_5_7_payload = mux_io_o_sigma_5_7_payload;
  assign o_sigma_6_0_valid = mux_io_o_sigma_6_0_valid;
  assign o_sigma_6_0_payload = mux_io_o_sigma_6_0_payload;
  assign o_sigma_6_1_valid = mux_io_o_sigma_6_1_valid;
  assign o_sigma_6_1_payload = mux_io_o_sigma_6_1_payload;
  assign o_sigma_6_2_valid = mux_io_o_sigma_6_2_valid;
  assign o_sigma_6_2_payload = mux_io_o_sigma_6_2_payload;
  assign o_sigma_6_3_valid = mux_io_o_sigma_6_3_valid;
  assign o_sigma_6_3_payload = mux_io_o_sigma_6_3_payload;
  assign o_sigma_6_4_valid = mux_io_o_sigma_6_4_valid;
  assign o_sigma_6_4_payload = mux_io_o_sigma_6_4_payload;
  assign o_sigma_6_5_valid = mux_io_o_sigma_6_5_valid;
  assign o_sigma_6_5_payload = mux_io_o_sigma_6_5_payload;
  assign o_sigma_6_6_valid = mux_io_o_sigma_6_6_valid;
  assign o_sigma_6_6_payload = mux_io_o_sigma_6_6_payload;
  assign o_sigma_6_7_valid = mux_io_o_sigma_6_7_valid;
  assign o_sigma_6_7_payload = mux_io_o_sigma_6_7_payload;
  assign o_sigma_7_0_valid = mux_io_o_sigma_7_0_valid;
  assign o_sigma_7_0_payload = mux_io_o_sigma_7_0_payload;
  assign o_sigma_7_1_valid = mux_io_o_sigma_7_1_valid;
  assign o_sigma_7_1_payload = mux_io_o_sigma_7_1_payload;
  assign o_sigma_7_2_valid = mux_io_o_sigma_7_2_valid;
  assign o_sigma_7_2_payload = mux_io_o_sigma_7_2_payload;
  assign o_sigma_7_3_valid = mux_io_o_sigma_7_3_valid;
  assign o_sigma_7_3_payload = mux_io_o_sigma_7_3_payload;
  assign o_sigma_7_4_valid = mux_io_o_sigma_7_4_valid;
  assign o_sigma_7_4_payload = mux_io_o_sigma_7_4_payload;
  assign o_sigma_7_5_valid = mux_io_o_sigma_7_5_valid;
  assign o_sigma_7_5_payload = mux_io_o_sigma_7_5_payload;
  assign o_sigma_7_6_valid = mux_io_o_sigma_7_6_valid;
  assign o_sigma_7_6_payload = mux_io_o_sigma_7_6_payload;
  assign o_sigma_7_7_valid = mux_io_o_sigma_7_7_valid;
  assign o_sigma_7_7_payload = mux_io_o_sigma_7_7_payload;

endmodule

module conv_mux (
  input               io_is_delta_wt,
  input               io_indata_0_0_valid,
  output              io_indata_0_0_ready,
  input      [31:0]   io_indata_0_0_payload,
  input               io_indata_0_1_valid,
  output              io_indata_0_1_ready,
  input      [31:0]   io_indata_0_1_payload,
  input               io_indata_0_2_valid,
  output              io_indata_0_2_ready,
  input      [31:0]   io_indata_0_2_payload,
  input               io_indata_0_3_valid,
  output              io_indata_0_3_ready,
  input      [31:0]   io_indata_0_3_payload,
  input               io_indata_0_4_valid,
  output              io_indata_0_4_ready,
  input      [31:0]   io_indata_0_4_payload,
  input               io_indata_0_5_valid,
  output              io_indata_0_5_ready,
  input      [31:0]   io_indata_0_5_payload,
  input               io_indata_0_6_valid,
  output              io_indata_0_6_ready,
  input      [31:0]   io_indata_0_6_payload,
  input               io_indata_0_7_valid,
  output              io_indata_0_7_ready,
  input      [31:0]   io_indata_0_7_payload,
  input               io_indata_1_0_valid,
  output              io_indata_1_0_ready,
  input      [31:0]   io_indata_1_0_payload,
  input               io_indata_1_1_valid,
  output              io_indata_1_1_ready,
  input      [31:0]   io_indata_1_1_payload,
  input               io_indata_1_2_valid,
  output              io_indata_1_2_ready,
  input      [31:0]   io_indata_1_2_payload,
  input               io_indata_1_3_valid,
  output              io_indata_1_3_ready,
  input      [31:0]   io_indata_1_3_payload,
  input               io_indata_1_4_valid,
  output              io_indata_1_4_ready,
  input      [31:0]   io_indata_1_4_payload,
  input               io_indata_1_5_valid,
  output              io_indata_1_5_ready,
  input      [31:0]   io_indata_1_5_payload,
  input               io_indata_1_6_valid,
  output              io_indata_1_6_ready,
  input      [31:0]   io_indata_1_6_payload,
  input               io_indata_1_7_valid,
  output              io_indata_1_7_ready,
  input      [31:0]   io_indata_1_7_payload,
  input               io_indata_2_0_valid,
  output              io_indata_2_0_ready,
  input      [31:0]   io_indata_2_0_payload,
  input               io_indata_2_1_valid,
  output              io_indata_2_1_ready,
  input      [31:0]   io_indata_2_1_payload,
  input               io_indata_2_2_valid,
  output              io_indata_2_2_ready,
  input      [31:0]   io_indata_2_2_payload,
  input               io_indata_2_3_valid,
  output              io_indata_2_3_ready,
  input      [31:0]   io_indata_2_3_payload,
  input               io_indata_2_4_valid,
  output              io_indata_2_4_ready,
  input      [31:0]   io_indata_2_4_payload,
  input               io_indata_2_5_valid,
  output              io_indata_2_5_ready,
  input      [31:0]   io_indata_2_5_payload,
  input               io_indata_2_6_valid,
  output              io_indata_2_6_ready,
  input      [31:0]   io_indata_2_6_payload,
  input               io_indata_2_7_valid,
  output              io_indata_2_7_ready,
  input      [31:0]   io_indata_2_7_payload,
  input               io_indata_3_0_valid,
  output              io_indata_3_0_ready,
  input      [31:0]   io_indata_3_0_payload,
  input               io_indata_3_1_valid,
  output              io_indata_3_1_ready,
  input      [31:0]   io_indata_3_1_payload,
  input               io_indata_3_2_valid,
  output              io_indata_3_2_ready,
  input      [31:0]   io_indata_3_2_payload,
  input               io_indata_3_3_valid,
  output              io_indata_3_3_ready,
  input      [31:0]   io_indata_3_3_payload,
  input               io_indata_3_4_valid,
  output              io_indata_3_4_ready,
  input      [31:0]   io_indata_3_4_payload,
  input               io_indata_3_5_valid,
  output              io_indata_3_5_ready,
  input      [31:0]   io_indata_3_5_payload,
  input               io_indata_3_6_valid,
  output              io_indata_3_6_ready,
  input      [31:0]   io_indata_3_6_payload,
  input               io_indata_3_7_valid,
  output              io_indata_3_7_ready,
  input      [31:0]   io_indata_3_7_payload,
  input               io_indata_4_0_valid,
  output              io_indata_4_0_ready,
  input      [31:0]   io_indata_4_0_payload,
  input               io_indata_4_1_valid,
  output              io_indata_4_1_ready,
  input      [31:0]   io_indata_4_1_payload,
  input               io_indata_4_2_valid,
  output              io_indata_4_2_ready,
  input      [31:0]   io_indata_4_2_payload,
  input               io_indata_4_3_valid,
  output              io_indata_4_3_ready,
  input      [31:0]   io_indata_4_3_payload,
  input               io_indata_4_4_valid,
  output              io_indata_4_4_ready,
  input      [31:0]   io_indata_4_4_payload,
  input               io_indata_4_5_valid,
  output              io_indata_4_5_ready,
  input      [31:0]   io_indata_4_5_payload,
  input               io_indata_4_6_valid,
  output              io_indata_4_6_ready,
  input      [31:0]   io_indata_4_6_payload,
  input               io_indata_4_7_valid,
  output              io_indata_4_7_ready,
  input      [31:0]   io_indata_4_7_payload,
  input               io_indata_5_0_valid,
  output              io_indata_5_0_ready,
  input      [31:0]   io_indata_5_0_payload,
  input               io_indata_5_1_valid,
  output              io_indata_5_1_ready,
  input      [31:0]   io_indata_5_1_payload,
  input               io_indata_5_2_valid,
  output              io_indata_5_2_ready,
  input      [31:0]   io_indata_5_2_payload,
  input               io_indata_5_3_valid,
  output              io_indata_5_3_ready,
  input      [31:0]   io_indata_5_3_payload,
  input               io_indata_5_4_valid,
  output              io_indata_5_4_ready,
  input      [31:0]   io_indata_5_4_payload,
  input               io_indata_5_5_valid,
  output              io_indata_5_5_ready,
  input      [31:0]   io_indata_5_5_payload,
  input               io_indata_5_6_valid,
  output              io_indata_5_6_ready,
  input      [31:0]   io_indata_5_6_payload,
  input               io_indata_5_7_valid,
  output              io_indata_5_7_ready,
  input      [31:0]   io_indata_5_7_payload,
  input               io_indata_6_0_valid,
  output              io_indata_6_0_ready,
  input      [31:0]   io_indata_6_0_payload,
  input               io_indata_6_1_valid,
  output              io_indata_6_1_ready,
  input      [31:0]   io_indata_6_1_payload,
  input               io_indata_6_2_valid,
  output              io_indata_6_2_ready,
  input      [31:0]   io_indata_6_2_payload,
  input               io_indata_6_3_valid,
  output              io_indata_6_3_ready,
  input      [31:0]   io_indata_6_3_payload,
  input               io_indata_6_4_valid,
  output              io_indata_6_4_ready,
  input      [31:0]   io_indata_6_4_payload,
  input               io_indata_6_5_valid,
  output              io_indata_6_5_ready,
  input      [31:0]   io_indata_6_5_payload,
  input               io_indata_6_6_valid,
  output              io_indata_6_6_ready,
  input      [31:0]   io_indata_6_6_payload,
  input               io_indata_6_7_valid,
  output              io_indata_6_7_ready,
  input      [31:0]   io_indata_6_7_payload,
  input               io_indata_7_0_valid,
  output              io_indata_7_0_ready,
  input      [31:0]   io_indata_7_0_payload,
  input               io_indata_7_1_valid,
  output              io_indata_7_1_ready,
  input      [31:0]   io_indata_7_1_payload,
  input               io_indata_7_2_valid,
  output              io_indata_7_2_ready,
  input      [31:0]   io_indata_7_2_payload,
  input               io_indata_7_3_valid,
  output              io_indata_7_3_ready,
  input      [31:0]   io_indata_7_3_payload,
  input               io_indata_7_4_valid,
  output              io_indata_7_4_ready,
  input      [31:0]   io_indata_7_4_payload,
  input               io_indata_7_5_valid,
  output              io_indata_7_5_ready,
  input      [31:0]   io_indata_7_5_payload,
  input               io_indata_7_6_valid,
  output              io_indata_7_6_ready,
  input      [31:0]   io_indata_7_6_payload,
  input               io_indata_7_7_valid,
  output              io_indata_7_7_ready,
  input      [31:0]   io_indata_7_7_payload,
  output              io_o_delta_wt_0_0_valid,
  input               io_o_delta_wt_0_0_ready,
  output     [31:0]   io_o_delta_wt_0_0_payload,
  output              io_o_delta_wt_0_1_valid,
  input               io_o_delta_wt_0_1_ready,
  output     [31:0]   io_o_delta_wt_0_1_payload,
  output              io_o_delta_wt_0_2_valid,
  input               io_o_delta_wt_0_2_ready,
  output     [31:0]   io_o_delta_wt_0_2_payload,
  output              io_o_delta_wt_0_3_valid,
  input               io_o_delta_wt_0_3_ready,
  output     [31:0]   io_o_delta_wt_0_3_payload,
  output              io_o_delta_wt_0_4_valid,
  input               io_o_delta_wt_0_4_ready,
  output     [31:0]   io_o_delta_wt_0_4_payload,
  output              io_o_delta_wt_0_5_valid,
  input               io_o_delta_wt_0_5_ready,
  output     [31:0]   io_o_delta_wt_0_5_payload,
  output              io_o_delta_wt_0_6_valid,
  input               io_o_delta_wt_0_6_ready,
  output     [31:0]   io_o_delta_wt_0_6_payload,
  output              io_o_delta_wt_0_7_valid,
  input               io_o_delta_wt_0_7_ready,
  output     [31:0]   io_o_delta_wt_0_7_payload,
  output              io_o_delta_wt_1_0_valid,
  input               io_o_delta_wt_1_0_ready,
  output     [31:0]   io_o_delta_wt_1_0_payload,
  output              io_o_delta_wt_1_1_valid,
  input               io_o_delta_wt_1_1_ready,
  output     [31:0]   io_o_delta_wt_1_1_payload,
  output              io_o_delta_wt_1_2_valid,
  input               io_o_delta_wt_1_2_ready,
  output     [31:0]   io_o_delta_wt_1_2_payload,
  output              io_o_delta_wt_1_3_valid,
  input               io_o_delta_wt_1_3_ready,
  output     [31:0]   io_o_delta_wt_1_3_payload,
  output              io_o_delta_wt_1_4_valid,
  input               io_o_delta_wt_1_4_ready,
  output     [31:0]   io_o_delta_wt_1_4_payload,
  output              io_o_delta_wt_1_5_valid,
  input               io_o_delta_wt_1_5_ready,
  output     [31:0]   io_o_delta_wt_1_5_payload,
  output              io_o_delta_wt_1_6_valid,
  input               io_o_delta_wt_1_6_ready,
  output     [31:0]   io_o_delta_wt_1_6_payload,
  output              io_o_delta_wt_1_7_valid,
  input               io_o_delta_wt_1_7_ready,
  output     [31:0]   io_o_delta_wt_1_7_payload,
  output              io_o_delta_wt_2_0_valid,
  input               io_o_delta_wt_2_0_ready,
  output     [31:0]   io_o_delta_wt_2_0_payload,
  output              io_o_delta_wt_2_1_valid,
  input               io_o_delta_wt_2_1_ready,
  output     [31:0]   io_o_delta_wt_2_1_payload,
  output              io_o_delta_wt_2_2_valid,
  input               io_o_delta_wt_2_2_ready,
  output     [31:0]   io_o_delta_wt_2_2_payload,
  output              io_o_delta_wt_2_3_valid,
  input               io_o_delta_wt_2_3_ready,
  output     [31:0]   io_o_delta_wt_2_3_payload,
  output              io_o_delta_wt_2_4_valid,
  input               io_o_delta_wt_2_4_ready,
  output     [31:0]   io_o_delta_wt_2_4_payload,
  output              io_o_delta_wt_2_5_valid,
  input               io_o_delta_wt_2_5_ready,
  output     [31:0]   io_o_delta_wt_2_5_payload,
  output              io_o_delta_wt_2_6_valid,
  input               io_o_delta_wt_2_6_ready,
  output     [31:0]   io_o_delta_wt_2_6_payload,
  output              io_o_delta_wt_2_7_valid,
  input               io_o_delta_wt_2_7_ready,
  output     [31:0]   io_o_delta_wt_2_7_payload,
  output              io_o_delta_wt_3_0_valid,
  input               io_o_delta_wt_3_0_ready,
  output     [31:0]   io_o_delta_wt_3_0_payload,
  output              io_o_delta_wt_3_1_valid,
  input               io_o_delta_wt_3_1_ready,
  output     [31:0]   io_o_delta_wt_3_1_payload,
  output              io_o_delta_wt_3_2_valid,
  input               io_o_delta_wt_3_2_ready,
  output     [31:0]   io_o_delta_wt_3_2_payload,
  output              io_o_delta_wt_3_3_valid,
  input               io_o_delta_wt_3_3_ready,
  output     [31:0]   io_o_delta_wt_3_3_payload,
  output              io_o_delta_wt_3_4_valid,
  input               io_o_delta_wt_3_4_ready,
  output     [31:0]   io_o_delta_wt_3_4_payload,
  output              io_o_delta_wt_3_5_valid,
  input               io_o_delta_wt_3_5_ready,
  output     [31:0]   io_o_delta_wt_3_5_payload,
  output              io_o_delta_wt_3_6_valid,
  input               io_o_delta_wt_3_6_ready,
  output     [31:0]   io_o_delta_wt_3_6_payload,
  output              io_o_delta_wt_3_7_valid,
  input               io_o_delta_wt_3_7_ready,
  output     [31:0]   io_o_delta_wt_3_7_payload,
  output              io_o_delta_wt_4_0_valid,
  input               io_o_delta_wt_4_0_ready,
  output     [31:0]   io_o_delta_wt_4_0_payload,
  output              io_o_delta_wt_4_1_valid,
  input               io_o_delta_wt_4_1_ready,
  output     [31:0]   io_o_delta_wt_4_1_payload,
  output              io_o_delta_wt_4_2_valid,
  input               io_o_delta_wt_4_2_ready,
  output     [31:0]   io_o_delta_wt_4_2_payload,
  output              io_o_delta_wt_4_3_valid,
  input               io_o_delta_wt_4_3_ready,
  output     [31:0]   io_o_delta_wt_4_3_payload,
  output              io_o_delta_wt_4_4_valid,
  input               io_o_delta_wt_4_4_ready,
  output     [31:0]   io_o_delta_wt_4_4_payload,
  output              io_o_delta_wt_4_5_valid,
  input               io_o_delta_wt_4_5_ready,
  output     [31:0]   io_o_delta_wt_4_5_payload,
  output              io_o_delta_wt_4_6_valid,
  input               io_o_delta_wt_4_6_ready,
  output     [31:0]   io_o_delta_wt_4_6_payload,
  output              io_o_delta_wt_4_7_valid,
  input               io_o_delta_wt_4_7_ready,
  output     [31:0]   io_o_delta_wt_4_7_payload,
  output              io_o_delta_wt_5_0_valid,
  input               io_o_delta_wt_5_0_ready,
  output     [31:0]   io_o_delta_wt_5_0_payload,
  output              io_o_delta_wt_5_1_valid,
  input               io_o_delta_wt_5_1_ready,
  output     [31:0]   io_o_delta_wt_5_1_payload,
  output              io_o_delta_wt_5_2_valid,
  input               io_o_delta_wt_5_2_ready,
  output     [31:0]   io_o_delta_wt_5_2_payload,
  output              io_o_delta_wt_5_3_valid,
  input               io_o_delta_wt_5_3_ready,
  output     [31:0]   io_o_delta_wt_5_3_payload,
  output              io_o_delta_wt_5_4_valid,
  input               io_o_delta_wt_5_4_ready,
  output     [31:0]   io_o_delta_wt_5_4_payload,
  output              io_o_delta_wt_5_5_valid,
  input               io_o_delta_wt_5_5_ready,
  output     [31:0]   io_o_delta_wt_5_5_payload,
  output              io_o_delta_wt_5_6_valid,
  input               io_o_delta_wt_5_6_ready,
  output     [31:0]   io_o_delta_wt_5_6_payload,
  output              io_o_delta_wt_5_7_valid,
  input               io_o_delta_wt_5_7_ready,
  output     [31:0]   io_o_delta_wt_5_7_payload,
  output              io_o_delta_wt_6_0_valid,
  input               io_o_delta_wt_6_0_ready,
  output     [31:0]   io_o_delta_wt_6_0_payload,
  output              io_o_delta_wt_6_1_valid,
  input               io_o_delta_wt_6_1_ready,
  output     [31:0]   io_o_delta_wt_6_1_payload,
  output              io_o_delta_wt_6_2_valid,
  input               io_o_delta_wt_6_2_ready,
  output     [31:0]   io_o_delta_wt_6_2_payload,
  output              io_o_delta_wt_6_3_valid,
  input               io_o_delta_wt_6_3_ready,
  output     [31:0]   io_o_delta_wt_6_3_payload,
  output              io_o_delta_wt_6_4_valid,
  input               io_o_delta_wt_6_4_ready,
  output     [31:0]   io_o_delta_wt_6_4_payload,
  output              io_o_delta_wt_6_5_valid,
  input               io_o_delta_wt_6_5_ready,
  output     [31:0]   io_o_delta_wt_6_5_payload,
  output              io_o_delta_wt_6_6_valid,
  input               io_o_delta_wt_6_6_ready,
  output     [31:0]   io_o_delta_wt_6_6_payload,
  output              io_o_delta_wt_6_7_valid,
  input               io_o_delta_wt_6_7_ready,
  output     [31:0]   io_o_delta_wt_6_7_payload,
  output              io_o_delta_wt_7_0_valid,
  input               io_o_delta_wt_7_0_ready,
  output     [31:0]   io_o_delta_wt_7_0_payload,
  output              io_o_delta_wt_7_1_valid,
  input               io_o_delta_wt_7_1_ready,
  output     [31:0]   io_o_delta_wt_7_1_payload,
  output              io_o_delta_wt_7_2_valid,
  input               io_o_delta_wt_7_2_ready,
  output     [31:0]   io_o_delta_wt_7_2_payload,
  output              io_o_delta_wt_7_3_valid,
  input               io_o_delta_wt_7_3_ready,
  output     [31:0]   io_o_delta_wt_7_3_payload,
  output              io_o_delta_wt_7_4_valid,
  input               io_o_delta_wt_7_4_ready,
  output     [31:0]   io_o_delta_wt_7_4_payload,
  output              io_o_delta_wt_7_5_valid,
  input               io_o_delta_wt_7_5_ready,
  output     [31:0]   io_o_delta_wt_7_5_payload,
  output              io_o_delta_wt_7_6_valid,
  input               io_o_delta_wt_7_6_ready,
  output     [31:0]   io_o_delta_wt_7_6_payload,
  output              io_o_delta_wt_7_7_valid,
  input               io_o_delta_wt_7_7_ready,
  output     [31:0]   io_o_delta_wt_7_7_payload,
  output              io_o_sigma_0_0_valid,
  input               io_o_sigma_0_0_ready,
  output     [31:0]   io_o_sigma_0_0_payload,
  output              io_o_sigma_0_1_valid,
  input               io_o_sigma_0_1_ready,
  output     [31:0]   io_o_sigma_0_1_payload,
  output              io_o_sigma_0_2_valid,
  input               io_o_sigma_0_2_ready,
  output     [31:0]   io_o_sigma_0_2_payload,
  output              io_o_sigma_0_3_valid,
  input               io_o_sigma_0_3_ready,
  output     [31:0]   io_o_sigma_0_3_payload,
  output              io_o_sigma_0_4_valid,
  input               io_o_sigma_0_4_ready,
  output     [31:0]   io_o_sigma_0_4_payload,
  output              io_o_sigma_0_5_valid,
  input               io_o_sigma_0_5_ready,
  output     [31:0]   io_o_sigma_0_5_payload,
  output              io_o_sigma_0_6_valid,
  input               io_o_sigma_0_6_ready,
  output     [31:0]   io_o_sigma_0_6_payload,
  output              io_o_sigma_0_7_valid,
  input               io_o_sigma_0_7_ready,
  output     [31:0]   io_o_sigma_0_7_payload,
  output              io_o_sigma_1_0_valid,
  input               io_o_sigma_1_0_ready,
  output     [31:0]   io_o_sigma_1_0_payload,
  output              io_o_sigma_1_1_valid,
  input               io_o_sigma_1_1_ready,
  output     [31:0]   io_o_sigma_1_1_payload,
  output              io_o_sigma_1_2_valid,
  input               io_o_sigma_1_2_ready,
  output     [31:0]   io_o_sigma_1_2_payload,
  output              io_o_sigma_1_3_valid,
  input               io_o_sigma_1_3_ready,
  output     [31:0]   io_o_sigma_1_3_payload,
  output              io_o_sigma_1_4_valid,
  input               io_o_sigma_1_4_ready,
  output     [31:0]   io_o_sigma_1_4_payload,
  output              io_o_sigma_1_5_valid,
  input               io_o_sigma_1_5_ready,
  output     [31:0]   io_o_sigma_1_5_payload,
  output              io_o_sigma_1_6_valid,
  input               io_o_sigma_1_6_ready,
  output     [31:0]   io_o_sigma_1_6_payload,
  output              io_o_sigma_1_7_valid,
  input               io_o_sigma_1_7_ready,
  output     [31:0]   io_o_sigma_1_7_payload,
  output              io_o_sigma_2_0_valid,
  input               io_o_sigma_2_0_ready,
  output     [31:0]   io_o_sigma_2_0_payload,
  output              io_o_sigma_2_1_valid,
  input               io_o_sigma_2_1_ready,
  output     [31:0]   io_o_sigma_2_1_payload,
  output              io_o_sigma_2_2_valid,
  input               io_o_sigma_2_2_ready,
  output     [31:0]   io_o_sigma_2_2_payload,
  output              io_o_sigma_2_3_valid,
  input               io_o_sigma_2_3_ready,
  output     [31:0]   io_o_sigma_2_3_payload,
  output              io_o_sigma_2_4_valid,
  input               io_o_sigma_2_4_ready,
  output     [31:0]   io_o_sigma_2_4_payload,
  output              io_o_sigma_2_5_valid,
  input               io_o_sigma_2_5_ready,
  output     [31:0]   io_o_sigma_2_5_payload,
  output              io_o_sigma_2_6_valid,
  input               io_o_sigma_2_6_ready,
  output     [31:0]   io_o_sigma_2_6_payload,
  output              io_o_sigma_2_7_valid,
  input               io_o_sigma_2_7_ready,
  output     [31:0]   io_o_sigma_2_7_payload,
  output              io_o_sigma_3_0_valid,
  input               io_o_sigma_3_0_ready,
  output     [31:0]   io_o_sigma_3_0_payload,
  output              io_o_sigma_3_1_valid,
  input               io_o_sigma_3_1_ready,
  output     [31:0]   io_o_sigma_3_1_payload,
  output              io_o_sigma_3_2_valid,
  input               io_o_sigma_3_2_ready,
  output     [31:0]   io_o_sigma_3_2_payload,
  output              io_o_sigma_3_3_valid,
  input               io_o_sigma_3_3_ready,
  output     [31:0]   io_o_sigma_3_3_payload,
  output              io_o_sigma_3_4_valid,
  input               io_o_sigma_3_4_ready,
  output     [31:0]   io_o_sigma_3_4_payload,
  output              io_o_sigma_3_5_valid,
  input               io_o_sigma_3_5_ready,
  output     [31:0]   io_o_sigma_3_5_payload,
  output              io_o_sigma_3_6_valid,
  input               io_o_sigma_3_6_ready,
  output     [31:0]   io_o_sigma_3_6_payload,
  output              io_o_sigma_3_7_valid,
  input               io_o_sigma_3_7_ready,
  output     [31:0]   io_o_sigma_3_7_payload,
  output              io_o_sigma_4_0_valid,
  input               io_o_sigma_4_0_ready,
  output     [31:0]   io_o_sigma_4_0_payload,
  output              io_o_sigma_4_1_valid,
  input               io_o_sigma_4_1_ready,
  output     [31:0]   io_o_sigma_4_1_payload,
  output              io_o_sigma_4_2_valid,
  input               io_o_sigma_4_2_ready,
  output     [31:0]   io_o_sigma_4_2_payload,
  output              io_o_sigma_4_3_valid,
  input               io_o_sigma_4_3_ready,
  output     [31:0]   io_o_sigma_4_3_payload,
  output              io_o_sigma_4_4_valid,
  input               io_o_sigma_4_4_ready,
  output     [31:0]   io_o_sigma_4_4_payload,
  output              io_o_sigma_4_5_valid,
  input               io_o_sigma_4_5_ready,
  output     [31:0]   io_o_sigma_4_5_payload,
  output              io_o_sigma_4_6_valid,
  input               io_o_sigma_4_6_ready,
  output     [31:0]   io_o_sigma_4_6_payload,
  output              io_o_sigma_4_7_valid,
  input               io_o_sigma_4_7_ready,
  output     [31:0]   io_o_sigma_4_7_payload,
  output              io_o_sigma_5_0_valid,
  input               io_o_sigma_5_0_ready,
  output     [31:0]   io_o_sigma_5_0_payload,
  output              io_o_sigma_5_1_valid,
  input               io_o_sigma_5_1_ready,
  output     [31:0]   io_o_sigma_5_1_payload,
  output              io_o_sigma_5_2_valid,
  input               io_o_sigma_5_2_ready,
  output     [31:0]   io_o_sigma_5_2_payload,
  output              io_o_sigma_5_3_valid,
  input               io_o_sigma_5_3_ready,
  output     [31:0]   io_o_sigma_5_3_payload,
  output              io_o_sigma_5_4_valid,
  input               io_o_sigma_5_4_ready,
  output     [31:0]   io_o_sigma_5_4_payload,
  output              io_o_sigma_5_5_valid,
  input               io_o_sigma_5_5_ready,
  output     [31:0]   io_o_sigma_5_5_payload,
  output              io_o_sigma_5_6_valid,
  input               io_o_sigma_5_6_ready,
  output     [31:0]   io_o_sigma_5_6_payload,
  output              io_o_sigma_5_7_valid,
  input               io_o_sigma_5_7_ready,
  output     [31:0]   io_o_sigma_5_7_payload,
  output              io_o_sigma_6_0_valid,
  input               io_o_sigma_6_0_ready,
  output     [31:0]   io_o_sigma_6_0_payload,
  output              io_o_sigma_6_1_valid,
  input               io_o_sigma_6_1_ready,
  output     [31:0]   io_o_sigma_6_1_payload,
  output              io_o_sigma_6_2_valid,
  input               io_o_sigma_6_2_ready,
  output     [31:0]   io_o_sigma_6_2_payload,
  output              io_o_sigma_6_3_valid,
  input               io_o_sigma_6_3_ready,
  output     [31:0]   io_o_sigma_6_3_payload,
  output              io_o_sigma_6_4_valid,
  input               io_o_sigma_6_4_ready,
  output     [31:0]   io_o_sigma_6_4_payload,
  output              io_o_sigma_6_5_valid,
  input               io_o_sigma_6_5_ready,
  output     [31:0]   io_o_sigma_6_5_payload,
  output              io_o_sigma_6_6_valid,
  input               io_o_sigma_6_6_ready,
  output     [31:0]   io_o_sigma_6_6_payload,
  output              io_o_sigma_6_7_valid,
  input               io_o_sigma_6_7_ready,
  output     [31:0]   io_o_sigma_6_7_payload,
  output              io_o_sigma_7_0_valid,
  input               io_o_sigma_7_0_ready,
  output     [31:0]   io_o_sigma_7_0_payload,
  output              io_o_sigma_7_1_valid,
  input               io_o_sigma_7_1_ready,
  output     [31:0]   io_o_sigma_7_1_payload,
  output              io_o_sigma_7_2_valid,
  input               io_o_sigma_7_2_ready,
  output     [31:0]   io_o_sigma_7_2_payload,
  output              io_o_sigma_7_3_valid,
  input               io_o_sigma_7_3_ready,
  output     [31:0]   io_o_sigma_7_3_payload,
  output              io_o_sigma_7_4_valid,
  input               io_o_sigma_7_4_ready,
  output     [31:0]   io_o_sigma_7_4_payload,
  output              io_o_sigma_7_5_valid,
  input               io_o_sigma_7_5_ready,
  output     [31:0]   io_o_sigma_7_5_payload,
  output              io_o_sigma_7_6_valid,
  input               io_o_sigma_7_6_ready,
  output     [31:0]   io_o_sigma_7_6_payload,
  output              io_o_sigma_7_7_valid,
  input               io_o_sigma_7_7_ready,
  output     [31:0]   io_o_sigma_7_7_payload,
  input               clk,
  input               reset
);
  reg        [31:0]   temp_0_0;
  reg        [31:0]   temp_0_1;
  reg        [31:0]   temp_0_2;
  reg        [31:0]   temp_0_3;
  reg        [31:0]   temp_0_4;
  reg        [31:0]   temp_0_5;
  reg        [31:0]   temp_0_6;
  reg        [31:0]   temp_0_7;
  reg        [31:0]   temp_1_0;
  reg        [31:0]   temp_1_1;
  reg        [31:0]   temp_1_2;
  reg        [31:0]   temp_1_3;
  reg        [31:0]   temp_1_4;
  reg        [31:0]   temp_1_5;
  reg        [31:0]   temp_1_6;
  reg        [31:0]   temp_1_7;
  reg        [31:0]   temp_2_0;
  reg        [31:0]   temp_2_1;
  reg        [31:0]   temp_2_2;
  reg        [31:0]   temp_2_3;
  reg        [31:0]   temp_2_4;
  reg        [31:0]   temp_2_5;
  reg        [31:0]   temp_2_6;
  reg        [31:0]   temp_2_7;
  reg        [31:0]   temp_3_0;
  reg        [31:0]   temp_3_1;
  reg        [31:0]   temp_3_2;
  reg        [31:0]   temp_3_3;
  reg        [31:0]   temp_3_4;
  reg        [31:0]   temp_3_5;
  reg        [31:0]   temp_3_6;
  reg        [31:0]   temp_3_7;
  reg        [31:0]   temp_4_0;
  reg        [31:0]   temp_4_1;
  reg        [31:0]   temp_4_2;
  reg        [31:0]   temp_4_3;
  reg        [31:0]   temp_4_4;
  reg        [31:0]   temp_4_5;
  reg        [31:0]   temp_4_6;
  reg        [31:0]   temp_4_7;
  reg        [31:0]   temp_5_0;
  reg        [31:0]   temp_5_1;
  reg        [31:0]   temp_5_2;
  reg        [31:0]   temp_5_3;
  reg        [31:0]   temp_5_4;
  reg        [31:0]   temp_5_5;
  reg        [31:0]   temp_5_6;
  reg        [31:0]   temp_5_7;
  reg        [31:0]   temp_6_0;
  reg        [31:0]   temp_6_1;
  reg        [31:0]   temp_6_2;
  reg        [31:0]   temp_6_3;
  reg        [31:0]   temp_6_4;
  reg        [31:0]   temp_6_5;
  reg        [31:0]   temp_6_6;
  reg        [31:0]   temp_6_7;
  reg        [31:0]   temp_7_0;
  reg        [31:0]   temp_7_1;
  reg        [31:0]   temp_7_2;
  reg        [31:0]   temp_7_3;
  reg        [31:0]   temp_7_4;
  reg        [31:0]   temp_7_5;
  reg        [31:0]   temp_7_6;
  reg        [31:0]   temp_7_7;
  reg                 indata_ready;
  wire                o_delta_wt_ready;
  wire                o_sigma_ready;
  wire                indata_valid;
  reg                 o_delta_wt_valid;
  reg                 o_sigma_valid;
  wire                w_indata_valid_0;
  wire                w_indata_valid_1;
  wire                w_indata_valid_2;
  wire                w_indata_valid_3;
  wire                w_indata_valid_4;
  wire                w_indata_valid_5;
  wire                w_indata_valid_6;
  wire                w_indata_valid_7;
  wire                w_o_delta_wt_ready_0;
  wire                w_o_delta_wt_ready_1;
  wire                w_o_delta_wt_ready_2;
  wire                w_o_delta_wt_ready_3;
  wire                w_o_delta_wt_ready_4;
  wire                w_o_delta_wt_ready_5;
  wire                w_o_delta_wt_ready_6;
  wire                w_o_delta_wt_ready_7;
  wire                w_o_sigma_ready_0;
  wire                w_o_sigma_ready_1;
  wire                w_o_sigma_ready_2;
  wire                w_o_sigma_ready_3;
  wire                w_o_sigma_ready_4;
  wire                w_o_sigma_ready_5;
  wire                w_o_sigma_ready_6;
  wire                w_o_sigma_ready_7;
  wire                mux_fsm_wantExit;
  reg                 mux_fsm_wantStart;
  wire                mux_fsm_wantKill;
  reg        `mux_fsm_enumDefinition_binary_sequential_type mux_fsm_stateReg;
  reg        `mux_fsm_enumDefinition_binary_sequential_type mux_fsm_stateNext;
  wire                when_conv_mux_l86;
  wire                when_conv_mux_l95;
  wire                when_conv_mux_l106;
  wire                when_conv_mux_l113;
  `ifndef SYNTHESIS
  reg [111:0] mux_fsm_stateReg_string;
  reg [111:0] mux_fsm_stateNext_string;
  `endif


  `ifndef SYNTHESIS
  always @(*) begin
    case(mux_fsm_stateReg)
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_BOOT : mux_fsm_stateReg_string = "mux_fsm_BOOT  ";
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV : mux_fsm_stateReg_string = "mux_fsm_RCV   ";
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA : mux_fsm_stateReg_string = "mux_fsm_ODELTA";
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA : mux_fsm_stateReg_string = "mux_fsm_OSIGMA";
      default : mux_fsm_stateReg_string = "??????????????";
    endcase
  end
  always @(*) begin
    case(mux_fsm_stateNext)
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_BOOT : mux_fsm_stateNext_string = "mux_fsm_BOOT  ";
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV : mux_fsm_stateNext_string = "mux_fsm_RCV   ";
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA : mux_fsm_stateNext_string = "mux_fsm_ODELTA";
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA : mux_fsm_stateNext_string = "mux_fsm_OSIGMA";
      default : mux_fsm_stateNext_string = "??????????????";
    endcase
  end
  `endif

  always @(*) begin
    indata_ready = 1'b0;
    case(mux_fsm_stateReg)
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV : begin
        indata_ready = 1'b1;
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA : begin
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    o_delta_wt_valid = 1'b0;
    case(mux_fsm_stateReg)
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV : begin
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA : begin
        o_delta_wt_valid = 1'b1;
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    o_sigma_valid = 1'b0;
    case(mux_fsm_stateReg)
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV : begin
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA : begin
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA : begin
        o_sigma_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign io_indata_0_0_ready = indata_ready;
  assign io_indata_0_1_ready = indata_ready;
  assign io_indata_0_2_ready = indata_ready;
  assign io_indata_0_3_ready = indata_ready;
  assign io_indata_0_4_ready = indata_ready;
  assign io_indata_0_5_ready = indata_ready;
  assign io_indata_0_6_ready = indata_ready;
  assign io_indata_0_7_ready = indata_ready;
  assign io_indata_1_0_ready = indata_ready;
  assign io_indata_1_1_ready = indata_ready;
  assign io_indata_1_2_ready = indata_ready;
  assign io_indata_1_3_ready = indata_ready;
  assign io_indata_1_4_ready = indata_ready;
  assign io_indata_1_5_ready = indata_ready;
  assign io_indata_1_6_ready = indata_ready;
  assign io_indata_1_7_ready = indata_ready;
  assign io_indata_2_0_ready = indata_ready;
  assign io_indata_2_1_ready = indata_ready;
  assign io_indata_2_2_ready = indata_ready;
  assign io_indata_2_3_ready = indata_ready;
  assign io_indata_2_4_ready = indata_ready;
  assign io_indata_2_5_ready = indata_ready;
  assign io_indata_2_6_ready = indata_ready;
  assign io_indata_2_7_ready = indata_ready;
  assign io_indata_3_0_ready = indata_ready;
  assign io_indata_3_1_ready = indata_ready;
  assign io_indata_3_2_ready = indata_ready;
  assign io_indata_3_3_ready = indata_ready;
  assign io_indata_3_4_ready = indata_ready;
  assign io_indata_3_5_ready = indata_ready;
  assign io_indata_3_6_ready = indata_ready;
  assign io_indata_3_7_ready = indata_ready;
  assign io_indata_4_0_ready = indata_ready;
  assign io_indata_4_1_ready = indata_ready;
  assign io_indata_4_2_ready = indata_ready;
  assign io_indata_4_3_ready = indata_ready;
  assign io_indata_4_4_ready = indata_ready;
  assign io_indata_4_5_ready = indata_ready;
  assign io_indata_4_6_ready = indata_ready;
  assign io_indata_4_7_ready = indata_ready;
  assign io_indata_5_0_ready = indata_ready;
  assign io_indata_5_1_ready = indata_ready;
  assign io_indata_5_2_ready = indata_ready;
  assign io_indata_5_3_ready = indata_ready;
  assign io_indata_5_4_ready = indata_ready;
  assign io_indata_5_5_ready = indata_ready;
  assign io_indata_5_6_ready = indata_ready;
  assign io_indata_5_7_ready = indata_ready;
  assign io_indata_6_0_ready = indata_ready;
  assign io_indata_6_1_ready = indata_ready;
  assign io_indata_6_2_ready = indata_ready;
  assign io_indata_6_3_ready = indata_ready;
  assign io_indata_6_4_ready = indata_ready;
  assign io_indata_6_5_ready = indata_ready;
  assign io_indata_6_6_ready = indata_ready;
  assign io_indata_6_7_ready = indata_ready;
  assign io_indata_7_0_ready = indata_ready;
  assign io_indata_7_1_ready = indata_ready;
  assign io_indata_7_2_ready = indata_ready;
  assign io_indata_7_3_ready = indata_ready;
  assign io_indata_7_4_ready = indata_ready;
  assign io_indata_7_5_ready = indata_ready;
  assign io_indata_7_6_ready = indata_ready;
  assign io_indata_7_7_ready = indata_ready;
  assign w_indata_valid_0 = (((((((io_indata_0_0_valid && io_indata_0_1_valid) && io_indata_0_2_valid) && io_indata_0_3_valid) && io_indata_0_4_valid) && io_indata_0_5_valid) && io_indata_0_6_valid) && io_indata_0_7_valid);
  assign w_indata_valid_1 = (((((((io_indata_1_0_valid && io_indata_1_1_valid) && io_indata_1_2_valid) && io_indata_1_3_valid) && io_indata_1_4_valid) && io_indata_1_5_valid) && io_indata_1_6_valid) && io_indata_1_7_valid);
  assign w_indata_valid_2 = (((((((io_indata_2_0_valid && io_indata_2_1_valid) && io_indata_2_2_valid) && io_indata_2_3_valid) && io_indata_2_4_valid) && io_indata_2_5_valid) && io_indata_2_6_valid) && io_indata_2_7_valid);
  assign w_indata_valid_3 = (((((((io_indata_3_0_valid && io_indata_3_1_valid) && io_indata_3_2_valid) && io_indata_3_3_valid) && io_indata_3_4_valid) && io_indata_3_5_valid) && io_indata_3_6_valid) && io_indata_3_7_valid);
  assign w_indata_valid_4 = (((((((io_indata_4_0_valid && io_indata_4_1_valid) && io_indata_4_2_valid) && io_indata_4_3_valid) && io_indata_4_4_valid) && io_indata_4_5_valid) && io_indata_4_6_valid) && io_indata_4_7_valid);
  assign w_indata_valid_5 = (((((((io_indata_5_0_valid && io_indata_5_1_valid) && io_indata_5_2_valid) && io_indata_5_3_valid) && io_indata_5_4_valid) && io_indata_5_5_valid) && io_indata_5_6_valid) && io_indata_5_7_valid);
  assign w_indata_valid_6 = (((((((io_indata_6_0_valid && io_indata_6_1_valid) && io_indata_6_2_valid) && io_indata_6_3_valid) && io_indata_6_4_valid) && io_indata_6_5_valid) && io_indata_6_6_valid) && io_indata_6_7_valid);
  assign w_indata_valid_7 = (((((((io_indata_7_0_valid && io_indata_7_1_valid) && io_indata_7_2_valid) && io_indata_7_3_valid) && io_indata_7_4_valid) && io_indata_7_5_valid) && io_indata_7_6_valid) && io_indata_7_7_valid);
  assign indata_valid = (((((((w_indata_valid_0 && w_indata_valid_1) && w_indata_valid_2) && w_indata_valid_3) && w_indata_valid_4) && w_indata_valid_5) && w_indata_valid_6) && w_indata_valid_7);
  assign io_o_delta_wt_0_0_valid = o_delta_wt_valid;
  assign io_o_delta_wt_0_1_valid = o_delta_wt_valid;
  assign io_o_delta_wt_0_2_valid = o_delta_wt_valid;
  assign io_o_delta_wt_0_3_valid = o_delta_wt_valid;
  assign io_o_delta_wt_0_4_valid = o_delta_wt_valid;
  assign io_o_delta_wt_0_5_valid = o_delta_wt_valid;
  assign io_o_delta_wt_0_6_valid = o_delta_wt_valid;
  assign io_o_delta_wt_0_7_valid = o_delta_wt_valid;
  assign io_o_delta_wt_1_0_valid = o_delta_wt_valid;
  assign io_o_delta_wt_1_1_valid = o_delta_wt_valid;
  assign io_o_delta_wt_1_2_valid = o_delta_wt_valid;
  assign io_o_delta_wt_1_3_valid = o_delta_wt_valid;
  assign io_o_delta_wt_1_4_valid = o_delta_wt_valid;
  assign io_o_delta_wt_1_5_valid = o_delta_wt_valid;
  assign io_o_delta_wt_1_6_valid = o_delta_wt_valid;
  assign io_o_delta_wt_1_7_valid = o_delta_wt_valid;
  assign io_o_delta_wt_2_0_valid = o_delta_wt_valid;
  assign io_o_delta_wt_2_1_valid = o_delta_wt_valid;
  assign io_o_delta_wt_2_2_valid = o_delta_wt_valid;
  assign io_o_delta_wt_2_3_valid = o_delta_wt_valid;
  assign io_o_delta_wt_2_4_valid = o_delta_wt_valid;
  assign io_o_delta_wt_2_5_valid = o_delta_wt_valid;
  assign io_o_delta_wt_2_6_valid = o_delta_wt_valid;
  assign io_o_delta_wt_2_7_valid = o_delta_wt_valid;
  assign io_o_delta_wt_3_0_valid = o_delta_wt_valid;
  assign io_o_delta_wt_3_1_valid = o_delta_wt_valid;
  assign io_o_delta_wt_3_2_valid = o_delta_wt_valid;
  assign io_o_delta_wt_3_3_valid = o_delta_wt_valid;
  assign io_o_delta_wt_3_4_valid = o_delta_wt_valid;
  assign io_o_delta_wt_3_5_valid = o_delta_wt_valid;
  assign io_o_delta_wt_3_6_valid = o_delta_wt_valid;
  assign io_o_delta_wt_3_7_valid = o_delta_wt_valid;
  assign io_o_delta_wt_4_0_valid = o_delta_wt_valid;
  assign io_o_delta_wt_4_1_valid = o_delta_wt_valid;
  assign io_o_delta_wt_4_2_valid = o_delta_wt_valid;
  assign io_o_delta_wt_4_3_valid = o_delta_wt_valid;
  assign io_o_delta_wt_4_4_valid = o_delta_wt_valid;
  assign io_o_delta_wt_4_5_valid = o_delta_wt_valid;
  assign io_o_delta_wt_4_6_valid = o_delta_wt_valid;
  assign io_o_delta_wt_4_7_valid = o_delta_wt_valid;
  assign io_o_delta_wt_5_0_valid = o_delta_wt_valid;
  assign io_o_delta_wt_5_1_valid = o_delta_wt_valid;
  assign io_o_delta_wt_5_2_valid = o_delta_wt_valid;
  assign io_o_delta_wt_5_3_valid = o_delta_wt_valid;
  assign io_o_delta_wt_5_4_valid = o_delta_wt_valid;
  assign io_o_delta_wt_5_5_valid = o_delta_wt_valid;
  assign io_o_delta_wt_5_6_valid = o_delta_wt_valid;
  assign io_o_delta_wt_5_7_valid = o_delta_wt_valid;
  assign io_o_delta_wt_6_0_valid = o_delta_wt_valid;
  assign io_o_delta_wt_6_1_valid = o_delta_wt_valid;
  assign io_o_delta_wt_6_2_valid = o_delta_wt_valid;
  assign io_o_delta_wt_6_3_valid = o_delta_wt_valid;
  assign io_o_delta_wt_6_4_valid = o_delta_wt_valid;
  assign io_o_delta_wt_6_5_valid = o_delta_wt_valid;
  assign io_o_delta_wt_6_6_valid = o_delta_wt_valid;
  assign io_o_delta_wt_6_7_valid = o_delta_wt_valid;
  assign io_o_delta_wt_7_0_valid = o_delta_wt_valid;
  assign io_o_delta_wt_7_1_valid = o_delta_wt_valid;
  assign io_o_delta_wt_7_2_valid = o_delta_wt_valid;
  assign io_o_delta_wt_7_3_valid = o_delta_wt_valid;
  assign io_o_delta_wt_7_4_valid = o_delta_wt_valid;
  assign io_o_delta_wt_7_5_valid = o_delta_wt_valid;
  assign io_o_delta_wt_7_6_valid = o_delta_wt_valid;
  assign io_o_delta_wt_7_7_valid = o_delta_wt_valid;
  assign w_o_delta_wt_ready_0 = (((((((io_o_delta_wt_0_0_ready && io_o_delta_wt_0_1_ready) && io_o_delta_wt_0_2_ready) && io_o_delta_wt_0_3_ready) && io_o_delta_wt_0_4_ready) && io_o_delta_wt_0_5_ready) && io_o_delta_wt_0_6_ready) && io_o_delta_wt_0_7_ready);
  assign w_o_delta_wt_ready_1 = (((((((io_o_delta_wt_1_0_ready && io_o_delta_wt_1_1_ready) && io_o_delta_wt_1_2_ready) && io_o_delta_wt_1_3_ready) && io_o_delta_wt_1_4_ready) && io_o_delta_wt_1_5_ready) && io_o_delta_wt_1_6_ready) && io_o_delta_wt_1_7_ready);
  assign w_o_delta_wt_ready_2 = (((((((io_o_delta_wt_2_0_ready && io_o_delta_wt_2_1_ready) && io_o_delta_wt_2_2_ready) && io_o_delta_wt_2_3_ready) && io_o_delta_wt_2_4_ready) && io_o_delta_wt_2_5_ready) && io_o_delta_wt_2_6_ready) && io_o_delta_wt_2_7_ready);
  assign w_o_delta_wt_ready_3 = (((((((io_o_delta_wt_3_0_ready && io_o_delta_wt_3_1_ready) && io_o_delta_wt_3_2_ready) && io_o_delta_wt_3_3_ready) && io_o_delta_wt_3_4_ready) && io_o_delta_wt_3_5_ready) && io_o_delta_wt_3_6_ready) && io_o_delta_wt_3_7_ready);
  assign w_o_delta_wt_ready_4 = (((((((io_o_delta_wt_4_0_ready && io_o_delta_wt_4_1_ready) && io_o_delta_wt_4_2_ready) && io_o_delta_wt_4_3_ready) && io_o_delta_wt_4_4_ready) && io_o_delta_wt_4_5_ready) && io_o_delta_wt_4_6_ready) && io_o_delta_wt_4_7_ready);
  assign w_o_delta_wt_ready_5 = (((((((io_o_delta_wt_5_0_ready && io_o_delta_wt_5_1_ready) && io_o_delta_wt_5_2_ready) && io_o_delta_wt_5_3_ready) && io_o_delta_wt_5_4_ready) && io_o_delta_wt_5_5_ready) && io_o_delta_wt_5_6_ready) && io_o_delta_wt_5_7_ready);
  assign w_o_delta_wt_ready_6 = (((((((io_o_delta_wt_6_0_ready && io_o_delta_wt_6_1_ready) && io_o_delta_wt_6_2_ready) && io_o_delta_wt_6_3_ready) && io_o_delta_wt_6_4_ready) && io_o_delta_wt_6_5_ready) && io_o_delta_wt_6_6_ready) && io_o_delta_wt_6_7_ready);
  assign w_o_delta_wt_ready_7 = (((((((io_o_delta_wt_7_0_ready && io_o_delta_wt_7_1_ready) && io_o_delta_wt_7_2_ready) && io_o_delta_wt_7_3_ready) && io_o_delta_wt_7_4_ready) && io_o_delta_wt_7_5_ready) && io_o_delta_wt_7_6_ready) && io_o_delta_wt_7_7_ready);
  assign o_delta_wt_ready = (((((((w_o_delta_wt_ready_0 && w_o_delta_wt_ready_1) && w_o_delta_wt_ready_2) && w_o_delta_wt_ready_3) && w_o_delta_wt_ready_4) && w_o_delta_wt_ready_5) && w_o_delta_wt_ready_6) && w_o_delta_wt_ready_7);
  assign io_o_sigma_0_0_valid = o_sigma_valid;
  assign io_o_sigma_0_1_valid = o_sigma_valid;
  assign io_o_sigma_0_2_valid = o_sigma_valid;
  assign io_o_sigma_0_3_valid = o_sigma_valid;
  assign io_o_sigma_0_4_valid = o_sigma_valid;
  assign io_o_sigma_0_5_valid = o_sigma_valid;
  assign io_o_sigma_0_6_valid = o_sigma_valid;
  assign io_o_sigma_0_7_valid = o_sigma_valid;
  assign io_o_sigma_1_0_valid = o_sigma_valid;
  assign io_o_sigma_1_1_valid = o_sigma_valid;
  assign io_o_sigma_1_2_valid = o_sigma_valid;
  assign io_o_sigma_1_3_valid = o_sigma_valid;
  assign io_o_sigma_1_4_valid = o_sigma_valid;
  assign io_o_sigma_1_5_valid = o_sigma_valid;
  assign io_o_sigma_1_6_valid = o_sigma_valid;
  assign io_o_sigma_1_7_valid = o_sigma_valid;
  assign io_o_sigma_2_0_valid = o_sigma_valid;
  assign io_o_sigma_2_1_valid = o_sigma_valid;
  assign io_o_sigma_2_2_valid = o_sigma_valid;
  assign io_o_sigma_2_3_valid = o_sigma_valid;
  assign io_o_sigma_2_4_valid = o_sigma_valid;
  assign io_o_sigma_2_5_valid = o_sigma_valid;
  assign io_o_sigma_2_6_valid = o_sigma_valid;
  assign io_o_sigma_2_7_valid = o_sigma_valid;
  assign io_o_sigma_3_0_valid = o_sigma_valid;
  assign io_o_sigma_3_1_valid = o_sigma_valid;
  assign io_o_sigma_3_2_valid = o_sigma_valid;
  assign io_o_sigma_3_3_valid = o_sigma_valid;
  assign io_o_sigma_3_4_valid = o_sigma_valid;
  assign io_o_sigma_3_5_valid = o_sigma_valid;
  assign io_o_sigma_3_6_valid = o_sigma_valid;
  assign io_o_sigma_3_7_valid = o_sigma_valid;
  assign io_o_sigma_4_0_valid = o_sigma_valid;
  assign io_o_sigma_4_1_valid = o_sigma_valid;
  assign io_o_sigma_4_2_valid = o_sigma_valid;
  assign io_o_sigma_4_3_valid = o_sigma_valid;
  assign io_o_sigma_4_4_valid = o_sigma_valid;
  assign io_o_sigma_4_5_valid = o_sigma_valid;
  assign io_o_sigma_4_6_valid = o_sigma_valid;
  assign io_o_sigma_4_7_valid = o_sigma_valid;
  assign io_o_sigma_5_0_valid = o_sigma_valid;
  assign io_o_sigma_5_1_valid = o_sigma_valid;
  assign io_o_sigma_5_2_valid = o_sigma_valid;
  assign io_o_sigma_5_3_valid = o_sigma_valid;
  assign io_o_sigma_5_4_valid = o_sigma_valid;
  assign io_o_sigma_5_5_valid = o_sigma_valid;
  assign io_o_sigma_5_6_valid = o_sigma_valid;
  assign io_o_sigma_5_7_valid = o_sigma_valid;
  assign io_o_sigma_6_0_valid = o_sigma_valid;
  assign io_o_sigma_6_1_valid = o_sigma_valid;
  assign io_o_sigma_6_2_valid = o_sigma_valid;
  assign io_o_sigma_6_3_valid = o_sigma_valid;
  assign io_o_sigma_6_4_valid = o_sigma_valid;
  assign io_o_sigma_6_5_valid = o_sigma_valid;
  assign io_o_sigma_6_6_valid = o_sigma_valid;
  assign io_o_sigma_6_7_valid = o_sigma_valid;
  assign io_o_sigma_7_0_valid = o_sigma_valid;
  assign io_o_sigma_7_1_valid = o_sigma_valid;
  assign io_o_sigma_7_2_valid = o_sigma_valid;
  assign io_o_sigma_7_3_valid = o_sigma_valid;
  assign io_o_sigma_7_4_valid = o_sigma_valid;
  assign io_o_sigma_7_5_valid = o_sigma_valid;
  assign io_o_sigma_7_6_valid = o_sigma_valid;
  assign io_o_sigma_7_7_valid = o_sigma_valid;
  assign w_o_sigma_ready_0 = (((((((io_o_sigma_0_0_ready && io_o_sigma_0_1_ready) && io_o_sigma_0_2_ready) && io_o_sigma_0_3_ready) && io_o_sigma_0_4_ready) && io_o_sigma_0_5_ready) && io_o_sigma_0_6_ready) && io_o_sigma_0_7_ready);
  assign w_o_sigma_ready_1 = (((((((io_o_sigma_1_0_ready && io_o_sigma_1_1_ready) && io_o_sigma_1_2_ready) && io_o_sigma_1_3_ready) && io_o_sigma_1_4_ready) && io_o_sigma_1_5_ready) && io_o_sigma_1_6_ready) && io_o_sigma_1_7_ready);
  assign w_o_sigma_ready_2 = (((((((io_o_sigma_2_0_ready && io_o_sigma_2_1_ready) && io_o_sigma_2_2_ready) && io_o_sigma_2_3_ready) && io_o_sigma_2_4_ready) && io_o_sigma_2_5_ready) && io_o_sigma_2_6_ready) && io_o_sigma_2_7_ready);
  assign w_o_sigma_ready_3 = (((((((io_o_sigma_3_0_ready && io_o_sigma_3_1_ready) && io_o_sigma_3_2_ready) && io_o_sigma_3_3_ready) && io_o_sigma_3_4_ready) && io_o_sigma_3_5_ready) && io_o_sigma_3_6_ready) && io_o_sigma_3_7_ready);
  assign w_o_sigma_ready_4 = (((((((io_o_sigma_4_0_ready && io_o_sigma_4_1_ready) && io_o_sigma_4_2_ready) && io_o_sigma_4_3_ready) && io_o_sigma_4_4_ready) && io_o_sigma_4_5_ready) && io_o_sigma_4_6_ready) && io_o_sigma_4_7_ready);
  assign w_o_sigma_ready_5 = (((((((io_o_sigma_5_0_ready && io_o_sigma_5_1_ready) && io_o_sigma_5_2_ready) && io_o_sigma_5_3_ready) && io_o_sigma_5_4_ready) && io_o_sigma_5_5_ready) && io_o_sigma_5_6_ready) && io_o_sigma_5_7_ready);
  assign w_o_sigma_ready_6 = (((((((io_o_sigma_6_0_ready && io_o_sigma_6_1_ready) && io_o_sigma_6_2_ready) && io_o_sigma_6_3_ready) && io_o_sigma_6_4_ready) && io_o_sigma_6_5_ready) && io_o_sigma_6_6_ready) && io_o_sigma_6_7_ready);
  assign w_o_sigma_ready_7 = (((((((io_o_sigma_7_0_ready && io_o_sigma_7_1_ready) && io_o_sigma_7_2_ready) && io_o_sigma_7_3_ready) && io_o_sigma_7_4_ready) && io_o_sigma_7_5_ready) && io_o_sigma_7_6_ready) && io_o_sigma_7_7_ready);
  assign o_sigma_ready = (((((((w_o_sigma_ready_0 && w_o_sigma_ready_1) && w_o_sigma_ready_2) && w_o_sigma_ready_3) && w_o_sigma_ready_4) && w_o_sigma_ready_5) && w_o_sigma_ready_6) && w_o_sigma_ready_7);
  assign io_o_delta_wt_0_0_payload = temp_0_0;
  assign io_o_sigma_0_0_payload = temp_0_0;
  assign io_o_delta_wt_0_1_payload = temp_0_1;
  assign io_o_sigma_0_1_payload = temp_0_1;
  assign io_o_delta_wt_0_2_payload = temp_0_2;
  assign io_o_sigma_0_2_payload = temp_0_2;
  assign io_o_delta_wt_0_3_payload = temp_0_3;
  assign io_o_sigma_0_3_payload = temp_0_3;
  assign io_o_delta_wt_0_4_payload = temp_0_4;
  assign io_o_sigma_0_4_payload = temp_0_4;
  assign io_o_delta_wt_0_5_payload = temp_0_5;
  assign io_o_sigma_0_5_payload = temp_0_5;
  assign io_o_delta_wt_0_6_payload = temp_0_6;
  assign io_o_sigma_0_6_payload = temp_0_6;
  assign io_o_delta_wt_0_7_payload = temp_0_7;
  assign io_o_sigma_0_7_payload = temp_0_7;
  assign io_o_delta_wt_1_0_payload = temp_1_0;
  assign io_o_sigma_1_0_payload = temp_1_0;
  assign io_o_delta_wt_1_1_payload = temp_1_1;
  assign io_o_sigma_1_1_payload = temp_1_1;
  assign io_o_delta_wt_1_2_payload = temp_1_2;
  assign io_o_sigma_1_2_payload = temp_1_2;
  assign io_o_delta_wt_1_3_payload = temp_1_3;
  assign io_o_sigma_1_3_payload = temp_1_3;
  assign io_o_delta_wt_1_4_payload = temp_1_4;
  assign io_o_sigma_1_4_payload = temp_1_4;
  assign io_o_delta_wt_1_5_payload = temp_1_5;
  assign io_o_sigma_1_5_payload = temp_1_5;
  assign io_o_delta_wt_1_6_payload = temp_1_6;
  assign io_o_sigma_1_6_payload = temp_1_6;
  assign io_o_delta_wt_1_7_payload = temp_1_7;
  assign io_o_sigma_1_7_payload = temp_1_7;
  assign io_o_delta_wt_2_0_payload = temp_2_0;
  assign io_o_sigma_2_0_payload = temp_2_0;
  assign io_o_delta_wt_2_1_payload = temp_2_1;
  assign io_o_sigma_2_1_payload = temp_2_1;
  assign io_o_delta_wt_2_2_payload = temp_2_2;
  assign io_o_sigma_2_2_payload = temp_2_2;
  assign io_o_delta_wt_2_3_payload = temp_2_3;
  assign io_o_sigma_2_3_payload = temp_2_3;
  assign io_o_delta_wt_2_4_payload = temp_2_4;
  assign io_o_sigma_2_4_payload = temp_2_4;
  assign io_o_delta_wt_2_5_payload = temp_2_5;
  assign io_o_sigma_2_5_payload = temp_2_5;
  assign io_o_delta_wt_2_6_payload = temp_2_6;
  assign io_o_sigma_2_6_payload = temp_2_6;
  assign io_o_delta_wt_2_7_payload = temp_2_7;
  assign io_o_sigma_2_7_payload = temp_2_7;
  assign io_o_delta_wt_3_0_payload = temp_3_0;
  assign io_o_sigma_3_0_payload = temp_3_0;
  assign io_o_delta_wt_3_1_payload = temp_3_1;
  assign io_o_sigma_3_1_payload = temp_3_1;
  assign io_o_delta_wt_3_2_payload = temp_3_2;
  assign io_o_sigma_3_2_payload = temp_3_2;
  assign io_o_delta_wt_3_3_payload = temp_3_3;
  assign io_o_sigma_3_3_payload = temp_3_3;
  assign io_o_delta_wt_3_4_payload = temp_3_4;
  assign io_o_sigma_3_4_payload = temp_3_4;
  assign io_o_delta_wt_3_5_payload = temp_3_5;
  assign io_o_sigma_3_5_payload = temp_3_5;
  assign io_o_delta_wt_3_6_payload = temp_3_6;
  assign io_o_sigma_3_6_payload = temp_3_6;
  assign io_o_delta_wt_3_7_payload = temp_3_7;
  assign io_o_sigma_3_7_payload = temp_3_7;
  assign io_o_delta_wt_4_0_payload = temp_4_0;
  assign io_o_sigma_4_0_payload = temp_4_0;
  assign io_o_delta_wt_4_1_payload = temp_4_1;
  assign io_o_sigma_4_1_payload = temp_4_1;
  assign io_o_delta_wt_4_2_payload = temp_4_2;
  assign io_o_sigma_4_2_payload = temp_4_2;
  assign io_o_delta_wt_4_3_payload = temp_4_3;
  assign io_o_sigma_4_3_payload = temp_4_3;
  assign io_o_delta_wt_4_4_payload = temp_4_4;
  assign io_o_sigma_4_4_payload = temp_4_4;
  assign io_o_delta_wt_4_5_payload = temp_4_5;
  assign io_o_sigma_4_5_payload = temp_4_5;
  assign io_o_delta_wt_4_6_payload = temp_4_6;
  assign io_o_sigma_4_6_payload = temp_4_6;
  assign io_o_delta_wt_4_7_payload = temp_4_7;
  assign io_o_sigma_4_7_payload = temp_4_7;
  assign io_o_delta_wt_5_0_payload = temp_5_0;
  assign io_o_sigma_5_0_payload = temp_5_0;
  assign io_o_delta_wt_5_1_payload = temp_5_1;
  assign io_o_sigma_5_1_payload = temp_5_1;
  assign io_o_delta_wt_5_2_payload = temp_5_2;
  assign io_o_sigma_5_2_payload = temp_5_2;
  assign io_o_delta_wt_5_3_payload = temp_5_3;
  assign io_o_sigma_5_3_payload = temp_5_3;
  assign io_o_delta_wt_5_4_payload = temp_5_4;
  assign io_o_sigma_5_4_payload = temp_5_4;
  assign io_o_delta_wt_5_5_payload = temp_5_5;
  assign io_o_sigma_5_5_payload = temp_5_5;
  assign io_o_delta_wt_5_6_payload = temp_5_6;
  assign io_o_sigma_5_6_payload = temp_5_6;
  assign io_o_delta_wt_5_7_payload = temp_5_7;
  assign io_o_sigma_5_7_payload = temp_5_7;
  assign io_o_delta_wt_6_0_payload = temp_6_0;
  assign io_o_sigma_6_0_payload = temp_6_0;
  assign io_o_delta_wt_6_1_payload = temp_6_1;
  assign io_o_sigma_6_1_payload = temp_6_1;
  assign io_o_delta_wt_6_2_payload = temp_6_2;
  assign io_o_sigma_6_2_payload = temp_6_2;
  assign io_o_delta_wt_6_3_payload = temp_6_3;
  assign io_o_sigma_6_3_payload = temp_6_3;
  assign io_o_delta_wt_6_4_payload = temp_6_4;
  assign io_o_sigma_6_4_payload = temp_6_4;
  assign io_o_delta_wt_6_5_payload = temp_6_5;
  assign io_o_sigma_6_5_payload = temp_6_5;
  assign io_o_delta_wt_6_6_payload = temp_6_6;
  assign io_o_sigma_6_6_payload = temp_6_6;
  assign io_o_delta_wt_6_7_payload = temp_6_7;
  assign io_o_sigma_6_7_payload = temp_6_7;
  assign io_o_delta_wt_7_0_payload = temp_7_0;
  assign io_o_sigma_7_0_payload = temp_7_0;
  assign io_o_delta_wt_7_1_payload = temp_7_1;
  assign io_o_sigma_7_1_payload = temp_7_1;
  assign io_o_delta_wt_7_2_payload = temp_7_2;
  assign io_o_sigma_7_2_payload = temp_7_2;
  assign io_o_delta_wt_7_3_payload = temp_7_3;
  assign io_o_sigma_7_3_payload = temp_7_3;
  assign io_o_delta_wt_7_4_payload = temp_7_4;
  assign io_o_sigma_7_4_payload = temp_7_4;
  assign io_o_delta_wt_7_5_payload = temp_7_5;
  assign io_o_sigma_7_5_payload = temp_7_5;
  assign io_o_delta_wt_7_6_payload = temp_7_6;
  assign io_o_sigma_7_6_payload = temp_7_6;
  assign io_o_delta_wt_7_7_payload = temp_7_7;
  assign io_o_sigma_7_7_payload = temp_7_7;
  assign mux_fsm_wantExit = 1'b0;
  always @(*) begin
    mux_fsm_wantStart = 1'b0;
    case(mux_fsm_stateReg)
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV : begin
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA : begin
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA : begin
      end
      default : begin
        mux_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign mux_fsm_wantKill = 1'b0;
  always @(*) begin
    mux_fsm_stateNext = mux_fsm_stateReg;
    case(mux_fsm_stateReg)
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV : begin
        if(when_conv_mux_l86) begin
          if(when_conv_mux_l95) begin
            mux_fsm_stateNext = `mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA;
          end else begin
            mux_fsm_stateNext = `mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA;
          end
        end
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA : begin
        if(when_conv_mux_l106) begin
          mux_fsm_stateNext = `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV;
        end
      end
      `mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA : begin
        if(when_conv_mux_l113) begin
          mux_fsm_stateNext = `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV;
        end
      end
      default : begin
      end
    endcase
    if(mux_fsm_wantStart) begin
      mux_fsm_stateNext = `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV;
    end
    if(mux_fsm_wantKill) begin
      mux_fsm_stateNext = `mux_fsm_enumDefinition_binary_sequential_mux_fsm_BOOT;
    end
  end

  assign when_conv_mux_l86 = (indata_valid && indata_ready);
  assign when_conv_mux_l95 = (io_is_delta_wt == 1'b1);
  assign when_conv_mux_l106 = (o_delta_wt_valid && o_delta_wt_ready);
  assign when_conv_mux_l113 = (o_sigma_valid && o_sigma_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      temp_0_0 <= 32'h0;
      temp_0_1 <= 32'h0;
      temp_0_2 <= 32'h0;
      temp_0_3 <= 32'h0;
      temp_0_4 <= 32'h0;
      temp_0_5 <= 32'h0;
      temp_0_6 <= 32'h0;
      temp_0_7 <= 32'h0;
      temp_1_0 <= 32'h0;
      temp_1_1 <= 32'h0;
      temp_1_2 <= 32'h0;
      temp_1_3 <= 32'h0;
      temp_1_4 <= 32'h0;
      temp_1_5 <= 32'h0;
      temp_1_6 <= 32'h0;
      temp_1_7 <= 32'h0;
      temp_2_0 <= 32'h0;
      temp_2_1 <= 32'h0;
      temp_2_2 <= 32'h0;
      temp_2_3 <= 32'h0;
      temp_2_4 <= 32'h0;
      temp_2_5 <= 32'h0;
      temp_2_6 <= 32'h0;
      temp_2_7 <= 32'h0;
      temp_3_0 <= 32'h0;
      temp_3_1 <= 32'h0;
      temp_3_2 <= 32'h0;
      temp_3_3 <= 32'h0;
      temp_3_4 <= 32'h0;
      temp_3_5 <= 32'h0;
      temp_3_6 <= 32'h0;
      temp_3_7 <= 32'h0;
      temp_4_0 <= 32'h0;
      temp_4_1 <= 32'h0;
      temp_4_2 <= 32'h0;
      temp_4_3 <= 32'h0;
      temp_4_4 <= 32'h0;
      temp_4_5 <= 32'h0;
      temp_4_6 <= 32'h0;
      temp_4_7 <= 32'h0;
      temp_5_0 <= 32'h0;
      temp_5_1 <= 32'h0;
      temp_5_2 <= 32'h0;
      temp_5_3 <= 32'h0;
      temp_5_4 <= 32'h0;
      temp_5_5 <= 32'h0;
      temp_5_6 <= 32'h0;
      temp_5_7 <= 32'h0;
      temp_6_0 <= 32'h0;
      temp_6_1 <= 32'h0;
      temp_6_2 <= 32'h0;
      temp_6_3 <= 32'h0;
      temp_6_4 <= 32'h0;
      temp_6_5 <= 32'h0;
      temp_6_6 <= 32'h0;
      temp_6_7 <= 32'h0;
      temp_7_0 <= 32'h0;
      temp_7_1 <= 32'h0;
      temp_7_2 <= 32'h0;
      temp_7_3 <= 32'h0;
      temp_7_4 <= 32'h0;
      temp_7_5 <= 32'h0;
      temp_7_6 <= 32'h0;
      temp_7_7 <= 32'h0;
      mux_fsm_stateReg <= `mux_fsm_enumDefinition_binary_sequential_mux_fsm_BOOT;
    end else begin
      mux_fsm_stateReg <= mux_fsm_stateNext;
      case(mux_fsm_stateReg)
        `mux_fsm_enumDefinition_binary_sequential_mux_fsm_RCV : begin
          if(when_conv_mux_l86) begin
            temp_0_0 <= io_indata_0_0_payload;
            temp_0_1 <= io_indata_0_1_payload;
            temp_0_2 <= io_indata_0_2_payload;
            temp_0_3 <= io_indata_0_3_payload;
            temp_0_4 <= io_indata_0_4_payload;
            temp_0_5 <= io_indata_0_5_payload;
            temp_0_6 <= io_indata_0_6_payload;
            temp_0_7 <= io_indata_0_7_payload;
            temp_1_0 <= io_indata_1_0_payload;
            temp_1_1 <= io_indata_1_1_payload;
            temp_1_2 <= io_indata_1_2_payload;
            temp_1_3 <= io_indata_1_3_payload;
            temp_1_4 <= io_indata_1_4_payload;
            temp_1_5 <= io_indata_1_5_payload;
            temp_1_6 <= io_indata_1_6_payload;
            temp_1_7 <= io_indata_1_7_payload;
            temp_2_0 <= io_indata_2_0_payload;
            temp_2_1 <= io_indata_2_1_payload;
            temp_2_2 <= io_indata_2_2_payload;
            temp_2_3 <= io_indata_2_3_payload;
            temp_2_4 <= io_indata_2_4_payload;
            temp_2_5 <= io_indata_2_5_payload;
            temp_2_6 <= io_indata_2_6_payload;
            temp_2_7 <= io_indata_2_7_payload;
            temp_3_0 <= io_indata_3_0_payload;
            temp_3_1 <= io_indata_3_1_payload;
            temp_3_2 <= io_indata_3_2_payload;
            temp_3_3 <= io_indata_3_3_payload;
            temp_3_4 <= io_indata_3_4_payload;
            temp_3_5 <= io_indata_3_5_payload;
            temp_3_6 <= io_indata_3_6_payload;
            temp_3_7 <= io_indata_3_7_payload;
            temp_4_0 <= io_indata_4_0_payload;
            temp_4_1 <= io_indata_4_1_payload;
            temp_4_2 <= io_indata_4_2_payload;
            temp_4_3 <= io_indata_4_3_payload;
            temp_4_4 <= io_indata_4_4_payload;
            temp_4_5 <= io_indata_4_5_payload;
            temp_4_6 <= io_indata_4_6_payload;
            temp_4_7 <= io_indata_4_7_payload;
            temp_5_0 <= io_indata_5_0_payload;
            temp_5_1 <= io_indata_5_1_payload;
            temp_5_2 <= io_indata_5_2_payload;
            temp_5_3 <= io_indata_5_3_payload;
            temp_5_4 <= io_indata_5_4_payload;
            temp_5_5 <= io_indata_5_5_payload;
            temp_5_6 <= io_indata_5_6_payload;
            temp_5_7 <= io_indata_5_7_payload;
            temp_6_0 <= io_indata_6_0_payload;
            temp_6_1 <= io_indata_6_1_payload;
            temp_6_2 <= io_indata_6_2_payload;
            temp_6_3 <= io_indata_6_3_payload;
            temp_6_4 <= io_indata_6_4_payload;
            temp_6_5 <= io_indata_6_5_payload;
            temp_6_6 <= io_indata_6_6_payload;
            temp_6_7 <= io_indata_6_7_payload;
            temp_7_0 <= io_indata_7_0_payload;
            temp_7_1 <= io_indata_7_1_payload;
            temp_7_2 <= io_indata_7_2_payload;
            temp_7_3 <= io_indata_7_3_payload;
            temp_7_4 <= io_indata_7_4_payload;
            temp_7_5 <= io_indata_7_5_payload;
            temp_7_6 <= io_indata_7_6_payload;
            temp_7_7 <= io_indata_7_7_payload;
          end
        end
        `mux_fsm_enumDefinition_binary_sequential_mux_fsm_ODELTA : begin
        end
        `mux_fsm_enumDefinition_binary_sequential_mux_fsm_OSIGMA : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

module mac_acc_array (
  input               s_ft_0_valid,
  output              s_ft_0_ready,
  input      [31:0]   s_ft_0_payload,
  input               s_ft_1_valid,
  output              s_ft_1_ready,
  input      [31:0]   s_ft_1_payload,
  input               s_ft_2_valid,
  output              s_ft_2_ready,
  input      [31:0]   s_ft_2_payload,
  input               s_ft_3_valid,
  output              s_ft_3_ready,
  input      [31:0]   s_ft_3_payload,
  input               s_ft_4_valid,
  output              s_ft_4_ready,
  input      [31:0]   s_ft_4_payload,
  input               s_ft_5_valid,
  output              s_ft_5_ready,
  input      [31:0]   s_ft_5_payload,
  input               s_ft_6_valid,
  output              s_ft_6_ready,
  input      [31:0]   s_ft_6_payload,
  input               s_ft_7_valid,
  output              s_ft_7_ready,
  input      [31:0]   s_ft_7_payload,
  input               s_wt_0_0_valid,
  output              s_wt_0_0_ready,
  input      [31:0]   s_wt_0_0_payload,
  input               s_wt_0_1_valid,
  output              s_wt_0_1_ready,
  input      [31:0]   s_wt_0_1_payload,
  input               s_wt_0_2_valid,
  output              s_wt_0_2_ready,
  input      [31:0]   s_wt_0_2_payload,
  input               s_wt_0_3_valid,
  output              s_wt_0_3_ready,
  input      [31:0]   s_wt_0_3_payload,
  input               s_wt_0_4_valid,
  output              s_wt_0_4_ready,
  input      [31:0]   s_wt_0_4_payload,
  input               s_wt_0_5_valid,
  output              s_wt_0_5_ready,
  input      [31:0]   s_wt_0_5_payload,
  input               s_wt_0_6_valid,
  output              s_wt_0_6_ready,
  input      [31:0]   s_wt_0_6_payload,
  input               s_wt_0_7_valid,
  output              s_wt_0_7_ready,
  input      [31:0]   s_wt_0_7_payload,
  input               s_wt_1_0_valid,
  output              s_wt_1_0_ready,
  input      [31:0]   s_wt_1_0_payload,
  input               s_wt_1_1_valid,
  output              s_wt_1_1_ready,
  input      [31:0]   s_wt_1_1_payload,
  input               s_wt_1_2_valid,
  output              s_wt_1_2_ready,
  input      [31:0]   s_wt_1_2_payload,
  input               s_wt_1_3_valid,
  output              s_wt_1_3_ready,
  input      [31:0]   s_wt_1_3_payload,
  input               s_wt_1_4_valid,
  output              s_wt_1_4_ready,
  input      [31:0]   s_wt_1_4_payload,
  input               s_wt_1_5_valid,
  output              s_wt_1_5_ready,
  input      [31:0]   s_wt_1_5_payload,
  input               s_wt_1_6_valid,
  output              s_wt_1_6_ready,
  input      [31:0]   s_wt_1_6_payload,
  input               s_wt_1_7_valid,
  output              s_wt_1_7_ready,
  input      [31:0]   s_wt_1_7_payload,
  input               s_wt_2_0_valid,
  output              s_wt_2_0_ready,
  input      [31:0]   s_wt_2_0_payload,
  input               s_wt_2_1_valid,
  output              s_wt_2_1_ready,
  input      [31:0]   s_wt_2_1_payload,
  input               s_wt_2_2_valid,
  output              s_wt_2_2_ready,
  input      [31:0]   s_wt_2_2_payload,
  input               s_wt_2_3_valid,
  output              s_wt_2_3_ready,
  input      [31:0]   s_wt_2_3_payload,
  input               s_wt_2_4_valid,
  output              s_wt_2_4_ready,
  input      [31:0]   s_wt_2_4_payload,
  input               s_wt_2_5_valid,
  output              s_wt_2_5_ready,
  input      [31:0]   s_wt_2_5_payload,
  input               s_wt_2_6_valid,
  output              s_wt_2_6_ready,
  input      [31:0]   s_wt_2_6_payload,
  input               s_wt_2_7_valid,
  output              s_wt_2_7_ready,
  input      [31:0]   s_wt_2_7_payload,
  input               s_wt_3_0_valid,
  output              s_wt_3_0_ready,
  input      [31:0]   s_wt_3_0_payload,
  input               s_wt_3_1_valid,
  output              s_wt_3_1_ready,
  input      [31:0]   s_wt_3_1_payload,
  input               s_wt_3_2_valid,
  output              s_wt_3_2_ready,
  input      [31:0]   s_wt_3_2_payload,
  input               s_wt_3_3_valid,
  output              s_wt_3_3_ready,
  input      [31:0]   s_wt_3_3_payload,
  input               s_wt_3_4_valid,
  output              s_wt_3_4_ready,
  input      [31:0]   s_wt_3_4_payload,
  input               s_wt_3_5_valid,
  output              s_wt_3_5_ready,
  input      [31:0]   s_wt_3_5_payload,
  input               s_wt_3_6_valid,
  output              s_wt_3_6_ready,
  input      [31:0]   s_wt_3_6_payload,
  input               s_wt_3_7_valid,
  output              s_wt_3_7_ready,
  input      [31:0]   s_wt_3_7_payload,
  input               s_wt_4_0_valid,
  output              s_wt_4_0_ready,
  input      [31:0]   s_wt_4_0_payload,
  input               s_wt_4_1_valid,
  output              s_wt_4_1_ready,
  input      [31:0]   s_wt_4_1_payload,
  input               s_wt_4_2_valid,
  output              s_wt_4_2_ready,
  input      [31:0]   s_wt_4_2_payload,
  input               s_wt_4_3_valid,
  output              s_wt_4_3_ready,
  input      [31:0]   s_wt_4_3_payload,
  input               s_wt_4_4_valid,
  output              s_wt_4_4_ready,
  input      [31:0]   s_wt_4_4_payload,
  input               s_wt_4_5_valid,
  output              s_wt_4_5_ready,
  input      [31:0]   s_wt_4_5_payload,
  input               s_wt_4_6_valid,
  output              s_wt_4_6_ready,
  input      [31:0]   s_wt_4_6_payload,
  input               s_wt_4_7_valid,
  output              s_wt_4_7_ready,
  input      [31:0]   s_wt_4_7_payload,
  input               s_wt_5_0_valid,
  output              s_wt_5_0_ready,
  input      [31:0]   s_wt_5_0_payload,
  input               s_wt_5_1_valid,
  output              s_wt_5_1_ready,
  input      [31:0]   s_wt_5_1_payload,
  input               s_wt_5_2_valid,
  output              s_wt_5_2_ready,
  input      [31:0]   s_wt_5_2_payload,
  input               s_wt_5_3_valid,
  output              s_wt_5_3_ready,
  input      [31:0]   s_wt_5_3_payload,
  input               s_wt_5_4_valid,
  output              s_wt_5_4_ready,
  input      [31:0]   s_wt_5_4_payload,
  input               s_wt_5_5_valid,
  output              s_wt_5_5_ready,
  input      [31:0]   s_wt_5_5_payload,
  input               s_wt_5_6_valid,
  output              s_wt_5_6_ready,
  input      [31:0]   s_wt_5_6_payload,
  input               s_wt_5_7_valid,
  output              s_wt_5_7_ready,
  input      [31:0]   s_wt_5_7_payload,
  input               s_wt_6_0_valid,
  output              s_wt_6_0_ready,
  input      [31:0]   s_wt_6_0_payload,
  input               s_wt_6_1_valid,
  output              s_wt_6_1_ready,
  input      [31:0]   s_wt_6_1_payload,
  input               s_wt_6_2_valid,
  output              s_wt_6_2_ready,
  input      [31:0]   s_wt_6_2_payload,
  input               s_wt_6_3_valid,
  output              s_wt_6_3_ready,
  input      [31:0]   s_wt_6_3_payload,
  input               s_wt_6_4_valid,
  output              s_wt_6_4_ready,
  input      [31:0]   s_wt_6_4_payload,
  input               s_wt_6_5_valid,
  output              s_wt_6_5_ready,
  input      [31:0]   s_wt_6_5_payload,
  input               s_wt_6_6_valid,
  output              s_wt_6_6_ready,
  input      [31:0]   s_wt_6_6_payload,
  input               s_wt_6_7_valid,
  output              s_wt_6_7_ready,
  input      [31:0]   s_wt_6_7_payload,
  input               s_wt_7_0_valid,
  output              s_wt_7_0_ready,
  input      [31:0]   s_wt_7_0_payload,
  input               s_wt_7_1_valid,
  output              s_wt_7_1_ready,
  input      [31:0]   s_wt_7_1_payload,
  input               s_wt_7_2_valid,
  output              s_wt_7_2_ready,
  input      [31:0]   s_wt_7_2_payload,
  input               s_wt_7_3_valid,
  output              s_wt_7_3_ready,
  input      [31:0]   s_wt_7_3_payload,
  input               s_wt_7_4_valid,
  output              s_wt_7_4_ready,
  input      [31:0]   s_wt_7_4_payload,
  input               s_wt_7_5_valid,
  output              s_wt_7_5_ready,
  input      [31:0]   s_wt_7_5_payload,
  input               s_wt_7_6_valid,
  output              s_wt_7_6_ready,
  input      [31:0]   s_wt_7_6_payload,
  input               s_wt_7_7_valid,
  output              s_wt_7_7_ready,
  input      [31:0]   s_wt_7_7_payload,
  output              s_out_0_0_valid,
  input               s_out_0_0_ready,
  output     [31:0]   s_out_0_0_payload,
  output              s_out_0_1_valid,
  input               s_out_0_1_ready,
  output     [31:0]   s_out_0_1_payload,
  output              s_out_0_2_valid,
  input               s_out_0_2_ready,
  output     [31:0]   s_out_0_2_payload,
  output              s_out_0_3_valid,
  input               s_out_0_3_ready,
  output     [31:0]   s_out_0_3_payload,
  output              s_out_0_4_valid,
  input               s_out_0_4_ready,
  output     [31:0]   s_out_0_4_payload,
  output              s_out_0_5_valid,
  input               s_out_0_5_ready,
  output     [31:0]   s_out_0_5_payload,
  output              s_out_0_6_valid,
  input               s_out_0_6_ready,
  output     [31:0]   s_out_0_6_payload,
  output              s_out_0_7_valid,
  input               s_out_0_7_ready,
  output     [31:0]   s_out_0_7_payload,
  output              s_out_1_0_valid,
  input               s_out_1_0_ready,
  output     [31:0]   s_out_1_0_payload,
  output              s_out_1_1_valid,
  input               s_out_1_1_ready,
  output     [31:0]   s_out_1_1_payload,
  output              s_out_1_2_valid,
  input               s_out_1_2_ready,
  output     [31:0]   s_out_1_2_payload,
  output              s_out_1_3_valid,
  input               s_out_1_3_ready,
  output     [31:0]   s_out_1_3_payload,
  output              s_out_1_4_valid,
  input               s_out_1_4_ready,
  output     [31:0]   s_out_1_4_payload,
  output              s_out_1_5_valid,
  input               s_out_1_5_ready,
  output     [31:0]   s_out_1_5_payload,
  output              s_out_1_6_valid,
  input               s_out_1_6_ready,
  output     [31:0]   s_out_1_6_payload,
  output              s_out_1_7_valid,
  input               s_out_1_7_ready,
  output     [31:0]   s_out_1_7_payload,
  output              s_out_2_0_valid,
  input               s_out_2_0_ready,
  output     [31:0]   s_out_2_0_payload,
  output              s_out_2_1_valid,
  input               s_out_2_1_ready,
  output     [31:0]   s_out_2_1_payload,
  output              s_out_2_2_valid,
  input               s_out_2_2_ready,
  output     [31:0]   s_out_2_2_payload,
  output              s_out_2_3_valid,
  input               s_out_2_3_ready,
  output     [31:0]   s_out_2_3_payload,
  output              s_out_2_4_valid,
  input               s_out_2_4_ready,
  output     [31:0]   s_out_2_4_payload,
  output              s_out_2_5_valid,
  input               s_out_2_5_ready,
  output     [31:0]   s_out_2_5_payload,
  output              s_out_2_6_valid,
  input               s_out_2_6_ready,
  output     [31:0]   s_out_2_6_payload,
  output              s_out_2_7_valid,
  input               s_out_2_7_ready,
  output     [31:0]   s_out_2_7_payload,
  output              s_out_3_0_valid,
  input               s_out_3_0_ready,
  output     [31:0]   s_out_3_0_payload,
  output              s_out_3_1_valid,
  input               s_out_3_1_ready,
  output     [31:0]   s_out_3_1_payload,
  output              s_out_3_2_valid,
  input               s_out_3_2_ready,
  output     [31:0]   s_out_3_2_payload,
  output              s_out_3_3_valid,
  input               s_out_3_3_ready,
  output     [31:0]   s_out_3_3_payload,
  output              s_out_3_4_valid,
  input               s_out_3_4_ready,
  output     [31:0]   s_out_3_4_payload,
  output              s_out_3_5_valid,
  input               s_out_3_5_ready,
  output     [31:0]   s_out_3_5_payload,
  output              s_out_3_6_valid,
  input               s_out_3_6_ready,
  output     [31:0]   s_out_3_6_payload,
  output              s_out_3_7_valid,
  input               s_out_3_7_ready,
  output     [31:0]   s_out_3_7_payload,
  output              s_out_4_0_valid,
  input               s_out_4_0_ready,
  output     [31:0]   s_out_4_0_payload,
  output              s_out_4_1_valid,
  input               s_out_4_1_ready,
  output     [31:0]   s_out_4_1_payload,
  output              s_out_4_2_valid,
  input               s_out_4_2_ready,
  output     [31:0]   s_out_4_2_payload,
  output              s_out_4_3_valid,
  input               s_out_4_3_ready,
  output     [31:0]   s_out_4_3_payload,
  output              s_out_4_4_valid,
  input               s_out_4_4_ready,
  output     [31:0]   s_out_4_4_payload,
  output              s_out_4_5_valid,
  input               s_out_4_5_ready,
  output     [31:0]   s_out_4_5_payload,
  output              s_out_4_6_valid,
  input               s_out_4_6_ready,
  output     [31:0]   s_out_4_6_payload,
  output              s_out_4_7_valid,
  input               s_out_4_7_ready,
  output     [31:0]   s_out_4_7_payload,
  output              s_out_5_0_valid,
  input               s_out_5_0_ready,
  output     [31:0]   s_out_5_0_payload,
  output              s_out_5_1_valid,
  input               s_out_5_1_ready,
  output     [31:0]   s_out_5_1_payload,
  output              s_out_5_2_valid,
  input               s_out_5_2_ready,
  output     [31:0]   s_out_5_2_payload,
  output              s_out_5_3_valid,
  input               s_out_5_3_ready,
  output     [31:0]   s_out_5_3_payload,
  output              s_out_5_4_valid,
  input               s_out_5_4_ready,
  output     [31:0]   s_out_5_4_payload,
  output              s_out_5_5_valid,
  input               s_out_5_5_ready,
  output     [31:0]   s_out_5_5_payload,
  output              s_out_5_6_valid,
  input               s_out_5_6_ready,
  output     [31:0]   s_out_5_6_payload,
  output              s_out_5_7_valid,
  input               s_out_5_7_ready,
  output     [31:0]   s_out_5_7_payload,
  output              s_out_6_0_valid,
  input               s_out_6_0_ready,
  output     [31:0]   s_out_6_0_payload,
  output              s_out_6_1_valid,
  input               s_out_6_1_ready,
  output     [31:0]   s_out_6_1_payload,
  output              s_out_6_2_valid,
  input               s_out_6_2_ready,
  output     [31:0]   s_out_6_2_payload,
  output              s_out_6_3_valid,
  input               s_out_6_3_ready,
  output     [31:0]   s_out_6_3_payload,
  output              s_out_6_4_valid,
  input               s_out_6_4_ready,
  output     [31:0]   s_out_6_4_payload,
  output              s_out_6_5_valid,
  input               s_out_6_5_ready,
  output     [31:0]   s_out_6_5_payload,
  output              s_out_6_6_valid,
  input               s_out_6_6_ready,
  output     [31:0]   s_out_6_6_payload,
  output              s_out_6_7_valid,
  input               s_out_6_7_ready,
  output     [31:0]   s_out_6_7_payload,
  output              s_out_7_0_valid,
  input               s_out_7_0_ready,
  output     [31:0]   s_out_7_0_payload,
  output              s_out_7_1_valid,
  input               s_out_7_1_ready,
  output     [31:0]   s_out_7_1_payload,
  output              s_out_7_2_valid,
  input               s_out_7_2_ready,
  output     [31:0]   s_out_7_2_payload,
  output              s_out_7_3_valid,
  input               s_out_7_3_ready,
  output     [31:0]   s_out_7_3_payload,
  output              s_out_7_4_valid,
  input               s_out_7_4_ready,
  output     [31:0]   s_out_7_4_payload,
  output              s_out_7_5_valid,
  input               s_out_7_5_ready,
  output     [31:0]   s_out_7_5_payload,
  output              s_out_7_6_valid,
  input               s_out_7_6_ready,
  output     [31:0]   s_out_7_6_payload,
  output              s_out_7_7_valid,
  input               s_out_7_7_ready,
  output     [31:0]   s_out_7_7_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                mac_acc_atom_0_ina_0_ready;
  wire                mac_acc_atom_0_ina_1_ready;
  wire                mac_acc_atom_0_ina_2_ready;
  wire                mac_acc_atom_0_ina_3_ready;
  wire                mac_acc_atom_0_ina_4_ready;
  wire                mac_acc_atom_0_ina_5_ready;
  wire                mac_acc_atom_0_ina_6_ready;
  wire                mac_acc_atom_0_ina_7_ready;
  wire                mac_acc_atom_0_inb_0_ready;
  wire                mac_acc_atom_0_inb_1_ready;
  wire                mac_acc_atom_0_inb_2_ready;
  wire                mac_acc_atom_0_inb_3_ready;
  wire                mac_acc_atom_0_inb_4_ready;
  wire                mac_acc_atom_0_inb_5_ready;
  wire                mac_acc_atom_0_inb_6_ready;
  wire                mac_acc_atom_0_inb_7_ready;
  wire                mac_acc_atom_0_out_0_valid;
  wire       [31:0]   mac_acc_atom_0_out_0_payload;
  wire                mac_acc_atom_0_out_1_valid;
  wire       [31:0]   mac_acc_atom_0_out_1_payload;
  wire                mac_acc_atom_0_out_2_valid;
  wire       [31:0]   mac_acc_atom_0_out_2_payload;
  wire                mac_acc_atom_0_out_3_valid;
  wire       [31:0]   mac_acc_atom_0_out_3_payload;
  wire                mac_acc_atom_0_out_4_valid;
  wire       [31:0]   mac_acc_atom_0_out_4_payload;
  wire                mac_acc_atom_0_out_5_valid;
  wire       [31:0]   mac_acc_atom_0_out_5_payload;
  wire                mac_acc_atom_0_out_6_valid;
  wire       [31:0]   mac_acc_atom_0_out_6_payload;
  wire                mac_acc_atom_0_out_7_valid;
  wire       [31:0]   mac_acc_atom_0_out_7_payload;
  wire                mac_acc_atom_1_1_ina_0_ready;
  wire                mac_acc_atom_1_1_ina_1_ready;
  wire                mac_acc_atom_1_1_ina_2_ready;
  wire                mac_acc_atom_1_1_ina_3_ready;
  wire                mac_acc_atom_1_1_ina_4_ready;
  wire                mac_acc_atom_1_1_ina_5_ready;
  wire                mac_acc_atom_1_1_ina_6_ready;
  wire                mac_acc_atom_1_1_ina_7_ready;
  wire                mac_acc_atom_1_1_inb_0_ready;
  wire                mac_acc_atom_1_1_inb_1_ready;
  wire                mac_acc_atom_1_1_inb_2_ready;
  wire                mac_acc_atom_1_1_inb_3_ready;
  wire                mac_acc_atom_1_1_inb_4_ready;
  wire                mac_acc_atom_1_1_inb_5_ready;
  wire                mac_acc_atom_1_1_inb_6_ready;
  wire                mac_acc_atom_1_1_inb_7_ready;
  wire                mac_acc_atom_1_1_out_0_valid;
  wire       [31:0]   mac_acc_atom_1_1_out_0_payload;
  wire                mac_acc_atom_1_1_out_1_valid;
  wire       [31:0]   mac_acc_atom_1_1_out_1_payload;
  wire                mac_acc_atom_1_1_out_2_valid;
  wire       [31:0]   mac_acc_atom_1_1_out_2_payload;
  wire                mac_acc_atom_1_1_out_3_valid;
  wire       [31:0]   mac_acc_atom_1_1_out_3_payload;
  wire                mac_acc_atom_1_1_out_4_valid;
  wire       [31:0]   mac_acc_atom_1_1_out_4_payload;
  wire                mac_acc_atom_1_1_out_5_valid;
  wire       [31:0]   mac_acc_atom_1_1_out_5_payload;
  wire                mac_acc_atom_1_1_out_6_valid;
  wire       [31:0]   mac_acc_atom_1_1_out_6_payload;
  wire                mac_acc_atom_1_1_out_7_valid;
  wire       [31:0]   mac_acc_atom_1_1_out_7_payload;
  wire                mac_acc_atom_2_1_ina_0_ready;
  wire                mac_acc_atom_2_1_ina_1_ready;
  wire                mac_acc_atom_2_1_ina_2_ready;
  wire                mac_acc_atom_2_1_ina_3_ready;
  wire                mac_acc_atom_2_1_ina_4_ready;
  wire                mac_acc_atom_2_1_ina_5_ready;
  wire                mac_acc_atom_2_1_ina_6_ready;
  wire                mac_acc_atom_2_1_ina_7_ready;
  wire                mac_acc_atom_2_1_inb_0_ready;
  wire                mac_acc_atom_2_1_inb_1_ready;
  wire                mac_acc_atom_2_1_inb_2_ready;
  wire                mac_acc_atom_2_1_inb_3_ready;
  wire                mac_acc_atom_2_1_inb_4_ready;
  wire                mac_acc_atom_2_1_inb_5_ready;
  wire                mac_acc_atom_2_1_inb_6_ready;
  wire                mac_acc_atom_2_1_inb_7_ready;
  wire                mac_acc_atom_2_1_out_0_valid;
  wire       [31:0]   mac_acc_atom_2_1_out_0_payload;
  wire                mac_acc_atom_2_1_out_1_valid;
  wire       [31:0]   mac_acc_atom_2_1_out_1_payload;
  wire                mac_acc_atom_2_1_out_2_valid;
  wire       [31:0]   mac_acc_atom_2_1_out_2_payload;
  wire                mac_acc_atom_2_1_out_3_valid;
  wire       [31:0]   mac_acc_atom_2_1_out_3_payload;
  wire                mac_acc_atom_2_1_out_4_valid;
  wire       [31:0]   mac_acc_atom_2_1_out_4_payload;
  wire                mac_acc_atom_2_1_out_5_valid;
  wire       [31:0]   mac_acc_atom_2_1_out_5_payload;
  wire                mac_acc_atom_2_1_out_6_valid;
  wire       [31:0]   mac_acc_atom_2_1_out_6_payload;
  wire                mac_acc_atom_2_1_out_7_valid;
  wire       [31:0]   mac_acc_atom_2_1_out_7_payload;
  wire                mac_acc_atom_3_1_ina_0_ready;
  wire                mac_acc_atom_3_1_ina_1_ready;
  wire                mac_acc_atom_3_1_ina_2_ready;
  wire                mac_acc_atom_3_1_ina_3_ready;
  wire                mac_acc_atom_3_1_ina_4_ready;
  wire                mac_acc_atom_3_1_ina_5_ready;
  wire                mac_acc_atom_3_1_ina_6_ready;
  wire                mac_acc_atom_3_1_ina_7_ready;
  wire                mac_acc_atom_3_1_inb_0_ready;
  wire                mac_acc_atom_3_1_inb_1_ready;
  wire                mac_acc_atom_3_1_inb_2_ready;
  wire                mac_acc_atom_3_1_inb_3_ready;
  wire                mac_acc_atom_3_1_inb_4_ready;
  wire                mac_acc_atom_3_1_inb_5_ready;
  wire                mac_acc_atom_3_1_inb_6_ready;
  wire                mac_acc_atom_3_1_inb_7_ready;
  wire                mac_acc_atom_3_1_out_0_valid;
  wire       [31:0]   mac_acc_atom_3_1_out_0_payload;
  wire                mac_acc_atom_3_1_out_1_valid;
  wire       [31:0]   mac_acc_atom_3_1_out_1_payload;
  wire                mac_acc_atom_3_1_out_2_valid;
  wire       [31:0]   mac_acc_atom_3_1_out_2_payload;
  wire                mac_acc_atom_3_1_out_3_valid;
  wire       [31:0]   mac_acc_atom_3_1_out_3_payload;
  wire                mac_acc_atom_3_1_out_4_valid;
  wire       [31:0]   mac_acc_atom_3_1_out_4_payload;
  wire                mac_acc_atom_3_1_out_5_valid;
  wire       [31:0]   mac_acc_atom_3_1_out_5_payload;
  wire                mac_acc_atom_3_1_out_6_valid;
  wire       [31:0]   mac_acc_atom_3_1_out_6_payload;
  wire                mac_acc_atom_3_1_out_7_valid;
  wire       [31:0]   mac_acc_atom_3_1_out_7_payload;
  wire                mac_acc_atom_4_1_ina_0_ready;
  wire                mac_acc_atom_4_1_ina_1_ready;
  wire                mac_acc_atom_4_1_ina_2_ready;
  wire                mac_acc_atom_4_1_ina_3_ready;
  wire                mac_acc_atom_4_1_ina_4_ready;
  wire                mac_acc_atom_4_1_ina_5_ready;
  wire                mac_acc_atom_4_1_ina_6_ready;
  wire                mac_acc_atom_4_1_ina_7_ready;
  wire                mac_acc_atom_4_1_inb_0_ready;
  wire                mac_acc_atom_4_1_inb_1_ready;
  wire                mac_acc_atom_4_1_inb_2_ready;
  wire                mac_acc_atom_4_1_inb_3_ready;
  wire                mac_acc_atom_4_1_inb_4_ready;
  wire                mac_acc_atom_4_1_inb_5_ready;
  wire                mac_acc_atom_4_1_inb_6_ready;
  wire                mac_acc_atom_4_1_inb_7_ready;
  wire                mac_acc_atom_4_1_out_0_valid;
  wire       [31:0]   mac_acc_atom_4_1_out_0_payload;
  wire                mac_acc_atom_4_1_out_1_valid;
  wire       [31:0]   mac_acc_atom_4_1_out_1_payload;
  wire                mac_acc_atom_4_1_out_2_valid;
  wire       [31:0]   mac_acc_atom_4_1_out_2_payload;
  wire                mac_acc_atom_4_1_out_3_valid;
  wire       [31:0]   mac_acc_atom_4_1_out_3_payload;
  wire                mac_acc_atom_4_1_out_4_valid;
  wire       [31:0]   mac_acc_atom_4_1_out_4_payload;
  wire                mac_acc_atom_4_1_out_5_valid;
  wire       [31:0]   mac_acc_atom_4_1_out_5_payload;
  wire                mac_acc_atom_4_1_out_6_valid;
  wire       [31:0]   mac_acc_atom_4_1_out_6_payload;
  wire                mac_acc_atom_4_1_out_7_valid;
  wire       [31:0]   mac_acc_atom_4_1_out_7_payload;
  wire                mac_acc_atom_5_1_ina_0_ready;
  wire                mac_acc_atom_5_1_ina_1_ready;
  wire                mac_acc_atom_5_1_ina_2_ready;
  wire                mac_acc_atom_5_1_ina_3_ready;
  wire                mac_acc_atom_5_1_ina_4_ready;
  wire                mac_acc_atom_5_1_ina_5_ready;
  wire                mac_acc_atom_5_1_ina_6_ready;
  wire                mac_acc_atom_5_1_ina_7_ready;
  wire                mac_acc_atom_5_1_inb_0_ready;
  wire                mac_acc_atom_5_1_inb_1_ready;
  wire                mac_acc_atom_5_1_inb_2_ready;
  wire                mac_acc_atom_5_1_inb_3_ready;
  wire                mac_acc_atom_5_1_inb_4_ready;
  wire                mac_acc_atom_5_1_inb_5_ready;
  wire                mac_acc_atom_5_1_inb_6_ready;
  wire                mac_acc_atom_5_1_inb_7_ready;
  wire                mac_acc_atom_5_1_out_0_valid;
  wire       [31:0]   mac_acc_atom_5_1_out_0_payload;
  wire                mac_acc_atom_5_1_out_1_valid;
  wire       [31:0]   mac_acc_atom_5_1_out_1_payload;
  wire                mac_acc_atom_5_1_out_2_valid;
  wire       [31:0]   mac_acc_atom_5_1_out_2_payload;
  wire                mac_acc_atom_5_1_out_3_valid;
  wire       [31:0]   mac_acc_atom_5_1_out_3_payload;
  wire                mac_acc_atom_5_1_out_4_valid;
  wire       [31:0]   mac_acc_atom_5_1_out_4_payload;
  wire                mac_acc_atom_5_1_out_5_valid;
  wire       [31:0]   mac_acc_atom_5_1_out_5_payload;
  wire                mac_acc_atom_5_1_out_6_valid;
  wire       [31:0]   mac_acc_atom_5_1_out_6_payload;
  wire                mac_acc_atom_5_1_out_7_valid;
  wire       [31:0]   mac_acc_atom_5_1_out_7_payload;
  wire                mac_acc_atom_6_1_ina_0_ready;
  wire                mac_acc_atom_6_1_ina_1_ready;
  wire                mac_acc_atom_6_1_ina_2_ready;
  wire                mac_acc_atom_6_1_ina_3_ready;
  wire                mac_acc_atom_6_1_ina_4_ready;
  wire                mac_acc_atom_6_1_ina_5_ready;
  wire                mac_acc_atom_6_1_ina_6_ready;
  wire                mac_acc_atom_6_1_ina_7_ready;
  wire                mac_acc_atom_6_1_inb_0_ready;
  wire                mac_acc_atom_6_1_inb_1_ready;
  wire                mac_acc_atom_6_1_inb_2_ready;
  wire                mac_acc_atom_6_1_inb_3_ready;
  wire                mac_acc_atom_6_1_inb_4_ready;
  wire                mac_acc_atom_6_1_inb_5_ready;
  wire                mac_acc_atom_6_1_inb_6_ready;
  wire                mac_acc_atom_6_1_inb_7_ready;
  wire                mac_acc_atom_6_1_out_0_valid;
  wire       [31:0]   mac_acc_atom_6_1_out_0_payload;
  wire                mac_acc_atom_6_1_out_1_valid;
  wire       [31:0]   mac_acc_atom_6_1_out_1_payload;
  wire                mac_acc_atom_6_1_out_2_valid;
  wire       [31:0]   mac_acc_atom_6_1_out_2_payload;
  wire                mac_acc_atom_6_1_out_3_valid;
  wire       [31:0]   mac_acc_atom_6_1_out_3_payload;
  wire                mac_acc_atom_6_1_out_4_valid;
  wire       [31:0]   mac_acc_atom_6_1_out_4_payload;
  wire                mac_acc_atom_6_1_out_5_valid;
  wire       [31:0]   mac_acc_atom_6_1_out_5_payload;
  wire                mac_acc_atom_6_1_out_6_valid;
  wire       [31:0]   mac_acc_atom_6_1_out_6_payload;
  wire                mac_acc_atom_6_1_out_7_valid;
  wire       [31:0]   mac_acc_atom_6_1_out_7_payload;
  wire                mac_acc_atom_7_1_ina_0_ready;
  wire                mac_acc_atom_7_1_ina_1_ready;
  wire                mac_acc_atom_7_1_ina_2_ready;
  wire                mac_acc_atom_7_1_ina_3_ready;
  wire                mac_acc_atom_7_1_ina_4_ready;
  wire                mac_acc_atom_7_1_ina_5_ready;
  wire                mac_acc_atom_7_1_ina_6_ready;
  wire                mac_acc_atom_7_1_ina_7_ready;
  wire                mac_acc_atom_7_1_inb_0_ready;
  wire                mac_acc_atom_7_1_inb_1_ready;
  wire                mac_acc_atom_7_1_inb_2_ready;
  wire                mac_acc_atom_7_1_inb_3_ready;
  wire                mac_acc_atom_7_1_inb_4_ready;
  wire                mac_acc_atom_7_1_inb_5_ready;
  wire                mac_acc_atom_7_1_inb_6_ready;
  wire                mac_acc_atom_7_1_inb_7_ready;
  wire                mac_acc_atom_7_1_out_0_valid;
  wire       [31:0]   mac_acc_atom_7_1_out_0_payload;
  wire                mac_acc_atom_7_1_out_1_valid;
  wire       [31:0]   mac_acc_atom_7_1_out_1_payload;
  wire                mac_acc_atom_7_1_out_2_valid;
  wire       [31:0]   mac_acc_atom_7_1_out_2_payload;
  wire                mac_acc_atom_7_1_out_3_valid;
  wire       [31:0]   mac_acc_atom_7_1_out_3_payload;
  wire                mac_acc_atom_7_1_out_4_valid;
  wire       [31:0]   mac_acc_atom_7_1_out_4_payload;
  wire                mac_acc_atom_7_1_out_5_valid;
  wire       [31:0]   mac_acc_atom_7_1_out_5_payload;
  wire                mac_acc_atom_7_1_out_6_valid;
  wire       [31:0]   mac_acc_atom_7_1_out_6_payload;
  wire                mac_acc_atom_7_1_out_7_valid;
  wire       [31:0]   mac_acc_atom_7_1_out_7_payload;

  mac_acc_atom mac_acc_atom_0 (
    .ina_0_valid      (s_ft_0_valid                  ), //i
    .ina_0_ready      (mac_acc_atom_0_ina_0_ready    ), //o
    .ina_0_payload    (s_ft_0_payload                ), //i
    .ina_1_valid      (s_ft_1_valid                  ), //i
    .ina_1_ready      (mac_acc_atom_0_ina_1_ready    ), //o
    .ina_1_payload    (s_ft_1_payload                ), //i
    .ina_2_valid      (s_ft_2_valid                  ), //i
    .ina_2_ready      (mac_acc_atom_0_ina_2_ready    ), //o
    .ina_2_payload    (s_ft_2_payload                ), //i
    .ina_3_valid      (s_ft_3_valid                  ), //i
    .ina_3_ready      (mac_acc_atom_0_ina_3_ready    ), //o
    .ina_3_payload    (s_ft_3_payload                ), //i
    .ina_4_valid      (s_ft_4_valid                  ), //i
    .ina_4_ready      (mac_acc_atom_0_ina_4_ready    ), //o
    .ina_4_payload    (s_ft_4_payload                ), //i
    .ina_5_valid      (s_ft_5_valid                  ), //i
    .ina_5_ready      (mac_acc_atom_0_ina_5_ready    ), //o
    .ina_5_payload    (s_ft_5_payload                ), //i
    .ina_6_valid      (s_ft_6_valid                  ), //i
    .ina_6_ready      (mac_acc_atom_0_ina_6_ready    ), //o
    .ina_6_payload    (s_ft_6_payload                ), //i
    .ina_7_valid      (s_ft_7_valid                  ), //i
    .ina_7_ready      (mac_acc_atom_0_ina_7_ready    ), //o
    .ina_7_payload    (s_ft_7_payload                ), //i
    .inb_0_valid      (s_wt_0_0_valid                ), //i
    .inb_0_ready      (mac_acc_atom_0_inb_0_ready    ), //o
    .inb_0_payload    (s_wt_0_0_payload              ), //i
    .inb_1_valid      (s_wt_0_1_valid                ), //i
    .inb_1_ready      (mac_acc_atom_0_inb_1_ready    ), //o
    .inb_1_payload    (s_wt_0_1_payload              ), //i
    .inb_2_valid      (s_wt_0_2_valid                ), //i
    .inb_2_ready      (mac_acc_atom_0_inb_2_ready    ), //o
    .inb_2_payload    (s_wt_0_2_payload              ), //i
    .inb_3_valid      (s_wt_0_3_valid                ), //i
    .inb_3_ready      (mac_acc_atom_0_inb_3_ready    ), //o
    .inb_3_payload    (s_wt_0_3_payload              ), //i
    .inb_4_valid      (s_wt_0_4_valid                ), //i
    .inb_4_ready      (mac_acc_atom_0_inb_4_ready    ), //o
    .inb_4_payload    (s_wt_0_4_payload              ), //i
    .inb_5_valid      (s_wt_0_5_valid                ), //i
    .inb_5_ready      (mac_acc_atom_0_inb_5_ready    ), //o
    .inb_5_payload    (s_wt_0_5_payload              ), //i
    .inb_6_valid      (s_wt_0_6_valid                ), //i
    .inb_6_ready      (mac_acc_atom_0_inb_6_ready    ), //o
    .inb_6_payload    (s_wt_0_6_payload              ), //i
    .inb_7_valid      (s_wt_0_7_valid                ), //i
    .inb_7_ready      (mac_acc_atom_0_inb_7_ready    ), //o
    .inb_7_payload    (s_wt_0_7_payload              ), //i
    .out_0_valid      (mac_acc_atom_0_out_0_valid    ), //o
    .out_0_ready      (s_out_0_0_ready               ), //i
    .out_0_payload    (mac_acc_atom_0_out_0_payload  ), //o
    .out_1_valid      (mac_acc_atom_0_out_1_valid    ), //o
    .out_1_ready      (s_out_0_1_ready               ), //i
    .out_1_payload    (mac_acc_atom_0_out_1_payload  ), //o
    .out_2_valid      (mac_acc_atom_0_out_2_valid    ), //o
    .out_2_ready      (s_out_0_2_ready               ), //i
    .out_2_payload    (mac_acc_atom_0_out_2_payload  ), //o
    .out_3_valid      (mac_acc_atom_0_out_3_valid    ), //o
    .out_3_ready      (s_out_0_3_ready               ), //i
    .out_3_payload    (mac_acc_atom_0_out_3_payload  ), //o
    .out_4_valid      (mac_acc_atom_0_out_4_valid    ), //o
    .out_4_ready      (s_out_0_4_ready               ), //i
    .out_4_payload    (mac_acc_atom_0_out_4_payload  ), //o
    .out_5_valid      (mac_acc_atom_0_out_5_valid    ), //o
    .out_5_ready      (s_out_0_5_ready               ), //i
    .out_5_payload    (mac_acc_atom_0_out_5_payload  ), //o
    .out_6_valid      (mac_acc_atom_0_out_6_valid    ), //o
    .out_6_ready      (s_out_0_6_ready               ), //i
    .out_6_payload    (mac_acc_atom_0_out_6_payload  ), //o
    .out_7_valid      (mac_acc_atom_0_out_7_valid    ), //o
    .out_7_ready      (s_out_0_7_ready               ), //i
    .out_7_payload    (mac_acc_atom_0_out_7_payload  ), //o
    .par_acc_cnt      (par_acc_cnt                   ), //i
    .acc_enable       (acc_enable                    ), //i
    .clk              (clk                           ), //i
    .reset            (reset                         )  //i
  );
  mac_acc_atom_1 mac_acc_atom_1_1 (
    .ina_0_valid      (s_ft_0_valid                    ), //i
    .ina_0_ready      (mac_acc_atom_1_1_ina_0_ready    ), //o
    .ina_0_payload    (s_ft_0_payload                  ), //i
    .ina_1_valid      (s_ft_1_valid                    ), //i
    .ina_1_ready      (mac_acc_atom_1_1_ina_1_ready    ), //o
    .ina_1_payload    (s_ft_1_payload                  ), //i
    .ina_2_valid      (s_ft_2_valid                    ), //i
    .ina_2_ready      (mac_acc_atom_1_1_ina_2_ready    ), //o
    .ina_2_payload    (s_ft_2_payload                  ), //i
    .ina_3_valid      (s_ft_3_valid                    ), //i
    .ina_3_ready      (mac_acc_atom_1_1_ina_3_ready    ), //o
    .ina_3_payload    (s_ft_3_payload                  ), //i
    .ina_4_valid      (s_ft_4_valid                    ), //i
    .ina_4_ready      (mac_acc_atom_1_1_ina_4_ready    ), //o
    .ina_4_payload    (s_ft_4_payload                  ), //i
    .ina_5_valid      (s_ft_5_valid                    ), //i
    .ina_5_ready      (mac_acc_atom_1_1_ina_5_ready    ), //o
    .ina_5_payload    (s_ft_5_payload                  ), //i
    .ina_6_valid      (s_ft_6_valid                    ), //i
    .ina_6_ready      (mac_acc_atom_1_1_ina_6_ready    ), //o
    .ina_6_payload    (s_ft_6_payload                  ), //i
    .ina_7_valid      (s_ft_7_valid                    ), //i
    .ina_7_ready      (mac_acc_atom_1_1_ina_7_ready    ), //o
    .ina_7_payload    (s_ft_7_payload                  ), //i
    .inb_0_valid      (s_wt_1_0_valid                  ), //i
    .inb_0_ready      (mac_acc_atom_1_1_inb_0_ready    ), //o
    .inb_0_payload    (s_wt_1_0_payload                ), //i
    .inb_1_valid      (s_wt_1_1_valid                  ), //i
    .inb_1_ready      (mac_acc_atom_1_1_inb_1_ready    ), //o
    .inb_1_payload    (s_wt_1_1_payload                ), //i
    .inb_2_valid      (s_wt_1_2_valid                  ), //i
    .inb_2_ready      (mac_acc_atom_1_1_inb_2_ready    ), //o
    .inb_2_payload    (s_wt_1_2_payload                ), //i
    .inb_3_valid      (s_wt_1_3_valid                  ), //i
    .inb_3_ready      (mac_acc_atom_1_1_inb_3_ready    ), //o
    .inb_3_payload    (s_wt_1_3_payload                ), //i
    .inb_4_valid      (s_wt_1_4_valid                  ), //i
    .inb_4_ready      (mac_acc_atom_1_1_inb_4_ready    ), //o
    .inb_4_payload    (s_wt_1_4_payload                ), //i
    .inb_5_valid      (s_wt_1_5_valid                  ), //i
    .inb_5_ready      (mac_acc_atom_1_1_inb_5_ready    ), //o
    .inb_5_payload    (s_wt_1_5_payload                ), //i
    .inb_6_valid      (s_wt_1_6_valid                  ), //i
    .inb_6_ready      (mac_acc_atom_1_1_inb_6_ready    ), //o
    .inb_6_payload    (s_wt_1_6_payload                ), //i
    .inb_7_valid      (s_wt_1_7_valid                  ), //i
    .inb_7_ready      (mac_acc_atom_1_1_inb_7_ready    ), //o
    .inb_7_payload    (s_wt_1_7_payload                ), //i
    .out_0_valid      (mac_acc_atom_1_1_out_0_valid    ), //o
    .out_0_ready      (s_out_1_0_ready                 ), //i
    .out_0_payload    (mac_acc_atom_1_1_out_0_payload  ), //o
    .out_1_valid      (mac_acc_atom_1_1_out_1_valid    ), //o
    .out_1_ready      (s_out_1_1_ready                 ), //i
    .out_1_payload    (mac_acc_atom_1_1_out_1_payload  ), //o
    .out_2_valid      (mac_acc_atom_1_1_out_2_valid    ), //o
    .out_2_ready      (s_out_1_2_ready                 ), //i
    .out_2_payload    (mac_acc_atom_1_1_out_2_payload  ), //o
    .out_3_valid      (mac_acc_atom_1_1_out_3_valid    ), //o
    .out_3_ready      (s_out_1_3_ready                 ), //i
    .out_3_payload    (mac_acc_atom_1_1_out_3_payload  ), //o
    .out_4_valid      (mac_acc_atom_1_1_out_4_valid    ), //o
    .out_4_ready      (s_out_1_4_ready                 ), //i
    .out_4_payload    (mac_acc_atom_1_1_out_4_payload  ), //o
    .out_5_valid      (mac_acc_atom_1_1_out_5_valid    ), //o
    .out_5_ready      (s_out_1_5_ready                 ), //i
    .out_5_payload    (mac_acc_atom_1_1_out_5_payload  ), //o
    .out_6_valid      (mac_acc_atom_1_1_out_6_valid    ), //o
    .out_6_ready      (s_out_1_6_ready                 ), //i
    .out_6_payload    (mac_acc_atom_1_1_out_6_payload  ), //o
    .out_7_valid      (mac_acc_atom_1_1_out_7_valid    ), //o
    .out_7_ready      (s_out_1_7_ready                 ), //i
    .out_7_payload    (mac_acc_atom_1_1_out_7_payload  ), //o
    .par_acc_cnt      (par_acc_cnt                     ), //i
    .acc_enable       (acc_enable                      ), //i
    .clk              (clk                             ), //i
    .reset            (reset                           )  //i
  );
  mac_acc_atom_2 mac_acc_atom_2_1 (
    .ina_0_valid      (s_ft_0_valid                    ), //i
    .ina_0_ready      (mac_acc_atom_2_1_ina_0_ready    ), //o
    .ina_0_payload    (s_ft_0_payload                  ), //i
    .ina_1_valid      (s_ft_1_valid                    ), //i
    .ina_1_ready      (mac_acc_atom_2_1_ina_1_ready    ), //o
    .ina_1_payload    (s_ft_1_payload                  ), //i
    .ina_2_valid      (s_ft_2_valid                    ), //i
    .ina_2_ready      (mac_acc_atom_2_1_ina_2_ready    ), //o
    .ina_2_payload    (s_ft_2_payload                  ), //i
    .ina_3_valid      (s_ft_3_valid                    ), //i
    .ina_3_ready      (mac_acc_atom_2_1_ina_3_ready    ), //o
    .ina_3_payload    (s_ft_3_payload                  ), //i
    .ina_4_valid      (s_ft_4_valid                    ), //i
    .ina_4_ready      (mac_acc_atom_2_1_ina_4_ready    ), //o
    .ina_4_payload    (s_ft_4_payload                  ), //i
    .ina_5_valid      (s_ft_5_valid                    ), //i
    .ina_5_ready      (mac_acc_atom_2_1_ina_5_ready    ), //o
    .ina_5_payload    (s_ft_5_payload                  ), //i
    .ina_6_valid      (s_ft_6_valid                    ), //i
    .ina_6_ready      (mac_acc_atom_2_1_ina_6_ready    ), //o
    .ina_6_payload    (s_ft_6_payload                  ), //i
    .ina_7_valid      (s_ft_7_valid                    ), //i
    .ina_7_ready      (mac_acc_atom_2_1_ina_7_ready    ), //o
    .ina_7_payload    (s_ft_7_payload                  ), //i
    .inb_0_valid      (s_wt_2_0_valid                  ), //i
    .inb_0_ready      (mac_acc_atom_2_1_inb_0_ready    ), //o
    .inb_0_payload    (s_wt_2_0_payload                ), //i
    .inb_1_valid      (s_wt_2_1_valid                  ), //i
    .inb_1_ready      (mac_acc_atom_2_1_inb_1_ready    ), //o
    .inb_1_payload    (s_wt_2_1_payload                ), //i
    .inb_2_valid      (s_wt_2_2_valid                  ), //i
    .inb_2_ready      (mac_acc_atom_2_1_inb_2_ready    ), //o
    .inb_2_payload    (s_wt_2_2_payload                ), //i
    .inb_3_valid      (s_wt_2_3_valid                  ), //i
    .inb_3_ready      (mac_acc_atom_2_1_inb_3_ready    ), //o
    .inb_3_payload    (s_wt_2_3_payload                ), //i
    .inb_4_valid      (s_wt_2_4_valid                  ), //i
    .inb_4_ready      (mac_acc_atom_2_1_inb_4_ready    ), //o
    .inb_4_payload    (s_wt_2_4_payload                ), //i
    .inb_5_valid      (s_wt_2_5_valid                  ), //i
    .inb_5_ready      (mac_acc_atom_2_1_inb_5_ready    ), //o
    .inb_5_payload    (s_wt_2_5_payload                ), //i
    .inb_6_valid      (s_wt_2_6_valid                  ), //i
    .inb_6_ready      (mac_acc_atom_2_1_inb_6_ready    ), //o
    .inb_6_payload    (s_wt_2_6_payload                ), //i
    .inb_7_valid      (s_wt_2_7_valid                  ), //i
    .inb_7_ready      (mac_acc_atom_2_1_inb_7_ready    ), //o
    .inb_7_payload    (s_wt_2_7_payload                ), //i
    .out_0_valid      (mac_acc_atom_2_1_out_0_valid    ), //o
    .out_0_ready      (s_out_2_0_ready                 ), //i
    .out_0_payload    (mac_acc_atom_2_1_out_0_payload  ), //o
    .out_1_valid      (mac_acc_atom_2_1_out_1_valid    ), //o
    .out_1_ready      (s_out_2_1_ready                 ), //i
    .out_1_payload    (mac_acc_atom_2_1_out_1_payload  ), //o
    .out_2_valid      (mac_acc_atom_2_1_out_2_valid    ), //o
    .out_2_ready      (s_out_2_2_ready                 ), //i
    .out_2_payload    (mac_acc_atom_2_1_out_2_payload  ), //o
    .out_3_valid      (mac_acc_atom_2_1_out_3_valid    ), //o
    .out_3_ready      (s_out_2_3_ready                 ), //i
    .out_3_payload    (mac_acc_atom_2_1_out_3_payload  ), //o
    .out_4_valid      (mac_acc_atom_2_1_out_4_valid    ), //o
    .out_4_ready      (s_out_2_4_ready                 ), //i
    .out_4_payload    (mac_acc_atom_2_1_out_4_payload  ), //o
    .out_5_valid      (mac_acc_atom_2_1_out_5_valid    ), //o
    .out_5_ready      (s_out_2_5_ready                 ), //i
    .out_5_payload    (mac_acc_atom_2_1_out_5_payload  ), //o
    .out_6_valid      (mac_acc_atom_2_1_out_6_valid    ), //o
    .out_6_ready      (s_out_2_6_ready                 ), //i
    .out_6_payload    (mac_acc_atom_2_1_out_6_payload  ), //o
    .out_7_valid      (mac_acc_atom_2_1_out_7_valid    ), //o
    .out_7_ready      (s_out_2_7_ready                 ), //i
    .out_7_payload    (mac_acc_atom_2_1_out_7_payload  ), //o
    .par_acc_cnt      (par_acc_cnt                     ), //i
    .acc_enable       (acc_enable                      ), //i
    .clk              (clk                             ), //i
    .reset            (reset                           )  //i
  );
  mac_acc_atom_3 mac_acc_atom_3_1 (
    .ina_0_valid      (s_ft_0_valid                    ), //i
    .ina_0_ready      (mac_acc_atom_3_1_ina_0_ready    ), //o
    .ina_0_payload    (s_ft_0_payload                  ), //i
    .ina_1_valid      (s_ft_1_valid                    ), //i
    .ina_1_ready      (mac_acc_atom_3_1_ina_1_ready    ), //o
    .ina_1_payload    (s_ft_1_payload                  ), //i
    .ina_2_valid      (s_ft_2_valid                    ), //i
    .ina_2_ready      (mac_acc_atom_3_1_ina_2_ready    ), //o
    .ina_2_payload    (s_ft_2_payload                  ), //i
    .ina_3_valid      (s_ft_3_valid                    ), //i
    .ina_3_ready      (mac_acc_atom_3_1_ina_3_ready    ), //o
    .ina_3_payload    (s_ft_3_payload                  ), //i
    .ina_4_valid      (s_ft_4_valid                    ), //i
    .ina_4_ready      (mac_acc_atom_3_1_ina_4_ready    ), //o
    .ina_4_payload    (s_ft_4_payload                  ), //i
    .ina_5_valid      (s_ft_5_valid                    ), //i
    .ina_5_ready      (mac_acc_atom_3_1_ina_5_ready    ), //o
    .ina_5_payload    (s_ft_5_payload                  ), //i
    .ina_6_valid      (s_ft_6_valid                    ), //i
    .ina_6_ready      (mac_acc_atom_3_1_ina_6_ready    ), //o
    .ina_6_payload    (s_ft_6_payload                  ), //i
    .ina_7_valid      (s_ft_7_valid                    ), //i
    .ina_7_ready      (mac_acc_atom_3_1_ina_7_ready    ), //o
    .ina_7_payload    (s_ft_7_payload                  ), //i
    .inb_0_valid      (s_wt_3_0_valid                  ), //i
    .inb_0_ready      (mac_acc_atom_3_1_inb_0_ready    ), //o
    .inb_0_payload    (s_wt_3_0_payload                ), //i
    .inb_1_valid      (s_wt_3_1_valid                  ), //i
    .inb_1_ready      (mac_acc_atom_3_1_inb_1_ready    ), //o
    .inb_1_payload    (s_wt_3_1_payload                ), //i
    .inb_2_valid      (s_wt_3_2_valid                  ), //i
    .inb_2_ready      (mac_acc_atom_3_1_inb_2_ready    ), //o
    .inb_2_payload    (s_wt_3_2_payload                ), //i
    .inb_3_valid      (s_wt_3_3_valid                  ), //i
    .inb_3_ready      (mac_acc_atom_3_1_inb_3_ready    ), //o
    .inb_3_payload    (s_wt_3_3_payload                ), //i
    .inb_4_valid      (s_wt_3_4_valid                  ), //i
    .inb_4_ready      (mac_acc_atom_3_1_inb_4_ready    ), //o
    .inb_4_payload    (s_wt_3_4_payload                ), //i
    .inb_5_valid      (s_wt_3_5_valid                  ), //i
    .inb_5_ready      (mac_acc_atom_3_1_inb_5_ready    ), //o
    .inb_5_payload    (s_wt_3_5_payload                ), //i
    .inb_6_valid      (s_wt_3_6_valid                  ), //i
    .inb_6_ready      (mac_acc_atom_3_1_inb_6_ready    ), //o
    .inb_6_payload    (s_wt_3_6_payload                ), //i
    .inb_7_valid      (s_wt_3_7_valid                  ), //i
    .inb_7_ready      (mac_acc_atom_3_1_inb_7_ready    ), //o
    .inb_7_payload    (s_wt_3_7_payload                ), //i
    .out_0_valid      (mac_acc_atom_3_1_out_0_valid    ), //o
    .out_0_ready      (s_out_3_0_ready                 ), //i
    .out_0_payload    (mac_acc_atom_3_1_out_0_payload  ), //o
    .out_1_valid      (mac_acc_atom_3_1_out_1_valid    ), //o
    .out_1_ready      (s_out_3_1_ready                 ), //i
    .out_1_payload    (mac_acc_atom_3_1_out_1_payload  ), //o
    .out_2_valid      (mac_acc_atom_3_1_out_2_valid    ), //o
    .out_2_ready      (s_out_3_2_ready                 ), //i
    .out_2_payload    (mac_acc_atom_3_1_out_2_payload  ), //o
    .out_3_valid      (mac_acc_atom_3_1_out_3_valid    ), //o
    .out_3_ready      (s_out_3_3_ready                 ), //i
    .out_3_payload    (mac_acc_atom_3_1_out_3_payload  ), //o
    .out_4_valid      (mac_acc_atom_3_1_out_4_valid    ), //o
    .out_4_ready      (s_out_3_4_ready                 ), //i
    .out_4_payload    (mac_acc_atom_3_1_out_4_payload  ), //o
    .out_5_valid      (mac_acc_atom_3_1_out_5_valid    ), //o
    .out_5_ready      (s_out_3_5_ready                 ), //i
    .out_5_payload    (mac_acc_atom_3_1_out_5_payload  ), //o
    .out_6_valid      (mac_acc_atom_3_1_out_6_valid    ), //o
    .out_6_ready      (s_out_3_6_ready                 ), //i
    .out_6_payload    (mac_acc_atom_3_1_out_6_payload  ), //o
    .out_7_valid      (mac_acc_atom_3_1_out_7_valid    ), //o
    .out_7_ready      (s_out_3_7_ready                 ), //i
    .out_7_payload    (mac_acc_atom_3_1_out_7_payload  ), //o
    .par_acc_cnt      (par_acc_cnt                     ), //i
    .acc_enable       (acc_enable                      ), //i
    .clk              (clk                             ), //i
    .reset            (reset                           )  //i
  );
  mac_acc_atom_4 mac_acc_atom_4_1 (
    .ina_0_valid      (s_ft_0_valid                    ), //i
    .ina_0_ready      (mac_acc_atom_4_1_ina_0_ready    ), //o
    .ina_0_payload    (s_ft_0_payload                  ), //i
    .ina_1_valid      (s_ft_1_valid                    ), //i
    .ina_1_ready      (mac_acc_atom_4_1_ina_1_ready    ), //o
    .ina_1_payload    (s_ft_1_payload                  ), //i
    .ina_2_valid      (s_ft_2_valid                    ), //i
    .ina_2_ready      (mac_acc_atom_4_1_ina_2_ready    ), //o
    .ina_2_payload    (s_ft_2_payload                  ), //i
    .ina_3_valid      (s_ft_3_valid                    ), //i
    .ina_3_ready      (mac_acc_atom_4_1_ina_3_ready    ), //o
    .ina_3_payload    (s_ft_3_payload                  ), //i
    .ina_4_valid      (s_ft_4_valid                    ), //i
    .ina_4_ready      (mac_acc_atom_4_1_ina_4_ready    ), //o
    .ina_4_payload    (s_ft_4_payload                  ), //i
    .ina_5_valid      (s_ft_5_valid                    ), //i
    .ina_5_ready      (mac_acc_atom_4_1_ina_5_ready    ), //o
    .ina_5_payload    (s_ft_5_payload                  ), //i
    .ina_6_valid      (s_ft_6_valid                    ), //i
    .ina_6_ready      (mac_acc_atom_4_1_ina_6_ready    ), //o
    .ina_6_payload    (s_ft_6_payload                  ), //i
    .ina_7_valid      (s_ft_7_valid                    ), //i
    .ina_7_ready      (mac_acc_atom_4_1_ina_7_ready    ), //o
    .ina_7_payload    (s_ft_7_payload                  ), //i
    .inb_0_valid      (s_wt_4_0_valid                  ), //i
    .inb_0_ready      (mac_acc_atom_4_1_inb_0_ready    ), //o
    .inb_0_payload    (s_wt_4_0_payload                ), //i
    .inb_1_valid      (s_wt_4_1_valid                  ), //i
    .inb_1_ready      (mac_acc_atom_4_1_inb_1_ready    ), //o
    .inb_1_payload    (s_wt_4_1_payload                ), //i
    .inb_2_valid      (s_wt_4_2_valid                  ), //i
    .inb_2_ready      (mac_acc_atom_4_1_inb_2_ready    ), //o
    .inb_2_payload    (s_wt_4_2_payload                ), //i
    .inb_3_valid      (s_wt_4_3_valid                  ), //i
    .inb_3_ready      (mac_acc_atom_4_1_inb_3_ready    ), //o
    .inb_3_payload    (s_wt_4_3_payload                ), //i
    .inb_4_valid      (s_wt_4_4_valid                  ), //i
    .inb_4_ready      (mac_acc_atom_4_1_inb_4_ready    ), //o
    .inb_4_payload    (s_wt_4_4_payload                ), //i
    .inb_5_valid      (s_wt_4_5_valid                  ), //i
    .inb_5_ready      (mac_acc_atom_4_1_inb_5_ready    ), //o
    .inb_5_payload    (s_wt_4_5_payload                ), //i
    .inb_6_valid      (s_wt_4_6_valid                  ), //i
    .inb_6_ready      (mac_acc_atom_4_1_inb_6_ready    ), //o
    .inb_6_payload    (s_wt_4_6_payload                ), //i
    .inb_7_valid      (s_wt_4_7_valid                  ), //i
    .inb_7_ready      (mac_acc_atom_4_1_inb_7_ready    ), //o
    .inb_7_payload    (s_wt_4_7_payload                ), //i
    .out_0_valid      (mac_acc_atom_4_1_out_0_valid    ), //o
    .out_0_ready      (s_out_4_0_ready                 ), //i
    .out_0_payload    (mac_acc_atom_4_1_out_0_payload  ), //o
    .out_1_valid      (mac_acc_atom_4_1_out_1_valid    ), //o
    .out_1_ready      (s_out_4_1_ready                 ), //i
    .out_1_payload    (mac_acc_atom_4_1_out_1_payload  ), //o
    .out_2_valid      (mac_acc_atom_4_1_out_2_valid    ), //o
    .out_2_ready      (s_out_4_2_ready                 ), //i
    .out_2_payload    (mac_acc_atom_4_1_out_2_payload  ), //o
    .out_3_valid      (mac_acc_atom_4_1_out_3_valid    ), //o
    .out_3_ready      (s_out_4_3_ready                 ), //i
    .out_3_payload    (mac_acc_atom_4_1_out_3_payload  ), //o
    .out_4_valid      (mac_acc_atom_4_1_out_4_valid    ), //o
    .out_4_ready      (s_out_4_4_ready                 ), //i
    .out_4_payload    (mac_acc_atom_4_1_out_4_payload  ), //o
    .out_5_valid      (mac_acc_atom_4_1_out_5_valid    ), //o
    .out_5_ready      (s_out_4_5_ready                 ), //i
    .out_5_payload    (mac_acc_atom_4_1_out_5_payload  ), //o
    .out_6_valid      (mac_acc_atom_4_1_out_6_valid    ), //o
    .out_6_ready      (s_out_4_6_ready                 ), //i
    .out_6_payload    (mac_acc_atom_4_1_out_6_payload  ), //o
    .out_7_valid      (mac_acc_atom_4_1_out_7_valid    ), //o
    .out_7_ready      (s_out_4_7_ready                 ), //i
    .out_7_payload    (mac_acc_atom_4_1_out_7_payload  ), //o
    .par_acc_cnt      (par_acc_cnt                     ), //i
    .acc_enable       (acc_enable                      ), //i
    .clk              (clk                             ), //i
    .reset            (reset                           )  //i
  );
  mac_acc_atom_5 mac_acc_atom_5_1 (
    .ina_0_valid      (s_ft_0_valid                    ), //i
    .ina_0_ready      (mac_acc_atom_5_1_ina_0_ready    ), //o
    .ina_0_payload    (s_ft_0_payload                  ), //i
    .ina_1_valid      (s_ft_1_valid                    ), //i
    .ina_1_ready      (mac_acc_atom_5_1_ina_1_ready    ), //o
    .ina_1_payload    (s_ft_1_payload                  ), //i
    .ina_2_valid      (s_ft_2_valid                    ), //i
    .ina_2_ready      (mac_acc_atom_5_1_ina_2_ready    ), //o
    .ina_2_payload    (s_ft_2_payload                  ), //i
    .ina_3_valid      (s_ft_3_valid                    ), //i
    .ina_3_ready      (mac_acc_atom_5_1_ina_3_ready    ), //o
    .ina_3_payload    (s_ft_3_payload                  ), //i
    .ina_4_valid      (s_ft_4_valid                    ), //i
    .ina_4_ready      (mac_acc_atom_5_1_ina_4_ready    ), //o
    .ina_4_payload    (s_ft_4_payload                  ), //i
    .ina_5_valid      (s_ft_5_valid                    ), //i
    .ina_5_ready      (mac_acc_atom_5_1_ina_5_ready    ), //o
    .ina_5_payload    (s_ft_5_payload                  ), //i
    .ina_6_valid      (s_ft_6_valid                    ), //i
    .ina_6_ready      (mac_acc_atom_5_1_ina_6_ready    ), //o
    .ina_6_payload    (s_ft_6_payload                  ), //i
    .ina_7_valid      (s_ft_7_valid                    ), //i
    .ina_7_ready      (mac_acc_atom_5_1_ina_7_ready    ), //o
    .ina_7_payload    (s_ft_7_payload                  ), //i
    .inb_0_valid      (s_wt_5_0_valid                  ), //i
    .inb_0_ready      (mac_acc_atom_5_1_inb_0_ready    ), //o
    .inb_0_payload    (s_wt_5_0_payload                ), //i
    .inb_1_valid      (s_wt_5_1_valid                  ), //i
    .inb_1_ready      (mac_acc_atom_5_1_inb_1_ready    ), //o
    .inb_1_payload    (s_wt_5_1_payload                ), //i
    .inb_2_valid      (s_wt_5_2_valid                  ), //i
    .inb_2_ready      (mac_acc_atom_5_1_inb_2_ready    ), //o
    .inb_2_payload    (s_wt_5_2_payload                ), //i
    .inb_3_valid      (s_wt_5_3_valid                  ), //i
    .inb_3_ready      (mac_acc_atom_5_1_inb_3_ready    ), //o
    .inb_3_payload    (s_wt_5_3_payload                ), //i
    .inb_4_valid      (s_wt_5_4_valid                  ), //i
    .inb_4_ready      (mac_acc_atom_5_1_inb_4_ready    ), //o
    .inb_4_payload    (s_wt_5_4_payload                ), //i
    .inb_5_valid      (s_wt_5_5_valid                  ), //i
    .inb_5_ready      (mac_acc_atom_5_1_inb_5_ready    ), //o
    .inb_5_payload    (s_wt_5_5_payload                ), //i
    .inb_6_valid      (s_wt_5_6_valid                  ), //i
    .inb_6_ready      (mac_acc_atom_5_1_inb_6_ready    ), //o
    .inb_6_payload    (s_wt_5_6_payload                ), //i
    .inb_7_valid      (s_wt_5_7_valid                  ), //i
    .inb_7_ready      (mac_acc_atom_5_1_inb_7_ready    ), //o
    .inb_7_payload    (s_wt_5_7_payload                ), //i
    .out_0_valid      (mac_acc_atom_5_1_out_0_valid    ), //o
    .out_0_ready      (s_out_5_0_ready                 ), //i
    .out_0_payload    (mac_acc_atom_5_1_out_0_payload  ), //o
    .out_1_valid      (mac_acc_atom_5_1_out_1_valid    ), //o
    .out_1_ready      (s_out_5_1_ready                 ), //i
    .out_1_payload    (mac_acc_atom_5_1_out_1_payload  ), //o
    .out_2_valid      (mac_acc_atom_5_1_out_2_valid    ), //o
    .out_2_ready      (s_out_5_2_ready                 ), //i
    .out_2_payload    (mac_acc_atom_5_1_out_2_payload  ), //o
    .out_3_valid      (mac_acc_atom_5_1_out_3_valid    ), //o
    .out_3_ready      (s_out_5_3_ready                 ), //i
    .out_3_payload    (mac_acc_atom_5_1_out_3_payload  ), //o
    .out_4_valid      (mac_acc_atom_5_1_out_4_valid    ), //o
    .out_4_ready      (s_out_5_4_ready                 ), //i
    .out_4_payload    (mac_acc_atom_5_1_out_4_payload  ), //o
    .out_5_valid      (mac_acc_atom_5_1_out_5_valid    ), //o
    .out_5_ready      (s_out_5_5_ready                 ), //i
    .out_5_payload    (mac_acc_atom_5_1_out_5_payload  ), //o
    .out_6_valid      (mac_acc_atom_5_1_out_6_valid    ), //o
    .out_6_ready      (s_out_5_6_ready                 ), //i
    .out_6_payload    (mac_acc_atom_5_1_out_6_payload  ), //o
    .out_7_valid      (mac_acc_atom_5_1_out_7_valid    ), //o
    .out_7_ready      (s_out_5_7_ready                 ), //i
    .out_7_payload    (mac_acc_atom_5_1_out_7_payload  ), //o
    .par_acc_cnt      (par_acc_cnt                     ), //i
    .acc_enable       (acc_enable                      ), //i
    .clk              (clk                             ), //i
    .reset            (reset                           )  //i
  );
  mac_acc_atom_6 mac_acc_atom_6_1 (
    .ina_0_valid      (s_ft_0_valid                    ), //i
    .ina_0_ready      (mac_acc_atom_6_1_ina_0_ready    ), //o
    .ina_0_payload    (s_ft_0_payload                  ), //i
    .ina_1_valid      (s_ft_1_valid                    ), //i
    .ina_1_ready      (mac_acc_atom_6_1_ina_1_ready    ), //o
    .ina_1_payload    (s_ft_1_payload                  ), //i
    .ina_2_valid      (s_ft_2_valid                    ), //i
    .ina_2_ready      (mac_acc_atom_6_1_ina_2_ready    ), //o
    .ina_2_payload    (s_ft_2_payload                  ), //i
    .ina_3_valid      (s_ft_3_valid                    ), //i
    .ina_3_ready      (mac_acc_atom_6_1_ina_3_ready    ), //o
    .ina_3_payload    (s_ft_3_payload                  ), //i
    .ina_4_valid      (s_ft_4_valid                    ), //i
    .ina_4_ready      (mac_acc_atom_6_1_ina_4_ready    ), //o
    .ina_4_payload    (s_ft_4_payload                  ), //i
    .ina_5_valid      (s_ft_5_valid                    ), //i
    .ina_5_ready      (mac_acc_atom_6_1_ina_5_ready    ), //o
    .ina_5_payload    (s_ft_5_payload                  ), //i
    .ina_6_valid      (s_ft_6_valid                    ), //i
    .ina_6_ready      (mac_acc_atom_6_1_ina_6_ready    ), //o
    .ina_6_payload    (s_ft_6_payload                  ), //i
    .ina_7_valid      (s_ft_7_valid                    ), //i
    .ina_7_ready      (mac_acc_atom_6_1_ina_7_ready    ), //o
    .ina_7_payload    (s_ft_7_payload                  ), //i
    .inb_0_valid      (s_wt_6_0_valid                  ), //i
    .inb_0_ready      (mac_acc_atom_6_1_inb_0_ready    ), //o
    .inb_0_payload    (s_wt_6_0_payload                ), //i
    .inb_1_valid      (s_wt_6_1_valid                  ), //i
    .inb_1_ready      (mac_acc_atom_6_1_inb_1_ready    ), //o
    .inb_1_payload    (s_wt_6_1_payload                ), //i
    .inb_2_valid      (s_wt_6_2_valid                  ), //i
    .inb_2_ready      (mac_acc_atom_6_1_inb_2_ready    ), //o
    .inb_2_payload    (s_wt_6_2_payload                ), //i
    .inb_3_valid      (s_wt_6_3_valid                  ), //i
    .inb_3_ready      (mac_acc_atom_6_1_inb_3_ready    ), //o
    .inb_3_payload    (s_wt_6_3_payload                ), //i
    .inb_4_valid      (s_wt_6_4_valid                  ), //i
    .inb_4_ready      (mac_acc_atom_6_1_inb_4_ready    ), //o
    .inb_4_payload    (s_wt_6_4_payload                ), //i
    .inb_5_valid      (s_wt_6_5_valid                  ), //i
    .inb_5_ready      (mac_acc_atom_6_1_inb_5_ready    ), //o
    .inb_5_payload    (s_wt_6_5_payload                ), //i
    .inb_6_valid      (s_wt_6_6_valid                  ), //i
    .inb_6_ready      (mac_acc_atom_6_1_inb_6_ready    ), //o
    .inb_6_payload    (s_wt_6_6_payload                ), //i
    .inb_7_valid      (s_wt_6_7_valid                  ), //i
    .inb_7_ready      (mac_acc_atom_6_1_inb_7_ready    ), //o
    .inb_7_payload    (s_wt_6_7_payload                ), //i
    .out_0_valid      (mac_acc_atom_6_1_out_0_valid    ), //o
    .out_0_ready      (s_out_6_0_ready                 ), //i
    .out_0_payload    (mac_acc_atom_6_1_out_0_payload  ), //o
    .out_1_valid      (mac_acc_atom_6_1_out_1_valid    ), //o
    .out_1_ready      (s_out_6_1_ready                 ), //i
    .out_1_payload    (mac_acc_atom_6_1_out_1_payload  ), //o
    .out_2_valid      (mac_acc_atom_6_1_out_2_valid    ), //o
    .out_2_ready      (s_out_6_2_ready                 ), //i
    .out_2_payload    (mac_acc_atom_6_1_out_2_payload  ), //o
    .out_3_valid      (mac_acc_atom_6_1_out_3_valid    ), //o
    .out_3_ready      (s_out_6_3_ready                 ), //i
    .out_3_payload    (mac_acc_atom_6_1_out_3_payload  ), //o
    .out_4_valid      (mac_acc_atom_6_1_out_4_valid    ), //o
    .out_4_ready      (s_out_6_4_ready                 ), //i
    .out_4_payload    (mac_acc_atom_6_1_out_4_payload  ), //o
    .out_5_valid      (mac_acc_atom_6_1_out_5_valid    ), //o
    .out_5_ready      (s_out_6_5_ready                 ), //i
    .out_5_payload    (mac_acc_atom_6_1_out_5_payload  ), //o
    .out_6_valid      (mac_acc_atom_6_1_out_6_valid    ), //o
    .out_6_ready      (s_out_6_6_ready                 ), //i
    .out_6_payload    (mac_acc_atom_6_1_out_6_payload  ), //o
    .out_7_valid      (mac_acc_atom_6_1_out_7_valid    ), //o
    .out_7_ready      (s_out_6_7_ready                 ), //i
    .out_7_payload    (mac_acc_atom_6_1_out_7_payload  ), //o
    .par_acc_cnt      (par_acc_cnt                     ), //i
    .acc_enable       (acc_enable                      ), //i
    .clk              (clk                             ), //i
    .reset            (reset                           )  //i
  );
  mac_acc_atom_7 mac_acc_atom_7_1 (
    .ina_0_valid      (s_ft_0_valid                    ), //i
    .ina_0_ready      (mac_acc_atom_7_1_ina_0_ready    ), //o
    .ina_0_payload    (s_ft_0_payload                  ), //i
    .ina_1_valid      (s_ft_1_valid                    ), //i
    .ina_1_ready      (mac_acc_atom_7_1_ina_1_ready    ), //o
    .ina_1_payload    (s_ft_1_payload                  ), //i
    .ina_2_valid      (s_ft_2_valid                    ), //i
    .ina_2_ready      (mac_acc_atom_7_1_ina_2_ready    ), //o
    .ina_2_payload    (s_ft_2_payload                  ), //i
    .ina_3_valid      (s_ft_3_valid                    ), //i
    .ina_3_ready      (mac_acc_atom_7_1_ina_3_ready    ), //o
    .ina_3_payload    (s_ft_3_payload                  ), //i
    .ina_4_valid      (s_ft_4_valid                    ), //i
    .ina_4_ready      (mac_acc_atom_7_1_ina_4_ready    ), //o
    .ina_4_payload    (s_ft_4_payload                  ), //i
    .ina_5_valid      (s_ft_5_valid                    ), //i
    .ina_5_ready      (mac_acc_atom_7_1_ina_5_ready    ), //o
    .ina_5_payload    (s_ft_5_payload                  ), //i
    .ina_6_valid      (s_ft_6_valid                    ), //i
    .ina_6_ready      (mac_acc_atom_7_1_ina_6_ready    ), //o
    .ina_6_payload    (s_ft_6_payload                  ), //i
    .ina_7_valid      (s_ft_7_valid                    ), //i
    .ina_7_ready      (mac_acc_atom_7_1_ina_7_ready    ), //o
    .ina_7_payload    (s_ft_7_payload                  ), //i
    .inb_0_valid      (s_wt_7_0_valid                  ), //i
    .inb_0_ready      (mac_acc_atom_7_1_inb_0_ready    ), //o
    .inb_0_payload    (s_wt_7_0_payload                ), //i
    .inb_1_valid      (s_wt_7_1_valid                  ), //i
    .inb_1_ready      (mac_acc_atom_7_1_inb_1_ready    ), //o
    .inb_1_payload    (s_wt_7_1_payload                ), //i
    .inb_2_valid      (s_wt_7_2_valid                  ), //i
    .inb_2_ready      (mac_acc_atom_7_1_inb_2_ready    ), //o
    .inb_2_payload    (s_wt_7_2_payload                ), //i
    .inb_3_valid      (s_wt_7_3_valid                  ), //i
    .inb_3_ready      (mac_acc_atom_7_1_inb_3_ready    ), //o
    .inb_3_payload    (s_wt_7_3_payload                ), //i
    .inb_4_valid      (s_wt_7_4_valid                  ), //i
    .inb_4_ready      (mac_acc_atom_7_1_inb_4_ready    ), //o
    .inb_4_payload    (s_wt_7_4_payload                ), //i
    .inb_5_valid      (s_wt_7_5_valid                  ), //i
    .inb_5_ready      (mac_acc_atom_7_1_inb_5_ready    ), //o
    .inb_5_payload    (s_wt_7_5_payload                ), //i
    .inb_6_valid      (s_wt_7_6_valid                  ), //i
    .inb_6_ready      (mac_acc_atom_7_1_inb_6_ready    ), //o
    .inb_6_payload    (s_wt_7_6_payload                ), //i
    .inb_7_valid      (s_wt_7_7_valid                  ), //i
    .inb_7_ready      (mac_acc_atom_7_1_inb_7_ready    ), //o
    .inb_7_payload    (s_wt_7_7_payload                ), //i
    .out_0_valid      (mac_acc_atom_7_1_out_0_valid    ), //o
    .out_0_ready      (s_out_7_0_ready                 ), //i
    .out_0_payload    (mac_acc_atom_7_1_out_0_payload  ), //o
    .out_1_valid      (mac_acc_atom_7_1_out_1_valid    ), //o
    .out_1_ready      (s_out_7_1_ready                 ), //i
    .out_1_payload    (mac_acc_atom_7_1_out_1_payload  ), //o
    .out_2_valid      (mac_acc_atom_7_1_out_2_valid    ), //o
    .out_2_ready      (s_out_7_2_ready                 ), //i
    .out_2_payload    (mac_acc_atom_7_1_out_2_payload  ), //o
    .out_3_valid      (mac_acc_atom_7_1_out_3_valid    ), //o
    .out_3_ready      (s_out_7_3_ready                 ), //i
    .out_3_payload    (mac_acc_atom_7_1_out_3_payload  ), //o
    .out_4_valid      (mac_acc_atom_7_1_out_4_valid    ), //o
    .out_4_ready      (s_out_7_4_ready                 ), //i
    .out_4_payload    (mac_acc_atom_7_1_out_4_payload  ), //o
    .out_5_valid      (mac_acc_atom_7_1_out_5_valid    ), //o
    .out_5_ready      (s_out_7_5_ready                 ), //i
    .out_5_payload    (mac_acc_atom_7_1_out_5_payload  ), //o
    .out_6_valid      (mac_acc_atom_7_1_out_6_valid    ), //o
    .out_6_ready      (s_out_7_6_ready                 ), //i
    .out_6_payload    (mac_acc_atom_7_1_out_6_payload  ), //o
    .out_7_valid      (mac_acc_atom_7_1_out_7_valid    ), //o
    .out_7_ready      (s_out_7_7_ready                 ), //i
    .out_7_payload    (mac_acc_atom_7_1_out_7_payload  ), //o
    .par_acc_cnt      (par_acc_cnt                     ), //i
    .acc_enable       (acc_enable                      ), //i
    .clk              (clk                             ), //i
    .reset            (reset                           )  //i
  );
  assign s_ft_0_ready = (((((((mac_acc_atom_0_ina_0_ready && mac_acc_atom_1_1_ina_0_ready) && mac_acc_atom_2_1_ina_0_ready) && mac_acc_atom_3_1_ina_0_ready) && mac_acc_atom_4_1_ina_0_ready) && mac_acc_atom_5_1_ina_0_ready) && mac_acc_atom_6_1_ina_0_ready) && mac_acc_atom_7_1_ina_0_ready);
  assign s_ft_1_ready = (((((((mac_acc_atom_0_ina_1_ready && mac_acc_atom_1_1_ina_1_ready) && mac_acc_atom_2_1_ina_1_ready) && mac_acc_atom_3_1_ina_1_ready) && mac_acc_atom_4_1_ina_1_ready) && mac_acc_atom_5_1_ina_1_ready) && mac_acc_atom_6_1_ina_1_ready) && mac_acc_atom_7_1_ina_1_ready);
  assign s_ft_2_ready = (((((((mac_acc_atom_0_ina_2_ready && mac_acc_atom_1_1_ina_2_ready) && mac_acc_atom_2_1_ina_2_ready) && mac_acc_atom_3_1_ina_2_ready) && mac_acc_atom_4_1_ina_2_ready) && mac_acc_atom_5_1_ina_2_ready) && mac_acc_atom_6_1_ina_2_ready) && mac_acc_atom_7_1_ina_2_ready);
  assign s_ft_3_ready = (((((((mac_acc_atom_0_ina_3_ready && mac_acc_atom_1_1_ina_3_ready) && mac_acc_atom_2_1_ina_3_ready) && mac_acc_atom_3_1_ina_3_ready) && mac_acc_atom_4_1_ina_3_ready) && mac_acc_atom_5_1_ina_3_ready) && mac_acc_atom_6_1_ina_3_ready) && mac_acc_atom_7_1_ina_3_ready);
  assign s_ft_4_ready = (((((((mac_acc_atom_0_ina_4_ready && mac_acc_atom_1_1_ina_4_ready) && mac_acc_atom_2_1_ina_4_ready) && mac_acc_atom_3_1_ina_4_ready) && mac_acc_atom_4_1_ina_4_ready) && mac_acc_atom_5_1_ina_4_ready) && mac_acc_atom_6_1_ina_4_ready) && mac_acc_atom_7_1_ina_4_ready);
  assign s_ft_5_ready = (((((((mac_acc_atom_0_ina_5_ready && mac_acc_atom_1_1_ina_5_ready) && mac_acc_atom_2_1_ina_5_ready) && mac_acc_atom_3_1_ina_5_ready) && mac_acc_atom_4_1_ina_5_ready) && mac_acc_atom_5_1_ina_5_ready) && mac_acc_atom_6_1_ina_5_ready) && mac_acc_atom_7_1_ina_5_ready);
  assign s_ft_6_ready = (((((((mac_acc_atom_0_ina_6_ready && mac_acc_atom_1_1_ina_6_ready) && mac_acc_atom_2_1_ina_6_ready) && mac_acc_atom_3_1_ina_6_ready) && mac_acc_atom_4_1_ina_6_ready) && mac_acc_atom_5_1_ina_6_ready) && mac_acc_atom_6_1_ina_6_ready) && mac_acc_atom_7_1_ina_6_ready);
  assign s_ft_7_ready = (((((((mac_acc_atom_0_ina_7_ready && mac_acc_atom_1_1_ina_7_ready) && mac_acc_atom_2_1_ina_7_ready) && mac_acc_atom_3_1_ina_7_ready) && mac_acc_atom_4_1_ina_7_ready) && mac_acc_atom_5_1_ina_7_ready) && mac_acc_atom_6_1_ina_7_ready) && mac_acc_atom_7_1_ina_7_ready);
  assign s_wt_0_0_ready = mac_acc_atom_0_inb_0_ready;
  assign s_wt_0_1_ready = mac_acc_atom_0_inb_1_ready;
  assign s_wt_0_2_ready = mac_acc_atom_0_inb_2_ready;
  assign s_wt_0_3_ready = mac_acc_atom_0_inb_3_ready;
  assign s_wt_0_4_ready = mac_acc_atom_0_inb_4_ready;
  assign s_wt_0_5_ready = mac_acc_atom_0_inb_5_ready;
  assign s_wt_0_6_ready = mac_acc_atom_0_inb_6_ready;
  assign s_wt_0_7_ready = mac_acc_atom_0_inb_7_ready;
  assign s_wt_1_0_ready = mac_acc_atom_1_1_inb_0_ready;
  assign s_wt_1_1_ready = mac_acc_atom_1_1_inb_1_ready;
  assign s_wt_1_2_ready = mac_acc_atom_1_1_inb_2_ready;
  assign s_wt_1_3_ready = mac_acc_atom_1_1_inb_3_ready;
  assign s_wt_1_4_ready = mac_acc_atom_1_1_inb_4_ready;
  assign s_wt_1_5_ready = mac_acc_atom_1_1_inb_5_ready;
  assign s_wt_1_6_ready = mac_acc_atom_1_1_inb_6_ready;
  assign s_wt_1_7_ready = mac_acc_atom_1_1_inb_7_ready;
  assign s_wt_2_0_ready = mac_acc_atom_2_1_inb_0_ready;
  assign s_wt_2_1_ready = mac_acc_atom_2_1_inb_1_ready;
  assign s_wt_2_2_ready = mac_acc_atom_2_1_inb_2_ready;
  assign s_wt_2_3_ready = mac_acc_atom_2_1_inb_3_ready;
  assign s_wt_2_4_ready = mac_acc_atom_2_1_inb_4_ready;
  assign s_wt_2_5_ready = mac_acc_atom_2_1_inb_5_ready;
  assign s_wt_2_6_ready = mac_acc_atom_2_1_inb_6_ready;
  assign s_wt_2_7_ready = mac_acc_atom_2_1_inb_7_ready;
  assign s_wt_3_0_ready = mac_acc_atom_3_1_inb_0_ready;
  assign s_wt_3_1_ready = mac_acc_atom_3_1_inb_1_ready;
  assign s_wt_3_2_ready = mac_acc_atom_3_1_inb_2_ready;
  assign s_wt_3_3_ready = mac_acc_atom_3_1_inb_3_ready;
  assign s_wt_3_4_ready = mac_acc_atom_3_1_inb_4_ready;
  assign s_wt_3_5_ready = mac_acc_atom_3_1_inb_5_ready;
  assign s_wt_3_6_ready = mac_acc_atom_3_1_inb_6_ready;
  assign s_wt_3_7_ready = mac_acc_atom_3_1_inb_7_ready;
  assign s_wt_4_0_ready = mac_acc_atom_4_1_inb_0_ready;
  assign s_wt_4_1_ready = mac_acc_atom_4_1_inb_1_ready;
  assign s_wt_4_2_ready = mac_acc_atom_4_1_inb_2_ready;
  assign s_wt_4_3_ready = mac_acc_atom_4_1_inb_3_ready;
  assign s_wt_4_4_ready = mac_acc_atom_4_1_inb_4_ready;
  assign s_wt_4_5_ready = mac_acc_atom_4_1_inb_5_ready;
  assign s_wt_4_6_ready = mac_acc_atom_4_1_inb_6_ready;
  assign s_wt_4_7_ready = mac_acc_atom_4_1_inb_7_ready;
  assign s_wt_5_0_ready = mac_acc_atom_5_1_inb_0_ready;
  assign s_wt_5_1_ready = mac_acc_atom_5_1_inb_1_ready;
  assign s_wt_5_2_ready = mac_acc_atom_5_1_inb_2_ready;
  assign s_wt_5_3_ready = mac_acc_atom_5_1_inb_3_ready;
  assign s_wt_5_4_ready = mac_acc_atom_5_1_inb_4_ready;
  assign s_wt_5_5_ready = mac_acc_atom_5_1_inb_5_ready;
  assign s_wt_5_6_ready = mac_acc_atom_5_1_inb_6_ready;
  assign s_wt_5_7_ready = mac_acc_atom_5_1_inb_7_ready;
  assign s_wt_6_0_ready = mac_acc_atom_6_1_inb_0_ready;
  assign s_wt_6_1_ready = mac_acc_atom_6_1_inb_1_ready;
  assign s_wt_6_2_ready = mac_acc_atom_6_1_inb_2_ready;
  assign s_wt_6_3_ready = mac_acc_atom_6_1_inb_3_ready;
  assign s_wt_6_4_ready = mac_acc_atom_6_1_inb_4_ready;
  assign s_wt_6_5_ready = mac_acc_atom_6_1_inb_5_ready;
  assign s_wt_6_6_ready = mac_acc_atom_6_1_inb_6_ready;
  assign s_wt_6_7_ready = mac_acc_atom_6_1_inb_7_ready;
  assign s_wt_7_0_ready = mac_acc_atom_7_1_inb_0_ready;
  assign s_wt_7_1_ready = mac_acc_atom_7_1_inb_1_ready;
  assign s_wt_7_2_ready = mac_acc_atom_7_1_inb_2_ready;
  assign s_wt_7_3_ready = mac_acc_atom_7_1_inb_3_ready;
  assign s_wt_7_4_ready = mac_acc_atom_7_1_inb_4_ready;
  assign s_wt_7_5_ready = mac_acc_atom_7_1_inb_5_ready;
  assign s_wt_7_6_ready = mac_acc_atom_7_1_inb_6_ready;
  assign s_wt_7_7_ready = mac_acc_atom_7_1_inb_7_ready;
  assign s_out_0_0_valid = mac_acc_atom_0_out_0_valid;
  assign s_out_0_0_payload = mac_acc_atom_0_out_0_payload;
  assign s_out_0_1_valid = mac_acc_atom_0_out_1_valid;
  assign s_out_0_1_payload = mac_acc_atom_0_out_1_payload;
  assign s_out_0_2_valid = mac_acc_atom_0_out_2_valid;
  assign s_out_0_2_payload = mac_acc_atom_0_out_2_payload;
  assign s_out_0_3_valid = mac_acc_atom_0_out_3_valid;
  assign s_out_0_3_payload = mac_acc_atom_0_out_3_payload;
  assign s_out_0_4_valid = mac_acc_atom_0_out_4_valid;
  assign s_out_0_4_payload = mac_acc_atom_0_out_4_payload;
  assign s_out_0_5_valid = mac_acc_atom_0_out_5_valid;
  assign s_out_0_5_payload = mac_acc_atom_0_out_5_payload;
  assign s_out_0_6_valid = mac_acc_atom_0_out_6_valid;
  assign s_out_0_6_payload = mac_acc_atom_0_out_6_payload;
  assign s_out_0_7_valid = mac_acc_atom_0_out_7_valid;
  assign s_out_0_7_payload = mac_acc_atom_0_out_7_payload;
  assign s_out_1_0_valid = mac_acc_atom_1_1_out_0_valid;
  assign s_out_1_0_payload = mac_acc_atom_1_1_out_0_payload;
  assign s_out_1_1_valid = mac_acc_atom_1_1_out_1_valid;
  assign s_out_1_1_payload = mac_acc_atom_1_1_out_1_payload;
  assign s_out_1_2_valid = mac_acc_atom_1_1_out_2_valid;
  assign s_out_1_2_payload = mac_acc_atom_1_1_out_2_payload;
  assign s_out_1_3_valid = mac_acc_atom_1_1_out_3_valid;
  assign s_out_1_3_payload = mac_acc_atom_1_1_out_3_payload;
  assign s_out_1_4_valid = mac_acc_atom_1_1_out_4_valid;
  assign s_out_1_4_payload = mac_acc_atom_1_1_out_4_payload;
  assign s_out_1_5_valid = mac_acc_atom_1_1_out_5_valid;
  assign s_out_1_5_payload = mac_acc_atom_1_1_out_5_payload;
  assign s_out_1_6_valid = mac_acc_atom_1_1_out_6_valid;
  assign s_out_1_6_payload = mac_acc_atom_1_1_out_6_payload;
  assign s_out_1_7_valid = mac_acc_atom_1_1_out_7_valid;
  assign s_out_1_7_payload = mac_acc_atom_1_1_out_7_payload;
  assign s_out_2_0_valid = mac_acc_atom_2_1_out_0_valid;
  assign s_out_2_0_payload = mac_acc_atom_2_1_out_0_payload;
  assign s_out_2_1_valid = mac_acc_atom_2_1_out_1_valid;
  assign s_out_2_1_payload = mac_acc_atom_2_1_out_1_payload;
  assign s_out_2_2_valid = mac_acc_atom_2_1_out_2_valid;
  assign s_out_2_2_payload = mac_acc_atom_2_1_out_2_payload;
  assign s_out_2_3_valid = mac_acc_atom_2_1_out_3_valid;
  assign s_out_2_3_payload = mac_acc_atom_2_1_out_3_payload;
  assign s_out_2_4_valid = mac_acc_atom_2_1_out_4_valid;
  assign s_out_2_4_payload = mac_acc_atom_2_1_out_4_payload;
  assign s_out_2_5_valid = mac_acc_atom_2_1_out_5_valid;
  assign s_out_2_5_payload = mac_acc_atom_2_1_out_5_payload;
  assign s_out_2_6_valid = mac_acc_atom_2_1_out_6_valid;
  assign s_out_2_6_payload = mac_acc_atom_2_1_out_6_payload;
  assign s_out_2_7_valid = mac_acc_atom_2_1_out_7_valid;
  assign s_out_2_7_payload = mac_acc_atom_2_1_out_7_payload;
  assign s_out_3_0_valid = mac_acc_atom_3_1_out_0_valid;
  assign s_out_3_0_payload = mac_acc_atom_3_1_out_0_payload;
  assign s_out_3_1_valid = mac_acc_atom_3_1_out_1_valid;
  assign s_out_3_1_payload = mac_acc_atom_3_1_out_1_payload;
  assign s_out_3_2_valid = mac_acc_atom_3_1_out_2_valid;
  assign s_out_3_2_payload = mac_acc_atom_3_1_out_2_payload;
  assign s_out_3_3_valid = mac_acc_atom_3_1_out_3_valid;
  assign s_out_3_3_payload = mac_acc_atom_3_1_out_3_payload;
  assign s_out_3_4_valid = mac_acc_atom_3_1_out_4_valid;
  assign s_out_3_4_payload = mac_acc_atom_3_1_out_4_payload;
  assign s_out_3_5_valid = mac_acc_atom_3_1_out_5_valid;
  assign s_out_3_5_payload = mac_acc_atom_3_1_out_5_payload;
  assign s_out_3_6_valid = mac_acc_atom_3_1_out_6_valid;
  assign s_out_3_6_payload = mac_acc_atom_3_1_out_6_payload;
  assign s_out_3_7_valid = mac_acc_atom_3_1_out_7_valid;
  assign s_out_3_7_payload = mac_acc_atom_3_1_out_7_payload;
  assign s_out_4_0_valid = mac_acc_atom_4_1_out_0_valid;
  assign s_out_4_0_payload = mac_acc_atom_4_1_out_0_payload;
  assign s_out_4_1_valid = mac_acc_atom_4_1_out_1_valid;
  assign s_out_4_1_payload = mac_acc_atom_4_1_out_1_payload;
  assign s_out_4_2_valid = mac_acc_atom_4_1_out_2_valid;
  assign s_out_4_2_payload = mac_acc_atom_4_1_out_2_payload;
  assign s_out_4_3_valid = mac_acc_atom_4_1_out_3_valid;
  assign s_out_4_3_payload = mac_acc_atom_4_1_out_3_payload;
  assign s_out_4_4_valid = mac_acc_atom_4_1_out_4_valid;
  assign s_out_4_4_payload = mac_acc_atom_4_1_out_4_payload;
  assign s_out_4_5_valid = mac_acc_atom_4_1_out_5_valid;
  assign s_out_4_5_payload = mac_acc_atom_4_1_out_5_payload;
  assign s_out_4_6_valid = mac_acc_atom_4_1_out_6_valid;
  assign s_out_4_6_payload = mac_acc_atom_4_1_out_6_payload;
  assign s_out_4_7_valid = mac_acc_atom_4_1_out_7_valid;
  assign s_out_4_7_payload = mac_acc_atom_4_1_out_7_payload;
  assign s_out_5_0_valid = mac_acc_atom_5_1_out_0_valid;
  assign s_out_5_0_payload = mac_acc_atom_5_1_out_0_payload;
  assign s_out_5_1_valid = mac_acc_atom_5_1_out_1_valid;
  assign s_out_5_1_payload = mac_acc_atom_5_1_out_1_payload;
  assign s_out_5_2_valid = mac_acc_atom_5_1_out_2_valid;
  assign s_out_5_2_payload = mac_acc_atom_5_1_out_2_payload;
  assign s_out_5_3_valid = mac_acc_atom_5_1_out_3_valid;
  assign s_out_5_3_payload = mac_acc_atom_5_1_out_3_payload;
  assign s_out_5_4_valid = mac_acc_atom_5_1_out_4_valid;
  assign s_out_5_4_payload = mac_acc_atom_5_1_out_4_payload;
  assign s_out_5_5_valid = mac_acc_atom_5_1_out_5_valid;
  assign s_out_5_5_payload = mac_acc_atom_5_1_out_5_payload;
  assign s_out_5_6_valid = mac_acc_atom_5_1_out_6_valid;
  assign s_out_5_6_payload = mac_acc_atom_5_1_out_6_payload;
  assign s_out_5_7_valid = mac_acc_atom_5_1_out_7_valid;
  assign s_out_5_7_payload = mac_acc_atom_5_1_out_7_payload;
  assign s_out_6_0_valid = mac_acc_atom_6_1_out_0_valid;
  assign s_out_6_0_payload = mac_acc_atom_6_1_out_0_payload;
  assign s_out_6_1_valid = mac_acc_atom_6_1_out_1_valid;
  assign s_out_6_1_payload = mac_acc_atom_6_1_out_1_payload;
  assign s_out_6_2_valid = mac_acc_atom_6_1_out_2_valid;
  assign s_out_6_2_payload = mac_acc_atom_6_1_out_2_payload;
  assign s_out_6_3_valid = mac_acc_atom_6_1_out_3_valid;
  assign s_out_6_3_payload = mac_acc_atom_6_1_out_3_payload;
  assign s_out_6_4_valid = mac_acc_atom_6_1_out_4_valid;
  assign s_out_6_4_payload = mac_acc_atom_6_1_out_4_payload;
  assign s_out_6_5_valid = mac_acc_atom_6_1_out_5_valid;
  assign s_out_6_5_payload = mac_acc_atom_6_1_out_5_payload;
  assign s_out_6_6_valid = mac_acc_atom_6_1_out_6_valid;
  assign s_out_6_6_payload = mac_acc_atom_6_1_out_6_payload;
  assign s_out_6_7_valid = mac_acc_atom_6_1_out_7_valid;
  assign s_out_6_7_payload = mac_acc_atom_6_1_out_7_payload;
  assign s_out_7_0_valid = mac_acc_atom_7_1_out_0_valid;
  assign s_out_7_0_payload = mac_acc_atom_7_1_out_0_payload;
  assign s_out_7_1_valid = mac_acc_atom_7_1_out_1_valid;
  assign s_out_7_1_payload = mac_acc_atom_7_1_out_1_payload;
  assign s_out_7_2_valid = mac_acc_atom_7_1_out_2_valid;
  assign s_out_7_2_payload = mac_acc_atom_7_1_out_2_payload;
  assign s_out_7_3_valid = mac_acc_atom_7_1_out_3_valid;
  assign s_out_7_3_payload = mac_acc_atom_7_1_out_3_payload;
  assign s_out_7_4_valid = mac_acc_atom_7_1_out_4_valid;
  assign s_out_7_4_payload = mac_acc_atom_7_1_out_4_payload;
  assign s_out_7_5_valid = mac_acc_atom_7_1_out_5_valid;
  assign s_out_7_5_payload = mac_acc_atom_7_1_out_5_payload;
  assign s_out_7_6_valid = mac_acc_atom_7_1_out_6_valid;
  assign s_out_7_6_payload = mac_acc_atom_7_1_out_6_payload;
  assign s_out_7_7_valid = mac_acc_atom_7_1_out_7_valid;
  assign s_out_7_7_payload = mac_acc_atom_7_1_out_7_payload;

endmodule

module dataType_cvt_in (
  input               io_i_ft_valid,
  output              io_i_ft_ready,
  input      [255:0]  io_i_ft_payload,
  input               io_i_wt_0_valid,
  output              io_i_wt_0_ready,
  input      [255:0]  io_i_wt_0_payload,
  input               io_i_wt_1_valid,
  output              io_i_wt_1_ready,
  input      [255:0]  io_i_wt_1_payload,
  input               io_i_wt_2_valid,
  output              io_i_wt_2_ready,
  input      [255:0]  io_i_wt_2_payload,
  input               io_i_wt_3_valid,
  output              io_i_wt_3_ready,
  input      [255:0]  io_i_wt_3_payload,
  input               io_i_wt_4_valid,
  output              io_i_wt_4_ready,
  input      [255:0]  io_i_wt_4_payload,
  input               io_i_wt_5_valid,
  output              io_i_wt_5_ready,
  input      [255:0]  io_i_wt_5_payload,
  input               io_i_wt_6_valid,
  output              io_i_wt_6_ready,
  input      [255:0]  io_i_wt_6_payload,
  input               io_i_wt_7_valid,
  output              io_i_wt_7_ready,
  input      [255:0]  io_i_wt_7_payload,
  output              io_o_ft_0_valid,
  input               io_o_ft_0_ready,
  output     [31:0]   io_o_ft_0_payload,
  output              io_o_ft_1_valid,
  input               io_o_ft_1_ready,
  output     [31:0]   io_o_ft_1_payload,
  output              io_o_ft_2_valid,
  input               io_o_ft_2_ready,
  output     [31:0]   io_o_ft_2_payload,
  output              io_o_ft_3_valid,
  input               io_o_ft_3_ready,
  output     [31:0]   io_o_ft_3_payload,
  output              io_o_ft_4_valid,
  input               io_o_ft_4_ready,
  output     [31:0]   io_o_ft_4_payload,
  output              io_o_ft_5_valid,
  input               io_o_ft_5_ready,
  output     [31:0]   io_o_ft_5_payload,
  output              io_o_ft_6_valid,
  input               io_o_ft_6_ready,
  output     [31:0]   io_o_ft_6_payload,
  output              io_o_ft_7_valid,
  input               io_o_ft_7_ready,
  output     [31:0]   io_o_ft_7_payload,
  output              io_o_wt_0_0_valid,
  input               io_o_wt_0_0_ready,
  output     [31:0]   io_o_wt_0_0_payload,
  output              io_o_wt_0_1_valid,
  input               io_o_wt_0_1_ready,
  output     [31:0]   io_o_wt_0_1_payload,
  output              io_o_wt_0_2_valid,
  input               io_o_wt_0_2_ready,
  output     [31:0]   io_o_wt_0_2_payload,
  output              io_o_wt_0_3_valid,
  input               io_o_wt_0_3_ready,
  output     [31:0]   io_o_wt_0_3_payload,
  output              io_o_wt_0_4_valid,
  input               io_o_wt_0_4_ready,
  output     [31:0]   io_o_wt_0_4_payload,
  output              io_o_wt_0_5_valid,
  input               io_o_wt_0_5_ready,
  output     [31:0]   io_o_wt_0_5_payload,
  output              io_o_wt_0_6_valid,
  input               io_o_wt_0_6_ready,
  output     [31:0]   io_o_wt_0_6_payload,
  output              io_o_wt_0_7_valid,
  input               io_o_wt_0_7_ready,
  output     [31:0]   io_o_wt_0_7_payload,
  output              io_o_wt_1_0_valid,
  input               io_o_wt_1_0_ready,
  output     [31:0]   io_o_wt_1_0_payload,
  output              io_o_wt_1_1_valid,
  input               io_o_wt_1_1_ready,
  output     [31:0]   io_o_wt_1_1_payload,
  output              io_o_wt_1_2_valid,
  input               io_o_wt_1_2_ready,
  output     [31:0]   io_o_wt_1_2_payload,
  output              io_o_wt_1_3_valid,
  input               io_o_wt_1_3_ready,
  output     [31:0]   io_o_wt_1_3_payload,
  output              io_o_wt_1_4_valid,
  input               io_o_wt_1_4_ready,
  output     [31:0]   io_o_wt_1_4_payload,
  output              io_o_wt_1_5_valid,
  input               io_o_wt_1_5_ready,
  output     [31:0]   io_o_wt_1_5_payload,
  output              io_o_wt_1_6_valid,
  input               io_o_wt_1_6_ready,
  output     [31:0]   io_o_wt_1_6_payload,
  output              io_o_wt_1_7_valid,
  input               io_o_wt_1_7_ready,
  output     [31:0]   io_o_wt_1_7_payload,
  output              io_o_wt_2_0_valid,
  input               io_o_wt_2_0_ready,
  output     [31:0]   io_o_wt_2_0_payload,
  output              io_o_wt_2_1_valid,
  input               io_o_wt_2_1_ready,
  output     [31:0]   io_o_wt_2_1_payload,
  output              io_o_wt_2_2_valid,
  input               io_o_wt_2_2_ready,
  output     [31:0]   io_o_wt_2_2_payload,
  output              io_o_wt_2_3_valid,
  input               io_o_wt_2_3_ready,
  output     [31:0]   io_o_wt_2_3_payload,
  output              io_o_wt_2_4_valid,
  input               io_o_wt_2_4_ready,
  output     [31:0]   io_o_wt_2_4_payload,
  output              io_o_wt_2_5_valid,
  input               io_o_wt_2_5_ready,
  output     [31:0]   io_o_wt_2_5_payload,
  output              io_o_wt_2_6_valid,
  input               io_o_wt_2_6_ready,
  output     [31:0]   io_o_wt_2_6_payload,
  output              io_o_wt_2_7_valid,
  input               io_o_wt_2_7_ready,
  output     [31:0]   io_o_wt_2_7_payload,
  output              io_o_wt_3_0_valid,
  input               io_o_wt_3_0_ready,
  output     [31:0]   io_o_wt_3_0_payload,
  output              io_o_wt_3_1_valid,
  input               io_o_wt_3_1_ready,
  output     [31:0]   io_o_wt_3_1_payload,
  output              io_o_wt_3_2_valid,
  input               io_o_wt_3_2_ready,
  output     [31:0]   io_o_wt_3_2_payload,
  output              io_o_wt_3_3_valid,
  input               io_o_wt_3_3_ready,
  output     [31:0]   io_o_wt_3_3_payload,
  output              io_o_wt_3_4_valid,
  input               io_o_wt_3_4_ready,
  output     [31:0]   io_o_wt_3_4_payload,
  output              io_o_wt_3_5_valid,
  input               io_o_wt_3_5_ready,
  output     [31:0]   io_o_wt_3_5_payload,
  output              io_o_wt_3_6_valid,
  input               io_o_wt_3_6_ready,
  output     [31:0]   io_o_wt_3_6_payload,
  output              io_o_wt_3_7_valid,
  input               io_o_wt_3_7_ready,
  output     [31:0]   io_o_wt_3_7_payload,
  output              io_o_wt_4_0_valid,
  input               io_o_wt_4_0_ready,
  output     [31:0]   io_o_wt_4_0_payload,
  output              io_o_wt_4_1_valid,
  input               io_o_wt_4_1_ready,
  output     [31:0]   io_o_wt_4_1_payload,
  output              io_o_wt_4_2_valid,
  input               io_o_wt_4_2_ready,
  output     [31:0]   io_o_wt_4_2_payload,
  output              io_o_wt_4_3_valid,
  input               io_o_wt_4_3_ready,
  output     [31:0]   io_o_wt_4_3_payload,
  output              io_o_wt_4_4_valid,
  input               io_o_wt_4_4_ready,
  output     [31:0]   io_o_wt_4_4_payload,
  output              io_o_wt_4_5_valid,
  input               io_o_wt_4_5_ready,
  output     [31:0]   io_o_wt_4_5_payload,
  output              io_o_wt_4_6_valid,
  input               io_o_wt_4_6_ready,
  output     [31:0]   io_o_wt_4_6_payload,
  output              io_o_wt_4_7_valid,
  input               io_o_wt_4_7_ready,
  output     [31:0]   io_o_wt_4_7_payload,
  output              io_o_wt_5_0_valid,
  input               io_o_wt_5_0_ready,
  output     [31:0]   io_o_wt_5_0_payload,
  output              io_o_wt_5_1_valid,
  input               io_o_wt_5_1_ready,
  output     [31:0]   io_o_wt_5_1_payload,
  output              io_o_wt_5_2_valid,
  input               io_o_wt_5_2_ready,
  output     [31:0]   io_o_wt_5_2_payload,
  output              io_o_wt_5_3_valid,
  input               io_o_wt_5_3_ready,
  output     [31:0]   io_o_wt_5_3_payload,
  output              io_o_wt_5_4_valid,
  input               io_o_wt_5_4_ready,
  output     [31:0]   io_o_wt_5_4_payload,
  output              io_o_wt_5_5_valid,
  input               io_o_wt_5_5_ready,
  output     [31:0]   io_o_wt_5_5_payload,
  output              io_o_wt_5_6_valid,
  input               io_o_wt_5_6_ready,
  output     [31:0]   io_o_wt_5_6_payload,
  output              io_o_wt_5_7_valid,
  input               io_o_wt_5_7_ready,
  output     [31:0]   io_o_wt_5_7_payload,
  output              io_o_wt_6_0_valid,
  input               io_o_wt_6_0_ready,
  output     [31:0]   io_o_wt_6_0_payload,
  output              io_o_wt_6_1_valid,
  input               io_o_wt_6_1_ready,
  output     [31:0]   io_o_wt_6_1_payload,
  output              io_o_wt_6_2_valid,
  input               io_o_wt_6_2_ready,
  output     [31:0]   io_o_wt_6_2_payload,
  output              io_o_wt_6_3_valid,
  input               io_o_wt_6_3_ready,
  output     [31:0]   io_o_wt_6_3_payload,
  output              io_o_wt_6_4_valid,
  input               io_o_wt_6_4_ready,
  output     [31:0]   io_o_wt_6_4_payload,
  output              io_o_wt_6_5_valid,
  input               io_o_wt_6_5_ready,
  output     [31:0]   io_o_wt_6_5_payload,
  output              io_o_wt_6_6_valid,
  input               io_o_wt_6_6_ready,
  output     [31:0]   io_o_wt_6_6_payload,
  output              io_o_wt_6_7_valid,
  input               io_o_wt_6_7_ready,
  output     [31:0]   io_o_wt_6_7_payload,
  output              io_o_wt_7_0_valid,
  input               io_o_wt_7_0_ready,
  output     [31:0]   io_o_wt_7_0_payload,
  output              io_o_wt_7_1_valid,
  input               io_o_wt_7_1_ready,
  output     [31:0]   io_o_wt_7_1_payload,
  output              io_o_wt_7_2_valid,
  input               io_o_wt_7_2_ready,
  output     [31:0]   io_o_wt_7_2_payload,
  output              io_o_wt_7_3_valid,
  input               io_o_wt_7_3_ready,
  output     [31:0]   io_o_wt_7_3_payload,
  output              io_o_wt_7_4_valid,
  input               io_o_wt_7_4_ready,
  output     [31:0]   io_o_wt_7_4_payload,
  output              io_o_wt_7_5_valid,
  input               io_o_wt_7_5_ready,
  output     [31:0]   io_o_wt_7_5_payload,
  output              io_o_wt_7_6_valid,
  input               io_o_wt_7_6_ready,
  output     [31:0]   io_o_wt_7_6_payload,
  output              io_o_wt_7_7_valid,
  input               io_o_wt_7_7_ready,
  output     [31:0]   io_o_wt_7_7_payload
);
  wire                temp_ft_0_valid;
  wire                temp_ft_0_ready;
  wire       [31:0]   temp_ft_0_payload;
  wire                temp_ft_1_valid;
  wire                temp_ft_1_ready;
  wire       [31:0]   temp_ft_1_payload;
  wire                temp_ft_2_valid;
  wire                temp_ft_2_ready;
  wire       [31:0]   temp_ft_2_payload;
  wire                temp_ft_3_valid;
  wire                temp_ft_3_ready;
  wire       [31:0]   temp_ft_3_payload;
  wire                temp_ft_4_valid;
  wire                temp_ft_4_ready;
  wire       [31:0]   temp_ft_4_payload;
  wire                temp_ft_5_valid;
  wire                temp_ft_5_ready;
  wire       [31:0]   temp_ft_5_payload;
  wire                temp_ft_6_valid;
  wire                temp_ft_6_ready;
  wire       [31:0]   temp_ft_6_payload;
  wire                temp_ft_7_valid;
  wire                temp_ft_7_ready;
  wire       [31:0]   temp_ft_7_payload;
  wire                temp_wt_0_0_valid;
  wire                temp_wt_0_0_ready;
  wire       [31:0]   temp_wt_0_0_payload;
  wire                temp_wt_0_1_valid;
  wire                temp_wt_0_1_ready;
  wire       [31:0]   temp_wt_0_1_payload;
  wire                temp_wt_0_2_valid;
  wire                temp_wt_0_2_ready;
  wire       [31:0]   temp_wt_0_2_payload;
  wire                temp_wt_0_3_valid;
  wire                temp_wt_0_3_ready;
  wire       [31:0]   temp_wt_0_3_payload;
  wire                temp_wt_0_4_valid;
  wire                temp_wt_0_4_ready;
  wire       [31:0]   temp_wt_0_4_payload;
  wire                temp_wt_0_5_valid;
  wire                temp_wt_0_5_ready;
  wire       [31:0]   temp_wt_0_5_payload;
  wire                temp_wt_0_6_valid;
  wire                temp_wt_0_6_ready;
  wire       [31:0]   temp_wt_0_6_payload;
  wire                temp_wt_0_7_valid;
  wire                temp_wt_0_7_ready;
  wire       [31:0]   temp_wt_0_7_payload;
  wire                temp_wt_1_0_valid;
  wire                temp_wt_1_0_ready;
  wire       [31:0]   temp_wt_1_0_payload;
  wire                temp_wt_1_1_valid;
  wire                temp_wt_1_1_ready;
  wire       [31:0]   temp_wt_1_1_payload;
  wire                temp_wt_1_2_valid;
  wire                temp_wt_1_2_ready;
  wire       [31:0]   temp_wt_1_2_payload;
  wire                temp_wt_1_3_valid;
  wire                temp_wt_1_3_ready;
  wire       [31:0]   temp_wt_1_3_payload;
  wire                temp_wt_1_4_valid;
  wire                temp_wt_1_4_ready;
  wire       [31:0]   temp_wt_1_4_payload;
  wire                temp_wt_1_5_valid;
  wire                temp_wt_1_5_ready;
  wire       [31:0]   temp_wt_1_5_payload;
  wire                temp_wt_1_6_valid;
  wire                temp_wt_1_6_ready;
  wire       [31:0]   temp_wt_1_6_payload;
  wire                temp_wt_1_7_valid;
  wire                temp_wt_1_7_ready;
  wire       [31:0]   temp_wt_1_7_payload;
  wire                temp_wt_2_0_valid;
  wire                temp_wt_2_0_ready;
  wire       [31:0]   temp_wt_2_0_payload;
  wire                temp_wt_2_1_valid;
  wire                temp_wt_2_1_ready;
  wire       [31:0]   temp_wt_2_1_payload;
  wire                temp_wt_2_2_valid;
  wire                temp_wt_2_2_ready;
  wire       [31:0]   temp_wt_2_2_payload;
  wire                temp_wt_2_3_valid;
  wire                temp_wt_2_3_ready;
  wire       [31:0]   temp_wt_2_3_payload;
  wire                temp_wt_2_4_valid;
  wire                temp_wt_2_4_ready;
  wire       [31:0]   temp_wt_2_4_payload;
  wire                temp_wt_2_5_valid;
  wire                temp_wt_2_5_ready;
  wire       [31:0]   temp_wt_2_5_payload;
  wire                temp_wt_2_6_valid;
  wire                temp_wt_2_6_ready;
  wire       [31:0]   temp_wt_2_6_payload;
  wire                temp_wt_2_7_valid;
  wire                temp_wt_2_7_ready;
  wire       [31:0]   temp_wt_2_7_payload;
  wire                temp_wt_3_0_valid;
  wire                temp_wt_3_0_ready;
  wire       [31:0]   temp_wt_3_0_payload;
  wire                temp_wt_3_1_valid;
  wire                temp_wt_3_1_ready;
  wire       [31:0]   temp_wt_3_1_payload;
  wire                temp_wt_3_2_valid;
  wire                temp_wt_3_2_ready;
  wire       [31:0]   temp_wt_3_2_payload;
  wire                temp_wt_3_3_valid;
  wire                temp_wt_3_3_ready;
  wire       [31:0]   temp_wt_3_3_payload;
  wire                temp_wt_3_4_valid;
  wire                temp_wt_3_4_ready;
  wire       [31:0]   temp_wt_3_4_payload;
  wire                temp_wt_3_5_valid;
  wire                temp_wt_3_5_ready;
  wire       [31:0]   temp_wt_3_5_payload;
  wire                temp_wt_3_6_valid;
  wire                temp_wt_3_6_ready;
  wire       [31:0]   temp_wt_3_6_payload;
  wire                temp_wt_3_7_valid;
  wire                temp_wt_3_7_ready;
  wire       [31:0]   temp_wt_3_7_payload;
  wire                temp_wt_4_0_valid;
  wire                temp_wt_4_0_ready;
  wire       [31:0]   temp_wt_4_0_payload;
  wire                temp_wt_4_1_valid;
  wire                temp_wt_4_1_ready;
  wire       [31:0]   temp_wt_4_1_payload;
  wire                temp_wt_4_2_valid;
  wire                temp_wt_4_2_ready;
  wire       [31:0]   temp_wt_4_2_payload;
  wire                temp_wt_4_3_valid;
  wire                temp_wt_4_3_ready;
  wire       [31:0]   temp_wt_4_3_payload;
  wire                temp_wt_4_4_valid;
  wire                temp_wt_4_4_ready;
  wire       [31:0]   temp_wt_4_4_payload;
  wire                temp_wt_4_5_valid;
  wire                temp_wt_4_5_ready;
  wire       [31:0]   temp_wt_4_5_payload;
  wire                temp_wt_4_6_valid;
  wire                temp_wt_4_6_ready;
  wire       [31:0]   temp_wt_4_6_payload;
  wire                temp_wt_4_7_valid;
  wire                temp_wt_4_7_ready;
  wire       [31:0]   temp_wt_4_7_payload;
  wire                temp_wt_5_0_valid;
  wire                temp_wt_5_0_ready;
  wire       [31:0]   temp_wt_5_0_payload;
  wire                temp_wt_5_1_valid;
  wire                temp_wt_5_1_ready;
  wire       [31:0]   temp_wt_5_1_payload;
  wire                temp_wt_5_2_valid;
  wire                temp_wt_5_2_ready;
  wire       [31:0]   temp_wt_5_2_payload;
  wire                temp_wt_5_3_valid;
  wire                temp_wt_5_3_ready;
  wire       [31:0]   temp_wt_5_3_payload;
  wire                temp_wt_5_4_valid;
  wire                temp_wt_5_4_ready;
  wire       [31:0]   temp_wt_5_4_payload;
  wire                temp_wt_5_5_valid;
  wire                temp_wt_5_5_ready;
  wire       [31:0]   temp_wt_5_5_payload;
  wire                temp_wt_5_6_valid;
  wire                temp_wt_5_6_ready;
  wire       [31:0]   temp_wt_5_6_payload;
  wire                temp_wt_5_7_valid;
  wire                temp_wt_5_7_ready;
  wire       [31:0]   temp_wt_5_7_payload;
  wire                temp_wt_6_0_valid;
  wire                temp_wt_6_0_ready;
  wire       [31:0]   temp_wt_6_0_payload;
  wire                temp_wt_6_1_valid;
  wire                temp_wt_6_1_ready;
  wire       [31:0]   temp_wt_6_1_payload;
  wire                temp_wt_6_2_valid;
  wire                temp_wt_6_2_ready;
  wire       [31:0]   temp_wt_6_2_payload;
  wire                temp_wt_6_3_valid;
  wire                temp_wt_6_3_ready;
  wire       [31:0]   temp_wt_6_3_payload;
  wire                temp_wt_6_4_valid;
  wire                temp_wt_6_4_ready;
  wire       [31:0]   temp_wt_6_4_payload;
  wire                temp_wt_6_5_valid;
  wire                temp_wt_6_5_ready;
  wire       [31:0]   temp_wt_6_5_payload;
  wire                temp_wt_6_6_valid;
  wire                temp_wt_6_6_ready;
  wire       [31:0]   temp_wt_6_6_payload;
  wire                temp_wt_6_7_valid;
  wire                temp_wt_6_7_ready;
  wire       [31:0]   temp_wt_6_7_payload;
  wire                temp_wt_7_0_valid;
  wire                temp_wt_7_0_ready;
  wire       [31:0]   temp_wt_7_0_payload;
  wire                temp_wt_7_1_valid;
  wire                temp_wt_7_1_ready;
  wire       [31:0]   temp_wt_7_1_payload;
  wire                temp_wt_7_2_valid;
  wire                temp_wt_7_2_ready;
  wire       [31:0]   temp_wt_7_2_payload;
  wire                temp_wt_7_3_valid;
  wire                temp_wt_7_3_ready;
  wire       [31:0]   temp_wt_7_3_payload;
  wire                temp_wt_7_4_valid;
  wire                temp_wt_7_4_ready;
  wire       [31:0]   temp_wt_7_4_payload;
  wire                temp_wt_7_5_valid;
  wire                temp_wt_7_5_ready;
  wire       [31:0]   temp_wt_7_5_payload;
  wire                temp_wt_7_6_valid;
  wire                temp_wt_7_6_ready;
  wire       [31:0]   temp_wt_7_6_payload;
  wire                temp_wt_7_7_valid;
  wire                temp_wt_7_7_ready;
  wire       [31:0]   temp_wt_7_7_payload;

  assign io_o_ft_0_valid = temp_ft_0_valid;
  assign temp_ft_0_ready = io_o_ft_0_ready;
  assign io_o_ft_0_payload = temp_ft_0_payload;
  assign io_o_ft_1_valid = temp_ft_1_valid;
  assign temp_ft_1_ready = io_o_ft_1_ready;
  assign io_o_ft_1_payload = temp_ft_1_payload;
  assign io_o_ft_2_valid = temp_ft_2_valid;
  assign temp_ft_2_ready = io_o_ft_2_ready;
  assign io_o_ft_2_payload = temp_ft_2_payload;
  assign io_o_ft_3_valid = temp_ft_3_valid;
  assign temp_ft_3_ready = io_o_ft_3_ready;
  assign io_o_ft_3_payload = temp_ft_3_payload;
  assign io_o_ft_4_valid = temp_ft_4_valid;
  assign temp_ft_4_ready = io_o_ft_4_ready;
  assign io_o_ft_4_payload = temp_ft_4_payload;
  assign io_o_ft_5_valid = temp_ft_5_valid;
  assign temp_ft_5_ready = io_o_ft_5_ready;
  assign io_o_ft_5_payload = temp_ft_5_payload;
  assign io_o_ft_6_valid = temp_ft_6_valid;
  assign temp_ft_6_ready = io_o_ft_6_ready;
  assign io_o_ft_6_payload = temp_ft_6_payload;
  assign io_o_ft_7_valid = temp_ft_7_valid;
  assign temp_ft_7_ready = io_o_ft_7_ready;
  assign io_o_ft_7_payload = temp_ft_7_payload;
  assign io_o_wt_0_0_valid = temp_wt_0_0_valid;
  assign temp_wt_0_0_ready = io_o_wt_0_0_ready;
  assign io_o_wt_0_0_payload = temp_wt_0_0_payload;
  assign io_o_wt_0_1_valid = temp_wt_0_1_valid;
  assign temp_wt_0_1_ready = io_o_wt_0_1_ready;
  assign io_o_wt_0_1_payload = temp_wt_0_1_payload;
  assign io_o_wt_0_2_valid = temp_wt_0_2_valid;
  assign temp_wt_0_2_ready = io_o_wt_0_2_ready;
  assign io_o_wt_0_2_payload = temp_wt_0_2_payload;
  assign io_o_wt_0_3_valid = temp_wt_0_3_valid;
  assign temp_wt_0_3_ready = io_o_wt_0_3_ready;
  assign io_o_wt_0_3_payload = temp_wt_0_3_payload;
  assign io_o_wt_0_4_valid = temp_wt_0_4_valid;
  assign temp_wt_0_4_ready = io_o_wt_0_4_ready;
  assign io_o_wt_0_4_payload = temp_wt_0_4_payload;
  assign io_o_wt_0_5_valid = temp_wt_0_5_valid;
  assign temp_wt_0_5_ready = io_o_wt_0_5_ready;
  assign io_o_wt_0_5_payload = temp_wt_0_5_payload;
  assign io_o_wt_0_6_valid = temp_wt_0_6_valid;
  assign temp_wt_0_6_ready = io_o_wt_0_6_ready;
  assign io_o_wt_0_6_payload = temp_wt_0_6_payload;
  assign io_o_wt_0_7_valid = temp_wt_0_7_valid;
  assign temp_wt_0_7_ready = io_o_wt_0_7_ready;
  assign io_o_wt_0_7_payload = temp_wt_0_7_payload;
  assign io_o_wt_1_0_valid = temp_wt_1_0_valid;
  assign temp_wt_1_0_ready = io_o_wt_1_0_ready;
  assign io_o_wt_1_0_payload = temp_wt_1_0_payload;
  assign io_o_wt_1_1_valid = temp_wt_1_1_valid;
  assign temp_wt_1_1_ready = io_o_wt_1_1_ready;
  assign io_o_wt_1_1_payload = temp_wt_1_1_payload;
  assign io_o_wt_1_2_valid = temp_wt_1_2_valid;
  assign temp_wt_1_2_ready = io_o_wt_1_2_ready;
  assign io_o_wt_1_2_payload = temp_wt_1_2_payload;
  assign io_o_wt_1_3_valid = temp_wt_1_3_valid;
  assign temp_wt_1_3_ready = io_o_wt_1_3_ready;
  assign io_o_wt_1_3_payload = temp_wt_1_3_payload;
  assign io_o_wt_1_4_valid = temp_wt_1_4_valid;
  assign temp_wt_1_4_ready = io_o_wt_1_4_ready;
  assign io_o_wt_1_4_payload = temp_wt_1_4_payload;
  assign io_o_wt_1_5_valid = temp_wt_1_5_valid;
  assign temp_wt_1_5_ready = io_o_wt_1_5_ready;
  assign io_o_wt_1_5_payload = temp_wt_1_5_payload;
  assign io_o_wt_1_6_valid = temp_wt_1_6_valid;
  assign temp_wt_1_6_ready = io_o_wt_1_6_ready;
  assign io_o_wt_1_6_payload = temp_wt_1_6_payload;
  assign io_o_wt_1_7_valid = temp_wt_1_7_valid;
  assign temp_wt_1_7_ready = io_o_wt_1_7_ready;
  assign io_o_wt_1_7_payload = temp_wt_1_7_payload;
  assign io_o_wt_2_0_valid = temp_wt_2_0_valid;
  assign temp_wt_2_0_ready = io_o_wt_2_0_ready;
  assign io_o_wt_2_0_payload = temp_wt_2_0_payload;
  assign io_o_wt_2_1_valid = temp_wt_2_1_valid;
  assign temp_wt_2_1_ready = io_o_wt_2_1_ready;
  assign io_o_wt_2_1_payload = temp_wt_2_1_payload;
  assign io_o_wt_2_2_valid = temp_wt_2_2_valid;
  assign temp_wt_2_2_ready = io_o_wt_2_2_ready;
  assign io_o_wt_2_2_payload = temp_wt_2_2_payload;
  assign io_o_wt_2_3_valid = temp_wt_2_3_valid;
  assign temp_wt_2_3_ready = io_o_wt_2_3_ready;
  assign io_o_wt_2_3_payload = temp_wt_2_3_payload;
  assign io_o_wt_2_4_valid = temp_wt_2_4_valid;
  assign temp_wt_2_4_ready = io_o_wt_2_4_ready;
  assign io_o_wt_2_4_payload = temp_wt_2_4_payload;
  assign io_o_wt_2_5_valid = temp_wt_2_5_valid;
  assign temp_wt_2_5_ready = io_o_wt_2_5_ready;
  assign io_o_wt_2_5_payload = temp_wt_2_5_payload;
  assign io_o_wt_2_6_valid = temp_wt_2_6_valid;
  assign temp_wt_2_6_ready = io_o_wt_2_6_ready;
  assign io_o_wt_2_6_payload = temp_wt_2_6_payload;
  assign io_o_wt_2_7_valid = temp_wt_2_7_valid;
  assign temp_wt_2_7_ready = io_o_wt_2_7_ready;
  assign io_o_wt_2_7_payload = temp_wt_2_7_payload;
  assign io_o_wt_3_0_valid = temp_wt_3_0_valid;
  assign temp_wt_3_0_ready = io_o_wt_3_0_ready;
  assign io_o_wt_3_0_payload = temp_wt_3_0_payload;
  assign io_o_wt_3_1_valid = temp_wt_3_1_valid;
  assign temp_wt_3_1_ready = io_o_wt_3_1_ready;
  assign io_o_wt_3_1_payload = temp_wt_3_1_payload;
  assign io_o_wt_3_2_valid = temp_wt_3_2_valid;
  assign temp_wt_3_2_ready = io_o_wt_3_2_ready;
  assign io_o_wt_3_2_payload = temp_wt_3_2_payload;
  assign io_o_wt_3_3_valid = temp_wt_3_3_valid;
  assign temp_wt_3_3_ready = io_o_wt_3_3_ready;
  assign io_o_wt_3_3_payload = temp_wt_3_3_payload;
  assign io_o_wt_3_4_valid = temp_wt_3_4_valid;
  assign temp_wt_3_4_ready = io_o_wt_3_4_ready;
  assign io_o_wt_3_4_payload = temp_wt_3_4_payload;
  assign io_o_wt_3_5_valid = temp_wt_3_5_valid;
  assign temp_wt_3_5_ready = io_o_wt_3_5_ready;
  assign io_o_wt_3_5_payload = temp_wt_3_5_payload;
  assign io_o_wt_3_6_valid = temp_wt_3_6_valid;
  assign temp_wt_3_6_ready = io_o_wt_3_6_ready;
  assign io_o_wt_3_6_payload = temp_wt_3_6_payload;
  assign io_o_wt_3_7_valid = temp_wt_3_7_valid;
  assign temp_wt_3_7_ready = io_o_wt_3_7_ready;
  assign io_o_wt_3_7_payload = temp_wt_3_7_payload;
  assign io_o_wt_4_0_valid = temp_wt_4_0_valid;
  assign temp_wt_4_0_ready = io_o_wt_4_0_ready;
  assign io_o_wt_4_0_payload = temp_wt_4_0_payload;
  assign io_o_wt_4_1_valid = temp_wt_4_1_valid;
  assign temp_wt_4_1_ready = io_o_wt_4_1_ready;
  assign io_o_wt_4_1_payload = temp_wt_4_1_payload;
  assign io_o_wt_4_2_valid = temp_wt_4_2_valid;
  assign temp_wt_4_2_ready = io_o_wt_4_2_ready;
  assign io_o_wt_4_2_payload = temp_wt_4_2_payload;
  assign io_o_wt_4_3_valid = temp_wt_4_3_valid;
  assign temp_wt_4_3_ready = io_o_wt_4_3_ready;
  assign io_o_wt_4_3_payload = temp_wt_4_3_payload;
  assign io_o_wt_4_4_valid = temp_wt_4_4_valid;
  assign temp_wt_4_4_ready = io_o_wt_4_4_ready;
  assign io_o_wt_4_4_payload = temp_wt_4_4_payload;
  assign io_o_wt_4_5_valid = temp_wt_4_5_valid;
  assign temp_wt_4_5_ready = io_o_wt_4_5_ready;
  assign io_o_wt_4_5_payload = temp_wt_4_5_payload;
  assign io_o_wt_4_6_valid = temp_wt_4_6_valid;
  assign temp_wt_4_6_ready = io_o_wt_4_6_ready;
  assign io_o_wt_4_6_payload = temp_wt_4_6_payload;
  assign io_o_wt_4_7_valid = temp_wt_4_7_valid;
  assign temp_wt_4_7_ready = io_o_wt_4_7_ready;
  assign io_o_wt_4_7_payload = temp_wt_4_7_payload;
  assign io_o_wt_5_0_valid = temp_wt_5_0_valid;
  assign temp_wt_5_0_ready = io_o_wt_5_0_ready;
  assign io_o_wt_5_0_payload = temp_wt_5_0_payload;
  assign io_o_wt_5_1_valid = temp_wt_5_1_valid;
  assign temp_wt_5_1_ready = io_o_wt_5_1_ready;
  assign io_o_wt_5_1_payload = temp_wt_5_1_payload;
  assign io_o_wt_5_2_valid = temp_wt_5_2_valid;
  assign temp_wt_5_2_ready = io_o_wt_5_2_ready;
  assign io_o_wt_5_2_payload = temp_wt_5_2_payload;
  assign io_o_wt_5_3_valid = temp_wt_5_3_valid;
  assign temp_wt_5_3_ready = io_o_wt_5_3_ready;
  assign io_o_wt_5_3_payload = temp_wt_5_3_payload;
  assign io_o_wt_5_4_valid = temp_wt_5_4_valid;
  assign temp_wt_5_4_ready = io_o_wt_5_4_ready;
  assign io_o_wt_5_4_payload = temp_wt_5_4_payload;
  assign io_o_wt_5_5_valid = temp_wt_5_5_valid;
  assign temp_wt_5_5_ready = io_o_wt_5_5_ready;
  assign io_o_wt_5_5_payload = temp_wt_5_5_payload;
  assign io_o_wt_5_6_valid = temp_wt_5_6_valid;
  assign temp_wt_5_6_ready = io_o_wt_5_6_ready;
  assign io_o_wt_5_6_payload = temp_wt_5_6_payload;
  assign io_o_wt_5_7_valid = temp_wt_5_7_valid;
  assign temp_wt_5_7_ready = io_o_wt_5_7_ready;
  assign io_o_wt_5_7_payload = temp_wt_5_7_payload;
  assign io_o_wt_6_0_valid = temp_wt_6_0_valid;
  assign temp_wt_6_0_ready = io_o_wt_6_0_ready;
  assign io_o_wt_6_0_payload = temp_wt_6_0_payload;
  assign io_o_wt_6_1_valid = temp_wt_6_1_valid;
  assign temp_wt_6_1_ready = io_o_wt_6_1_ready;
  assign io_o_wt_6_1_payload = temp_wt_6_1_payload;
  assign io_o_wt_6_2_valid = temp_wt_6_2_valid;
  assign temp_wt_6_2_ready = io_o_wt_6_2_ready;
  assign io_o_wt_6_2_payload = temp_wt_6_2_payload;
  assign io_o_wt_6_3_valid = temp_wt_6_3_valid;
  assign temp_wt_6_3_ready = io_o_wt_6_3_ready;
  assign io_o_wt_6_3_payload = temp_wt_6_3_payload;
  assign io_o_wt_6_4_valid = temp_wt_6_4_valid;
  assign temp_wt_6_4_ready = io_o_wt_6_4_ready;
  assign io_o_wt_6_4_payload = temp_wt_6_4_payload;
  assign io_o_wt_6_5_valid = temp_wt_6_5_valid;
  assign temp_wt_6_5_ready = io_o_wt_6_5_ready;
  assign io_o_wt_6_5_payload = temp_wt_6_5_payload;
  assign io_o_wt_6_6_valid = temp_wt_6_6_valid;
  assign temp_wt_6_6_ready = io_o_wt_6_6_ready;
  assign io_o_wt_6_6_payload = temp_wt_6_6_payload;
  assign io_o_wt_6_7_valid = temp_wt_6_7_valid;
  assign temp_wt_6_7_ready = io_o_wt_6_7_ready;
  assign io_o_wt_6_7_payload = temp_wt_6_7_payload;
  assign io_o_wt_7_0_valid = temp_wt_7_0_valid;
  assign temp_wt_7_0_ready = io_o_wt_7_0_ready;
  assign io_o_wt_7_0_payload = temp_wt_7_0_payload;
  assign io_o_wt_7_1_valid = temp_wt_7_1_valid;
  assign temp_wt_7_1_ready = io_o_wt_7_1_ready;
  assign io_o_wt_7_1_payload = temp_wt_7_1_payload;
  assign io_o_wt_7_2_valid = temp_wt_7_2_valid;
  assign temp_wt_7_2_ready = io_o_wt_7_2_ready;
  assign io_o_wt_7_2_payload = temp_wt_7_2_payload;
  assign io_o_wt_7_3_valid = temp_wt_7_3_valid;
  assign temp_wt_7_3_ready = io_o_wt_7_3_ready;
  assign io_o_wt_7_3_payload = temp_wt_7_3_payload;
  assign io_o_wt_7_4_valid = temp_wt_7_4_valid;
  assign temp_wt_7_4_ready = io_o_wt_7_4_ready;
  assign io_o_wt_7_4_payload = temp_wt_7_4_payload;
  assign io_o_wt_7_5_valid = temp_wt_7_5_valid;
  assign temp_wt_7_5_ready = io_o_wt_7_5_ready;
  assign io_o_wt_7_5_payload = temp_wt_7_5_payload;
  assign io_o_wt_7_6_valid = temp_wt_7_6_valid;
  assign temp_wt_7_6_ready = io_o_wt_7_6_ready;
  assign io_o_wt_7_6_payload = temp_wt_7_6_payload;
  assign io_o_wt_7_7_valid = temp_wt_7_7_valid;
  assign temp_wt_7_7_ready = io_o_wt_7_7_ready;
  assign io_o_wt_7_7_payload = temp_wt_7_7_payload;
  assign io_i_ft_ready = (((((((temp_ft_0_ready && temp_ft_1_ready) && temp_ft_2_ready) && temp_ft_3_ready) && temp_ft_4_ready) && temp_ft_5_ready) && temp_ft_6_ready) && temp_ft_7_ready);
  assign temp_ft_0_valid = io_i_ft_valid;
  assign temp_ft_0_payload = io_i_ft_payload[31 : 0];
  assign temp_ft_1_valid = io_i_ft_valid;
  assign temp_ft_1_payload = io_i_ft_payload[63 : 32];
  assign temp_ft_2_valid = io_i_ft_valid;
  assign temp_ft_2_payload = io_i_ft_payload[95 : 64];
  assign temp_ft_3_valid = io_i_ft_valid;
  assign temp_ft_3_payload = io_i_ft_payload[127 : 96];
  assign temp_ft_4_valid = io_i_ft_valid;
  assign temp_ft_4_payload = io_i_ft_payload[159 : 128];
  assign temp_ft_5_valid = io_i_ft_valid;
  assign temp_ft_5_payload = io_i_ft_payload[191 : 160];
  assign temp_ft_6_valid = io_i_ft_valid;
  assign temp_ft_6_payload = io_i_ft_payload[223 : 192];
  assign temp_ft_7_valid = io_i_ft_valid;
  assign temp_ft_7_payload = io_i_ft_payload[255 : 224];
  assign temp_wt_0_0_payload = io_i_wt_0_payload[31 : 0];
  assign temp_wt_0_0_valid = io_i_wt_0_valid;
  assign temp_wt_0_1_payload = io_i_wt_0_payload[63 : 32];
  assign temp_wt_0_1_valid = io_i_wt_0_valid;
  assign temp_wt_0_2_payload = io_i_wt_0_payload[95 : 64];
  assign temp_wt_0_2_valid = io_i_wt_0_valid;
  assign temp_wt_0_3_payload = io_i_wt_0_payload[127 : 96];
  assign temp_wt_0_3_valid = io_i_wt_0_valid;
  assign temp_wt_0_4_payload = io_i_wt_0_payload[159 : 128];
  assign temp_wt_0_4_valid = io_i_wt_0_valid;
  assign temp_wt_0_5_payload = io_i_wt_0_payload[191 : 160];
  assign temp_wt_0_5_valid = io_i_wt_0_valid;
  assign temp_wt_0_6_payload = io_i_wt_0_payload[223 : 192];
  assign temp_wt_0_6_valid = io_i_wt_0_valid;
  assign temp_wt_0_7_payload = io_i_wt_0_payload[255 : 224];
  assign temp_wt_0_7_valid = io_i_wt_0_valid;
  assign io_i_wt_0_ready = (((((((temp_wt_0_0_ready && temp_wt_0_1_ready) && temp_wt_0_2_ready) && temp_wt_0_3_ready) && temp_wt_0_4_ready) && temp_wt_0_5_ready) && temp_wt_0_6_ready) && temp_wt_0_7_ready);
  assign temp_wt_1_0_payload = io_i_wt_1_payload[31 : 0];
  assign temp_wt_1_0_valid = io_i_wt_1_valid;
  assign temp_wt_1_1_payload = io_i_wt_1_payload[63 : 32];
  assign temp_wt_1_1_valid = io_i_wt_1_valid;
  assign temp_wt_1_2_payload = io_i_wt_1_payload[95 : 64];
  assign temp_wt_1_2_valid = io_i_wt_1_valid;
  assign temp_wt_1_3_payload = io_i_wt_1_payload[127 : 96];
  assign temp_wt_1_3_valid = io_i_wt_1_valid;
  assign temp_wt_1_4_payload = io_i_wt_1_payload[159 : 128];
  assign temp_wt_1_4_valid = io_i_wt_1_valid;
  assign temp_wt_1_5_payload = io_i_wt_1_payload[191 : 160];
  assign temp_wt_1_5_valid = io_i_wt_1_valid;
  assign temp_wt_1_6_payload = io_i_wt_1_payload[223 : 192];
  assign temp_wt_1_6_valid = io_i_wt_1_valid;
  assign temp_wt_1_7_payload = io_i_wt_1_payload[255 : 224];
  assign temp_wt_1_7_valid = io_i_wt_1_valid;
  assign io_i_wt_1_ready = (((((((temp_wt_1_0_ready && temp_wt_1_1_ready) && temp_wt_1_2_ready) && temp_wt_1_3_ready) && temp_wt_1_4_ready) && temp_wt_1_5_ready) && temp_wt_1_6_ready) && temp_wt_1_7_ready);
  assign temp_wt_2_0_payload = io_i_wt_2_payload[31 : 0];
  assign temp_wt_2_0_valid = io_i_wt_2_valid;
  assign temp_wt_2_1_payload = io_i_wt_2_payload[63 : 32];
  assign temp_wt_2_1_valid = io_i_wt_2_valid;
  assign temp_wt_2_2_payload = io_i_wt_2_payload[95 : 64];
  assign temp_wt_2_2_valid = io_i_wt_2_valid;
  assign temp_wt_2_3_payload = io_i_wt_2_payload[127 : 96];
  assign temp_wt_2_3_valid = io_i_wt_2_valid;
  assign temp_wt_2_4_payload = io_i_wt_2_payload[159 : 128];
  assign temp_wt_2_4_valid = io_i_wt_2_valid;
  assign temp_wt_2_5_payload = io_i_wt_2_payload[191 : 160];
  assign temp_wt_2_5_valid = io_i_wt_2_valid;
  assign temp_wt_2_6_payload = io_i_wt_2_payload[223 : 192];
  assign temp_wt_2_6_valid = io_i_wt_2_valid;
  assign temp_wt_2_7_payload = io_i_wt_2_payload[255 : 224];
  assign temp_wt_2_7_valid = io_i_wt_2_valid;
  assign io_i_wt_2_ready = (((((((temp_wt_2_0_ready && temp_wt_2_1_ready) && temp_wt_2_2_ready) && temp_wt_2_3_ready) && temp_wt_2_4_ready) && temp_wt_2_5_ready) && temp_wt_2_6_ready) && temp_wt_2_7_ready);
  assign temp_wt_3_0_payload = io_i_wt_3_payload[31 : 0];
  assign temp_wt_3_0_valid = io_i_wt_3_valid;
  assign temp_wt_3_1_payload = io_i_wt_3_payload[63 : 32];
  assign temp_wt_3_1_valid = io_i_wt_3_valid;
  assign temp_wt_3_2_payload = io_i_wt_3_payload[95 : 64];
  assign temp_wt_3_2_valid = io_i_wt_3_valid;
  assign temp_wt_3_3_payload = io_i_wt_3_payload[127 : 96];
  assign temp_wt_3_3_valid = io_i_wt_3_valid;
  assign temp_wt_3_4_payload = io_i_wt_3_payload[159 : 128];
  assign temp_wt_3_4_valid = io_i_wt_3_valid;
  assign temp_wt_3_5_payload = io_i_wt_3_payload[191 : 160];
  assign temp_wt_3_5_valid = io_i_wt_3_valid;
  assign temp_wt_3_6_payload = io_i_wt_3_payload[223 : 192];
  assign temp_wt_3_6_valid = io_i_wt_3_valid;
  assign temp_wt_3_7_payload = io_i_wt_3_payload[255 : 224];
  assign temp_wt_3_7_valid = io_i_wt_3_valid;
  assign io_i_wt_3_ready = (((((((temp_wt_3_0_ready && temp_wt_3_1_ready) && temp_wt_3_2_ready) && temp_wt_3_3_ready) && temp_wt_3_4_ready) && temp_wt_3_5_ready) && temp_wt_3_6_ready) && temp_wt_3_7_ready);
  assign temp_wt_4_0_payload = io_i_wt_4_payload[31 : 0];
  assign temp_wt_4_0_valid = io_i_wt_4_valid;
  assign temp_wt_4_1_payload = io_i_wt_4_payload[63 : 32];
  assign temp_wt_4_1_valid = io_i_wt_4_valid;
  assign temp_wt_4_2_payload = io_i_wt_4_payload[95 : 64];
  assign temp_wt_4_2_valid = io_i_wt_4_valid;
  assign temp_wt_4_3_payload = io_i_wt_4_payload[127 : 96];
  assign temp_wt_4_3_valid = io_i_wt_4_valid;
  assign temp_wt_4_4_payload = io_i_wt_4_payload[159 : 128];
  assign temp_wt_4_4_valid = io_i_wt_4_valid;
  assign temp_wt_4_5_payload = io_i_wt_4_payload[191 : 160];
  assign temp_wt_4_5_valid = io_i_wt_4_valid;
  assign temp_wt_4_6_payload = io_i_wt_4_payload[223 : 192];
  assign temp_wt_4_6_valid = io_i_wt_4_valid;
  assign temp_wt_4_7_payload = io_i_wt_4_payload[255 : 224];
  assign temp_wt_4_7_valid = io_i_wt_4_valid;
  assign io_i_wt_4_ready = (((((((temp_wt_4_0_ready && temp_wt_4_1_ready) && temp_wt_4_2_ready) && temp_wt_4_3_ready) && temp_wt_4_4_ready) && temp_wt_4_5_ready) && temp_wt_4_6_ready) && temp_wt_4_7_ready);
  assign temp_wt_5_0_payload = io_i_wt_5_payload[31 : 0];
  assign temp_wt_5_0_valid = io_i_wt_5_valid;
  assign temp_wt_5_1_payload = io_i_wt_5_payload[63 : 32];
  assign temp_wt_5_1_valid = io_i_wt_5_valid;
  assign temp_wt_5_2_payload = io_i_wt_5_payload[95 : 64];
  assign temp_wt_5_2_valid = io_i_wt_5_valid;
  assign temp_wt_5_3_payload = io_i_wt_5_payload[127 : 96];
  assign temp_wt_5_3_valid = io_i_wt_5_valid;
  assign temp_wt_5_4_payload = io_i_wt_5_payload[159 : 128];
  assign temp_wt_5_4_valid = io_i_wt_5_valid;
  assign temp_wt_5_5_payload = io_i_wt_5_payload[191 : 160];
  assign temp_wt_5_5_valid = io_i_wt_5_valid;
  assign temp_wt_5_6_payload = io_i_wt_5_payload[223 : 192];
  assign temp_wt_5_6_valid = io_i_wt_5_valid;
  assign temp_wt_5_7_payload = io_i_wt_5_payload[255 : 224];
  assign temp_wt_5_7_valid = io_i_wt_5_valid;
  assign io_i_wt_5_ready = (((((((temp_wt_5_0_ready && temp_wt_5_1_ready) && temp_wt_5_2_ready) && temp_wt_5_3_ready) && temp_wt_5_4_ready) && temp_wt_5_5_ready) && temp_wt_5_6_ready) && temp_wt_5_7_ready);
  assign temp_wt_6_0_payload = io_i_wt_6_payload[31 : 0];
  assign temp_wt_6_0_valid = io_i_wt_6_valid;
  assign temp_wt_6_1_payload = io_i_wt_6_payload[63 : 32];
  assign temp_wt_6_1_valid = io_i_wt_6_valid;
  assign temp_wt_6_2_payload = io_i_wt_6_payload[95 : 64];
  assign temp_wt_6_2_valid = io_i_wt_6_valid;
  assign temp_wt_6_3_payload = io_i_wt_6_payload[127 : 96];
  assign temp_wt_6_3_valid = io_i_wt_6_valid;
  assign temp_wt_6_4_payload = io_i_wt_6_payload[159 : 128];
  assign temp_wt_6_4_valid = io_i_wt_6_valid;
  assign temp_wt_6_5_payload = io_i_wt_6_payload[191 : 160];
  assign temp_wt_6_5_valid = io_i_wt_6_valid;
  assign temp_wt_6_6_payload = io_i_wt_6_payload[223 : 192];
  assign temp_wt_6_6_valid = io_i_wt_6_valid;
  assign temp_wt_6_7_payload = io_i_wt_6_payload[255 : 224];
  assign temp_wt_6_7_valid = io_i_wt_6_valid;
  assign io_i_wt_6_ready = (((((((temp_wt_6_0_ready && temp_wt_6_1_ready) && temp_wt_6_2_ready) && temp_wt_6_3_ready) && temp_wt_6_4_ready) && temp_wt_6_5_ready) && temp_wt_6_6_ready) && temp_wt_6_7_ready);
  assign temp_wt_7_0_payload = io_i_wt_7_payload[31 : 0];
  assign temp_wt_7_0_valid = io_i_wt_7_valid;
  assign temp_wt_7_1_payload = io_i_wt_7_payload[63 : 32];
  assign temp_wt_7_1_valid = io_i_wt_7_valid;
  assign temp_wt_7_2_payload = io_i_wt_7_payload[95 : 64];
  assign temp_wt_7_2_valid = io_i_wt_7_valid;
  assign temp_wt_7_3_payload = io_i_wt_7_payload[127 : 96];
  assign temp_wt_7_3_valid = io_i_wt_7_valid;
  assign temp_wt_7_4_payload = io_i_wt_7_payload[159 : 128];
  assign temp_wt_7_4_valid = io_i_wt_7_valid;
  assign temp_wt_7_5_payload = io_i_wt_7_payload[191 : 160];
  assign temp_wt_7_5_valid = io_i_wt_7_valid;
  assign temp_wt_7_6_payload = io_i_wt_7_payload[223 : 192];
  assign temp_wt_7_6_valid = io_i_wt_7_valid;
  assign temp_wt_7_7_payload = io_i_wt_7_payload[255 : 224];
  assign temp_wt_7_7_valid = io_i_wt_7_valid;
  assign io_i_wt_7_ready = (((((((temp_wt_7_0_ready && temp_wt_7_1_ready) && temp_wt_7_2_ready) && temp_wt_7_3_ready) && temp_wt_7_4_ready) && temp_wt_7_5_ready) && temp_wt_7_6_ready) && temp_wt_7_7_ready);

endmodule

module read_req4conv (
  input      [15:0]   cfg_fea_width,
  input      [15:0]   cfg_fea_height,
  input      [15:0]   cfg_fea_channel,
  input      [15:0]   cfg_wt_width,
  input      [15:0]   cfg_wt_height,
  input      [15:0]   cfg_wt_channel,
  input      [15:0]   cfg_kerNum,
  input      [15:0]   cfg_o_width,
  input      [15:0]   cfg_o_height,
  input      [15:0]   cfg_o_channel,
  input      [15:0]   cfg_top_pad,
  input      [15:0]   cfg_bot_pad,
  input      [15:0]   cfg_left_pad,
  input      [15:0]   cfg_right_pad,
  input      [15:0]   cfg_dt_stridex,
  input      [15:0]   cfg_dt_stridey,
  input      [15:0]   cfg_wt_stridex,
  input      [15:0]   cfg_wt_stridey,
  input      [15:0]   cfg_par_acc_cnt,
  output     [31:0]   dt_ramrd_addr,
  input      [255:0]  dt_ramrd_data,
  output reg          dt_ramrd_en,
  output     [31:0]   wt_ramrd_0_addr,
  input      [255:0]  wt_ramrd_0_data,
  output reg          wt_ramrd_0_en,
  output     [31:0]   wt_ramrd_1_addr,
  input      [255:0]  wt_ramrd_1_data,
  output reg          wt_ramrd_1_en,
  output     [31:0]   wt_ramrd_2_addr,
  input      [255:0]  wt_ramrd_2_data,
  output reg          wt_ramrd_2_en,
  output     [31:0]   wt_ramrd_3_addr,
  input      [255:0]  wt_ramrd_3_data,
  output reg          wt_ramrd_3_en,
  output     [31:0]   wt_ramrd_4_addr,
  input      [255:0]  wt_ramrd_4_data,
  output reg          wt_ramrd_4_en,
  output     [31:0]   wt_ramrd_5_addr,
  input      [255:0]  wt_ramrd_5_data,
  output reg          wt_ramrd_5_en,
  output     [31:0]   wt_ramrd_6_addr,
  input      [255:0]  wt_ramrd_6_data,
  output reg          wt_ramrd_6_en,
  output     [31:0]   wt_ramrd_7_addr,
  input      [255:0]  wt_ramrd_7_data,
  output reg          wt_ramrd_7_en,
  output reg          o_ft_valid,
  input               o_ft_ready,
  output     [255:0]  o_ft_payload,
  output              o_wt_0_valid,
  input               o_wt_0_ready,
  output     [255:0]  o_wt_0_payload,
  output              o_wt_1_valid,
  input               o_wt_1_ready,
  output     [255:0]  o_wt_1_payload,
  output              o_wt_2_valid,
  input               o_wt_2_ready,
  output     [255:0]  o_wt_2_payload,
  output              o_wt_3_valid,
  input               o_wt_3_ready,
  output     [255:0]  o_wt_3_payload,
  output              o_wt_4_valid,
  input               o_wt_4_ready,
  output     [255:0]  o_wt_4_payload,
  output              o_wt_5_valid,
  input               o_wt_5_ready,
  output     [255:0]  o_wt_5_payload,
  output              o_wt_6_valid,
  input               o_wt_6_ready,
  output     [255:0]  o_wt_6_payload,
  output              o_wt_7_valid,
  input               o_wt_7_ready,
  output     [255:0]  o_wt_7_payload,
  input               read_enable,
  input               clk,
  input               reset
);
  wire       [31:0]   _zz_posy;
  wire       [31:0]   _zz_posx;
  wire       [47:0]   _zz_wt_rd_addr;
  wire       [47:0]   _zz_wt_rd_addr_1;
  wire       [47:0]   _zz_wt_rd_addr_2;
  wire       [15:0]   _zz_when_read_req4conv_l150;
  wire       [15:0]   _zz_when_read_req4conv_l150_1;
  wire       [31:0]   _zz_dt_rd_addr;
  wire       [15:0]   _zz_dt_rd_addr_1;
  wire       [31:0]   _zz_dt_rd_addr_2;
  wire       [15:0]   _zz_dt_rd_addr_3;
  wire       [15:0]   _zz_when_read_req4conv_l157;
  wire       [15:0]   _zz_when_read_req4conv_l157_1;
  wire       [15:0]   _zz_when_read_req4conv_l168;
  wire       [15:0]   _zz_when_read_req4conv_l168_1;
  wire       [31:0]   _zz_when_read_req4conv_l131;
  wire       [31:0]   _zz_when_read_req4conv_l132;
  wire       [31:0]   _zz_when_read_req4conv_l135;
  reg        [31:0]   dt_rd_addr;
  reg        [31:0]   wt_rd_addr;
  reg        [255:0]  dt_rdata;
  reg        [255:0]  wt_rdata_0;
  reg        [255:0]  wt_rdata_1;
  reg        [255:0]  wt_rdata_2;
  reg        [255:0]  wt_rdata_3;
  reg        [255:0]  wt_rdata_4;
  reg        [255:0]  wt_rdata_5;
  reg        [255:0]  wt_rdata_6;
  reg        [255:0]  wt_rdata_7;
  wire                wire_wt_rden;
  reg                 wire_wt_ovalid;
  wire                wire_wt_oready;
  reg        [31:0]   stripe_x;
  reg        [31:0]   stripe_y;
  reg        [31:0]   atom_x;
  reg        [31:0]   atom_y;
  reg        [15:0]   param_fea_width;
  reg        [15:0]   param_fea_height;
  reg        [15:0]   param_fea_channel;
  reg        [15:0]   param_wt_width;
  reg        [15:0]   param_wt_height;
  reg        [15:0]   param_wt_channel;
  reg        [15:0]   param_kerNum;
  reg        [15:0]   param_o_width;
  reg        [15:0]   param_o_height;
  reg        [15:0]   param_o_channel;
  reg        [15:0]   param_top_pad;
  reg        [15:0]   param_bot_pad;
  reg        [15:0]   param_left_pad;
  reg        [15:0]   param_right_pad;
  reg        [15:0]   param_dt_stridex;
  reg        [15:0]   param_dt_stridey;
  reg        [15:0]   param_wt_stridex;
  reg        [15:0]   param_wt_stridey;
  reg        [15:0]   param_par_acc_cnt;
  wire       [15:0]   posx;
  wire       [15:0]   posy;
  wire                read_req_fsm_wantExit;
  reg                 read_req_fsm_wantStart;
  wire                read_req_fsm_wantKill;
  reg        `read_req_fsm_enumDefinition_binary_sequential_type read_req_fsm_stateReg;
  reg        `read_req_fsm_enumDefinition_binary_sequential_type read_req_fsm_stateNext;
  wire                when_read_req4conv_l104;
  wire                when_read_req4conv_l105;
  wire                when_read_req4conv_l112;
  wire                when_read_req4conv_l150;
  wire                when_read_req4conv_l157;
  wire                when_read_req4conv_l168;
  wire                when_read_req4conv_l181;
  wire                when_read_req4conv_l131;
  wire                when_read_req4conv_l132;
  wire                when_read_req4conv_l135;
  `ifndef SYNTHESIS
  reg [247:0] read_req_fsm_stateReg_string;
  reg [247:0] read_req_fsm_stateNext_string;
  `endif


  assign _zz_posy = (stripe_y + atom_y);
  assign _zz_posx = (stripe_x + atom_x);
  assign _zz_wt_rd_addr = (_zz_wt_rd_addr_1 + _zz_wt_rd_addr_2);
  assign _zz_wt_rd_addr_1 = (atom_y * param_wt_stridex);
  assign _zz_wt_rd_addr_2 = {16'd0, atom_x};
  assign _zz_when_read_req4conv_l150 = (param_top_pad + param_fea_height);
  assign _zz_when_read_req4conv_l150_1 = (param_left_pad + param_fea_width);
  assign _zz_dt_rd_addr = (_zz_dt_rd_addr_1 * param_fea_width);
  assign _zz_dt_rd_addr_1 = (posy - param_top_pad);
  assign _zz_dt_rd_addr_3 = (posx - param_left_pad);
  assign _zz_dt_rd_addr_2 = {16'd0, _zz_dt_rd_addr_3};
  assign _zz_when_read_req4conv_l157 = (param_top_pad + param_fea_height);
  assign _zz_when_read_req4conv_l157_1 = (param_left_pad + param_fea_width);
  assign _zz_when_read_req4conv_l168 = (param_top_pad + param_fea_height);
  assign _zz_when_read_req4conv_l168_1 = (param_left_pad + param_fea_width);
  assign _zz_when_read_req4conv_l131 = {16'd0, param_wt_stridey};
  assign _zz_when_read_req4conv_l132 = {16'd0, param_wt_stridex};
  assign _zz_when_read_req4conv_l135 = {16'd0, param_wt_stridex};
  `ifndef SYNTHESIS
  always @(*) begin
    case(read_req_fsm_stateReg)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_BOOT : read_req_fsm_stateReg_string = "read_req_fsm_BOOT              ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : read_req_fsm_stateReg_string = "read_req_fsm_IDLE              ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : read_req_fsm_stateReg_string = "read_req_fsm_INIT              ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : read_req_fsm_stateReg_string = "read_req_fsm_UPDATA_CONV_WINDOW";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX : read_req_fsm_stateReg_string = "read_req_fsm_INIT_CONV_IDX     ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : read_req_fsm_stateReg_string = "read_req_fsm_CACU_ADDR         ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : read_req_fsm_stateReg_string = "read_req_fsm_READ              ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GET_DATA : read_req_fsm_stateReg_string = "read_req_fsm_GET_DATA          ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : read_req_fsm_stateReg_string = "read_req_fsm_OUTPUT            ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : read_req_fsm_stateReg_string = "read_req_fsm_UPDATA_ADDR       ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CHECK : read_req_fsm_stateReg_string = "read_req_fsm_CHECK             ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_JUDGE : read_req_fsm_stateReg_string = "read_req_fsm_JUDGE             ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GEN_ADDR : read_req_fsm_stateReg_string = "read_req_fsm_GEN_ADDR          ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_END : read_req_fsm_stateReg_string = "read_req_fsm_END               ";
      default : read_req_fsm_stateReg_string = "???????????????????????????????";
    endcase
  end
  always @(*) begin
    case(read_req_fsm_stateNext)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_BOOT : read_req_fsm_stateNext_string = "read_req_fsm_BOOT              ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : read_req_fsm_stateNext_string = "read_req_fsm_IDLE              ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : read_req_fsm_stateNext_string = "read_req_fsm_INIT              ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : read_req_fsm_stateNext_string = "read_req_fsm_UPDATA_CONV_WINDOW";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX : read_req_fsm_stateNext_string = "read_req_fsm_INIT_CONV_IDX     ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : read_req_fsm_stateNext_string = "read_req_fsm_CACU_ADDR         ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : read_req_fsm_stateNext_string = "read_req_fsm_READ              ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GET_DATA : read_req_fsm_stateNext_string = "read_req_fsm_GET_DATA          ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : read_req_fsm_stateNext_string = "read_req_fsm_OUTPUT            ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : read_req_fsm_stateNext_string = "read_req_fsm_UPDATA_ADDR       ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CHECK : read_req_fsm_stateNext_string = "read_req_fsm_CHECK             ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_JUDGE : read_req_fsm_stateNext_string = "read_req_fsm_JUDGE             ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GEN_ADDR : read_req_fsm_stateNext_string = "read_req_fsm_GEN_ADDR          ";
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_END : read_req_fsm_stateNext_string = "read_req_fsm_END               ";
      default : read_req_fsm_stateNext_string = "???????????????????????????????";
    endcase
  end
  `endif

  assign posy = _zz_posy[15:0];
  assign posx = _zz_posx[15:0];
  always @(*) begin
    dt_ramrd_en = 1'b0;
    case(read_req_fsm_stateReg)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : begin
        if(when_read_req4conv_l157) begin
          dt_ramrd_en = 1'b1;
        end
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GET_DATA : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CHECK : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_JUDGE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GEN_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_END : begin
      end
      default : begin
      end
    endcase
  end

  assign dt_ramrd_addr = dt_rd_addr;
  assign wire_wt_rden = 1'b0;
  always @(*) begin
    wt_ramrd_0_en = wire_wt_rden;
    case(read_req_fsm_stateReg)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : begin
        wt_ramrd_0_en = 1'b1;
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GET_DATA : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CHECK : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_JUDGE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GEN_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_END : begin
      end
      default : begin
      end
    endcase
  end

  assign wt_ramrd_0_addr = wt_rd_addr;
  always @(*) begin
    wt_ramrd_1_en = wire_wt_rden;
    case(read_req_fsm_stateReg)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : begin
        wt_ramrd_1_en = 1'b1;
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GET_DATA : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CHECK : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_JUDGE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GEN_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_END : begin
      end
      default : begin
      end
    endcase
  end

  assign wt_ramrd_1_addr = wt_rd_addr;
  always @(*) begin
    wt_ramrd_2_en = wire_wt_rden;
    case(read_req_fsm_stateReg)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : begin
        wt_ramrd_2_en = 1'b1;
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GET_DATA : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CHECK : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_JUDGE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GEN_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_END : begin
      end
      default : begin
      end
    endcase
  end

  assign wt_ramrd_2_addr = wt_rd_addr;
  always @(*) begin
    wt_ramrd_3_en = wire_wt_rden;
    case(read_req_fsm_stateReg)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : begin
        wt_ramrd_3_en = 1'b1;
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GET_DATA : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CHECK : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_JUDGE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GEN_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_END : begin
      end
      default : begin
      end
    endcase
  end

  assign wt_ramrd_3_addr = wt_rd_addr;
  always @(*) begin
    wt_ramrd_4_en = wire_wt_rden;
    case(read_req_fsm_stateReg)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : begin
        wt_ramrd_4_en = 1'b1;
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GET_DATA : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CHECK : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_JUDGE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GEN_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_END : begin
      end
      default : begin
      end
    endcase
  end

  assign wt_ramrd_4_addr = wt_rd_addr;
  always @(*) begin
    wt_ramrd_5_en = wire_wt_rden;
    case(read_req_fsm_stateReg)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : begin
        wt_ramrd_5_en = 1'b1;
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GET_DATA : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CHECK : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_JUDGE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GEN_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_END : begin
      end
      default : begin
      end
    endcase
  end

  assign wt_ramrd_5_addr = wt_rd_addr;
  always @(*) begin
    wt_ramrd_6_en = wire_wt_rden;
    case(read_req_fsm_stateReg)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : begin
        wt_ramrd_6_en = 1'b1;
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GET_DATA : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CHECK : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_JUDGE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GEN_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_END : begin
      end
      default : begin
      end
    endcase
  end

  assign wt_ramrd_6_addr = wt_rd_addr;
  always @(*) begin
    wt_ramrd_7_en = wire_wt_rden;
    case(read_req_fsm_stateReg)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : begin
        wt_ramrd_7_en = 1'b1;
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GET_DATA : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CHECK : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_JUDGE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GEN_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_END : begin
      end
      default : begin
      end
    endcase
  end

  assign wt_ramrd_7_addr = wt_rd_addr;
  always @(*) begin
    o_ft_valid = 1'b0;
    case(read_req_fsm_stateReg)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GET_DATA : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : begin
        if(when_read_req4conv_l181) begin
          o_ft_valid = 1'b1;
        end
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CHECK : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_JUDGE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GEN_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_END : begin
      end
      default : begin
      end
    endcase
  end

  assign o_ft_payload = dt_rdata;
  always @(*) begin
    wire_wt_ovalid = 1'b0;
    case(read_req_fsm_stateReg)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GET_DATA : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : begin
        if(when_read_req4conv_l181) begin
          wire_wt_ovalid = 1'b1;
        end
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CHECK : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_JUDGE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GEN_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_END : begin
      end
      default : begin
      end
    endcase
  end

  assign o_wt_0_valid = wire_wt_ovalid;
  assign o_wt_0_payload = wt_rdata_0;
  assign o_wt_1_valid = wire_wt_ovalid;
  assign o_wt_1_payload = wt_rdata_1;
  assign o_wt_2_valid = wire_wt_ovalid;
  assign o_wt_2_payload = wt_rdata_2;
  assign o_wt_3_valid = wire_wt_ovalid;
  assign o_wt_3_payload = wt_rdata_3;
  assign o_wt_4_valid = wire_wt_ovalid;
  assign o_wt_4_payload = wt_rdata_4;
  assign o_wt_5_valid = wire_wt_ovalid;
  assign o_wt_5_payload = wt_rdata_5;
  assign o_wt_6_valid = wire_wt_ovalid;
  assign o_wt_6_payload = wt_rdata_6;
  assign o_wt_7_valid = wire_wt_ovalid;
  assign o_wt_7_payload = wt_rdata_7;
  assign wire_wt_oready = (((((((o_wt_0_ready && o_wt_1_ready) && o_wt_2_ready) && o_wt_3_ready) && o_wt_4_ready) && o_wt_5_ready) && o_wt_6_ready) && o_wt_7_ready);
  assign read_req_fsm_wantExit = 1'b0;
  always @(*) begin
    read_req_fsm_wantStart = 1'b0;
    case(read_req_fsm_stateReg)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GET_DATA : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CHECK : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_JUDGE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GEN_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_END : begin
      end
      default : begin
        read_req_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign read_req_fsm_wantKill = 1'b0;
  always @(*) begin
    read_req_fsm_stateNext = read_req_fsm_stateReg;
    case(read_req_fsm_stateReg)
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : begin
        if(read_enable) begin
          read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT;
        end
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : begin
        read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ;
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : begin
        if(when_read_req4conv_l104) begin
          if(when_read_req4conv_l105) begin
            read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE;
          end else begin
            read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX;
          end
        end else begin
          if(when_read_req4conv_l112) begin
            read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX;
          end else begin
            read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX;
          end
        end
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX : begin
        read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR;
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : begin
        read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ;
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : begin
        read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GET_DATA;
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GET_DATA : begin
        read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT;
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : begin
        if(when_read_req4conv_l181) begin
          read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR;
        end
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : begin
        if(when_read_req4conv_l131) begin
          if(when_read_req4conv_l132) begin
            read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW;
          end else begin
            if(when_read_req4conv_l135) begin
              read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ;
            end else begin
              read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ;
            end
          end
        end
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CHECK : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_JUDGE : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GEN_ADDR : begin
      end
      `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_END : begin
      end
      default : begin
      end
    endcase
    if(read_req_fsm_wantStart) begin
      read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE;
    end
    if(read_req_fsm_wantKill) begin
      read_req_fsm_stateNext = `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_BOOT;
    end
  end

  assign when_read_req4conv_l104 = (posy == param_dt_stridey);
  assign when_read_req4conv_l105 = (posx == param_dt_stridex);
  assign when_read_req4conv_l112 = (posx == param_dt_stridex);
  assign when_read_req4conv_l150 = ((((param_top_pad <= posy) && (posy < _zz_when_read_req4conv_l150)) && (param_left_pad <= posx)) && (posx < _zz_when_read_req4conv_l150_1));
  assign when_read_req4conv_l157 = ((((param_top_pad <= posy) && (posy < _zz_when_read_req4conv_l157)) && (param_left_pad <= posx)) && (posx < _zz_when_read_req4conv_l157_1));
  assign when_read_req4conv_l168 = ((((param_top_pad <= posy) && (posy < _zz_when_read_req4conv_l168)) && (param_left_pad <= posx)) && (posx < _zz_when_read_req4conv_l168_1));
  assign when_read_req4conv_l181 = ((o_ft_ready == 1'b1) && (wire_wt_oready == 1'b1));
  assign when_read_req4conv_l131 = (atom_y == _zz_when_read_req4conv_l131);
  assign when_read_req4conv_l132 = (atom_x == _zz_when_read_req4conv_l132);
  assign when_read_req4conv_l135 = (atom_x == _zz_when_read_req4conv_l135);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      dt_rd_addr <= 32'h0;
      wt_rd_addr <= 32'h0;
      dt_rdata <= 256'h0;
      wt_rdata_0 <= 256'h0;
      wt_rdata_1 <= 256'h0;
      wt_rdata_2 <= 256'h0;
      wt_rdata_3 <= 256'h0;
      wt_rdata_4 <= 256'h0;
      wt_rdata_5 <= 256'h0;
      wt_rdata_6 <= 256'h0;
      wt_rdata_7 <= 256'h0;
      stripe_x <= 32'h0;
      stripe_y <= 32'h0;
      atom_x <= 32'h0;
      atom_y <= 32'h0;
      read_req_fsm_stateReg <= `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_BOOT;
    end else begin
      read_req_fsm_stateReg <= read_req_fsm_stateNext;
      case(read_req_fsm_stateReg)
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_IDLE : begin
        end
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT : begin
          stripe_x <= 32'h0;
          stripe_y <= 32'h0;
          atom_x <= 32'h0;
          atom_y <= 32'h0;
        end
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_CONV_WINDOW : begin
          if(when_read_req4conv_l104) begin
            if(!when_read_req4conv_l105) begin
              stripe_x <= (stripe_x + 32'h00000001);
            end
          end else begin
            if(when_read_req4conv_l112) begin
              stripe_x <= 32'h0;
              stripe_y <= (stripe_y + 32'h00000001);
            end else begin
              stripe_x <= (stripe_x + 32'h00000001);
            end
          end
        end
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_INIT_CONV_IDX : begin
          atom_x <= 32'h0;
          atom_y <= 32'h0;
        end
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CACU_ADDR : begin
          wt_rd_addr <= _zz_wt_rd_addr[31:0];
          if(when_read_req4conv_l150) begin
            dt_rd_addr <= (_zz_dt_rd_addr + _zz_dt_rd_addr_2);
          end
        end
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_READ : begin
        end
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GET_DATA : begin
          if(when_read_req4conv_l168) begin
            dt_rdata <= dt_ramrd_data;
          end else begin
            dt_rdata <= 256'h0;
          end
          wt_rdata_0 <= wt_ramrd_0_data;
          wt_rdata_1 <= wt_ramrd_1_data;
          wt_rdata_2 <= wt_ramrd_2_data;
          wt_rdata_3 <= wt_ramrd_3_data;
          wt_rdata_4 <= wt_ramrd_4_data;
          wt_rdata_5 <= wt_ramrd_5_data;
          wt_rdata_6 <= wt_ramrd_6_data;
          wt_rdata_7 <= wt_ramrd_7_data;
        end
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_OUTPUT : begin
        end
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_UPDATA_ADDR : begin
          if(when_read_req4conv_l131) begin
            if(!when_read_req4conv_l132) begin
              if(when_read_req4conv_l135) begin
                atom_x <= 32'h0;
                atom_y <= (atom_y + 32'h00000001);
              end else begin
                atom_x <= (atom_x + 32'h00000001);
              end
            end
          end
        end
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_CHECK : begin
        end
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_JUDGE : begin
        end
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_GEN_ADDR : begin
        end
        `read_req_fsm_enumDefinition_binary_sequential_read_req_fsm_END : begin
        end
        default : begin
        end
      endcase
    end
  end

  always @(posedge clk) begin
    param_fea_width <= cfg_fea_width;
    param_fea_height <= cfg_fea_height;
    param_fea_channel <= cfg_fea_channel;
    param_wt_width <= cfg_wt_width;
    param_wt_height <= cfg_wt_height;
    param_wt_channel <= cfg_wt_channel;
    param_kerNum <= cfg_kerNum;
    param_o_width <= cfg_o_width;
    param_o_height <= cfg_o_height;
    param_o_channel <= cfg_o_channel;
    param_top_pad <= cfg_top_pad;
    param_bot_pad <= cfg_bot_pad;
    param_left_pad <= cfg_left_pad;
    param_right_pad <= cfg_right_pad;
    param_dt_stridex <= cfg_dt_stridex;
    param_dt_stridey <= cfg_dt_stridey;
    param_wt_stridex <= cfg_wt_stridex;
    param_wt_stridey <= cfg_wt_stridey;
    param_par_acc_cnt <= cfg_par_acc_cnt;
  end


endmodule

module mac_acc_atom_7 (
  input               ina_0_valid,
  output              ina_0_ready,
  input      [31:0]   ina_0_payload,
  input               ina_1_valid,
  output              ina_1_ready,
  input      [31:0]   ina_1_payload,
  input               ina_2_valid,
  output              ina_2_ready,
  input      [31:0]   ina_2_payload,
  input               ina_3_valid,
  output              ina_3_ready,
  input      [31:0]   ina_3_payload,
  input               ina_4_valid,
  output              ina_4_ready,
  input      [31:0]   ina_4_payload,
  input               ina_5_valid,
  output              ina_5_ready,
  input      [31:0]   ina_5_payload,
  input               ina_6_valid,
  output              ina_6_ready,
  input      [31:0]   ina_6_payload,
  input               ina_7_valid,
  output              ina_7_ready,
  input      [31:0]   ina_7_payload,
  input               inb_0_valid,
  output              inb_0_ready,
  input      [31:0]   inb_0_payload,
  input               inb_1_valid,
  output              inb_1_ready,
  input      [31:0]   inb_1_payload,
  input               inb_2_valid,
  output              inb_2_ready,
  input      [31:0]   inb_2_payload,
  input               inb_3_valid,
  output              inb_3_ready,
  input      [31:0]   inb_3_payload,
  input               inb_4_valid,
  output              inb_4_ready,
  input      [31:0]   inb_4_payload,
  input               inb_5_valid,
  output              inb_5_ready,
  input      [31:0]   inb_5_payload,
  input               inb_6_valid,
  output              inb_6_ready,
  input      [31:0]   inb_6_payload,
  input               inb_7_valid,
  output              inb_7_ready,
  input      [31:0]   inb_7_payload,
  output              out_0_valid,
  input               out_0_ready,
  output     [31:0]   out_0_payload,
  output              out_1_valid,
  input               out_1_ready,
  output     [31:0]   out_1_payload,
  output              out_2_valid,
  input               out_2_ready,
  output     [31:0]   out_2_payload,
  output              out_3_valid,
  input               out_3_ready,
  output     [31:0]   out_3_payload,
  output              out_4_valid,
  input               out_4_ready,
  output     [31:0]   out_4_payload,
  output              out_5_valid,
  input               out_5_ready,
  output     [31:0]   out_5_payload,
  output              out_6_valid,
  input               out_6_ready,
  output     [31:0]   out_6_payload,
  output              out_7_valid,
  input               out_7_ready,
  output     [31:0]   out_7_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                mac_0_io_ina_ready;
  wire                mac_0_io_inb_ready;
  wire                mac_0_io_out_valid;
  wire       [31:0]   mac_0_io_out_payload;
  wire                mac_1_io_ina_ready;
  wire                mac_1_io_inb_ready;
  wire                mac_1_io_out_valid;
  wire       [31:0]   mac_1_io_out_payload;
  wire                mac_2_io_ina_ready;
  wire                mac_2_io_inb_ready;
  wire                mac_2_io_out_valid;
  wire       [31:0]   mac_2_io_out_payload;
  wire                mac_3_io_ina_ready;
  wire                mac_3_io_inb_ready;
  wire                mac_3_io_out_valid;
  wire       [31:0]   mac_3_io_out_payload;
  wire                mac_4_io_ina_ready;
  wire                mac_4_io_inb_ready;
  wire                mac_4_io_out_valid;
  wire       [31:0]   mac_4_io_out_payload;
  wire                mac_5_io_ina_ready;
  wire                mac_5_io_inb_ready;
  wire                mac_5_io_out_valid;
  wire       [31:0]   mac_5_io_out_payload;
  wire                mac_6_io_ina_ready;
  wire                mac_6_io_inb_ready;
  wire                mac_6_io_out_valid;
  wire       [31:0]   mac_6_io_out_payload;
  wire                mac_7_io_ina_ready;
  wire                mac_7_io_inb_ready;
  wire                mac_7_io_out_valid;
  wire       [31:0]   mac_7_io_out_payload;

  mac_acc_unit_56 mac_0 (
    .io_ina_valid      (ina_0_valid           ), //i
    .io_ina_ready      (mac_0_io_ina_ready    ), //o
    .io_ina_payload    (ina_0_payload         ), //i
    .io_inb_valid      (inb_0_valid           ), //i
    .io_inb_ready      (mac_0_io_inb_ready    ), //o
    .io_inb_payload    (inb_0_payload         ), //i
    .io_out_valid      (mac_0_io_out_valid    ), //o
    .io_out_ready      (out_0_ready           ), //i
    .io_out_payload    (mac_0_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_57 mac_1 (
    .io_ina_valid      (ina_1_valid           ), //i
    .io_ina_ready      (mac_1_io_ina_ready    ), //o
    .io_ina_payload    (ina_1_payload         ), //i
    .io_inb_valid      (inb_1_valid           ), //i
    .io_inb_ready      (mac_1_io_inb_ready    ), //o
    .io_inb_payload    (inb_1_payload         ), //i
    .io_out_valid      (mac_1_io_out_valid    ), //o
    .io_out_ready      (out_1_ready           ), //i
    .io_out_payload    (mac_1_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_58 mac_2 (
    .io_ina_valid      (ina_2_valid           ), //i
    .io_ina_ready      (mac_2_io_ina_ready    ), //o
    .io_ina_payload    (ina_2_payload         ), //i
    .io_inb_valid      (inb_2_valid           ), //i
    .io_inb_ready      (mac_2_io_inb_ready    ), //o
    .io_inb_payload    (inb_2_payload         ), //i
    .io_out_valid      (mac_2_io_out_valid    ), //o
    .io_out_ready      (out_2_ready           ), //i
    .io_out_payload    (mac_2_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_59 mac_3 (
    .io_ina_valid      (ina_3_valid           ), //i
    .io_ina_ready      (mac_3_io_ina_ready    ), //o
    .io_ina_payload    (ina_3_payload         ), //i
    .io_inb_valid      (inb_3_valid           ), //i
    .io_inb_ready      (mac_3_io_inb_ready    ), //o
    .io_inb_payload    (inb_3_payload         ), //i
    .io_out_valid      (mac_3_io_out_valid    ), //o
    .io_out_ready      (out_3_ready           ), //i
    .io_out_payload    (mac_3_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_60 mac_4 (
    .io_ina_valid      (ina_4_valid           ), //i
    .io_ina_ready      (mac_4_io_ina_ready    ), //o
    .io_ina_payload    (ina_4_payload         ), //i
    .io_inb_valid      (inb_4_valid           ), //i
    .io_inb_ready      (mac_4_io_inb_ready    ), //o
    .io_inb_payload    (inb_4_payload         ), //i
    .io_out_valid      (mac_4_io_out_valid    ), //o
    .io_out_ready      (out_4_ready           ), //i
    .io_out_payload    (mac_4_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_61 mac_5 (
    .io_ina_valid      (ina_5_valid           ), //i
    .io_ina_ready      (mac_5_io_ina_ready    ), //o
    .io_ina_payload    (ina_5_payload         ), //i
    .io_inb_valid      (inb_5_valid           ), //i
    .io_inb_ready      (mac_5_io_inb_ready    ), //o
    .io_inb_payload    (inb_5_payload         ), //i
    .io_out_valid      (mac_5_io_out_valid    ), //o
    .io_out_ready      (out_5_ready           ), //i
    .io_out_payload    (mac_5_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_62 mac_6 (
    .io_ina_valid      (ina_6_valid           ), //i
    .io_ina_ready      (mac_6_io_ina_ready    ), //o
    .io_ina_payload    (ina_6_payload         ), //i
    .io_inb_valid      (inb_6_valid           ), //i
    .io_inb_ready      (mac_6_io_inb_ready    ), //o
    .io_inb_payload    (inb_6_payload         ), //i
    .io_out_valid      (mac_6_io_out_valid    ), //o
    .io_out_ready      (out_6_ready           ), //i
    .io_out_payload    (mac_6_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_63 mac_7 (
    .io_ina_valid      (ina_7_valid           ), //i
    .io_ina_ready      (mac_7_io_ina_ready    ), //o
    .io_ina_payload    (ina_7_payload         ), //i
    .io_inb_valid      (inb_7_valid           ), //i
    .io_inb_ready      (mac_7_io_inb_ready    ), //o
    .io_inb_payload    (inb_7_payload         ), //i
    .io_out_valid      (mac_7_io_out_valid    ), //o
    .io_out_ready      (out_7_ready           ), //i
    .io_out_payload    (mac_7_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  assign ina_0_ready = mac_0_io_ina_ready;
  assign inb_0_ready = mac_0_io_inb_ready;
  assign out_0_valid = mac_0_io_out_valid;
  assign out_0_payload = mac_0_io_out_payload;
  assign ina_1_ready = mac_1_io_ina_ready;
  assign inb_1_ready = mac_1_io_inb_ready;
  assign out_1_valid = mac_1_io_out_valid;
  assign out_1_payload = mac_1_io_out_payload;
  assign ina_2_ready = mac_2_io_ina_ready;
  assign inb_2_ready = mac_2_io_inb_ready;
  assign out_2_valid = mac_2_io_out_valid;
  assign out_2_payload = mac_2_io_out_payload;
  assign ina_3_ready = mac_3_io_ina_ready;
  assign inb_3_ready = mac_3_io_inb_ready;
  assign out_3_valid = mac_3_io_out_valid;
  assign out_3_payload = mac_3_io_out_payload;
  assign ina_4_ready = mac_4_io_ina_ready;
  assign inb_4_ready = mac_4_io_inb_ready;
  assign out_4_valid = mac_4_io_out_valid;
  assign out_4_payload = mac_4_io_out_payload;
  assign ina_5_ready = mac_5_io_ina_ready;
  assign inb_5_ready = mac_5_io_inb_ready;
  assign out_5_valid = mac_5_io_out_valid;
  assign out_5_payload = mac_5_io_out_payload;
  assign ina_6_ready = mac_6_io_ina_ready;
  assign inb_6_ready = mac_6_io_inb_ready;
  assign out_6_valid = mac_6_io_out_valid;
  assign out_6_payload = mac_6_io_out_payload;
  assign ina_7_ready = mac_7_io_ina_ready;
  assign inb_7_ready = mac_7_io_inb_ready;
  assign out_7_valid = mac_7_io_out_valid;
  assign out_7_payload = mac_7_io_out_payload;

endmodule

module mac_acc_atom_6 (
  input               ina_0_valid,
  output              ina_0_ready,
  input      [31:0]   ina_0_payload,
  input               ina_1_valid,
  output              ina_1_ready,
  input      [31:0]   ina_1_payload,
  input               ina_2_valid,
  output              ina_2_ready,
  input      [31:0]   ina_2_payload,
  input               ina_3_valid,
  output              ina_3_ready,
  input      [31:0]   ina_3_payload,
  input               ina_4_valid,
  output              ina_4_ready,
  input      [31:0]   ina_4_payload,
  input               ina_5_valid,
  output              ina_5_ready,
  input      [31:0]   ina_5_payload,
  input               ina_6_valid,
  output              ina_6_ready,
  input      [31:0]   ina_6_payload,
  input               ina_7_valid,
  output              ina_7_ready,
  input      [31:0]   ina_7_payload,
  input               inb_0_valid,
  output              inb_0_ready,
  input      [31:0]   inb_0_payload,
  input               inb_1_valid,
  output              inb_1_ready,
  input      [31:0]   inb_1_payload,
  input               inb_2_valid,
  output              inb_2_ready,
  input      [31:0]   inb_2_payload,
  input               inb_3_valid,
  output              inb_3_ready,
  input      [31:0]   inb_3_payload,
  input               inb_4_valid,
  output              inb_4_ready,
  input      [31:0]   inb_4_payload,
  input               inb_5_valid,
  output              inb_5_ready,
  input      [31:0]   inb_5_payload,
  input               inb_6_valid,
  output              inb_6_ready,
  input      [31:0]   inb_6_payload,
  input               inb_7_valid,
  output              inb_7_ready,
  input      [31:0]   inb_7_payload,
  output              out_0_valid,
  input               out_0_ready,
  output     [31:0]   out_0_payload,
  output              out_1_valid,
  input               out_1_ready,
  output     [31:0]   out_1_payload,
  output              out_2_valid,
  input               out_2_ready,
  output     [31:0]   out_2_payload,
  output              out_3_valid,
  input               out_3_ready,
  output     [31:0]   out_3_payload,
  output              out_4_valid,
  input               out_4_ready,
  output     [31:0]   out_4_payload,
  output              out_5_valid,
  input               out_5_ready,
  output     [31:0]   out_5_payload,
  output              out_6_valid,
  input               out_6_ready,
  output     [31:0]   out_6_payload,
  output              out_7_valid,
  input               out_7_ready,
  output     [31:0]   out_7_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                mac_0_io_ina_ready;
  wire                mac_0_io_inb_ready;
  wire                mac_0_io_out_valid;
  wire       [31:0]   mac_0_io_out_payload;
  wire                mac_1_io_ina_ready;
  wire                mac_1_io_inb_ready;
  wire                mac_1_io_out_valid;
  wire       [31:0]   mac_1_io_out_payload;
  wire                mac_2_io_ina_ready;
  wire                mac_2_io_inb_ready;
  wire                mac_2_io_out_valid;
  wire       [31:0]   mac_2_io_out_payload;
  wire                mac_3_io_ina_ready;
  wire                mac_3_io_inb_ready;
  wire                mac_3_io_out_valid;
  wire       [31:0]   mac_3_io_out_payload;
  wire                mac_4_io_ina_ready;
  wire                mac_4_io_inb_ready;
  wire                mac_4_io_out_valid;
  wire       [31:0]   mac_4_io_out_payload;
  wire                mac_5_io_ina_ready;
  wire                mac_5_io_inb_ready;
  wire                mac_5_io_out_valid;
  wire       [31:0]   mac_5_io_out_payload;
  wire                mac_6_io_ina_ready;
  wire                mac_6_io_inb_ready;
  wire                mac_6_io_out_valid;
  wire       [31:0]   mac_6_io_out_payload;
  wire                mac_7_io_ina_ready;
  wire                mac_7_io_inb_ready;
  wire                mac_7_io_out_valid;
  wire       [31:0]   mac_7_io_out_payload;

  mac_acc_unit_48 mac_0 (
    .io_ina_valid      (ina_0_valid           ), //i
    .io_ina_ready      (mac_0_io_ina_ready    ), //o
    .io_ina_payload    (ina_0_payload         ), //i
    .io_inb_valid      (inb_0_valid           ), //i
    .io_inb_ready      (mac_0_io_inb_ready    ), //o
    .io_inb_payload    (inb_0_payload         ), //i
    .io_out_valid      (mac_0_io_out_valid    ), //o
    .io_out_ready      (out_0_ready           ), //i
    .io_out_payload    (mac_0_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_49 mac_1 (
    .io_ina_valid      (ina_1_valid           ), //i
    .io_ina_ready      (mac_1_io_ina_ready    ), //o
    .io_ina_payload    (ina_1_payload         ), //i
    .io_inb_valid      (inb_1_valid           ), //i
    .io_inb_ready      (mac_1_io_inb_ready    ), //o
    .io_inb_payload    (inb_1_payload         ), //i
    .io_out_valid      (mac_1_io_out_valid    ), //o
    .io_out_ready      (out_1_ready           ), //i
    .io_out_payload    (mac_1_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_50 mac_2 (
    .io_ina_valid      (ina_2_valid           ), //i
    .io_ina_ready      (mac_2_io_ina_ready    ), //o
    .io_ina_payload    (ina_2_payload         ), //i
    .io_inb_valid      (inb_2_valid           ), //i
    .io_inb_ready      (mac_2_io_inb_ready    ), //o
    .io_inb_payload    (inb_2_payload         ), //i
    .io_out_valid      (mac_2_io_out_valid    ), //o
    .io_out_ready      (out_2_ready           ), //i
    .io_out_payload    (mac_2_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_51 mac_3 (
    .io_ina_valid      (ina_3_valid           ), //i
    .io_ina_ready      (mac_3_io_ina_ready    ), //o
    .io_ina_payload    (ina_3_payload         ), //i
    .io_inb_valid      (inb_3_valid           ), //i
    .io_inb_ready      (mac_3_io_inb_ready    ), //o
    .io_inb_payload    (inb_3_payload         ), //i
    .io_out_valid      (mac_3_io_out_valid    ), //o
    .io_out_ready      (out_3_ready           ), //i
    .io_out_payload    (mac_3_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_52 mac_4 (
    .io_ina_valid      (ina_4_valid           ), //i
    .io_ina_ready      (mac_4_io_ina_ready    ), //o
    .io_ina_payload    (ina_4_payload         ), //i
    .io_inb_valid      (inb_4_valid           ), //i
    .io_inb_ready      (mac_4_io_inb_ready    ), //o
    .io_inb_payload    (inb_4_payload         ), //i
    .io_out_valid      (mac_4_io_out_valid    ), //o
    .io_out_ready      (out_4_ready           ), //i
    .io_out_payload    (mac_4_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_53 mac_5 (
    .io_ina_valid      (ina_5_valid           ), //i
    .io_ina_ready      (mac_5_io_ina_ready    ), //o
    .io_ina_payload    (ina_5_payload         ), //i
    .io_inb_valid      (inb_5_valid           ), //i
    .io_inb_ready      (mac_5_io_inb_ready    ), //o
    .io_inb_payload    (inb_5_payload         ), //i
    .io_out_valid      (mac_5_io_out_valid    ), //o
    .io_out_ready      (out_5_ready           ), //i
    .io_out_payload    (mac_5_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_54 mac_6 (
    .io_ina_valid      (ina_6_valid           ), //i
    .io_ina_ready      (mac_6_io_ina_ready    ), //o
    .io_ina_payload    (ina_6_payload         ), //i
    .io_inb_valid      (inb_6_valid           ), //i
    .io_inb_ready      (mac_6_io_inb_ready    ), //o
    .io_inb_payload    (inb_6_payload         ), //i
    .io_out_valid      (mac_6_io_out_valid    ), //o
    .io_out_ready      (out_6_ready           ), //i
    .io_out_payload    (mac_6_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_55 mac_7 (
    .io_ina_valid      (ina_7_valid           ), //i
    .io_ina_ready      (mac_7_io_ina_ready    ), //o
    .io_ina_payload    (ina_7_payload         ), //i
    .io_inb_valid      (inb_7_valid           ), //i
    .io_inb_ready      (mac_7_io_inb_ready    ), //o
    .io_inb_payload    (inb_7_payload         ), //i
    .io_out_valid      (mac_7_io_out_valid    ), //o
    .io_out_ready      (out_7_ready           ), //i
    .io_out_payload    (mac_7_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  assign ina_0_ready = mac_0_io_ina_ready;
  assign inb_0_ready = mac_0_io_inb_ready;
  assign out_0_valid = mac_0_io_out_valid;
  assign out_0_payload = mac_0_io_out_payload;
  assign ina_1_ready = mac_1_io_ina_ready;
  assign inb_1_ready = mac_1_io_inb_ready;
  assign out_1_valid = mac_1_io_out_valid;
  assign out_1_payload = mac_1_io_out_payload;
  assign ina_2_ready = mac_2_io_ina_ready;
  assign inb_2_ready = mac_2_io_inb_ready;
  assign out_2_valid = mac_2_io_out_valid;
  assign out_2_payload = mac_2_io_out_payload;
  assign ina_3_ready = mac_3_io_ina_ready;
  assign inb_3_ready = mac_3_io_inb_ready;
  assign out_3_valid = mac_3_io_out_valid;
  assign out_3_payload = mac_3_io_out_payload;
  assign ina_4_ready = mac_4_io_ina_ready;
  assign inb_4_ready = mac_4_io_inb_ready;
  assign out_4_valid = mac_4_io_out_valid;
  assign out_4_payload = mac_4_io_out_payload;
  assign ina_5_ready = mac_5_io_ina_ready;
  assign inb_5_ready = mac_5_io_inb_ready;
  assign out_5_valid = mac_5_io_out_valid;
  assign out_5_payload = mac_5_io_out_payload;
  assign ina_6_ready = mac_6_io_ina_ready;
  assign inb_6_ready = mac_6_io_inb_ready;
  assign out_6_valid = mac_6_io_out_valid;
  assign out_6_payload = mac_6_io_out_payload;
  assign ina_7_ready = mac_7_io_ina_ready;
  assign inb_7_ready = mac_7_io_inb_ready;
  assign out_7_valid = mac_7_io_out_valid;
  assign out_7_payload = mac_7_io_out_payload;

endmodule

module mac_acc_atom_5 (
  input               ina_0_valid,
  output              ina_0_ready,
  input      [31:0]   ina_0_payload,
  input               ina_1_valid,
  output              ina_1_ready,
  input      [31:0]   ina_1_payload,
  input               ina_2_valid,
  output              ina_2_ready,
  input      [31:0]   ina_2_payload,
  input               ina_3_valid,
  output              ina_3_ready,
  input      [31:0]   ina_3_payload,
  input               ina_4_valid,
  output              ina_4_ready,
  input      [31:0]   ina_4_payload,
  input               ina_5_valid,
  output              ina_5_ready,
  input      [31:0]   ina_5_payload,
  input               ina_6_valid,
  output              ina_6_ready,
  input      [31:0]   ina_6_payload,
  input               ina_7_valid,
  output              ina_7_ready,
  input      [31:0]   ina_7_payload,
  input               inb_0_valid,
  output              inb_0_ready,
  input      [31:0]   inb_0_payload,
  input               inb_1_valid,
  output              inb_1_ready,
  input      [31:0]   inb_1_payload,
  input               inb_2_valid,
  output              inb_2_ready,
  input      [31:0]   inb_2_payload,
  input               inb_3_valid,
  output              inb_3_ready,
  input      [31:0]   inb_3_payload,
  input               inb_4_valid,
  output              inb_4_ready,
  input      [31:0]   inb_4_payload,
  input               inb_5_valid,
  output              inb_5_ready,
  input      [31:0]   inb_5_payload,
  input               inb_6_valid,
  output              inb_6_ready,
  input      [31:0]   inb_6_payload,
  input               inb_7_valid,
  output              inb_7_ready,
  input      [31:0]   inb_7_payload,
  output              out_0_valid,
  input               out_0_ready,
  output     [31:0]   out_0_payload,
  output              out_1_valid,
  input               out_1_ready,
  output     [31:0]   out_1_payload,
  output              out_2_valid,
  input               out_2_ready,
  output     [31:0]   out_2_payload,
  output              out_3_valid,
  input               out_3_ready,
  output     [31:0]   out_3_payload,
  output              out_4_valid,
  input               out_4_ready,
  output     [31:0]   out_4_payload,
  output              out_5_valid,
  input               out_5_ready,
  output     [31:0]   out_5_payload,
  output              out_6_valid,
  input               out_6_ready,
  output     [31:0]   out_6_payload,
  output              out_7_valid,
  input               out_7_ready,
  output     [31:0]   out_7_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                mac_0_io_ina_ready;
  wire                mac_0_io_inb_ready;
  wire                mac_0_io_out_valid;
  wire       [31:0]   mac_0_io_out_payload;
  wire                mac_1_io_ina_ready;
  wire                mac_1_io_inb_ready;
  wire                mac_1_io_out_valid;
  wire       [31:0]   mac_1_io_out_payload;
  wire                mac_2_io_ina_ready;
  wire                mac_2_io_inb_ready;
  wire                mac_2_io_out_valid;
  wire       [31:0]   mac_2_io_out_payload;
  wire                mac_3_io_ina_ready;
  wire                mac_3_io_inb_ready;
  wire                mac_3_io_out_valid;
  wire       [31:0]   mac_3_io_out_payload;
  wire                mac_4_io_ina_ready;
  wire                mac_4_io_inb_ready;
  wire                mac_4_io_out_valid;
  wire       [31:0]   mac_4_io_out_payload;
  wire                mac_5_io_ina_ready;
  wire                mac_5_io_inb_ready;
  wire                mac_5_io_out_valid;
  wire       [31:0]   mac_5_io_out_payload;
  wire                mac_6_io_ina_ready;
  wire                mac_6_io_inb_ready;
  wire                mac_6_io_out_valid;
  wire       [31:0]   mac_6_io_out_payload;
  wire                mac_7_io_ina_ready;
  wire                mac_7_io_inb_ready;
  wire                mac_7_io_out_valid;
  wire       [31:0]   mac_7_io_out_payload;

  mac_acc_unit_40 mac_0 (
    .io_ina_valid      (ina_0_valid           ), //i
    .io_ina_ready      (mac_0_io_ina_ready    ), //o
    .io_ina_payload    (ina_0_payload         ), //i
    .io_inb_valid      (inb_0_valid           ), //i
    .io_inb_ready      (mac_0_io_inb_ready    ), //o
    .io_inb_payload    (inb_0_payload         ), //i
    .io_out_valid      (mac_0_io_out_valid    ), //o
    .io_out_ready      (out_0_ready           ), //i
    .io_out_payload    (mac_0_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_41 mac_1 (
    .io_ina_valid      (ina_1_valid           ), //i
    .io_ina_ready      (mac_1_io_ina_ready    ), //o
    .io_ina_payload    (ina_1_payload         ), //i
    .io_inb_valid      (inb_1_valid           ), //i
    .io_inb_ready      (mac_1_io_inb_ready    ), //o
    .io_inb_payload    (inb_1_payload         ), //i
    .io_out_valid      (mac_1_io_out_valid    ), //o
    .io_out_ready      (out_1_ready           ), //i
    .io_out_payload    (mac_1_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_42 mac_2 (
    .io_ina_valid      (ina_2_valid           ), //i
    .io_ina_ready      (mac_2_io_ina_ready    ), //o
    .io_ina_payload    (ina_2_payload         ), //i
    .io_inb_valid      (inb_2_valid           ), //i
    .io_inb_ready      (mac_2_io_inb_ready    ), //o
    .io_inb_payload    (inb_2_payload         ), //i
    .io_out_valid      (mac_2_io_out_valid    ), //o
    .io_out_ready      (out_2_ready           ), //i
    .io_out_payload    (mac_2_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_43 mac_3 (
    .io_ina_valid      (ina_3_valid           ), //i
    .io_ina_ready      (mac_3_io_ina_ready    ), //o
    .io_ina_payload    (ina_3_payload         ), //i
    .io_inb_valid      (inb_3_valid           ), //i
    .io_inb_ready      (mac_3_io_inb_ready    ), //o
    .io_inb_payload    (inb_3_payload         ), //i
    .io_out_valid      (mac_3_io_out_valid    ), //o
    .io_out_ready      (out_3_ready           ), //i
    .io_out_payload    (mac_3_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_44 mac_4 (
    .io_ina_valid      (ina_4_valid           ), //i
    .io_ina_ready      (mac_4_io_ina_ready    ), //o
    .io_ina_payload    (ina_4_payload         ), //i
    .io_inb_valid      (inb_4_valid           ), //i
    .io_inb_ready      (mac_4_io_inb_ready    ), //o
    .io_inb_payload    (inb_4_payload         ), //i
    .io_out_valid      (mac_4_io_out_valid    ), //o
    .io_out_ready      (out_4_ready           ), //i
    .io_out_payload    (mac_4_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_45 mac_5 (
    .io_ina_valid      (ina_5_valid           ), //i
    .io_ina_ready      (mac_5_io_ina_ready    ), //o
    .io_ina_payload    (ina_5_payload         ), //i
    .io_inb_valid      (inb_5_valid           ), //i
    .io_inb_ready      (mac_5_io_inb_ready    ), //o
    .io_inb_payload    (inb_5_payload         ), //i
    .io_out_valid      (mac_5_io_out_valid    ), //o
    .io_out_ready      (out_5_ready           ), //i
    .io_out_payload    (mac_5_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_46 mac_6 (
    .io_ina_valid      (ina_6_valid           ), //i
    .io_ina_ready      (mac_6_io_ina_ready    ), //o
    .io_ina_payload    (ina_6_payload         ), //i
    .io_inb_valid      (inb_6_valid           ), //i
    .io_inb_ready      (mac_6_io_inb_ready    ), //o
    .io_inb_payload    (inb_6_payload         ), //i
    .io_out_valid      (mac_6_io_out_valid    ), //o
    .io_out_ready      (out_6_ready           ), //i
    .io_out_payload    (mac_6_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_47 mac_7 (
    .io_ina_valid      (ina_7_valid           ), //i
    .io_ina_ready      (mac_7_io_ina_ready    ), //o
    .io_ina_payload    (ina_7_payload         ), //i
    .io_inb_valid      (inb_7_valid           ), //i
    .io_inb_ready      (mac_7_io_inb_ready    ), //o
    .io_inb_payload    (inb_7_payload         ), //i
    .io_out_valid      (mac_7_io_out_valid    ), //o
    .io_out_ready      (out_7_ready           ), //i
    .io_out_payload    (mac_7_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  assign ina_0_ready = mac_0_io_ina_ready;
  assign inb_0_ready = mac_0_io_inb_ready;
  assign out_0_valid = mac_0_io_out_valid;
  assign out_0_payload = mac_0_io_out_payload;
  assign ina_1_ready = mac_1_io_ina_ready;
  assign inb_1_ready = mac_1_io_inb_ready;
  assign out_1_valid = mac_1_io_out_valid;
  assign out_1_payload = mac_1_io_out_payload;
  assign ina_2_ready = mac_2_io_ina_ready;
  assign inb_2_ready = mac_2_io_inb_ready;
  assign out_2_valid = mac_2_io_out_valid;
  assign out_2_payload = mac_2_io_out_payload;
  assign ina_3_ready = mac_3_io_ina_ready;
  assign inb_3_ready = mac_3_io_inb_ready;
  assign out_3_valid = mac_3_io_out_valid;
  assign out_3_payload = mac_3_io_out_payload;
  assign ina_4_ready = mac_4_io_ina_ready;
  assign inb_4_ready = mac_4_io_inb_ready;
  assign out_4_valid = mac_4_io_out_valid;
  assign out_4_payload = mac_4_io_out_payload;
  assign ina_5_ready = mac_5_io_ina_ready;
  assign inb_5_ready = mac_5_io_inb_ready;
  assign out_5_valid = mac_5_io_out_valid;
  assign out_5_payload = mac_5_io_out_payload;
  assign ina_6_ready = mac_6_io_ina_ready;
  assign inb_6_ready = mac_6_io_inb_ready;
  assign out_6_valid = mac_6_io_out_valid;
  assign out_6_payload = mac_6_io_out_payload;
  assign ina_7_ready = mac_7_io_ina_ready;
  assign inb_7_ready = mac_7_io_inb_ready;
  assign out_7_valid = mac_7_io_out_valid;
  assign out_7_payload = mac_7_io_out_payload;

endmodule

module mac_acc_atom_4 (
  input               ina_0_valid,
  output              ina_0_ready,
  input      [31:0]   ina_0_payload,
  input               ina_1_valid,
  output              ina_1_ready,
  input      [31:0]   ina_1_payload,
  input               ina_2_valid,
  output              ina_2_ready,
  input      [31:0]   ina_2_payload,
  input               ina_3_valid,
  output              ina_3_ready,
  input      [31:0]   ina_3_payload,
  input               ina_4_valid,
  output              ina_4_ready,
  input      [31:0]   ina_4_payload,
  input               ina_5_valid,
  output              ina_5_ready,
  input      [31:0]   ina_5_payload,
  input               ina_6_valid,
  output              ina_6_ready,
  input      [31:0]   ina_6_payload,
  input               ina_7_valid,
  output              ina_7_ready,
  input      [31:0]   ina_7_payload,
  input               inb_0_valid,
  output              inb_0_ready,
  input      [31:0]   inb_0_payload,
  input               inb_1_valid,
  output              inb_1_ready,
  input      [31:0]   inb_1_payload,
  input               inb_2_valid,
  output              inb_2_ready,
  input      [31:0]   inb_2_payload,
  input               inb_3_valid,
  output              inb_3_ready,
  input      [31:0]   inb_3_payload,
  input               inb_4_valid,
  output              inb_4_ready,
  input      [31:0]   inb_4_payload,
  input               inb_5_valid,
  output              inb_5_ready,
  input      [31:0]   inb_5_payload,
  input               inb_6_valid,
  output              inb_6_ready,
  input      [31:0]   inb_6_payload,
  input               inb_7_valid,
  output              inb_7_ready,
  input      [31:0]   inb_7_payload,
  output              out_0_valid,
  input               out_0_ready,
  output     [31:0]   out_0_payload,
  output              out_1_valid,
  input               out_1_ready,
  output     [31:0]   out_1_payload,
  output              out_2_valid,
  input               out_2_ready,
  output     [31:0]   out_2_payload,
  output              out_3_valid,
  input               out_3_ready,
  output     [31:0]   out_3_payload,
  output              out_4_valid,
  input               out_4_ready,
  output     [31:0]   out_4_payload,
  output              out_5_valid,
  input               out_5_ready,
  output     [31:0]   out_5_payload,
  output              out_6_valid,
  input               out_6_ready,
  output     [31:0]   out_6_payload,
  output              out_7_valid,
  input               out_7_ready,
  output     [31:0]   out_7_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                mac_0_io_ina_ready;
  wire                mac_0_io_inb_ready;
  wire                mac_0_io_out_valid;
  wire       [31:0]   mac_0_io_out_payload;
  wire                mac_1_io_ina_ready;
  wire                mac_1_io_inb_ready;
  wire                mac_1_io_out_valid;
  wire       [31:0]   mac_1_io_out_payload;
  wire                mac_2_io_ina_ready;
  wire                mac_2_io_inb_ready;
  wire                mac_2_io_out_valid;
  wire       [31:0]   mac_2_io_out_payload;
  wire                mac_3_io_ina_ready;
  wire                mac_3_io_inb_ready;
  wire                mac_3_io_out_valid;
  wire       [31:0]   mac_3_io_out_payload;
  wire                mac_4_io_ina_ready;
  wire                mac_4_io_inb_ready;
  wire                mac_4_io_out_valid;
  wire       [31:0]   mac_4_io_out_payload;
  wire                mac_5_io_ina_ready;
  wire                mac_5_io_inb_ready;
  wire                mac_5_io_out_valid;
  wire       [31:0]   mac_5_io_out_payload;
  wire                mac_6_io_ina_ready;
  wire                mac_6_io_inb_ready;
  wire                mac_6_io_out_valid;
  wire       [31:0]   mac_6_io_out_payload;
  wire                mac_7_io_ina_ready;
  wire                mac_7_io_inb_ready;
  wire                mac_7_io_out_valid;
  wire       [31:0]   mac_7_io_out_payload;

  mac_acc_unit_32 mac_0 (
    .io_ina_valid      (ina_0_valid           ), //i
    .io_ina_ready      (mac_0_io_ina_ready    ), //o
    .io_ina_payload    (ina_0_payload         ), //i
    .io_inb_valid      (inb_0_valid           ), //i
    .io_inb_ready      (mac_0_io_inb_ready    ), //o
    .io_inb_payload    (inb_0_payload         ), //i
    .io_out_valid      (mac_0_io_out_valid    ), //o
    .io_out_ready      (out_0_ready           ), //i
    .io_out_payload    (mac_0_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_33 mac_1 (
    .io_ina_valid      (ina_1_valid           ), //i
    .io_ina_ready      (mac_1_io_ina_ready    ), //o
    .io_ina_payload    (ina_1_payload         ), //i
    .io_inb_valid      (inb_1_valid           ), //i
    .io_inb_ready      (mac_1_io_inb_ready    ), //o
    .io_inb_payload    (inb_1_payload         ), //i
    .io_out_valid      (mac_1_io_out_valid    ), //o
    .io_out_ready      (out_1_ready           ), //i
    .io_out_payload    (mac_1_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_34 mac_2 (
    .io_ina_valid      (ina_2_valid           ), //i
    .io_ina_ready      (mac_2_io_ina_ready    ), //o
    .io_ina_payload    (ina_2_payload         ), //i
    .io_inb_valid      (inb_2_valid           ), //i
    .io_inb_ready      (mac_2_io_inb_ready    ), //o
    .io_inb_payload    (inb_2_payload         ), //i
    .io_out_valid      (mac_2_io_out_valid    ), //o
    .io_out_ready      (out_2_ready           ), //i
    .io_out_payload    (mac_2_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_35 mac_3 (
    .io_ina_valid      (ina_3_valid           ), //i
    .io_ina_ready      (mac_3_io_ina_ready    ), //o
    .io_ina_payload    (ina_3_payload         ), //i
    .io_inb_valid      (inb_3_valid           ), //i
    .io_inb_ready      (mac_3_io_inb_ready    ), //o
    .io_inb_payload    (inb_3_payload         ), //i
    .io_out_valid      (mac_3_io_out_valid    ), //o
    .io_out_ready      (out_3_ready           ), //i
    .io_out_payload    (mac_3_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_36 mac_4 (
    .io_ina_valid      (ina_4_valid           ), //i
    .io_ina_ready      (mac_4_io_ina_ready    ), //o
    .io_ina_payload    (ina_4_payload         ), //i
    .io_inb_valid      (inb_4_valid           ), //i
    .io_inb_ready      (mac_4_io_inb_ready    ), //o
    .io_inb_payload    (inb_4_payload         ), //i
    .io_out_valid      (mac_4_io_out_valid    ), //o
    .io_out_ready      (out_4_ready           ), //i
    .io_out_payload    (mac_4_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_37 mac_5 (
    .io_ina_valid      (ina_5_valid           ), //i
    .io_ina_ready      (mac_5_io_ina_ready    ), //o
    .io_ina_payload    (ina_5_payload         ), //i
    .io_inb_valid      (inb_5_valid           ), //i
    .io_inb_ready      (mac_5_io_inb_ready    ), //o
    .io_inb_payload    (inb_5_payload         ), //i
    .io_out_valid      (mac_5_io_out_valid    ), //o
    .io_out_ready      (out_5_ready           ), //i
    .io_out_payload    (mac_5_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_38 mac_6 (
    .io_ina_valid      (ina_6_valid           ), //i
    .io_ina_ready      (mac_6_io_ina_ready    ), //o
    .io_ina_payload    (ina_6_payload         ), //i
    .io_inb_valid      (inb_6_valid           ), //i
    .io_inb_ready      (mac_6_io_inb_ready    ), //o
    .io_inb_payload    (inb_6_payload         ), //i
    .io_out_valid      (mac_6_io_out_valid    ), //o
    .io_out_ready      (out_6_ready           ), //i
    .io_out_payload    (mac_6_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_39 mac_7 (
    .io_ina_valid      (ina_7_valid           ), //i
    .io_ina_ready      (mac_7_io_ina_ready    ), //o
    .io_ina_payload    (ina_7_payload         ), //i
    .io_inb_valid      (inb_7_valid           ), //i
    .io_inb_ready      (mac_7_io_inb_ready    ), //o
    .io_inb_payload    (inb_7_payload         ), //i
    .io_out_valid      (mac_7_io_out_valid    ), //o
    .io_out_ready      (out_7_ready           ), //i
    .io_out_payload    (mac_7_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  assign ina_0_ready = mac_0_io_ina_ready;
  assign inb_0_ready = mac_0_io_inb_ready;
  assign out_0_valid = mac_0_io_out_valid;
  assign out_0_payload = mac_0_io_out_payload;
  assign ina_1_ready = mac_1_io_ina_ready;
  assign inb_1_ready = mac_1_io_inb_ready;
  assign out_1_valid = mac_1_io_out_valid;
  assign out_1_payload = mac_1_io_out_payload;
  assign ina_2_ready = mac_2_io_ina_ready;
  assign inb_2_ready = mac_2_io_inb_ready;
  assign out_2_valid = mac_2_io_out_valid;
  assign out_2_payload = mac_2_io_out_payload;
  assign ina_3_ready = mac_3_io_ina_ready;
  assign inb_3_ready = mac_3_io_inb_ready;
  assign out_3_valid = mac_3_io_out_valid;
  assign out_3_payload = mac_3_io_out_payload;
  assign ina_4_ready = mac_4_io_ina_ready;
  assign inb_4_ready = mac_4_io_inb_ready;
  assign out_4_valid = mac_4_io_out_valid;
  assign out_4_payload = mac_4_io_out_payload;
  assign ina_5_ready = mac_5_io_ina_ready;
  assign inb_5_ready = mac_5_io_inb_ready;
  assign out_5_valid = mac_5_io_out_valid;
  assign out_5_payload = mac_5_io_out_payload;
  assign ina_6_ready = mac_6_io_ina_ready;
  assign inb_6_ready = mac_6_io_inb_ready;
  assign out_6_valid = mac_6_io_out_valid;
  assign out_6_payload = mac_6_io_out_payload;
  assign ina_7_ready = mac_7_io_ina_ready;
  assign inb_7_ready = mac_7_io_inb_ready;
  assign out_7_valid = mac_7_io_out_valid;
  assign out_7_payload = mac_7_io_out_payload;

endmodule

module mac_acc_atom_3 (
  input               ina_0_valid,
  output              ina_0_ready,
  input      [31:0]   ina_0_payload,
  input               ina_1_valid,
  output              ina_1_ready,
  input      [31:0]   ina_1_payload,
  input               ina_2_valid,
  output              ina_2_ready,
  input      [31:0]   ina_2_payload,
  input               ina_3_valid,
  output              ina_3_ready,
  input      [31:0]   ina_3_payload,
  input               ina_4_valid,
  output              ina_4_ready,
  input      [31:0]   ina_4_payload,
  input               ina_5_valid,
  output              ina_5_ready,
  input      [31:0]   ina_5_payload,
  input               ina_6_valid,
  output              ina_6_ready,
  input      [31:0]   ina_6_payload,
  input               ina_7_valid,
  output              ina_7_ready,
  input      [31:0]   ina_7_payload,
  input               inb_0_valid,
  output              inb_0_ready,
  input      [31:0]   inb_0_payload,
  input               inb_1_valid,
  output              inb_1_ready,
  input      [31:0]   inb_1_payload,
  input               inb_2_valid,
  output              inb_2_ready,
  input      [31:0]   inb_2_payload,
  input               inb_3_valid,
  output              inb_3_ready,
  input      [31:0]   inb_3_payload,
  input               inb_4_valid,
  output              inb_4_ready,
  input      [31:0]   inb_4_payload,
  input               inb_5_valid,
  output              inb_5_ready,
  input      [31:0]   inb_5_payload,
  input               inb_6_valid,
  output              inb_6_ready,
  input      [31:0]   inb_6_payload,
  input               inb_7_valid,
  output              inb_7_ready,
  input      [31:0]   inb_7_payload,
  output              out_0_valid,
  input               out_0_ready,
  output     [31:0]   out_0_payload,
  output              out_1_valid,
  input               out_1_ready,
  output     [31:0]   out_1_payload,
  output              out_2_valid,
  input               out_2_ready,
  output     [31:0]   out_2_payload,
  output              out_3_valid,
  input               out_3_ready,
  output     [31:0]   out_3_payload,
  output              out_4_valid,
  input               out_4_ready,
  output     [31:0]   out_4_payload,
  output              out_5_valid,
  input               out_5_ready,
  output     [31:0]   out_5_payload,
  output              out_6_valid,
  input               out_6_ready,
  output     [31:0]   out_6_payload,
  output              out_7_valid,
  input               out_7_ready,
  output     [31:0]   out_7_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                mac_0_io_ina_ready;
  wire                mac_0_io_inb_ready;
  wire                mac_0_io_out_valid;
  wire       [31:0]   mac_0_io_out_payload;
  wire                mac_1_io_ina_ready;
  wire                mac_1_io_inb_ready;
  wire                mac_1_io_out_valid;
  wire       [31:0]   mac_1_io_out_payload;
  wire                mac_2_io_ina_ready;
  wire                mac_2_io_inb_ready;
  wire                mac_2_io_out_valid;
  wire       [31:0]   mac_2_io_out_payload;
  wire                mac_3_io_ina_ready;
  wire                mac_3_io_inb_ready;
  wire                mac_3_io_out_valid;
  wire       [31:0]   mac_3_io_out_payload;
  wire                mac_4_io_ina_ready;
  wire                mac_4_io_inb_ready;
  wire                mac_4_io_out_valid;
  wire       [31:0]   mac_4_io_out_payload;
  wire                mac_5_io_ina_ready;
  wire                mac_5_io_inb_ready;
  wire                mac_5_io_out_valid;
  wire       [31:0]   mac_5_io_out_payload;
  wire                mac_6_io_ina_ready;
  wire                mac_6_io_inb_ready;
  wire                mac_6_io_out_valid;
  wire       [31:0]   mac_6_io_out_payload;
  wire                mac_7_io_ina_ready;
  wire                mac_7_io_inb_ready;
  wire                mac_7_io_out_valid;
  wire       [31:0]   mac_7_io_out_payload;

  mac_acc_unit_24 mac_0 (
    .io_ina_valid      (ina_0_valid           ), //i
    .io_ina_ready      (mac_0_io_ina_ready    ), //o
    .io_ina_payload    (ina_0_payload         ), //i
    .io_inb_valid      (inb_0_valid           ), //i
    .io_inb_ready      (mac_0_io_inb_ready    ), //o
    .io_inb_payload    (inb_0_payload         ), //i
    .io_out_valid      (mac_0_io_out_valid    ), //o
    .io_out_ready      (out_0_ready           ), //i
    .io_out_payload    (mac_0_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_25 mac_1 (
    .io_ina_valid      (ina_1_valid           ), //i
    .io_ina_ready      (mac_1_io_ina_ready    ), //o
    .io_ina_payload    (ina_1_payload         ), //i
    .io_inb_valid      (inb_1_valid           ), //i
    .io_inb_ready      (mac_1_io_inb_ready    ), //o
    .io_inb_payload    (inb_1_payload         ), //i
    .io_out_valid      (mac_1_io_out_valid    ), //o
    .io_out_ready      (out_1_ready           ), //i
    .io_out_payload    (mac_1_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_26 mac_2 (
    .io_ina_valid      (ina_2_valid           ), //i
    .io_ina_ready      (mac_2_io_ina_ready    ), //o
    .io_ina_payload    (ina_2_payload         ), //i
    .io_inb_valid      (inb_2_valid           ), //i
    .io_inb_ready      (mac_2_io_inb_ready    ), //o
    .io_inb_payload    (inb_2_payload         ), //i
    .io_out_valid      (mac_2_io_out_valid    ), //o
    .io_out_ready      (out_2_ready           ), //i
    .io_out_payload    (mac_2_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_27 mac_3 (
    .io_ina_valid      (ina_3_valid           ), //i
    .io_ina_ready      (mac_3_io_ina_ready    ), //o
    .io_ina_payload    (ina_3_payload         ), //i
    .io_inb_valid      (inb_3_valid           ), //i
    .io_inb_ready      (mac_3_io_inb_ready    ), //o
    .io_inb_payload    (inb_3_payload         ), //i
    .io_out_valid      (mac_3_io_out_valid    ), //o
    .io_out_ready      (out_3_ready           ), //i
    .io_out_payload    (mac_3_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_28 mac_4 (
    .io_ina_valid      (ina_4_valid           ), //i
    .io_ina_ready      (mac_4_io_ina_ready    ), //o
    .io_ina_payload    (ina_4_payload         ), //i
    .io_inb_valid      (inb_4_valid           ), //i
    .io_inb_ready      (mac_4_io_inb_ready    ), //o
    .io_inb_payload    (inb_4_payload         ), //i
    .io_out_valid      (mac_4_io_out_valid    ), //o
    .io_out_ready      (out_4_ready           ), //i
    .io_out_payload    (mac_4_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_29 mac_5 (
    .io_ina_valid      (ina_5_valid           ), //i
    .io_ina_ready      (mac_5_io_ina_ready    ), //o
    .io_ina_payload    (ina_5_payload         ), //i
    .io_inb_valid      (inb_5_valid           ), //i
    .io_inb_ready      (mac_5_io_inb_ready    ), //o
    .io_inb_payload    (inb_5_payload         ), //i
    .io_out_valid      (mac_5_io_out_valid    ), //o
    .io_out_ready      (out_5_ready           ), //i
    .io_out_payload    (mac_5_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_30 mac_6 (
    .io_ina_valid      (ina_6_valid           ), //i
    .io_ina_ready      (mac_6_io_ina_ready    ), //o
    .io_ina_payload    (ina_6_payload         ), //i
    .io_inb_valid      (inb_6_valid           ), //i
    .io_inb_ready      (mac_6_io_inb_ready    ), //o
    .io_inb_payload    (inb_6_payload         ), //i
    .io_out_valid      (mac_6_io_out_valid    ), //o
    .io_out_ready      (out_6_ready           ), //i
    .io_out_payload    (mac_6_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_31 mac_7 (
    .io_ina_valid      (ina_7_valid           ), //i
    .io_ina_ready      (mac_7_io_ina_ready    ), //o
    .io_ina_payload    (ina_7_payload         ), //i
    .io_inb_valid      (inb_7_valid           ), //i
    .io_inb_ready      (mac_7_io_inb_ready    ), //o
    .io_inb_payload    (inb_7_payload         ), //i
    .io_out_valid      (mac_7_io_out_valid    ), //o
    .io_out_ready      (out_7_ready           ), //i
    .io_out_payload    (mac_7_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  assign ina_0_ready = mac_0_io_ina_ready;
  assign inb_0_ready = mac_0_io_inb_ready;
  assign out_0_valid = mac_0_io_out_valid;
  assign out_0_payload = mac_0_io_out_payload;
  assign ina_1_ready = mac_1_io_ina_ready;
  assign inb_1_ready = mac_1_io_inb_ready;
  assign out_1_valid = mac_1_io_out_valid;
  assign out_1_payload = mac_1_io_out_payload;
  assign ina_2_ready = mac_2_io_ina_ready;
  assign inb_2_ready = mac_2_io_inb_ready;
  assign out_2_valid = mac_2_io_out_valid;
  assign out_2_payload = mac_2_io_out_payload;
  assign ina_3_ready = mac_3_io_ina_ready;
  assign inb_3_ready = mac_3_io_inb_ready;
  assign out_3_valid = mac_3_io_out_valid;
  assign out_3_payload = mac_3_io_out_payload;
  assign ina_4_ready = mac_4_io_ina_ready;
  assign inb_4_ready = mac_4_io_inb_ready;
  assign out_4_valid = mac_4_io_out_valid;
  assign out_4_payload = mac_4_io_out_payload;
  assign ina_5_ready = mac_5_io_ina_ready;
  assign inb_5_ready = mac_5_io_inb_ready;
  assign out_5_valid = mac_5_io_out_valid;
  assign out_5_payload = mac_5_io_out_payload;
  assign ina_6_ready = mac_6_io_ina_ready;
  assign inb_6_ready = mac_6_io_inb_ready;
  assign out_6_valid = mac_6_io_out_valid;
  assign out_6_payload = mac_6_io_out_payload;
  assign ina_7_ready = mac_7_io_ina_ready;
  assign inb_7_ready = mac_7_io_inb_ready;
  assign out_7_valid = mac_7_io_out_valid;
  assign out_7_payload = mac_7_io_out_payload;

endmodule

module mac_acc_atom_2 (
  input               ina_0_valid,
  output              ina_0_ready,
  input      [31:0]   ina_0_payload,
  input               ina_1_valid,
  output              ina_1_ready,
  input      [31:0]   ina_1_payload,
  input               ina_2_valid,
  output              ina_2_ready,
  input      [31:0]   ina_2_payload,
  input               ina_3_valid,
  output              ina_3_ready,
  input      [31:0]   ina_3_payload,
  input               ina_4_valid,
  output              ina_4_ready,
  input      [31:0]   ina_4_payload,
  input               ina_5_valid,
  output              ina_5_ready,
  input      [31:0]   ina_5_payload,
  input               ina_6_valid,
  output              ina_6_ready,
  input      [31:0]   ina_6_payload,
  input               ina_7_valid,
  output              ina_7_ready,
  input      [31:0]   ina_7_payload,
  input               inb_0_valid,
  output              inb_0_ready,
  input      [31:0]   inb_0_payload,
  input               inb_1_valid,
  output              inb_1_ready,
  input      [31:0]   inb_1_payload,
  input               inb_2_valid,
  output              inb_2_ready,
  input      [31:0]   inb_2_payload,
  input               inb_3_valid,
  output              inb_3_ready,
  input      [31:0]   inb_3_payload,
  input               inb_4_valid,
  output              inb_4_ready,
  input      [31:0]   inb_4_payload,
  input               inb_5_valid,
  output              inb_5_ready,
  input      [31:0]   inb_5_payload,
  input               inb_6_valid,
  output              inb_6_ready,
  input      [31:0]   inb_6_payload,
  input               inb_7_valid,
  output              inb_7_ready,
  input      [31:0]   inb_7_payload,
  output              out_0_valid,
  input               out_0_ready,
  output     [31:0]   out_0_payload,
  output              out_1_valid,
  input               out_1_ready,
  output     [31:0]   out_1_payload,
  output              out_2_valid,
  input               out_2_ready,
  output     [31:0]   out_2_payload,
  output              out_3_valid,
  input               out_3_ready,
  output     [31:0]   out_3_payload,
  output              out_4_valid,
  input               out_4_ready,
  output     [31:0]   out_4_payload,
  output              out_5_valid,
  input               out_5_ready,
  output     [31:0]   out_5_payload,
  output              out_6_valid,
  input               out_6_ready,
  output     [31:0]   out_6_payload,
  output              out_7_valid,
  input               out_7_ready,
  output     [31:0]   out_7_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                mac_0_io_ina_ready;
  wire                mac_0_io_inb_ready;
  wire                mac_0_io_out_valid;
  wire       [31:0]   mac_0_io_out_payload;
  wire                mac_1_io_ina_ready;
  wire                mac_1_io_inb_ready;
  wire                mac_1_io_out_valid;
  wire       [31:0]   mac_1_io_out_payload;
  wire                mac_2_io_ina_ready;
  wire                mac_2_io_inb_ready;
  wire                mac_2_io_out_valid;
  wire       [31:0]   mac_2_io_out_payload;
  wire                mac_3_io_ina_ready;
  wire                mac_3_io_inb_ready;
  wire                mac_3_io_out_valid;
  wire       [31:0]   mac_3_io_out_payload;
  wire                mac_4_io_ina_ready;
  wire                mac_4_io_inb_ready;
  wire                mac_4_io_out_valid;
  wire       [31:0]   mac_4_io_out_payload;
  wire                mac_5_io_ina_ready;
  wire                mac_5_io_inb_ready;
  wire                mac_5_io_out_valid;
  wire       [31:0]   mac_5_io_out_payload;
  wire                mac_6_io_ina_ready;
  wire                mac_6_io_inb_ready;
  wire                mac_6_io_out_valid;
  wire       [31:0]   mac_6_io_out_payload;
  wire                mac_7_io_ina_ready;
  wire                mac_7_io_inb_ready;
  wire                mac_7_io_out_valid;
  wire       [31:0]   mac_7_io_out_payload;

  mac_acc_unit_16 mac_0 (
    .io_ina_valid      (ina_0_valid           ), //i
    .io_ina_ready      (mac_0_io_ina_ready    ), //o
    .io_ina_payload    (ina_0_payload         ), //i
    .io_inb_valid      (inb_0_valid           ), //i
    .io_inb_ready      (mac_0_io_inb_ready    ), //o
    .io_inb_payload    (inb_0_payload         ), //i
    .io_out_valid      (mac_0_io_out_valid    ), //o
    .io_out_ready      (out_0_ready           ), //i
    .io_out_payload    (mac_0_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_17 mac_1 (
    .io_ina_valid      (ina_1_valid           ), //i
    .io_ina_ready      (mac_1_io_ina_ready    ), //o
    .io_ina_payload    (ina_1_payload         ), //i
    .io_inb_valid      (inb_1_valid           ), //i
    .io_inb_ready      (mac_1_io_inb_ready    ), //o
    .io_inb_payload    (inb_1_payload         ), //i
    .io_out_valid      (mac_1_io_out_valid    ), //o
    .io_out_ready      (out_1_ready           ), //i
    .io_out_payload    (mac_1_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_18 mac_2 (
    .io_ina_valid      (ina_2_valid           ), //i
    .io_ina_ready      (mac_2_io_ina_ready    ), //o
    .io_ina_payload    (ina_2_payload         ), //i
    .io_inb_valid      (inb_2_valid           ), //i
    .io_inb_ready      (mac_2_io_inb_ready    ), //o
    .io_inb_payload    (inb_2_payload         ), //i
    .io_out_valid      (mac_2_io_out_valid    ), //o
    .io_out_ready      (out_2_ready           ), //i
    .io_out_payload    (mac_2_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_19 mac_3 (
    .io_ina_valid      (ina_3_valid           ), //i
    .io_ina_ready      (mac_3_io_ina_ready    ), //o
    .io_ina_payload    (ina_3_payload         ), //i
    .io_inb_valid      (inb_3_valid           ), //i
    .io_inb_ready      (mac_3_io_inb_ready    ), //o
    .io_inb_payload    (inb_3_payload         ), //i
    .io_out_valid      (mac_3_io_out_valid    ), //o
    .io_out_ready      (out_3_ready           ), //i
    .io_out_payload    (mac_3_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_20 mac_4 (
    .io_ina_valid      (ina_4_valid           ), //i
    .io_ina_ready      (mac_4_io_ina_ready    ), //o
    .io_ina_payload    (ina_4_payload         ), //i
    .io_inb_valid      (inb_4_valid           ), //i
    .io_inb_ready      (mac_4_io_inb_ready    ), //o
    .io_inb_payload    (inb_4_payload         ), //i
    .io_out_valid      (mac_4_io_out_valid    ), //o
    .io_out_ready      (out_4_ready           ), //i
    .io_out_payload    (mac_4_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_21 mac_5 (
    .io_ina_valid      (ina_5_valid           ), //i
    .io_ina_ready      (mac_5_io_ina_ready    ), //o
    .io_ina_payload    (ina_5_payload         ), //i
    .io_inb_valid      (inb_5_valid           ), //i
    .io_inb_ready      (mac_5_io_inb_ready    ), //o
    .io_inb_payload    (inb_5_payload         ), //i
    .io_out_valid      (mac_5_io_out_valid    ), //o
    .io_out_ready      (out_5_ready           ), //i
    .io_out_payload    (mac_5_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_22 mac_6 (
    .io_ina_valid      (ina_6_valid           ), //i
    .io_ina_ready      (mac_6_io_ina_ready    ), //o
    .io_ina_payload    (ina_6_payload         ), //i
    .io_inb_valid      (inb_6_valid           ), //i
    .io_inb_ready      (mac_6_io_inb_ready    ), //o
    .io_inb_payload    (inb_6_payload         ), //i
    .io_out_valid      (mac_6_io_out_valid    ), //o
    .io_out_ready      (out_6_ready           ), //i
    .io_out_payload    (mac_6_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_23 mac_7 (
    .io_ina_valid      (ina_7_valid           ), //i
    .io_ina_ready      (mac_7_io_ina_ready    ), //o
    .io_ina_payload    (ina_7_payload         ), //i
    .io_inb_valid      (inb_7_valid           ), //i
    .io_inb_ready      (mac_7_io_inb_ready    ), //o
    .io_inb_payload    (inb_7_payload         ), //i
    .io_out_valid      (mac_7_io_out_valid    ), //o
    .io_out_ready      (out_7_ready           ), //i
    .io_out_payload    (mac_7_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  assign ina_0_ready = mac_0_io_ina_ready;
  assign inb_0_ready = mac_0_io_inb_ready;
  assign out_0_valid = mac_0_io_out_valid;
  assign out_0_payload = mac_0_io_out_payload;
  assign ina_1_ready = mac_1_io_ina_ready;
  assign inb_1_ready = mac_1_io_inb_ready;
  assign out_1_valid = mac_1_io_out_valid;
  assign out_1_payload = mac_1_io_out_payload;
  assign ina_2_ready = mac_2_io_ina_ready;
  assign inb_2_ready = mac_2_io_inb_ready;
  assign out_2_valid = mac_2_io_out_valid;
  assign out_2_payload = mac_2_io_out_payload;
  assign ina_3_ready = mac_3_io_ina_ready;
  assign inb_3_ready = mac_3_io_inb_ready;
  assign out_3_valid = mac_3_io_out_valid;
  assign out_3_payload = mac_3_io_out_payload;
  assign ina_4_ready = mac_4_io_ina_ready;
  assign inb_4_ready = mac_4_io_inb_ready;
  assign out_4_valid = mac_4_io_out_valid;
  assign out_4_payload = mac_4_io_out_payload;
  assign ina_5_ready = mac_5_io_ina_ready;
  assign inb_5_ready = mac_5_io_inb_ready;
  assign out_5_valid = mac_5_io_out_valid;
  assign out_5_payload = mac_5_io_out_payload;
  assign ina_6_ready = mac_6_io_ina_ready;
  assign inb_6_ready = mac_6_io_inb_ready;
  assign out_6_valid = mac_6_io_out_valid;
  assign out_6_payload = mac_6_io_out_payload;
  assign ina_7_ready = mac_7_io_ina_ready;
  assign inb_7_ready = mac_7_io_inb_ready;
  assign out_7_valid = mac_7_io_out_valid;
  assign out_7_payload = mac_7_io_out_payload;

endmodule

module mac_acc_atom_1 (
  input               ina_0_valid,
  output              ina_0_ready,
  input      [31:0]   ina_0_payload,
  input               ina_1_valid,
  output              ina_1_ready,
  input      [31:0]   ina_1_payload,
  input               ina_2_valid,
  output              ina_2_ready,
  input      [31:0]   ina_2_payload,
  input               ina_3_valid,
  output              ina_3_ready,
  input      [31:0]   ina_3_payload,
  input               ina_4_valid,
  output              ina_4_ready,
  input      [31:0]   ina_4_payload,
  input               ina_5_valid,
  output              ina_5_ready,
  input      [31:0]   ina_5_payload,
  input               ina_6_valid,
  output              ina_6_ready,
  input      [31:0]   ina_6_payload,
  input               ina_7_valid,
  output              ina_7_ready,
  input      [31:0]   ina_7_payload,
  input               inb_0_valid,
  output              inb_0_ready,
  input      [31:0]   inb_0_payload,
  input               inb_1_valid,
  output              inb_1_ready,
  input      [31:0]   inb_1_payload,
  input               inb_2_valid,
  output              inb_2_ready,
  input      [31:0]   inb_2_payload,
  input               inb_3_valid,
  output              inb_3_ready,
  input      [31:0]   inb_3_payload,
  input               inb_4_valid,
  output              inb_4_ready,
  input      [31:0]   inb_4_payload,
  input               inb_5_valid,
  output              inb_5_ready,
  input      [31:0]   inb_5_payload,
  input               inb_6_valid,
  output              inb_6_ready,
  input      [31:0]   inb_6_payload,
  input               inb_7_valid,
  output              inb_7_ready,
  input      [31:0]   inb_7_payload,
  output              out_0_valid,
  input               out_0_ready,
  output     [31:0]   out_0_payload,
  output              out_1_valid,
  input               out_1_ready,
  output     [31:0]   out_1_payload,
  output              out_2_valid,
  input               out_2_ready,
  output     [31:0]   out_2_payload,
  output              out_3_valid,
  input               out_3_ready,
  output     [31:0]   out_3_payload,
  output              out_4_valid,
  input               out_4_ready,
  output     [31:0]   out_4_payload,
  output              out_5_valid,
  input               out_5_ready,
  output     [31:0]   out_5_payload,
  output              out_6_valid,
  input               out_6_ready,
  output     [31:0]   out_6_payload,
  output              out_7_valid,
  input               out_7_ready,
  output     [31:0]   out_7_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                mac_0_io_ina_ready;
  wire                mac_0_io_inb_ready;
  wire                mac_0_io_out_valid;
  wire       [31:0]   mac_0_io_out_payload;
  wire                mac_1_io_ina_ready;
  wire                mac_1_io_inb_ready;
  wire                mac_1_io_out_valid;
  wire       [31:0]   mac_1_io_out_payload;
  wire                mac_2_io_ina_ready;
  wire                mac_2_io_inb_ready;
  wire                mac_2_io_out_valid;
  wire       [31:0]   mac_2_io_out_payload;
  wire                mac_3_io_ina_ready;
  wire                mac_3_io_inb_ready;
  wire                mac_3_io_out_valid;
  wire       [31:0]   mac_3_io_out_payload;
  wire                mac_4_io_ina_ready;
  wire                mac_4_io_inb_ready;
  wire                mac_4_io_out_valid;
  wire       [31:0]   mac_4_io_out_payload;
  wire                mac_5_io_ina_ready;
  wire                mac_5_io_inb_ready;
  wire                mac_5_io_out_valid;
  wire       [31:0]   mac_5_io_out_payload;
  wire                mac_6_io_ina_ready;
  wire                mac_6_io_inb_ready;
  wire                mac_6_io_out_valid;
  wire       [31:0]   mac_6_io_out_payload;
  wire                mac_7_io_ina_ready;
  wire                mac_7_io_inb_ready;
  wire                mac_7_io_out_valid;
  wire       [31:0]   mac_7_io_out_payload;

  mac_acc_unit_8 mac_0 (
    .io_ina_valid      (ina_0_valid           ), //i
    .io_ina_ready      (mac_0_io_ina_ready    ), //o
    .io_ina_payload    (ina_0_payload         ), //i
    .io_inb_valid      (inb_0_valid           ), //i
    .io_inb_ready      (mac_0_io_inb_ready    ), //o
    .io_inb_payload    (inb_0_payload         ), //i
    .io_out_valid      (mac_0_io_out_valid    ), //o
    .io_out_ready      (out_0_ready           ), //i
    .io_out_payload    (mac_0_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_9 mac_1 (
    .io_ina_valid      (ina_1_valid           ), //i
    .io_ina_ready      (mac_1_io_ina_ready    ), //o
    .io_ina_payload    (ina_1_payload         ), //i
    .io_inb_valid      (inb_1_valid           ), //i
    .io_inb_ready      (mac_1_io_inb_ready    ), //o
    .io_inb_payload    (inb_1_payload         ), //i
    .io_out_valid      (mac_1_io_out_valid    ), //o
    .io_out_ready      (out_1_ready           ), //i
    .io_out_payload    (mac_1_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_10 mac_2 (
    .io_ina_valid      (ina_2_valid           ), //i
    .io_ina_ready      (mac_2_io_ina_ready    ), //o
    .io_ina_payload    (ina_2_payload         ), //i
    .io_inb_valid      (inb_2_valid           ), //i
    .io_inb_ready      (mac_2_io_inb_ready    ), //o
    .io_inb_payload    (inb_2_payload         ), //i
    .io_out_valid      (mac_2_io_out_valid    ), //o
    .io_out_ready      (out_2_ready           ), //i
    .io_out_payload    (mac_2_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_11 mac_3 (
    .io_ina_valid      (ina_3_valid           ), //i
    .io_ina_ready      (mac_3_io_ina_ready    ), //o
    .io_ina_payload    (ina_3_payload         ), //i
    .io_inb_valid      (inb_3_valid           ), //i
    .io_inb_ready      (mac_3_io_inb_ready    ), //o
    .io_inb_payload    (inb_3_payload         ), //i
    .io_out_valid      (mac_3_io_out_valid    ), //o
    .io_out_ready      (out_3_ready           ), //i
    .io_out_payload    (mac_3_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_12 mac_4 (
    .io_ina_valid      (ina_4_valid           ), //i
    .io_ina_ready      (mac_4_io_ina_ready    ), //o
    .io_ina_payload    (ina_4_payload         ), //i
    .io_inb_valid      (inb_4_valid           ), //i
    .io_inb_ready      (mac_4_io_inb_ready    ), //o
    .io_inb_payload    (inb_4_payload         ), //i
    .io_out_valid      (mac_4_io_out_valid    ), //o
    .io_out_ready      (out_4_ready           ), //i
    .io_out_payload    (mac_4_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_13 mac_5 (
    .io_ina_valid      (ina_5_valid           ), //i
    .io_ina_ready      (mac_5_io_ina_ready    ), //o
    .io_ina_payload    (ina_5_payload         ), //i
    .io_inb_valid      (inb_5_valid           ), //i
    .io_inb_ready      (mac_5_io_inb_ready    ), //o
    .io_inb_payload    (inb_5_payload         ), //i
    .io_out_valid      (mac_5_io_out_valid    ), //o
    .io_out_ready      (out_5_ready           ), //i
    .io_out_payload    (mac_5_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_14 mac_6 (
    .io_ina_valid      (ina_6_valid           ), //i
    .io_ina_ready      (mac_6_io_ina_ready    ), //o
    .io_ina_payload    (ina_6_payload         ), //i
    .io_inb_valid      (inb_6_valid           ), //i
    .io_inb_ready      (mac_6_io_inb_ready    ), //o
    .io_inb_payload    (inb_6_payload         ), //i
    .io_out_valid      (mac_6_io_out_valid    ), //o
    .io_out_ready      (out_6_ready           ), //i
    .io_out_payload    (mac_6_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_15 mac_7 (
    .io_ina_valid      (ina_7_valid           ), //i
    .io_ina_ready      (mac_7_io_ina_ready    ), //o
    .io_ina_payload    (ina_7_payload         ), //i
    .io_inb_valid      (inb_7_valid           ), //i
    .io_inb_ready      (mac_7_io_inb_ready    ), //o
    .io_inb_payload    (inb_7_payload         ), //i
    .io_out_valid      (mac_7_io_out_valid    ), //o
    .io_out_ready      (out_7_ready           ), //i
    .io_out_payload    (mac_7_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  assign ina_0_ready = mac_0_io_ina_ready;
  assign inb_0_ready = mac_0_io_inb_ready;
  assign out_0_valid = mac_0_io_out_valid;
  assign out_0_payload = mac_0_io_out_payload;
  assign ina_1_ready = mac_1_io_ina_ready;
  assign inb_1_ready = mac_1_io_inb_ready;
  assign out_1_valid = mac_1_io_out_valid;
  assign out_1_payload = mac_1_io_out_payload;
  assign ina_2_ready = mac_2_io_ina_ready;
  assign inb_2_ready = mac_2_io_inb_ready;
  assign out_2_valid = mac_2_io_out_valid;
  assign out_2_payload = mac_2_io_out_payload;
  assign ina_3_ready = mac_3_io_ina_ready;
  assign inb_3_ready = mac_3_io_inb_ready;
  assign out_3_valid = mac_3_io_out_valid;
  assign out_3_payload = mac_3_io_out_payload;
  assign ina_4_ready = mac_4_io_ina_ready;
  assign inb_4_ready = mac_4_io_inb_ready;
  assign out_4_valid = mac_4_io_out_valid;
  assign out_4_payload = mac_4_io_out_payload;
  assign ina_5_ready = mac_5_io_ina_ready;
  assign inb_5_ready = mac_5_io_inb_ready;
  assign out_5_valid = mac_5_io_out_valid;
  assign out_5_payload = mac_5_io_out_payload;
  assign ina_6_ready = mac_6_io_ina_ready;
  assign inb_6_ready = mac_6_io_inb_ready;
  assign out_6_valid = mac_6_io_out_valid;
  assign out_6_payload = mac_6_io_out_payload;
  assign ina_7_ready = mac_7_io_ina_ready;
  assign inb_7_ready = mac_7_io_inb_ready;
  assign out_7_valid = mac_7_io_out_valid;
  assign out_7_payload = mac_7_io_out_payload;

endmodule

module mac_acc_atom (
  input               ina_0_valid,
  output              ina_0_ready,
  input      [31:0]   ina_0_payload,
  input               ina_1_valid,
  output              ina_1_ready,
  input      [31:0]   ina_1_payload,
  input               ina_2_valid,
  output              ina_2_ready,
  input      [31:0]   ina_2_payload,
  input               ina_3_valid,
  output              ina_3_ready,
  input      [31:0]   ina_3_payload,
  input               ina_4_valid,
  output              ina_4_ready,
  input      [31:0]   ina_4_payload,
  input               ina_5_valid,
  output              ina_5_ready,
  input      [31:0]   ina_5_payload,
  input               ina_6_valid,
  output              ina_6_ready,
  input      [31:0]   ina_6_payload,
  input               ina_7_valid,
  output              ina_7_ready,
  input      [31:0]   ina_7_payload,
  input               inb_0_valid,
  output              inb_0_ready,
  input      [31:0]   inb_0_payload,
  input               inb_1_valid,
  output              inb_1_ready,
  input      [31:0]   inb_1_payload,
  input               inb_2_valid,
  output              inb_2_ready,
  input      [31:0]   inb_2_payload,
  input               inb_3_valid,
  output              inb_3_ready,
  input      [31:0]   inb_3_payload,
  input               inb_4_valid,
  output              inb_4_ready,
  input      [31:0]   inb_4_payload,
  input               inb_5_valid,
  output              inb_5_ready,
  input      [31:0]   inb_5_payload,
  input               inb_6_valid,
  output              inb_6_ready,
  input      [31:0]   inb_6_payload,
  input               inb_7_valid,
  output              inb_7_ready,
  input      [31:0]   inb_7_payload,
  output              out_0_valid,
  input               out_0_ready,
  output     [31:0]   out_0_payload,
  output              out_1_valid,
  input               out_1_ready,
  output     [31:0]   out_1_payload,
  output              out_2_valid,
  input               out_2_ready,
  output     [31:0]   out_2_payload,
  output              out_3_valid,
  input               out_3_ready,
  output     [31:0]   out_3_payload,
  output              out_4_valid,
  input               out_4_ready,
  output     [31:0]   out_4_payload,
  output              out_5_valid,
  input               out_5_ready,
  output     [31:0]   out_5_payload,
  output              out_6_valid,
  input               out_6_ready,
  output     [31:0]   out_6_payload,
  output              out_7_valid,
  input               out_7_ready,
  output     [31:0]   out_7_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                mac_0_io_ina_ready;
  wire                mac_0_io_inb_ready;
  wire                mac_0_io_out_valid;
  wire       [31:0]   mac_0_io_out_payload;
  wire                mac_1_io_ina_ready;
  wire                mac_1_io_inb_ready;
  wire                mac_1_io_out_valid;
  wire       [31:0]   mac_1_io_out_payload;
  wire                mac_2_io_ina_ready;
  wire                mac_2_io_inb_ready;
  wire                mac_2_io_out_valid;
  wire       [31:0]   mac_2_io_out_payload;
  wire                mac_3_io_ina_ready;
  wire                mac_3_io_inb_ready;
  wire                mac_3_io_out_valid;
  wire       [31:0]   mac_3_io_out_payload;
  wire                mac_4_io_ina_ready;
  wire                mac_4_io_inb_ready;
  wire                mac_4_io_out_valid;
  wire       [31:0]   mac_4_io_out_payload;
  wire                mac_5_io_ina_ready;
  wire                mac_5_io_inb_ready;
  wire                mac_5_io_out_valid;
  wire       [31:0]   mac_5_io_out_payload;
  wire                mac_6_io_ina_ready;
  wire                mac_6_io_inb_ready;
  wire                mac_6_io_out_valid;
  wire       [31:0]   mac_6_io_out_payload;
  wire                mac_7_io_ina_ready;
  wire                mac_7_io_inb_ready;
  wire                mac_7_io_out_valid;
  wire       [31:0]   mac_7_io_out_payload;

  mac_acc_unit mac_0 (
    .io_ina_valid      (ina_0_valid           ), //i
    .io_ina_ready      (mac_0_io_ina_ready    ), //o
    .io_ina_payload    (ina_0_payload         ), //i
    .io_inb_valid      (inb_0_valid           ), //i
    .io_inb_ready      (mac_0_io_inb_ready    ), //o
    .io_inb_payload    (inb_0_payload         ), //i
    .io_out_valid      (mac_0_io_out_valid    ), //o
    .io_out_ready      (out_0_ready           ), //i
    .io_out_payload    (mac_0_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_1 mac_1 (
    .io_ina_valid      (ina_1_valid           ), //i
    .io_ina_ready      (mac_1_io_ina_ready    ), //o
    .io_ina_payload    (ina_1_payload         ), //i
    .io_inb_valid      (inb_1_valid           ), //i
    .io_inb_ready      (mac_1_io_inb_ready    ), //o
    .io_inb_payload    (inb_1_payload         ), //i
    .io_out_valid      (mac_1_io_out_valid    ), //o
    .io_out_ready      (out_1_ready           ), //i
    .io_out_payload    (mac_1_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_2 mac_2 (
    .io_ina_valid      (ina_2_valid           ), //i
    .io_ina_ready      (mac_2_io_ina_ready    ), //o
    .io_ina_payload    (ina_2_payload         ), //i
    .io_inb_valid      (inb_2_valid           ), //i
    .io_inb_ready      (mac_2_io_inb_ready    ), //o
    .io_inb_payload    (inb_2_payload         ), //i
    .io_out_valid      (mac_2_io_out_valid    ), //o
    .io_out_ready      (out_2_ready           ), //i
    .io_out_payload    (mac_2_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_3 mac_3 (
    .io_ina_valid      (ina_3_valid           ), //i
    .io_ina_ready      (mac_3_io_ina_ready    ), //o
    .io_ina_payload    (ina_3_payload         ), //i
    .io_inb_valid      (inb_3_valid           ), //i
    .io_inb_ready      (mac_3_io_inb_ready    ), //o
    .io_inb_payload    (inb_3_payload         ), //i
    .io_out_valid      (mac_3_io_out_valid    ), //o
    .io_out_ready      (out_3_ready           ), //i
    .io_out_payload    (mac_3_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_4 mac_4 (
    .io_ina_valid      (ina_4_valid           ), //i
    .io_ina_ready      (mac_4_io_ina_ready    ), //o
    .io_ina_payload    (ina_4_payload         ), //i
    .io_inb_valid      (inb_4_valid           ), //i
    .io_inb_ready      (mac_4_io_inb_ready    ), //o
    .io_inb_payload    (inb_4_payload         ), //i
    .io_out_valid      (mac_4_io_out_valid    ), //o
    .io_out_ready      (out_4_ready           ), //i
    .io_out_payload    (mac_4_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_5 mac_5 (
    .io_ina_valid      (ina_5_valid           ), //i
    .io_ina_ready      (mac_5_io_ina_ready    ), //o
    .io_ina_payload    (ina_5_payload         ), //i
    .io_inb_valid      (inb_5_valid           ), //i
    .io_inb_ready      (mac_5_io_inb_ready    ), //o
    .io_inb_payload    (inb_5_payload         ), //i
    .io_out_valid      (mac_5_io_out_valid    ), //o
    .io_out_ready      (out_5_ready           ), //i
    .io_out_payload    (mac_5_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_6 mac_6 (
    .io_ina_valid      (ina_6_valid           ), //i
    .io_ina_ready      (mac_6_io_ina_ready    ), //o
    .io_ina_payload    (ina_6_payload         ), //i
    .io_inb_valid      (inb_6_valid           ), //i
    .io_inb_ready      (mac_6_io_inb_ready    ), //o
    .io_inb_payload    (inb_6_payload         ), //i
    .io_out_valid      (mac_6_io_out_valid    ), //o
    .io_out_ready      (out_6_ready           ), //i
    .io_out_payload    (mac_6_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  mac_acc_unit_7 mac_7 (
    .io_ina_valid      (ina_7_valid           ), //i
    .io_ina_ready      (mac_7_io_ina_ready    ), //o
    .io_ina_payload    (ina_7_payload         ), //i
    .io_inb_valid      (inb_7_valid           ), //i
    .io_inb_ready      (mac_7_io_inb_ready    ), //o
    .io_inb_payload    (inb_7_payload         ), //i
    .io_out_valid      (mac_7_io_out_valid    ), //o
    .io_out_ready      (out_7_ready           ), //i
    .io_out_payload    (mac_7_io_out_payload  ), //o
    .io_acc_enable     (acc_enable            ), //i
    .io_par_acc_cnt    (par_acc_cnt           ), //i
    .clk               (clk                   ), //i
    .reset             (reset                 )  //i
  );
  assign ina_0_ready = mac_0_io_ina_ready;
  assign inb_0_ready = mac_0_io_inb_ready;
  assign out_0_valid = mac_0_io_out_valid;
  assign out_0_payload = mac_0_io_out_payload;
  assign ina_1_ready = mac_1_io_ina_ready;
  assign inb_1_ready = mac_1_io_inb_ready;
  assign out_1_valid = mac_1_io_out_valid;
  assign out_1_payload = mac_1_io_out_payload;
  assign ina_2_ready = mac_2_io_ina_ready;
  assign inb_2_ready = mac_2_io_inb_ready;
  assign out_2_valid = mac_2_io_out_valid;
  assign out_2_payload = mac_2_io_out_payload;
  assign ina_3_ready = mac_3_io_ina_ready;
  assign inb_3_ready = mac_3_io_inb_ready;
  assign out_3_valid = mac_3_io_out_valid;
  assign out_3_payload = mac_3_io_out_payload;
  assign ina_4_ready = mac_4_io_ina_ready;
  assign inb_4_ready = mac_4_io_inb_ready;
  assign out_4_valid = mac_4_io_out_valid;
  assign out_4_payload = mac_4_io_out_payload;
  assign ina_5_ready = mac_5_io_ina_ready;
  assign inb_5_ready = mac_5_io_inb_ready;
  assign out_5_valid = mac_5_io_out_valid;
  assign out_5_payload = mac_5_io_out_payload;
  assign ina_6_ready = mac_6_io_ina_ready;
  assign inb_6_ready = mac_6_io_inb_ready;
  assign out_6_valid = mac_6_io_out_valid;
  assign out_6_payload = mac_6_io_out_payload;
  assign ina_7_ready = mac_7_io_ina_ready;
  assign inb_7_ready = mac_7_io_inb_ready;
  assign out_7_valid = mac_7_io_out_valid;
  assign out_7_payload = mac_7_io_out_payload;

endmodule

module mac_acc_unit_63 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_63 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_62 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_62 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_61 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_61 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_60 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_60 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_59 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_59 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_58 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_58 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_57 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_57 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_56 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_56 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_55 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_55 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_54 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_54 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_53 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_53 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_52 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_52 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_51 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_51 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_50 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_50 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_49 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_49 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_48 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_48 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_47 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_47 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_46 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_46 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_45 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_45 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_44 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_44 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_43 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_43 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_42 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_42 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_41 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_41 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_40 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_40 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_39 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_39 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_38 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_38 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_37 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_37 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_36 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_36 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_35 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_35 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_34 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_34 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_33 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_33 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_32 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_32 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_31 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_31 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_30 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_30 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_29 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_29 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_28 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_28 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_27 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_27 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_26 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_26 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_25 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_25 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_24 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_24 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_23 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_23 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_22 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_22 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_21 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_21 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_20 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_20 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_19 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_19 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_18 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_18 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_17 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_17 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_16 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_16 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_15 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_15 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_14 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_14 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_13 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_13 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_12 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_12 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_11 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_11 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_10 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_10 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_9 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_9 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_8 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_8 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_7 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_7 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_6 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_6 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_5 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_5 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_4 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_4 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_3 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_3 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_2 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_2 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit_1 (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc_1 acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module mac_acc_unit (
  input               io_ina_valid,
  output              io_ina_ready,
  input      [31:0]   io_ina_payload,
  input               io_inb_valid,
  output              io_inb_ready,
  input      [31:0]   io_inb_payload,
  output              io_out_valid,
  input               io_out_ready,
  output     [31:0]   io_out_payload,
  input               io_acc_enable,
  input      [15:0]   io_par_acc_cnt,
  input               clk,
  input               reset
);
  wire                multi_ina_ready;
  wire                multi_inb_ready;
  wire                multi_out_valid;
  wire       [31:0]   multi_out_payload;
  wire                acc_ina_ready;
  wire                acc_out_valid;
  wire       [31:0]   acc_out_payload;

  fp_multiply multi (
    .ina_valid      (io_ina_valid       ), //i
    .ina_ready      (multi_ina_ready    ), //o
    .ina_payload    (io_ina_payload     ), //i
    .inb_valid      (io_inb_valid       ), //i
    .inb_ready      (multi_inb_ready    ), //o
    .inb_payload    (io_inb_payload     ), //i
    .out_valid      (multi_out_valid    ), //o
    .out_ready      (acc_ina_ready      ), //i
    .out_payload    (multi_out_payload  ), //o
    .clk            (clk                )  //i
  );
  fp_acc acc (
    .ina_valid      (multi_out_valid    ), //i
    .ina_ready      (acc_ina_ready      ), //o
    .ina_payload    (multi_out_payload  ), //i
    .out_valid      (acc_out_valid      ), //o
    .out_ready      (io_out_ready       ), //i
    .out_payload    (acc_out_payload    ), //o
    .par_acc_cnt    (io_par_acc_cnt     ), //i
    .acc_enable     (io_acc_enable      ), //i
    .clk            (clk                ), //i
    .reset          (reset              )  //i
  );
  assign io_ina_ready = multi_ina_ready;
  assign io_inb_ready = multi_inb_ready;
  assign io_out_valid = acc_out_valid;
  assign io_out_payload = acc_out_payload;

endmodule

module fp_acc_63 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_63_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_63_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_63_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_62 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_62_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_62_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_62_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_61 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_61_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_61_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_61_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_60 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_60_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_60_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_60_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_59 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_59_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_59_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_59_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_58 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_58_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_58_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_58_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_57 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_57_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_57_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_57_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_56 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_56_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_56_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_56_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_55 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_55_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_55_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_55_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_54 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_54_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_54_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_54_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_53 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_53_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_53_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_53_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_52 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_52_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_52_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_52_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_51 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_51_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_51_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_51_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_50 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_50_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_50_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_50_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_49 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_49_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_49_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_49_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_48 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_48_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_48_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_48_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_47 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_47_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_47_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_47_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_46 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_46_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_46_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_46_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_45 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_45_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_45_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_45_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_44 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_44_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_44_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_44_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_43 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_43_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_43_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_43_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_42 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_42_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_42_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_42_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_41 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_41_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_41_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_41_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_40 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_40_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_40_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_40_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_39 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_39_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_39_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_39_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_38 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_38_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_38_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_38_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_37 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_37_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_37_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_37_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_36 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_36_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_36_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_36_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_35 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_35_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_35_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_35_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_34 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_34_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_34_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_34_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_33 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_33_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_33_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_33_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_32 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_32_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_32_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_32_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_31 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_31_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_31_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_31_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_30 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_30_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_30_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_30_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_29 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_29_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_29_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_29_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_28 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_28_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_28_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_28_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_27 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_27_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_27_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_27_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_26 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_26_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_26_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_26_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_25 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_25_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_25_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_25_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_24 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_24_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_24_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_24_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_23 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_23_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_23_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_23_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_22 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_22_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_22_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_22_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_21 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_21_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_21_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_21_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_20 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_20_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_20_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_20_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_19 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_19_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_19_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_19_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_18 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_18_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_18_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_18_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_17 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_17_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_17_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_17_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_16 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_16_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_16_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_16_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_15 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_15_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_15_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_15_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_14 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_14_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_14_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_14_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_13 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_13_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_13_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_13_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_12 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_12_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_12_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_12_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_11 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_11_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_11_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_11_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_10 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_10_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_10_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_10_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_9 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_9_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_9_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_9_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_8 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_8_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_8_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_8_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_7 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_7_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_7_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_7_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_6 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_6_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_6_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_6_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_5 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_5_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_5_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_5_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_4 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_4_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_4_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_4_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_3 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_3_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_3_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_3_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_2 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_2_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_2_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_2_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc_1 (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_1_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_1_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_1_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

//fp_multiply replaced by fp_multiply

module fp_acc (
  input               ina_valid,
  output reg          ina_ready,
  input      [31:0]   ina_payload,
  output reg          out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input      [15:0]   par_acc_cnt,
  input               acc_enable,
  input               clk,
  input               reset
);
  wire                fp_adder_64_ina_valid;
  wire                fp_adder_64_inb_valid;
  reg                 fp_adder_64_out_ready;
  wire                fp_adder_64_ina_ready;
  wire                fp_adder_64_inb_ready;
  wire                fp_adder_64_out_valid;
  wire       [31:0]   fp_adder_64_out_payload;
  reg        [15:0]   accnt;
  reg        [15:0]   par_acc_cnt_1;
  reg        [31:0]   result;
  reg                 result_valid;
  wire                acc_fsm_wantExit;
  reg                 acc_fsm_wantStart;
  wire                acc_fsm_wantKill;
  reg        `acc_fsm_enumDefinition_binary_sequential_type acc_fsm_stateReg;
  reg        `acc_fsm_enumDefinition_binary_sequential_type acc_fsm_stateNext;
  wire                when_fp_acc_l64;
  wire                when_fp_acc_l73;
  wire                when_fp_acc_l81;
  wire                when_fp_acc_l90;
  `ifndef SYNTHESIS
  reg [103:0] acc_fsm_stateReg_string;
  reg [103:0] acc_fsm_stateNext_string;
  `endif


  fp_adder fp_adder_64 (
    .ina_valid      (fp_adder_64_ina_valid    ), //i
    .ina_ready      (fp_adder_64_ina_ready    ), //o
    .ina_payload    (ina_payload              ), //i
    .inb_valid      (fp_adder_64_inb_valid    ), //i
    .inb_ready      (fp_adder_64_inb_ready    ), //o
    .inb_payload    (result                   ), //i
    .out_valid      (fp_adder_64_out_valid    ), //o
    .out_ready      (fp_adder_64_out_ready    ), //i
    .out_payload    (fp_adder_64_out_payload  ), //o
    .clk            (clk                      )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_BOOT : acc_fsm_stateReg_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE : acc_fsm_stateReg_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT : acc_fsm_stateReg_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT : acc_fsm_stateReg_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU : acc_fsm_stateReg_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK : acc_fsm_stateReg_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT : acc_fsm_stateReg_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateReg_string = "?????????????";
    endcase
  end
  always @(*) begin
    case(acc_fsm_stateNext)
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_BOOT : acc_fsm_stateNext_string = "acc_fsm_BOOT ";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE : acc_fsm_stateNext_string = "acc_fsm_IDLE ";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT : acc_fsm_stateNext_string = "acc_fsm_INIT ";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT : acc_fsm_stateNext_string = "acc_fsm_INPUT";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU : acc_fsm_stateNext_string = "acc_fsm_CACU ";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK : acc_fsm_stateNext_string = "acc_fsm_CHECK";
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT : acc_fsm_stateNext_string = "acc_fsm_OUT  ";
      default : acc_fsm_stateNext_string = "?????????????";
    endcase
  end
  `endif

  always @(*) begin
    ina_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT : begin
        ina_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  assign fp_adder_64_ina_valid = (ina_valid && ina_ready);
  assign fp_adder_64_inb_valid = ((result_valid && ina_valid) && ina_ready);
  always @(*) begin
    fp_adder_64_out_ready = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU : begin
        fp_adder_64_out_ready = 1'b1;
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
      end
    endcase
  end

  always @(*) begin
    out_valid = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT : begin
        out_valid = 1'b1;
      end
      default : begin
      end
    endcase
  end

  assign out_payload = result;
  assign acc_fsm_wantExit = 1'b0;
  always @(*) begin
    acc_fsm_wantStart = 1'b0;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK : begin
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT : begin
      end
      default : begin
        acc_fsm_wantStart = 1'b1;
      end
    endcase
  end

  assign acc_fsm_wantKill = 1'b0;
  always @(*) begin
    acc_fsm_stateNext = acc_fsm_stateReg;
    case(acc_fsm_stateReg)
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE : begin
        if(acc_enable) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT;
        end
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT : begin
        acc_fsm_stateNext = `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT;
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT : begin
        if(when_fp_acc_l64) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU;
        end
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU : begin
        if(when_fp_acc_l73) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK;
        end
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK : begin
        if(when_fp_acc_l81) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT;
        end else begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT;
        end
      end
      `acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT : begin
        if(when_fp_acc_l90) begin
          acc_fsm_stateNext = `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE;
        end
      end
      default : begin
      end
    endcase
    if(acc_fsm_wantStart) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE;
    end
    if(acc_fsm_wantKill) begin
      acc_fsm_stateNext = `acc_fsm_enumDefinition_binary_sequential_acc_fsm_BOOT;
    end
  end

  assign when_fp_acc_l64 = (ina_ready && ina_valid);
  assign when_fp_acc_l73 = (fp_adder_64_out_valid && fp_adder_64_out_ready);
  assign when_fp_acc_l81 = (accnt == par_acc_cnt_1);
  assign when_fp_acc_l90 = (out_valid && out_ready);
  always @(posedge clk or posedge reset) begin
    if(reset) begin
      accnt <= 16'h0;
      par_acc_cnt_1 <= 16'h0;
      result <= 32'h0;
      result_valid <= 1'b1;
      acc_fsm_stateReg <= `acc_fsm_enumDefinition_binary_sequential_acc_fsm_BOOT;
    end else begin
      acc_fsm_stateReg <= acc_fsm_stateNext;
      case(acc_fsm_stateReg)
        `acc_fsm_enumDefinition_binary_sequential_acc_fsm_IDLE : begin
        end
        `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INIT : begin
          par_acc_cnt_1 <= par_acc_cnt;
          accnt <= 16'h0;
          result <= 32'h0;
          result_valid <= 1'b1;
        end
        `acc_fsm_enumDefinition_binary_sequential_acc_fsm_INPUT : begin
          if(when_fp_acc_l64) begin
            accnt <= (accnt + 16'h0001);
            result_valid <= 1'b0;
          end
        end
        `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CACU : begin
          if(when_fp_acc_l73) begin
            result <= fp_adder_64_out_payload;
            result_valid <= 1'b1;
          end
        end
        `acc_fsm_enumDefinition_binary_sequential_acc_fsm_CHECK : begin
        end
        `acc_fsm_enumDefinition_binary_sequential_acc_fsm_OUT : begin
        end
        default : begin
        end
      endcase
    end
  end


endmodule

module fp_multiply (
  input               ina_valid,
  output              ina_ready,
  input      [31:0]   ina_payload,
  input               inb_valid,
  output              inb_ready,
  input      [31:0]   inb_payload,
  output              out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input               clk
);
  wire                fp_multi_s_axis_a_tready;
  wire                fp_multi_s_axis_b_tready;
  wire                fp_multi_m_axis_result_tvalid;
  wire       [31:0]   fp_multi_m_axis_result_tdata;

  fp_multi_bb fp_multi (
    .aclk                    (clk                            ), //i
    .s_axis_a_tvalid         (ina_valid                      ), //i
    .s_axis_a_tready         (fp_multi_s_axis_a_tready       ), //o
    .s_axis_a_tdata          (ina_payload                    ), //i
    .s_axis_b_tvalid         (inb_valid                      ), //i
    .s_axis_b_tready         (fp_multi_s_axis_b_tready       ), //o
    .s_axis_b_tdata          (inb_payload                    ), //i
    .m_axis_result_tvalid    (fp_multi_m_axis_result_tvalid  ), //o
    .m_axis_result_tready    (out_ready                      ), //i
    .m_axis_result_tdata     (fp_multi_m_axis_result_tdata   )  //o
  );
  assign ina_ready = fp_multi_s_axis_a_tready;
  assign inb_ready = fp_multi_s_axis_b_tready;
  assign out_valid = fp_multi_m_axis_result_tvalid;
  assign out_payload = fp_multi_m_axis_result_tdata;

endmodule

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

//fp_adder replaced by fp_adder

module fp_adder (
  input               ina_valid,
  output              ina_ready,
  input      [31:0]   ina_payload,
  input               inb_valid,
  output              inb_ready,
  input      [31:0]   inb_payload,
  output              out_valid,
  input               out_ready,
  output     [31:0]   out_payload,
  input               clk
);
  wire                fp_adder_64_s_axis_a_tready;
  wire                fp_adder_64_s_axis_b_tready;
  wire                fp_adder_64_m_axis_result_tvalid;
  wire       [31:0]   fp_adder_64_m_axis_result_tdata;

  fp_adder_bb fp_adder_64 (
    .aclk                    (clk                               ), //i
    .s_axis_a_tvalid         (ina_valid                         ), //i
    .s_axis_a_tready         (fp_adder_64_s_axis_a_tready       ), //o
    .s_axis_a_tdata          (ina_payload                       ), //i
    .s_axis_b_tvalid         (inb_valid                         ), //i
    .s_axis_b_tready         (fp_adder_64_s_axis_b_tready       ), //o
    .s_axis_b_tdata          (inb_payload                       ), //i
    .m_axis_result_tvalid    (fp_adder_64_m_axis_result_tvalid  ), //o
    .m_axis_result_tready    (out_ready                         ), //i
    .m_axis_result_tdata     (fp_adder_64_m_axis_result_tdata   )  //o
  );
  assign ina_ready = fp_adder_64_s_axis_a_tready;
  assign inb_ready = fp_adder_64_s_axis_b_tready;
  assign out_valid = fp_adder_64_m_axis_result_tvalid;
  assign out_payload = fp_adder_64_m_axis_result_tdata;

endmodule
